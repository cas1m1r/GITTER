======================: FILES :======================
======================: BRANCHES :======================
======================: LOGINFO :======================
commit 8524793b692d60b18118c59a5b5448971fc14ad5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 3 08:30:52 2022 +0100

    Fix multiple cases of declarations mixed with code
    
    This is invalid in C90; declarations have to precede other code
    in a braces block.
    
    Re: a0655582, 1bc2c74c, 645f8db5, 70fc1da7

commit 864ef8c821f7e49d7d1b8f711215ac06952a0d76
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Sep 2 22:01:55 2022 -0700

    Fix %C in TIMEFORMAT with the times(3) fallback and fix default precision (#529)
    
    Changes:
    - The man page documents the default precision level for TIMEFORMAT
      when no number is provided to a format specifier should be three,
      not six. This was not how the time keyword behaved, so the
      default behavior has been corrected (a precision level of six
      remains usable with a format specifier such as %6lU).
    - The times(3) fallback did not handle the %C format at all (re:
      a1af93f), because the aforementioned commit didn't apply the full
      patch. This commit implements the rest of the code for the %C
      format specifier.
    - Added a regression test for time precision levels three and six.

commit 214b3a764c3c6f3ef7b122fc82380aa18d779f8c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 1 23:15:16 2022 +0100

    'command -x': do not create tracked alias (re: be79e4e9)
    
    A tracked alias created when an external command is found while
    skipping a PATH search for path-bound built-ins can prevent
    path-bound built-ins from being found correctly later. A tracked
    alias should not be created when 'command -x' is in use, i.e., if
    sh_isstate(SH_XARG) is true.

commit 0975086b53b6692e1a5b5ae7b68e5a7b5513a610
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 31 22:56:41 2022 +0100

    deparser: tweaks for function definitions (re: f21ace5c)
    
    src/cmd/ksh93/bltins/typeset.c: print_namval():
    - For a .sh.math function (e.g., function .sh.math.total x y {
      .sh.value=x+y; }), this needed some additional code to print the
      reference list (e.g., x y). Previously this was automatically
      dumped from the source file along with the function body.
    
    src/cmd/ksh93/sh/deparse.c: p_tree(): case TFUN:
    - Largely rewrite function definition handling for correct
      indentation of functions defined within functions.

commit 09e80204b087d239ea25186da81bf9ad803b1ad2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 30 22:56:23 2022 +0100

    tests/libcmd.sh: fix universe-dependent test (re: 0eee0dfd)

commit f21ace5cde9b9e91fb93b2b95f9978169f798d9a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 28 20:20:43 2022 +0100

    [v1.1] typeset -f <functname>: generate script using sh_deparse()
    
    Problem reproducer:
    - Locate or write a script with a function definition
    - Source the script with '.' or 'source'
    - Print the function definition with 'typeset -f'; looks good
    - Edit the file to add or remove characters before or in the
      function definition, or rename or remove the file
    - Print the function definition with 'typeset -f' again; the output
      is corrupted!
    
    Cause: ksh remembers the offset[*1] and length[*2] of the function
    definition in the source file, and prints function definitions by
    simply dumping that amount of bytes from that offset in the source
    file. This will obviously break if the file is edited or (re)moved,
    so that approach is fundamentally flawed and needs to be replaced.
    
    All other shells that are capable of printing function definitions
    (bash, mksh, yash, zsh) regenerate the function definition from the
    parse tree. ksh does include code for a deparser (in deparse.c) but
    it is disused (so it was removed in the 1.0 branch). This commit
    changes 'typeset -f' to use it, as well as 'typeset -T' when
    printing type discipline functions.
    
    It also applies lots of tweaks and fixes to the deparser. More
    fixes might be needed. So, it's time to test this.
    
    [*1] functloc in struct functnod --> hoffset in struct Ufunction
    [*2] repurposed functline in struct functnod --> nvsize in
         struct Namval
    
    src/cmd/ksh93/sh/deparse.c:
    - Too many tweaks to mention for more correct script generation and
      better formatting; this is the result of intermittent work over
      about a year so I don't quite remember everything.
    - sh_deparse(): Add argument for initial indentation level.
    - p_keyword(): Convert the BEGIN/MIDDLE/END argument into a bitmask
      and add a NOTAB bit flag to avoid printing a tab after a keyword.
    
    src/cmd/ksh93/sh/string.c: sh_fmtq():
    - For assignments, avoid quoting variable names containing a dot,
      e.g. .namespace.foo=bar should not become '.namespace.foo=bar'.
    - Avoid quoting the variable name in additive assignments, e.g.
      foo+=bar\ baz should become foo+='bar baz', not 'foo+=bar baz'.
    
    src/cmd/ksh93/include/shnodes.h,
    src/cmd/ksh93/sh/parse.c:
    - funct(): Do not save function location, offset and length.
    
    src/cmd/ksh93/bltins/typeset.c: print_namval():
    - For 'typeset -f functionname', instead of retrieving the function
      definition from the saved position in its source file, call
      sh_deparse() to generate script from the parse tree. Start
      indentation at level 0.
    
    src/cmd/ksh93/bltins/typeset.c: sh_outtype():
    - For type discipline functions output by 'typeset -T typename',
      instead of retrieving the function definition from the saved
      position in its source file, call sh_deparse() to generate script
      from the parse tree. Start indentation at level 1.

commit 4810789fd914dbd1ed86b3e23533ddf493e890c4
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Wed Aug 31 05:31:41 2022 +0900

    vi: Bring control mode C, c$ and I in line with the book (#527)
    
    These are just a couple of small tweaks to bring vi mode 'C', 'c$' and
    'I' in line with the behavior described in the book (pg. 121):
    
    * 'C', 'c$': Check for cur_virt==INVALID (i.e., the start of the line
      before any movement occurs) in chgeol and enter insert mode
      directly if so. This allows 'C' and 'c$' to enter insert mode at the
      start of the line without ringing the bell in all cases.
    
    * 'I': Currently, if the start of the line is empty, 'I' goes there
      regardless of where the first character is. Although the code has
      been unchanged since 1986, this is contrary to actual vi behavior
      and the description in the book. Instead, send cur_virt to the
      start of the line, increment and enter insert mode once a
      non-blank character or the end of the line is encountered.

commit 0eee0dfdab42d53949048d3a5a4a3372fccf5b8e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Aug 30 12:30:45 2022 -0700

    Add aliases for many GNU long options; add SHOPT_ALL_LIBCMD (#526)
    
    src/lib/libcmd/*.c:
    - Add the following long option aliases to the libcmd builtins
      (to match the equivalent options in GNU coreutils):
      'basename --multiple' == 'basename -a'
      'cat --show-tabs' == 'cat -T'
      'chgrp --no-dereference' == 'chgrp -h'
      'chown --no-dereference' == 'chown -h'
      'cp --no-dereference' == 'cp -P'
      'join --ignore-case' == 'join -i'
      'rm --dir' == 'rm -d'
      ('ln --symbolic' is not added because this is already a valid and
      working abbreviation of 'ln --symbolic-link'.)
    - Fixed an error in the documentation of 'cat -T'. This option does
      not display formfeeds as ^L. No change in behavior is needed as
      the current behavior matches that of the GNU cat command.
    
    src/cmd/ksh93/SHOPT.sh,
    src/cmd/ksh93/data/builtins.c:
    - A new SHOPT_ALL_LIBCMD option (which is off by default) has been
      added that enables all of the builtins in src/lib/libcmd (with
      the exception of vmstate if vmalloc isn't enabled). This is
      primarily to make testing the /opt/ast/bin builtins a bit easier.
    - sh_optkill[]: Add 'kill --signal' as an alias for 'kill -s'
      (matches the equivalent long option in util-linux).
    
    src/cmd/ksh93/tests/{builtins,libcmd}.sh:
    - Backport many regression tests from ksh2020 for the following
      builtins:
      /opt/ast/bin/basename
      /opt/ast/bin/cat
      /opt/ast/bin/chmod
      /opt/ast/bin/cmp
      /opt/ast/bin/cut
      /opt/ast/bin/dirname
      /opt/ast/bin/mkdir
      sleep
    
    src/cmd/ksh93/sh.1:
    - Fixed various minor issues in the documentation for the kill
      builtin.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 536696782c3ba9d29f2db5d11b4b3f0aa8f1961b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 26 02:41:01 2022 +0100

    Remove SHOPT_EDPREDICT (re: 9530f09b)
    
    Due to its brokenness, lack of awareness and interest among users,
    and no one stepping up to fix it, this is now removed from the dev
    branch to avoid bit rot, as announced in #233 on 17th February.
    
    Resolves: https://github.com/ksh93/ksh/issues/233

commit 278c48cd35be73d3afe32586d255033ce94a9d1d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 25 19:46:53 2022 +0100

    Minor tweaks corresponding to 1.0.3 point release on 1.0 branch
    
    - Attribution updates
    - README-mamake.md tweak (rm incorrect statement)
    - NEWS: add missing entry (re: a7d63949)

commit c519d4ae19555447fbdf2bd9b810c8cd679a6d2e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 25 16:33:34 2022 +0100

    job_init(): don't call setpgid() if non-interactive (re: 41ebb55a)
    
    This returns job_init() to a version quite close to the original
    93u+ version. Upon further code analysis, really everything after
    the init_savelist() call is only relevant to interactive shells, so
    we can just return at that point for non-interactive shells as 93u+
    did. All the script-only job control regression tests still pass.
    
    Resolves: https://github.com/ksh93/ksh/issues/320

commit a7d63949f5df4c135fbe534aad4d17fc6c96be23
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Fri Aug 26 00:16:34 2022 +0900

    vi: Do not attempt 0 or ^ commands from start of line (#524)
    
    In vi mode, using 0 or ^ without moving from the start of the line
    places cur_virt in position 0, which is left with a value of NULL.
    This causes at least two bugs:
    
    * Entering append mode results in the cursor moving in reverse,
      often with corrupted output.
    
    * The /dev/fd/3 completion (named FIFO on FreeBSD) is reached with
      = and * completion.
    
    Because it is unnecessary to use either 0 or ^ at the start of the
    line (whether reached by ESC or otherwise), check that cur_virt is
    greater than 0 and abort if the move would be ineffective.
    
    src/cmd/ksh93/edit/vi.c:
    
    - cntlmode(): Remove redundant '0' command handling; this caused
      the '0' command handling in mvcursor() to never be reached. It
      looks like this extra code was a workaround for a bug in ancient
      versions of ksh[*], but since at least 1995, getcount()
      special-cases an initial '0' and will not handle it as a repeat
      count parameter, which made this extra handling unnecessary.
      [*] https://github.com/ksh93/ksh/pull/524#issuecomment-1227374726
    
    - mvcursor(): For the '0' and '^' commands, fix the bug by returning
      ABORT if the cursor position (cur_virt) is 0 or INVALID.
    
    Related: https://github.com/ksh93/ksh/issues/520
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 73118b1a8673a754ec821d8d3faaa4862101aec0
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Thu Aug 25 02:09:33 2022 +0900

    No completion before 1st char or in empty line (re: 21afb073) (#523)
    
    There are still two contexts in which the unhelpful "alias +
    builtin + path" completion occurs:
    
    * After the start of an empty line
    * After the start of a line, but before the first character
    
    To stop completion from being attempted in these contexts, a loop
    is added to vi.c and emacs.c that looks over the previous positions
    (current position inclusive) and allows the completion process to
    continue once it finds the first non-space character. The existing
    placement restrictions remain in case the cursor arrives in a
    negative position via a bug.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 3648c3d908876258b1da15a3bb979ab9b8ec9a24
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 24 04:01:15 2022 +0100

    Fix freeze on HISTSIZE value exceeding INT_MAX
    
    @GabrielRavier writes:
    > When int is the same as int32_t, starting ksh with
    > HISTSIZE=2000000000 in the environment (or any number between
    > 1073741824 and 2147483647) results in an infinite loop, because
    > of this code:
    >
    >       if(cp=nv_getval(HISTSIZE))
    >               maxlines = (unsigned)strtol(cp, (char**)0, 10);
    >       else
    >               maxlines = HIST_DFLT;
    >       for(histmask=16;histmask <= maxlines; histmask <<=1 );
    >
    > which gets stuck infinitely because histmask <= maxlines will
    > always be true (after 26 iterations, histmask == 1073741824,
    > after 27 iterations, histmask == -2147483648 and after more than
    > 28 iterations it's stuck at 0).
    
    src/cmd/ksh93/edit/history.c: hist_init():
    - Add bounds check for maxlines. HIST_MAX is the number of bytes at
      which the history file gets cleaned up, so the theoretical
      maximum number of lines (i.e.: each line being empty, consisting
      only of a terminating 0 byte) should also be HIST_MAX. That value
      is 16384 on a system where sizeof(int)==4.
    
    Resolves: https://github.com/ksh93/ksh/issues/522

commit 21afb0734fe1af27f156c1702287f145c115fd89
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Wed Aug 24 11:49:03 2022 +0900

    vi mode: Disable = and tab at the start of the line (#521)
    
    In vi mode, due to a buffer overflow, <ESC>= as the first input
    either produces an invalid completion or crashes the shell. The
    easiest fix is to disable <ESC>= as well as <TAB> completion at
    the start of the command line, as is already done in emacs mode.
    
    src/cmd/ksh93/edit/vi.c:
    - getline(): If cur_virt <= 0 in case '\t', beep and refuse tab
      completion.
    - textmod(): Move an 'if' statement checking for INVALID cur_virt
      to include = mode along with * and \ mode.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>
    Resolves: https://github.com/ksh93/ksh/issues/520

commit 15303ecbbd14e3f0db233cdd0e16cc64a5bc28b0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 20 23:15:55 2022 +0100

    package: make 'bin/package use' use the compiled shell
    
    If a version of ksh was successfully compiled, then you would
    probably want to use it instead of the default system ksh when
    invoking 'bin/package use'.
    
    bin/package, src/cmd/INIT/package.sh:
    - Remove '32' and '64' arguments to the 'use' subcommand which
      never worked as documented, even in the 93u+ version.
    - For the use subcommand, set SHELL to the compiled package's ksh,
      unless it is unavailable or overridden by the user.
    - Update and tweak self-documentation.

commit 76babdbb0c6816f41582125883955c64ed3bac69
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Aug 20 09:10:17 2022 -0700

    Fix 'read -a' failure to create array (re: 4d182da8) (#516)
    
    The commit that backported read -a did not add a case label for it
    to read.c. This was under the assumption that AST optget(3) would
    always convert -a to -A. However, that was only done for first use.
    
    The cause is the short-form options caching mechanism in optget(3).
    On the first run, the pre-caching result would be returned, but the
    equivalent option (-a) would be cached as if it is its own option,
    so on the second and subsequent runs, optget returned 'a' instead
    of 'A'. This only happens if no long-form equivalent is present.
    
    Reproducer:
    
      $ read -A foo <<< 'foo bar baz'
      $ unset foo
      $ read -a foo <<< 'foo bar baz'
      $ echo ${foo[0]}
      foo bar baz
    
    Expected: foo
    
    src/lib/libast/misc/optget.c,
    src/lib/libast/misc/optlib.h:
    - [by Martijn Dekker] Implement caching for short-option
      equivalents. If a short-form equivalent is found, instead of
      caching it as a separate option, cache the equivalent in a new
      equiv[] array. Check this when reading the cache and substitute
      the main option for the equivalent if one is cached.
    
    src/lib/libcmd/cp.c:
    - Fix cp -r/cp -R symlink handling. The -r and -R options sometimes
      ignored -P, -L and -H.
    - The -r and -R options no longer follow symlinks by default.
    
    src/cmd/ksh93/bltins/whence.c,
    src/lib/libcmd/*.c:
    - Remove case labels that are redundant now that the optget(3)
      caching bug is fixed.
    
    src/cmd/ksh93/tests/libcmd.sh:
    - Added. This is the new script for the /opt/ast/bin path-bound
      built-ins from libcmd. Other relevant tests are moved into here.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit acd0c959f5ecc67136257ac5f9db39281ded257f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 19 22:28:38 2022 +0100

    Disable -b/--notify pty regress test for now (re: 667034ff)
    
    The referenced commit made -b/--notify much better at notifying
    multiple terminating background jobs, but it still occasionally
    misses one if multiple jobs terminate all at once. This race
    condition will hopefully be worked out at some point, but it's a
    low-priority problem as the notification will appear at the next
    prompt in any case, and we still have many worse bugs to fix.
    
    But the associated pty regression test is failing fairly often on
    the github runners in the meantime, so this disables it for now.

commit 645f8db5a0fc2f4a6a8f4570f5b241fb321eb409
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Aug 19 13:56:35 2022 -0700

    funct(): Fix another use after free bug (re: 59a5672, 7e317c5) (#519)
    
    The ASan crash in basic.sh when sourcing multiple files is caused by
    a bug that is similar to the crash fixed in 59a5672. This is the
    trace for the regression test crash (note that in order to see the
    trace, the 2>/dev/null redirect must be disabled):
    
    ==1899388==ERROR: AddressSanitizer: heap-use-after-free on address 0x6150000005b0 at pc 0x55a5e3f9432a bp 0x7ffeb91ea110 sp 0x7ffeb91ea100
    WRITE of size 8 at 0x6150000005b0 thread T0
        #0 0x55a5e3f94329 in funct /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:967
        #1 0x55a5e3f96f77 in item /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:1349
        #2 0x55a5e3f90c9f in term /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:642
        #3 0x55a5e3f90ac1 in list /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:613
        #4 0x55a5e3f90845 in sh_cmd /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:561
        #5 0x55a5e3f909e0 in sh_cmd /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:586
        #6 0x55a5e3f8fd5e in sh_parse /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/parse.c:438
        #7 0x55a5e3fc43c1 in sh_eval /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/xec.c:635
        #8 0x55a5e4012172 in b_dot_cmd /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/bltins/misc.c:318
        #9 0x55a5e3fca3cb in sh_exec /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/xec.c:1254
        #10 0x55a5e3fd01d4 in sh_exec /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/xec.c:1932
        #11 0x55a5e3fc4544 in sh_eval /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/xec.c:651
        #12 0x55a5e4012172 in b_dot_cmd /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/bltins/misc.c:318
        #13 0x55a5e3fca3cb in sh_exec /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/xec.c:1254
        #14 0x55a5e3ecc1cd in exfile /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/main.c:604
        #15 0x55a5e3ec9e7f in sh_main /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/main.c:369
        #16 0x55a5e3ec801d in main /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/pmain.c:41
        #17 0x7f637b4db2cf  (/usr/lib/libc.so.6+0x232cf)
        #18 0x7f637b4db389 in __libc_start_main (/usr/lib/libc.so.6+0x23389)
        #19 0x55a5e3ec7f24 in _start ../sysdeps/x86_64/start.S:115
    
    Code in question:
    https://github.com/ksh93/ksh/blob/8d57369b0cb39074437dd82924b604155e30e1e0/src/cmd/ksh93/sh/parse.c#L963-L968
    
    To avoid any more similar crashes, all of the fixes introduced
    in 7e317c5 that set slp->slptr to null have been improved with the
    fix in 59a5672.

commit 8d57369b0cb39074437dd82924b604155e30e1e0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 19 18:32:50 2022 +0100

    Fix buffer overflow in sh_lex()
    
    This macro expansion in lex.c may assign -1 to n if EOF is reached:
    
    1178:   fcgetc(n);
    
    As a result, n may be -1 when this code is reached:
    
    1190:   if(sh_isoption(SH_BRACEEXPAND) && c==LBRACE && !assignment
            && state[n]!=S_BREAK
    
    'state[n]' is a buffer overflow if n==-1.
    
    src/cmd/ksh93/sh/lex.c: sh_lex(): case S_BRACE:
    - Apart from the buffer overflow, if n<=0, none of the code
      following fcget(n) does anything until 'break' on line 1199 is
      reached. So, if fcget(n) yields <=0, just break. This allows some
      code simplification.
    
    Progresses: https://github.com/ksh93/ksh/issues/518

commit 59a5672712cbc6568b58694c4aebe593310e1a9c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 19 15:25:40 2022 +0100

    Fix use after free in sh_funstaks() (re: 7e317c5d)
    
    The referenced commit introduced the NIL (NULL) assignment in:
    
            stakdelete(slpold->slptr);
            slpold->slptr = NIL(Stak_t*);
    
    First the stack is closed/freed with stakdelete() a.k.a.
    stkclose(), then its pointer is reset. Looks correct, right?
    
    Wrong: slpold may itself be in the allocated region that
    slpold->slptr points to. That's because we're dealing with a linked
    list of stacks, in which a pointer on each stack points to the next
    stack. So there are scenarios in which, after the stakdelete()
    call, dereferencing slpold is a use after free.
    
    Most systems quietly tolerate this use after free. But, according
    to @JohnoKing's testing, this bug was causing 23 crashes in the
    regression tests after compiling ksh with AddressSanitizer enabled.
    
    src/cmd/ksh93/sh/parse.c: sh_funstaks():
    - Save the value of slpold->slptr and reset that pointer before
      calling stakdelete() a.k.a. stkclose().
    
    Resolves: https://github.com/ksh93/ksh/issues/517

commit 9f303149f9caa5f9a933788ce2d4313432d4deae
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 18 20:21:51 2022 +0100

    tests/variables.sh: add 1.0 branch regression test from 274331ac
    
    See that commit and the commit it reverts for more information.

commit 4a351d3fcecb19f3c983e0957228dbeed84cd9af
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 17 13:45:01 2022 +0100

    ksh93/Mamfile: fix shcomp dependency check
    
    The dependency rule 'prev libshell.a archive' did not actually
    cause shcomp to be rebuilt when something in libast.a changed.
    Replace by 'prev ksh' to ensure shcomp is rebuilt/relinked whenever
    ksh is.

commit daf4e0b0cf81876c4785c898accc11665b5c3d39
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Aug 16 14:44:26 2022 -0700

    Fix regression in handling of head builtin's -s flag (re: 4b445059) (#514)
    
    Commit 4b445059 accidentally left in half of an if statement that was
    originally just a use of the SFMTXBEGIN2 macro (which is a no-op without
    vt_threaded). As a result, the head builtin's -s flag broke in one of
    the ksh2020 regression tests. Reproducer:
       # Note that head must be enabled in src/cmd/ksh93/data/builtins.c
       builtin head || exit 1
       cat > "/tmp/file1" <<EOF
    This is line 1 in file1
    This is line 2 in file1
    This is line 3 in file1
    This is line 4 in file1
    This is line 5 in file1
    This is line 6 in file1
    This is line 7 in file1
    This is line 8 in file1
    This is line 9 in file1
    This is line 10 in file1
    This is line 11 in file1
    This is line 12 in file1
    EOF
       got=$(head -s 5 -c 18 "/tmp/file1")
       exp=$'is line 1 in file1'
       [[ "$got" = "$exp" ]] || print "'head -s' failed" "(expected $(printf %q "$exp"), got $(printf %q "$got"))"
    
    Code change that caused this bug (note that since the if statement
    wasn't completely removed, it now guards the for loop despite the
    newline):
            if(fw)
    -               SFMTXBEGIN2(fw, (Sfoff_t)0);
    
            for(n_move = 0; n != 0; )
    
    I noticed this since I'm making a separate commit to backport more of
    the ksh2020 regression tests.
    
    src/lib/libast/sfio/sfmove.c:
    - Remove the incomplete if statement to fix the -s flag.
    
    src/cmd/ksh93/tests/b_head.sh:
    - Backport the ksh2020 regression tests for the head builtin.

commit 615885b551e86d4d44656e4dfc65ff4b1846a909
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 16 22:19:05 2022 +0100

    attempt to fix pty test (re: 0a71a8a2)
    
    It worked on macOS, but failed on the github CI runner.

commit 0a71a8a2d897a1d6e71f36e495c59dc1ae1111ee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 16 21:25:10 2022 +0100

    Fix history comment character in history expansion (re: 893df4d0)
    
    Reproducer: on an interactive shell with the -H option on,
    
      $ v=foo
      $ print ${#v}
    
    does not print anything (but should print "3").
    The 'print' line also is not added to the history.
    
    This bug was exposed by commit 893df4d0 which enabled the history
    comment character by default, setting it to '#' as on bash. When it
    was disabled by default, this bug was rarely exposed.
    
    The problem happens here:
    
    src/cmd/ksh93/edit/hexpand.c
    203: if(hc[2] && *cp == hc[2]) /* history comment designator, skip rest of line */
    204: {
    205:    stakputc(*cp++);
    206:    stakputs(cp);
    207:    DONE();
    208: }
    
    The DONE() macro sets the HIST_ERROR bit flag:
    
    src/cmd/ksh93/edit/hexpand.c
    45: #define     DONE()  {flag |= HIST_ERROR; cp = 0; stakseek(0); goto done;}
    
    For the history comment character that is clearly wrong, as no
    error has occurred.
    
    There is another problem. The documentation I added for history
    expansion states this bit, which is based on bash's behaviour:
    
        If a word on a command line begins with the history comment
        character #, history expansion is ignored for the rest of that
        line.
    
    With an expansion like ${#v}, the word does not begin with # so
    history expansion should not have parsed that as a comment
    character. The intention was to act like bash.
    
    src/cmd/ksh93/edit/hexpand.c:
    - Split the DONE() macro into DONE and ERROROUT of which only the
      latter sets the HIST_ERROR bit flag. Change usage accordingly.
      Thix fixes the first problem.
    - Don't make these new macros function-style macros (with ()) as
      they end in a goto, so that's a bit misleading.
    - Add is_wordboundary() which makes a best-effort attempt to
      determine if the character following the specified character is
      considered to start a new word by shell grammar rules. Word
      boundary characters are whitespace and: |&;()`<>
    - Only recognise the history comment character if is_wordbounary()
      returns true for the previous character. This fixes the second
      problem.
    
    Thanks to @jghub for the bug report.
    Resolves: https://github.com/ksh93/ksh/issues/513

commit 2ee98ca1c10908755fcc1afe7341da1a122f6de9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Aug 15 06:57:06 2022 -0700

    Fix sign conversion issue in fmtquote(); remove some dead code (#512)
    
    src/lib/libast/string/fmtesc.c:
    - Remove reuse of an int variable when obtaining string length to
      fix a few sign conversion compiler warnings. Ported from graphviz:
      https://gitlab.com/graphviz/graphviz/-/commit/6ccb41e4
    
    src/lib/libast/path/pathcanon.c:
    - Remove unused code hidden behind PRESERVE_TRAILING_SLASH
      and DONT_PRESERVE_TRAILING_SLASH. Ported from graphviz:
      https://gitlab.com/graphviz/graphviz/-/commit/1bbee4a5

commit d1bd996c91824e47040ee6bffa1fca710f64e52d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 7 15:03:32 2022 +0100

    remove ${.sh.pool} predefined variable entry (re: 3613da42)
    
    This entry was doing nothing, because it is another overlooked
    remnant of the removed libcoshell code.

commit 9067bb3cada9e78b3a1cabb1f5adc9ab5d0b3bf2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 6 10:47:24 2022 +0100

    Fix crashes on redefining/unsetting predefined alias (re: 7e7f1372)
    
    Reproducer 1:
    
      $ alias r
      r='hist -s'
      $ alias r=foo
      $ unalias r
      ksh(10127,0x10d6c35c0) malloc: *** error for object 0x7ffdcd404468: pointer being freed was not allocated
      ksh(10127,0x10d6c35c0) malloc: *** set a breakpoint in malloc_error_break to debug
      Abort
    
    The crash happens as unall() (typeset.c) calls nv_delete() (name.c)
    which tries to free a node pointer that was not directly allocated.
    
    Reproducer 2:
    
      $ ENV=/./dev/null ksh
      $ echo : >script
      $ chmod +x script
      $ alias r=foo
      $ ./script
      ksh(10193,0x10c8505c0) malloc: *** error for object 0x7fa136c04468: pointer being freed was not allocated
      ksh(10193,0x10c8505c0) malloc: *** set a breakpoint in malloc_error_break to debug
      Abort
    
    This crash happens for the same reason, but in another location,
    namely in sh_reinit() (init.c) as it is freeing up the alias table
    before executing a script that does not start with a #! path.
    
    This is a serious bug because it is not uncommon for .kshrc or
    .profile scripts to (re)define an alias called 'r'.
    
    Analysis:
    
    These crashes happen because the incorrectly freed node pointer is
    part of a larger block of nodes initialised by sh_inittree() in
    init.c. That function allocates all the nodes for a table (see
    data/{aliases,builtins,variables}.c) in a contiguous block
    addressable by numeric index (see builtins.h and variables.h for
    how that is used).
    
    So, while the value of the alias is correctly marked NV_NOFREE and
    is not freed, that attribute does not apply to the node pointer
    itself, which also is not freeable. Thus, if the value is replaced
    by a freeable one, the node pointer is incorrectly freed upon
    unaliasing it, and the shell crashes.
    
    The simplest fix is to allocate each predefined alias node
    individually, like any other alias -- because, in fact, we do not
    need the predefined alias nodes to be in a contiguous addressable
    block; there is nothing that specifically addresses these aliases.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Instead of calling sh_inittree(), use a dedicated loop to
      allocate each predefined alias node individually, making each
      node invidually freeable. The value does remain non-freeable,
      but the NV_NOFREE attribute correctly takes care of that.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Get rid of the incomplete and now unnecessary workarounds in
      unall() and sh_reinit().
    
    Thanks to @jghub and @JohnoKing for finding and reporting the bug.
    Discussion: https://github.com/ksh93/ksh/discussions/503#discussioncomment-3337172

commit c0c7d0f411cb45a1f94e3d751f9cb8284ff0276c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 5 12:14:03 2022 +0200

    Revert buggy exec optimisation (re: f0b0b67d)
    
    As of 2022-06-18, ksh 93u+m is not capable of being used as /bin/sh
    while building GNU binutils. The execution of some of its build
    system's dot scripts is incorrectly aborted as an external 'sed'
    command is execve(2)'d without forking. This means that incorrect
    exec optimization was happening.
    
    Unfortunately I have not been able to derive a minimal reproducer
    of the problem yet because the GNU binutils build scripts are very
    complex. Pending further research, the optimisation is reverted.
    Even if a way to make it work is found, it will not be reintroduced
    to the 1.0 branch.
    
    Thanks to @atheik for finding the problem and identifying the
    commit that introduced it.
    
    Resolves: https://github.com/ksh93/ksh/issues/507

commit 7041c209fdae519c759548ba73bf1b6417120814
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 2 22:43:19 2022 +0200

    package install: fix a non-POSIX-ism (re: 4e51946a)
    
    'bin/package install' breaks on pure POSIX shells because I used
    the regex negator ^ instead of the glob pattern negator ! in a glob
    pattern bracket pattern. Oops.

commit 336e14a97d12d1e5e56f8bb4ad0beb35f2b6baa1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 2 20:07:43 2022 +0200

    Do not use noreturn in C99 mode on Solaris Sudio cc (re: c4f980eb)
    
    If the -xc99 or -std=c99 flag is passed to Solaris Studio cc, the
    build fails with a syntax error on the 'noreturn' keyword. That
    keyword was introduced in the C11 standard; C99 does not have it.
    
    The features/common test decides that we can use the 'noreturn'
    optimization if the <stdnoreturn.h> header is present on the
    system, but that is not correct; standards flags may disable it.
    
    src/lib/libast/features/common:
    - Remove two unused tests for extern and void*, all part of C90
      which we now require (re: a34e8319).
    - Add test that checks for 'noreturn' by compiling a test program.
    - Use that test's result to decide whether to define 'noreturn' as
      empty or not.

commit 1ac1a1e5f12c30d6afe183e84040204168f493cf
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 1 21:26:14 2022 +0200

    On the 1.0 branch, we now have release 93u+m/1.0.0
    
     _        _        ___ _____                          ___   ___   ___
    | | _____| |__    / _ \___ / _   _   _   _ __ ___    / / | / _ \ / _ \
    | |/ / __| '_ \  | (_) ||_ \| | | |_| |_| '_ ` _ \  / /| || | | | | | |
    |   <\__ \ | | |  \__, |__) | |_| |_   _| | | | | |/ / | || |_| | |_| |
    |_|\_\___/_| |_|    /_/____/ \__,_| |_| |_| |_| |_/_/  |_(_)___(_)___/
    
    The actual release commit is 3a25aa0d on the 1.0 branch, not this one.
    
    It may have taken exactly a decade, but here we are... a proper new
    ksh release. :) Many thanks to all contributors for their hard work!
    Compared to an unpatched 93u+, this release has roughly a thousand
    bugs fixed. It incorporates a fair number of enhancements as well.
    
    Not all known bugs have been worked out yet; see the TODO file. Let's
    hope this release will rekindle interest and attract more bug hunters.
    
    This commit also makes some very minor fixes in comments. Notable:
    src/cmd/ksh93/sh/arith.c: sh_strnum():
    - Update a security-related comment. As of b48e5b33, evaluating
      untrusted arithmetic expressions from the environment should no
      longer cause CVE-2019-14868. But let's keep disallowing it anyway.
    
    Resolves: https://github.com/ksh93/ksh/issues/491

commit 49665a9a8fc5eb47f711430cf183793d39d08ad7
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Tue Aug 2 04:41:29 2022 +0900

    sh.1: add spacing between paragraphs and a missing word (#502)
    
    These are a few minor edits to the man page for readability and consistency:
    
    * Add missing "in" to or else a fifo in a temporary directory
    * Some paragraphs had missing spacing between them
    * Some lists were missing spacing before the following paragraph
    * Use bullet points to list the rksh restrictions
    * Indent the list of characters in the "Quoting" section

commit 4e51946a977e47f7cced13c2dec8071d393a9206
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 1 18:52:41 2022 +0200

    src/cmd/INIT/package.sh: add install subcommand
    
    This now allows easy installation via:
    bin/package install DESTINATION_DIRECTORY [ COMMAND ... ]
    
    Commands are installed in bin and share/man subdirectories.
    If no command is specified, ksh and shcomp are assumed.

commit 1560223d9df51c86051754926766bbfaf873c35b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 1 04:05:06 2022 +0200

    Re-backport atomic job locking from 93v- (re: 52067c3d, 595a0a56)
    
    [This commit was previously reverted because it seemed to cause the
    build to fail on Cygwin. But I just re-tested it, and it's fine. It
    may be that my Cygwin installation at the time was defective.]
    
    Something similar was previously done in 07cc71b8 from a Debian
    patch, and eventually reverted; it redefined the ast atomic
    functions asoincint() and asodecint() to be gcc-specific. This
    imports the upstream version from the ksh 93v- beta instead.
    
    This commit is based on an OpenSUSE patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-joblock.dif
    
    src/cmd/ksh93/include/jobs.h:
    - Replace job locking mechanism with the 93v- version which uses
      the atomic libast functions asoincint(), asogetint() and
      asodecint(). See: src/lib/libast/man/aso.3
    
    src/cmd/ksh93/sh/jobs.c: job_subsave():
    - Revert gcc optimiser bug workaround from c258a04f.
      It should now be unnecessary.

commit 37d12bc820cb32eced95eedc311027c8a3c77978
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 31 17:01:12 2022 +0200

    tests/leaks.sh: quadruple maximum number of test iterations
    
    There were still intermittent leak test failures on Debian.
    They're clearly spurious as a different test fails each time.
    
    My testing on a Debian 11.4.0 VM showed that it takes not a
    doubling, but a quadrupling of the maximum number of test
    iterations (from 16384==2**14 to 65536==2**16) for that system's
    memory state to stabilise enough to avoid spurious test failurese.
    
    Resolves: https://github.com/ksh93/ksh/issues/501

commit 218085695f8fe5e48ee1c1627a30ea8a9fd74c79
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 31 04:02:03 2022 +0200

    nv_newattr(): Fix out-of-bounds read (re: bdb99741)
    
    When converting from -Z to another attribute, if the value of the
    -Z variable was empty (so -Z0 and an empty value), the loop that
    skips initial zeros may read before the beginning of the buffer:
    
    2968:   if(nv_isattr(np,NV_ZFILL))
    2969:   {
    2970:           while(*sp=='0') sp++;   /* skip initial zeros */
    2971:           if(!*sp) sp--;          /* if number was 0, leave one zero */
    2972:   }
    
    If the *sp value is empty (just a terminating zero byte), line 2970
    does nothing, but line 2971 still decrases the pointer, to before
    the beginning of the buffer.
    
    The fix is to check for an initial zero before running that block.
    
    Reproducer (fails intermittently, depending on garbage before *sp):
    
        typeset -Z foo=
        typeset -i foo

commit f8645c4ae76fd55c991067ee02ece9aaecbf11fe
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 31 01:10:22 2022 +0200

    Fix build on macOS (re: 4afc2e1f)
    
    macOS doesn't like it if ast.h is included in vmmopen.c
    (conflicting type declarations for brk() and sbrk() between that
    file and the OS header), so only include ast.h when we're actually
    using the the NoN stub macro from it.
    
    Thanks to Mark Wilson for the build failure report.
    
    Resolves: https://github.com/ksh93/ksh/issues/499

commit 1642a28fc10bfda97de3c61776da95d5eaa6b15b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 31 00:38:52 2022 +0200

    Update author attributions in all source files
    
    This commit:
    
    1. Updates the COPYRIGHT file with all the contributors to ksh
       93u+m since the reboot, based on the commit history, sorted by
       number of commits in descending order. It also separates the
       authors of backported contributions from direct contributors.
    
    2. Adds missing contributors of source each file to that file's
       copyright header based on that file's commit history.
    
    The script used to maintain this is now up at:
    https://github.com/ksh93/ksh/wiki/update-copyright.sh
    
    In addition, the original ast copyright notice is restored to
    its EPL 1.0 version -- that is what AT&T Intellectual Property
    originally licensed this code under, and we are the ones who
    upgraded it to EPL 2.0 (as allowed by EPL 1.0) in d6a5c9a4.
    The history should be accurate.

commit 4afc2e1f2e0f3d1f3335ca6dbbfda66897d176ae
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jul 30 15:11:20 2022 -0700

    Fix building on Haiku and fix some typos (#498)
    
    - Fixed a few minor typos and updated the list of tested systems in
      src/cmd/ksh93/README.
    - vmmopen.c: Include the ast.h header to fix a build error on Haiku
      caused by the otherwise undefined NoN macro (re: 05f0c1b1).

commit 69f85a6cefd895fc5364399100001a82f0a02b55
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sat Jul 30 20:00:09 2022 +0530

    Fix for spelling issue in the man page. (#497)

commit 04e36c4b182d478a8ffe5c3596d09cb997ca5cc8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 30 02:06:11 2022 +0200

    sh.1: remove inaccurate sentence about unset discipline
    
    In the documentation on the .unset discipline, this removes the
    sentence: "The variable will not be unset unless it is unset
    explicitly from within this discipline function."
    
    Every ksh93 version published since at least 1995 unsets a variable
    if 'unset' is run, regardless of whether any .unset discipline
    function itself unsets the variable or not.
    
    But all the documentation and books ever published (man page,
    Bolsky, O'Reilly, IBM AIX docs) claim that an .unset discipline
    needs to unset the variable again in order for it to be unset.
    
    Bolsky (1995) p. 79, says:
    > unset
    >    Called when the variable is unset. The variable will not be
    >    unset unless it is unset inside the dicipline function.
    
    Other similar claims:
    https://github.com/ksh93/ksh/issues/419#issuecomment-1199773432
    
    So, ALL OF IT IS WRONG, believe it or not. Welcome to the
    ksh93 twilight zone, where nothing is as it seems.
    
    There are other bugs, see #419. But for now, other than correcting
    the man page, I'm not touching this mess with a ten-foot pole.

commit f62277e01d82def7b26627fe57c2da5d24ac48f7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 30 01:29:29 2022 +0200

    libast/Mamfile: no release version if git WD not clean

commit c1f5db9fc24f72703dc8d6ed1bf372933d8b0ed5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 30 00:34:48 2022 +0200

    stk(3): fix argument type of exception callback function
    
    The callback function for malloc(3) failure in the stk(3) routines
    (which can be specified using stkinstall() and is set to nomemory()
    in init.c) uses a size argument of type int. That's a type mismatch
    with all the other size arguments and variables in stk(3) which use
    size_t, an unsigned type that may be larger than int.
    
    This is all quite inconsequential as nothing in our code base (or
    in the complete old AT&T AST code base) actually uses that size for
    anything, but it's still wrong, so this corrects the interface.
    
    With this very minor API change, let's bump the libast API version
    to 20220801, the date of the upcoming ksh 93u+m 1.0.0 release. :)
    
    The ksh93/sh/init.c nomemory() function now reports the size that
    could not be allocated, just because it can.

commit 3449aa3f3ee41020c511ccbf5613e3dd558e35c3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 28 22:04:18 2022 +0200

    Fix "$*" doing pattern matching if $IFS is wildcard (BUG_IFSGLOBS)
    
    The bug is that "$*", and related expansions such as "${arr[*]}",
    etc., do pattern matching if the first character of $IFS is a
    wildcard. For example, the following:
    
        IFS=*
        set -- F ''
        case BUGFREE in
        BUG"$*")        echo bug ;;
        esac
    
    outputs 'bug'. This bug can be reproduced in every other glob
    pattern matching context as well, but not in pathname expansion.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - When joining fields into one for a "$*"-type expansion, check if
      a glob pattern matching operation follows (mp->pattern is set).
      If so, write a preceding backslash to escape the separator.
    
    Resolves: https://github.com/ksh93/ksh/issues/489
    Resolves: https://github.com/att/ast/issues/12

commit d6a5c9a4435ac5a1d2f0c356b290a648331d8e68
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 28 05:35:00 2022 +0200

    Upgrade licence to EPL 2.0
    
    EPL 1.0 says, in section 7: "The Program (including Contributions)
    may always be distributed subject to the version of the Agreement
    under which it was received. In addition, after a new version of
    the Agreement is published, Contributor may elect to distribute the
    Program (including its Contributions) under the new version."
    
    The Eclipse Foundation also encourage everyone to upgrade:
    https://www.eclipse.org/legal/epl-2.0/faq.php#h.60mjudroo8e5
    https://www.eclipse.org/legal/epl-2.0/faq.php#h.tci84nlsqpgw
    
    Unfortunately the new Secondary License option is not available to
    us as we're not the original copyright holders and don't have the
    legal power to add one. So, no GPL compatibility. Sorry.

commit 3e40a31bc0043c162e6da16757eb201804f8033a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 23:51:40 2022 +0200

    COPYRIGHT: sync with 1.0 branch

commit a2e7fbd5537b688c86d5e7a057174ed73eb8d08c
Author: pghvlaans <kvngncrlsn@gmail.com>
Date:   Thu Jul 28 06:33:44 2022 +0900

    vi mode completion: use APPEND when e_nlist is 0 (#493)
    
    Attempting to tab-complete the only member of a directory while in
    vi mode switches to "control" under the following conditions:
    
     1. pwd is outside of the directory
    
     2. No part of the basename has been typed in (e.g., starting with
        vim TEST/t will autocomplete to vim TEST/test, but starting
        with vim TEST/ will not).
    
    Also, trying to type with "input" or "replace" fails afterwards
    until a new line has been generated (either with ctrl + c or the
    j/k keys in control mode).
    
    src/cmd/ksh93/edit/vi.c: textmod():
    - The strange completion behavior in vi mode for single-member
      directories appears to be at least partially due to completion
      failing to use \ or * mode from outside of pwd. Checking for
      e_nlist directly from vi.c — 0 unless in = mode — allows for
      entering the else loop at line 2575 to reach APPEND mode.
    
    Resolves: https://github.com/ksh93/ksh/issues/485

commit 69d2b96f4d819894144c5872001416713dff3575
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 19:08:57 2022 +0200

    Add ${.sh.ppid} (re: 39189b7a)
    
    Since we now have sh.current_ppid, we might as well point a shell
    variable to it, as the cost is nil.
    
    Together, ${.sh.pid} and ${.sh.ppid} (updated when a virtual
    subshell forks) form a logical counterpart pair to $$ and $PPID
    (never updated in subshells).
    
    This commit also adds a section to the manual page that hopefully
    does away with the depressingly widespread subshell/child shell
    confusion once and for all... :P

commit 2d674bb1b44ac4f531767901109a533a0c1abf11
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 17:21:05 2022 +0200

    Remove .sh.dollar (re: 3613da42, 7b0e0776)
    
    The undocumented .sh.dollar variable was a hack used to change the
    value of $$ (main shell's PID); any value assigned to .sh.dollar
    overrides the value of $$. This was used by libcoshell and by the
    pre-fork(2) code to update the value of $$ in child processes
    initialised by internally generated shell scripts. Both were
    removed long ago, so we don't need this.

commit 629ddbd59862578dbaeac4b13b35fa685a403ba4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 16:56:54 2022 +0200

    Sfio: fix non-multibyte build (re: 7577f389)
    
    The Sfio code uses its own _has_multibyte macro and that was not
    being disabled by AST_NOMULTIBYTE, so some of its multibyte code
    was still getting compiled in. This is easily fixed in sfhdr.h.
    
    But that exposed another issue: the Sfio stdio wrappers didn't
    know about the _has_multibyte macro. So this adds the necessary
    directives to keep their multibyte functions from compiling.

commit a33a6eccc4dc6ab2b77f1ae7a691f2a999461d1b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 15:39:00 2022 +0200

    Fix assumption that pid_t==int32_t, other wrong typecasts
    
    For $PPID and ${.sh.pid}, ksh has simply been assuming that pid_t
    is a 32-bit integer. In POSIX, the size of pid_t is not specified
    and operating systems are free to vary it. On any system where
    sizeof(pid_t) != 4, these variables produce undefined results.
    
    (Note that this is not a problem with $$ as it is converted to a
    string value directly from pid_t in special() in macro.c.)
    
    src/cmd/ksh93/features/options:
    - Add feature test that produces NV_PID, a name-value attribute
      macro that is set to NV_INTEGER|NV_SHORT (for int16_t),
      NV_INTEGER (for int32_t) or NV_INTEGER|NV_LONG (for Sflong_t
      a.k.a. intmax_t), depending on the size of pid_t. These are the
      three integer size attributes supported by nv_getval(). The build
      will abort on any (hypothetical?) system where pid_t has a size
      other than these three. In that case, the test and nv_getval()
      will need to have a new integer size attribute added.
    
    src/cmd/ksh93/data/variables.c:
    - Use NV_PID instead of NV_INTEGER for $PPID and ${.sh.pid}. This
      fixes the issue.
    
    Other changed files:
    - Fix the typecasts to various fmtbase() calls; the first argument
      is of type intmax_t (a.k.a. Sflong_t), not long.
    - When outputting PIDs with sfprintf(), typecast to Sflong_t and
      use %lld to account for possible systems with very large PIDs.
      (Though %lld is not in C89/C90, Sfio supports it anyway.)

commit 39189b7aac85eaeb8ff7ae9c298375784f547072
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 27 13:26:34 2022 +0200

    Fix $PPID for hashbangless script (re: 0af81992)
    
    I made a mistake in sh.reinit() which caused $PPID to be set to the
    new process ID, not the parent process ID. This commit fixes it by
    introducing, updating and using sh.current_ppid, so we continue to
    minimise context switches due to getpid(2)/getppid(2) system calls.
    
    Thanks to Geoff Clare for the report.

commit c898e3e2438fe73218bbe6d62fe95eb1d4fdb762
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 26 19:04:33 2022 +0200

    test/[/[[: Fix incorrect 0-skipping, float precision (re: 5da8eb31)
    
    The arguments to the binary numerical comparison operators (-eq,
    -gt, etc.) in the [[ and test/[ commands are treated as arithmetic
    expressions, even if $((...)) is not used. But there is some
    seriously incorrect behaviour:
    
    Reproducers (all should output 0/true):
    
        $ [[ 0x0A -eq 10 ]]; echo $?
        1
        $ [[ 1+0x0A -eq 11 ]]; echo $?
        0
        $ (set --posix; [[ 010 -eq 8 ]]); echo $?
        1
        $ (set --posix; [[ +010 -eq 8 ]]); echo $?
        0
        $ [[ 0xA -eq 10 ]]; echo $?
        1
        $ xA=10; [[ 0xA -eq 10 ]]; echo $?
        0
        $ xA=WTF; [[ 0xA -eq 10 ]]; echo $?
        ksh: WTF: parameter not set
    
    (POSIX mode enables the recognition of the initial 0 as a prefix
    indicating an octal number in arithmetic expressions.)
    
    The cause is the two 'while' loops in this section in test_binop()
    in src/cmd/ksh93/bltins/test.c:
    
    502:    if(op&TEST_ARITH)
    503:    {
    504:            while(*left=='0')
    505:                    left++;
    506:            while(*right=='0')
    507:                    right++;
    508:            lnum = sh_arith(left);
    509:            rnum = sh_arith(right);
    510:    }
    
    So initial zeros are unconditionally skipped. Ostensibly this is to
    disable the recognition of the initial zero as an octal prefix as
    well as 0x as a hexadecimal prefix. This would be okay for
    enforcing a decimal-only limitation for simple numbers, but to do
    this for arithmetic expressions is flagrantly incorrect, to say the
    least. (insert standard rant about AT&T quality standards here)
    
    The fix for '[[' is simply to delete the two 'while' loops. But
    that creates a problem for the deprecated-but-standard 'test'/'['
    command, which also uses the test_binop() function. According to
    POSIX, test/[ only parses simple decimal numbers, so octal, etc. is
    not a thing. But, after that fix, 'test 08 -eq 10' in POSIX mode
    yields true, which is unlike every other shell. (Note that this is
    unlike [[ 08 -eq 10 ]], which yields true on bash because '[['
    parses operands as arithmetic expressions.)
    
    For test/[ in non-POSIX mode, we don't need to change anything. For
    POSIX mode, we should only parse literal decimal numbers for these
    operators in test/[, disallowing unexpanded arithmetic expressions.
    This makes ksh's POSIX-mode test/[ act like every other shell and
    like external .../bin/test commands shipped by OSs.
    
    src/cmd/ksh93/bltins/text.c: test_binop():
    - Correct a type mismatch. The left and right hand numbers should
      be Sfdouble_t, the maximum double length on the current system,
      and the type that sh_arith() returns. Instead, long double
      (typeset -lF) values were reduced to double (typeset -F) before
      comparing!
    - For test/[ in POSIX, only accept simple decimal numbers: use
      strtold() instead of sh_arith(). Do skip initial zeros here as
      this disables the recognition of the hexadecimal prefix. Throw an
      error on an invalid decimal number. Floating point constants are
      still parsed, but that's fine as this does not cause any
      incompatibility with POSIX.
    
    - For code legibility, move handling of TEST_EQ, etc. to within the
      if(op&TEST_ARITH) block. This also allows lnum and rnum to be
      local to that block.

commit 9095f9c26af1ac87ea4ce5b58cadaa987114f574
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 25 09:20:19 2022 +0200

    man: fix use with full path name arguments
    
    src/cmd/ksh93/fun/man: .man.try_os_man():
    - Do not look for arguments with / in section 1 and 8; this can
      cause false positives.

commit 9664a1d5ed3dc3137ebc917b1b548c457a653aaa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 25 06:33:41 2022 +0200

    package: don't warn about missing yacc or bison
    
    None of our code uses yacc or bison, so it's pointless for package
    to complain about them being missing if they are not installed.

commit 2a5d70f335fd48ce6414d6422de89901ce05f9a7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 25 03:06:41 2022 +0200

    atmain.C: remove
    
    Not only is it C++-specific (and we no longer pretend to be
    compatible with C++), it's also z/OS-specific. It seems that
    access to z/OS for testing is not available to mere mortals.

commit d5455b4af929ddb4eb2179847039cddbaf2275c6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 25 02:14:35 2022 +0200

    fun/man: fix for old Solaris man(1) command
    
    The Solaris 10.1 man command happily exits with status 0 on error
    and even prints error messages to standard output. This was fixed
    in later versions of Solaris. but we should still fix the function
    for portability as it should work almost anywhere.
    
    .man.try_os_man() now checks that the standard output of a man
    command includes at least three newlines; that's probably a
    reliable-enough indicator that it's a man page and not an error
    message. Thankfully, all man commands do seem to deactivate the
    pager when standard output is not on a terminal (e.g. when catching
    standard output with a command substitution).

commit 05f0c1b1aaa13730ce6affb5cc7f7ffc59021ac3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 16:29:17 2022 +0200

    Round number I-lost-count-long-ago of minor cleanups
    
    Somewhat notable changes:
    - Remove pointless test commands from Mamfiles.
    - Consistent use of NoN macro instead of manual void _STUB_foo(){}
      (this is to silence "foo.o has no symbols" warnings from ld).
    - Remove src/lib/libast/comp/transition.c; obsolete, does nothing.
    - xec.c: Fix off-by-one error in sigreset() used by sh_ntfork():
      it tried to (re)set signal 0, which is harmless, but wrong.
      (note that sh.st.trapmax is the current max trapped sig + one!)

commit 39c5e6a37a08fd4ebe463bd5701ddffb3fc96284
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 14:01:15 2022 +0200

    ksh93/fun: Add 'autocd'
    
    This autoloadable function activates a feature similar to 'shopt -s
    autocd' in bash: type only a directory name to change directory.
    It uses the DEBUG trap to work. See the file for details.

commit 879e072f81a8d60a081cc461a12610ee8e6d1b77
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 10:17:17 2022 +0200

    ksh93/fun: add 'man' function, making builtins help easy to use
    
    This adds a new 'man' function in src/cmd/ksh93/fun/man, meant for
    autoload. This integrates the --man self-documentation of ksh
    built-in and external AST commands with your system's 'man' command
    so you can conveniently use 'man' for all commands, whether
    built-in or external. See the file for details.

commit be79e4e9ef53c36df3c72f092879abcad851373c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 07:26:43 2022 +0200

    'command -x': also bypass path-bound built-ins (re: 66e1d446)
    
    Since 'command -x' provides xargs-like functionality to repeatedly
    run external commands if the argument list is too long for one
    invocation, it makes little sense to use with built-ins. So I
    decided that 'command -x' should double as a way to guarantee
    running an external command. However, it was only bypassing plain
    built-ins and not path-bound builtins (the ones that show up with a
    virtual directory path name in the output of 'builtin').
    
    src/cmd/ksh93/sh/path.c:
    - Before looking for a path-bound built-in, check that the SH_XARG
      state bit is not on. This needs to be done in path_absolute() as
      well as in path_spawn().

commit 1aaf9877dd9665ae833a98ea999ffc09bc0c126a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 06:56:29 2022 +0200

    Fix build without line editors (re: 667034ff)

commit bbcadf7020bc0246f5288b78fea270b30df4bda5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 06:09:59 2022 +0200

    Part revert 7c3868b8
    
    Even tough sh_subtmpfile() should only be relevant to command
    substitutions, checking the sh.comsub flag instead of sh.subshell
    before calling is not valid in all cases; subshells of command
    substitutions run into problems in some oddly specific cases, e.g.,
    both 'eval' and an external command must be involved. The ksh
    regression tests didn't detect a problem, but both modernish[*] and
    shellspec[*] have one regression test failure after that change.
    
    Minimal reproducer, assuming a cat at /bin/cat:
    
        v=$(eval 'print output | /bin/cat')
        print -r "v=[$v]"
    
    Actual output:
    
        output
        v=[]
    
    Expected output:
    
        v=[output]

commit 667034ff82ad801c1af2f996e85602abce933b7f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 24 04:06:46 2022 +0200

    set -b/--notify: do not mess up the command line
    
    This commit makes three interrelated changes.
    
    First, the code for erasing the command line before redrawing it
    upon a window size change is simplified and modernised. Instead of
    erasing the line with lots of spaces, it now uses the sequence
    obtained from 'tput ed' (usually ESC, '[', 'J') to "erase to the
    end of screen". This avoids messing up the detection and automatic
    redrawing of wrapped lines on terminals such as Apple Terminal.app.
    
    Second, the -b/--notify option is made more usable. When it is on
    and either the vi or emacs/gmacs line editor is in use, 'Done' and
    similar notifications are now buffered and trigger a command line
    redraw as if the window size changed, and the redraw routine prints
    that notify buffer between erasing and redrawing the commmnd line.
    The effect is that the notification appears to magically insert
    itself directly above the line you're typing. (The notification
    behaviour when not in the shell line editor, e.g. while running
    commands such as external editors, is unchanged.)
    
    Third, a bug is fixed that caused -b/--notify to only report on one
    job when more than one terminated at the same time. The rest was
    reported on the next command line as if -b were not on. Reproducer:
    $ set -b; sleep 1 & sleep 1 & sleep 1 &
    
    This commit also includes a fair number of other window size and
    $COLUMNS/$LINES handling tweaks that made all this easier, not all
    of which are mentioned below.
    
    src/cmd/ksh93/include/fault.h,
    src/cmd/ksh93/sh/fault.c:
    - Replace sh_update_columns_lines with a new sh_winsize() function.
      It calls astwinsize() and is to be used instead of it, and
      instead of nv_getval(LINES) and nv_getval(COLUMNS) calls. It:
      - Allows passing one or neither of lines or cols pointers.
      - Updates COLUMNS and LINES, but only if they actually changed
        from the last values. This makes .set discipline functions
        defined for these variables more useful.
      - Sets the sh.winch flag, but only if COLUMNS changes. If only
        the height changes, the command line does not need redrawing.
    
    src/cmd/ksh93/include/io.h:
    - Add sh_editor_active() that allows checking whether one of vi,
      emacs or gmacs is active without onerous #if SHOPT_* directives.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - Remove the fix backported in fc655f1a, which was really just a
      workaround that papered over the real bug.
    - Move a check for errno==ECHILD so it is only done when waitpid()
      returns an error (pid < 0); the check was not correct because C
      library functions that do not error out also do not change errno.
    - Move the SH_NOTIFY && SH_TTYWAIT code section to within the
      while(1) loop so it is run for each job, not only the
      last-processed one. This fixes the bug where only one job was
      notified when more than one ended at the same time.
    - In that section, check if an editor is active; if so, set the
      output file for job_list() to sh.notifybuffer instead of standard
      error, list the jobs without the initial newline (JOB_NLFLAG),
      and trigger a command line redraw by setting sh.winch.
    
    src/cmd/ksh93/edit/edit.c:
    - Obtain not just CURSOR_UP but also ERASE_EOS (renamed from
      KILL_LINE) using 'tput'. The latter had the ANSI sequence
      hardcoded. Define a couple of TPUT_* macros to make it easier to
      deal with terminfo/termcap codes.
    - Add get_tput() to make it easier to get several tput values
      robustly (with SIGINT blocked, trace disabled, etc.)
    - ed_crlf(): Removed. Going by those ancient #ifdefs, nothing that
      93u+m will ever run on requires a '\r' before a '\n' to start a
      new line on the terminal. Plus, as of 93u+, there were already
      several spots in emacs.c and vi.c where it printed a sole '\n'.
    - ed_read():
      - Simplify/modernise command line erase using ERASE_EOS.
      - Between erasing and redrawing, print the contents of the notify
        buffer. This has the effect of inserting notifications above
        the command line while the user is typing.
    
    src/cmd/ksh93/features/cmds:
    - To detect terminfo vs termcap codes, use all three codes we're
      currently using. This matters on at least on my system (macOS
      10.14.6) in which /usr/bin/tput has incomplete terminfo support
      (no 'ed') but complete termcap support!

commit b301393ad98338a63ddd7ee099537a2ffedbe724
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 22 23:49:16 2022 +0200

    Mark stopped jobs as background (re: f0156e6b)
    
    Reproducer:
    
      $ /bin/sleep 100
      ^Z[1] + Stopped                  /bin/sleep 100
      $ kill %%     <--- no notification shown
      $ jobs        <--- nothing: it was in fact killed
    
    Expected behaviour:
    
      $ /bin/sleep 100
      ^Z[1] + Stopped                  /bin/sleep 100
      $ kill %%
      [1] + Terminated               /bin/sleep 100
    
    In the reproducer, the job in fact gets killed, but no notification
    is printed of this fact. This is because notifications now require
    the P_BG (background job) flag, and it is not set if a foreground
    job is stopped. It should be: stopping moves it to the background.
    
    When the 'sleep' builtin is used instead of the external command,
    the notice says 'Done' instead of 'Terminated' because SIGTERM is
    being handled via sh_fault() instead of set to SIG_DFL. It remains
    to be considered if anything needs to change about that.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - Also set a job's P_BG bit when it was stopped.

commit 7c3868b8bdba9e276ddadf8e9df81f5872631f8b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 22 07:06:09 2022 +0200

    Remove broken iousepipe/sh_iounpipe (re: 42becab6)
    
    After that commit, iousepipe(), sh_iounpipe(), and supporting flags
    were all broken and dead code. Since all command substitutions use
    temp files now, they're unused; remove them.
    
    I'm experimenting with reintroducing pipes to command substitutions
    in a consistent way, as this is needed for them to wait for
    grandchildren. If and when I ever manage to figure out how to do
    that in a way that doesn't cause severe hanging and crashing bugs,
    these functions may return in some form.
    
    Related: https://github.com/ksh93/ksh/issues/124

commit 8eb3a119675c25ac965e94a22a92cba19a717e07
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 22:58:53 2022 +0200

    Next round of minor tweaks and cleanups
    
    Notable changes:
    - Tie up some loose ends re: a71c06b7 and 237989ed.
    - comp/omitted.c: Header include fix for Cygwin.
    - misc/optget.c:
      - args(): When printing options for the uage line, use a local
        pointer for the 'if' block instead of reusing the 'b' pointer.
        That variable is used to output blanks later.
      - The above fix allows re-enabling the AST translation-aware
        macros and deleting the astsa fallback without causing usage
        message corruption in multibyte locales. Maybe someday we'll
        make ksh actually translatable.
      - Remove code to reinitialise _error_infop_ and _opt_info_
        'because these are not initialised by all DLLs'. In 2022,
        hopefully the buggy dynamic linkers are fixed. If not, we're
        not going to find out by keeping the workaround. I suspect that
        those bugs may have been triggered by the Microsoft/Cygwin
        import/export obfuscation removed in a71c06b7.
    - ksh93:
      - Remove unused sh.st.var_local variable. This was a leftover of
        a 93v- attempt to implement the bash 'local' command. It used
        static scoping, so it's not actually compatible.
      - Add a few regression tests for miscellaneous breakage that I
        caused in experiments (the breakage never made it to git; the
        tests are just to keep it that way).

commit a71c06b78464631f50abd770bad26ec9786948dd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 18:26:42 2022 +0200

    Remove Microsoft/Cygwin import/export nonsense
    
    Windows/Cygwin requires onerous special handling and the definition
    of additional _imp__* symbols to import/export symbols between
    dynamically linked binaries. Its support in AST used a lot of
    macros and code obfuscation. In the features/common test for this,
    AT&T called this the "Microsoft import/export nonsense".
    
    They're right, it's nonsense. Somehow, Microsoft's POSIX layer,
    SFU/Interix, always managed without it. No one has time to maintain
    this (especially considering how incredibly sluggish Cygwin is).
    And in fact, it had already fallen victim to bit rot; I confirmed
    this in my early experiments with reintroducing dynamic library
    support. No one has time to fix it, either.
    
    So, my apologies to any Cygwin fans; ksh 93u+m will never support
    dynamically loadable built-ins on Cygwin, even when I do manage to
    reintroduce dynamic linking properly.

commit ca23f156792ede2c2451e0b0a9984c90d7275bb6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 15:41:22 2022 +0200

    Remove more UWIN symbols (re: 0ea97b9d) and EMX support
    
    This removes support for the (AFAIK, completely unavailable) UWIN
    preprocessor, which used directives that nothing else understands,
    hidden behind the following macros:
            __STDPP__
            __STDPP__directive
            __STDPP__hide
    This mailing list post from 2001 says that __STDPP__ is UWIN:
    https://lists.gnu.org/archive/html/bug-groff/2001-04/msg00030.html
    
    This also removes code hidden by the __EMX__ symbol. EMX (Eberhard
    Mattes eXtender) was a programming environment and POSIX interface
    for MS-DOS and OS/2. The last release was in 1998.
    https://en.wikipedia.org/wiki/EMX_%28programming_environment%29

commit 0ea97b9d041a1c64e01db4ff15da5a1efc96e5ce
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 09:37:26 2022 +0200

    Remove AT&T UWIN support code
    
    UWIN was David Korn's UNIX emulation layer for Microsoft Windows.
    It was never very well known, certainly not like Cygwin or
    Microsoft SFU/Interix. It was a very interesting system that
    exposed the Windows registry to the file system, making it
    UNIX-like, and that natively used ksh and all the AST utilities.
    
    Regrettably, it appears to be dead and buried. Only 32-bit binaries
    can still be found in the wild, as well as the source code at:
            https://github.com/att/uwin
    The latter does not seem to be usable since (as far as I can tell)
    it requires a UWIN environment with a compiler to build, and UWIN
    binaries with a compiler are simply nowhere to be found.
    
    The activity level on that repo (which is zero) also shows how much
    interest there still is in this project. And of course the
    supporting code in this repo is almost certainly broken by now as
    we've never been able to test it on a UWIN system.
    
    The AST team clearly cared about it since roughly 8k lines of code
    are dedicated to its support, disabled (directly or indirectly) on
    non-UWIN systems via the _UWIN macro. This removes all that.

commit 237989ed7232287c6928d994d6528515c2aae78d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 06:50:51 2022 +0200

    cleanup: remove astsa
    
    astsa(3) is a small stand-alone version of the ast library that
    only requires cdt(3) and sfio(3). We're not using it. Nothing in
    the original AT&T code base was using it, either. It wasn't being
    compiled. Bit rot is inevitable, so remove.

commit 56b0ff705ebc5f2f26feaa223c3afb5e0f862b7e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 06:38:27 2022 +0200

    Report POSIX function or dot script name in error messages
    
    An old annoyance of mine: when an error occurs in a ksh function,
    the function name is reported in the error message, but the same is
    not done for POSIX functions.
    
    Since POSIX functions are treated as glorified dot scripts,
    b_dot_cmd() needs an errorpush() call and an assignment to
    error_info.id to make this happen for both POSIX functions and dot
    scripts. This is the same thing that sh_funscope() does for ksh
    functions. There is now no difference from ksh functions in how
    these report errors.
    
    Note that the sh_popcontext() macro includes an errorpop() call, so
    that does not need to be added. See fault.h and error.h.

commit 42f4107b7039f67175ee6f4fcd561b601fff8323
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 03:16:15 2022 +0200

    Remove ineffective check for login shell; require -p for suid/sgid
    
    In main.c:
    
    158:            if(sh.ppid==1)
    159:                    sh.login_sh++;
    
    If that was ever valid, it certainly is not now. As far as I know,
    there is no currently existing system where PID 1 (init or systemd
    or whatever) is the parent shell of the login shell, even straight
    after bootup; login shells are invoked via a program like login(1).
    Plus, there is no guarantee the init process actually has PID 1.
    
    This invalidates all use of login_sh that couldn't be replaced by
    checks for the login_shell option, so this commit does just that.
    
    src/cmd/ksh93/include/shell.h:
    - Remove login_sh flag.
    
    src/cmd/ksh93/sh/init.c:
    - If a login shell was detected, just set the login_shell option.
    - Remove obsolete check for #! setuid scripts. This was meant to
      guard against a symlink called '-i' to a setuid script with a
      hashbang path, which used to give users a root shell. All modern
      Unixes ignore the setuid bit when they detect a hashbang path.
    
    src/cmd/ksh93/SHOPT.sh:
    - By default, let's require the -p/--privileged invocation option
      for the setuid/setgid bit on the shell binary to be respected,
      for all user IDs (>= 0). This is what bash and mksh do, and
      it seems sensible. (See init.c 1475-1483)

commit f1a01d59c79036aa400c07d5feb20f7c229dd803
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 21 00:22:30 2022 +0200

    Fix: running external command influences $RANDOM sequence
    
    The pseudorandom generator generates a reproducible sequnece of
    values after seeding it with a known value. But:
    
        $ (RANDOM=1; echo $RANDOM; echo $RANDOM)
        2100
        18270
        $ (RANDOM=1; echo $RANDOM; ls >/dev/null; echo $RANDOM)
        2100
        30107
    
    Since RANDOM was seeded with a specific value, the two command
    lines should output the same pair of numbers. Running 'ls' in the
    middle should make no difference.
    
    The cause is a nv_getval(RANDNOD) call in xec.c, case TFORK, that
    is run for all TFORK cases, in the parent process -- including
    background jobs and external commands. What should happen instead
    is that $RANDOM is reseeded in the child process.
    
    This bug is in every version of ksh93 since before 1995.
    
    There is also an opportunity for optimisation. As of 3e58851f, the
    RANDOM seed may be invalidated by setting rand_last to -2,
    triggering a reseed the next time a $RANDOM value is obtained. This
    was done to optimise the virtual subshell mechanism. But that can
    also be used to eliminate unconditional reseeding elsewhere. So as
    of this commit, RANDOM is never (re)seeded until it's used.
    
    src/cmd/ksh93/include/variables.h,
    src/cmd/ksh93/sh/subshell.c:
    - Add RAND_SEED_INVALIDATED macro, a single source of truth for the
      value that triggers a reseeding in sh_save_rand_seed().
    - Add convenient sh_invalidate_rand_seed() function macro.
    
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/sh/xec.c:
    - Optimisation: invalidate seed instead of reseeding directly.
    - sh_exec(): case TFORK: Delete the nv_getval(RANDNOD) call. Add a
      sh_invalidate_rand_seed() to the child part. This fixes the bug.

commit 8f848bc2ea834b1f497109d7e818459d15899e41
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 20 06:34:47 2022 +0200

    Simplify SHOPT_SPAWN procsub file descriptor leak fix (re: 6d63b57d)
    
    Before the fix, a file descriptor leak could occur on command not
    found because sh_ntfork() saves sh.topfd on function entry (as part
    of the sh_pushcontext() macro expansion) and uses that value to
    sh_iorestore(). Process substitution arguments will already have
    been processed by then and their file descriptors opened, so those
    were not closed on restore. To compensate, the committed fix added
    a second sh_iorestore() call using the topfd variable, in which
    sh_exec) saves the value of sh.topfd on its function entry. A more
    elegant fix is to pass that value to sh_ntfork() as an argument so
    its own sh_iorestore() call does the right thing.

commit 2e816c32cb06c3209150a77a7a1616a09bdcce90
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 20 04:10:57 2022 +0200

    Streamline some nval(3) and related flaggery
    
    In the olden days, ksh used the hash(3) library to store variables,
    aliases, functions, etc. For many years, it's been using the cdt(3)
    library instead. But the low-level nv_search() name-value tree
    lookup function was still repurposing some bit flags from the old
    hash API for its options, though that API is otherwise unused.
    
    So we were still including the entire obsolete <hash.h> API just
    to use two repurposed HASH_* bit flags for nv_search(). This commit
    makes nv_search() repurpose some flags from <nval.h> instead.
    
    This commit should not change ksh's behaviour.
    
    src/cmd/ksh93/sh/nvdisc.c:
    - Make nv_search() use NV_NOSCOPE instead of HASH_NOSCOPE and
      NV_REF instead of HASH_BUCKET.
    - The HASH_SCOPE flag was also passed to some nv_search() calls,
      but nv_search() ignores it, so that flag is deleted from those.
    - Document nv_search() in a comment.
    
    src/cmd/ksh93/include/name.h:
    - Move NV_UNATTR to nval.h to join the other nv_open() options
      there. (re: 2ff1116e)
    
    src/cmd/ksh93/include/nval.h:
    - Since we no longer use HASH_* macros, do not include <hash.h>.
    - Remove unused NV_NOASSIGN macro, defined to 0. This was there
      for "backward compatibility" since before 1995; long enough.
    
    src/cmd/ksh93/include/shell.h:
    - Bump SH_VERSION due to the nv_search() API change (even though no
      changes were made to the APIs documented in nval.3 or shell.3).
    
    All other changed files:
    - Update to match the flaggery changes.

commit 3393691106dfa08ffe4fe2c1b6893bd45f43c194
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 19 08:54:19 2022 +0200

    Remove obsolete and partial crash workaround (re: 61437b27, 51b2e360)
    
    The fix for #103 was incomplete and papered over the problem. The
    real fix for this bug was applied in 51b2e36 on 20th February 2021.
    That crash was the same one triggered differently.
    
    https://github.com/ksh93/ksh/issues/103#issuecomment-1188666733

commit 40cb74bcb9e77508e823b9365fe63245d9c073b3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 18 17:39:24 2022 +0200

    Clear out TODO
    
    No one has time to maintain it. The issue tracker is where it's at.
    Though release versions should probably link relevant issues here
    that were open at the time of release so that users can find them
    even after they're closed, and decide whether to upgrade.
    
    BUG_BRACQUOT is now #488 and BUG_IFSGLOBS is now #499.

commit 37ba9266cbc342c39e9c4a5a897d5a17b0b6a576
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 16 05:20:13 2022 +0200

    Properly block .sh.level and .sh.value discipline functions
    
    These now give an "invalid discipline function" error instead of
    being silently ignored or crashing the shell.

commit 7cfaf9db2d2eab8aa456e39881720efdff23e7ea
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 15 02:57:17 2022 +0200

    mamake: fix memory leak
    
    This now allows our little make utility to run when compiled with
    AddressSanitizer on gcc on Linux; it no longer aborts the build on
    exit with a complaint about (very small) memory leaks.

commit c05d83aaa417fb06febbae755749b619988fb1e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 14 15:45:53 2022 +0200

    Fix github test run (re: c4823e97); clean up more build sys cruft
    
    The change in .github/workflows/ci.yml (use 'bin/package test' to
    run the iffe regression tests as well) caused the GitHub workflow
    to fail immediately with a syntax error. This is because iffe.tst
    is a ksh93 script, but the runner does not have a ksh93 installed
    as a system package.
    
    As of e08ca80d, package prefers a known-good system shell over the
    newly compiled shell to stop builds from failing when I break ksh,
    making it convenient to fix it. But that change should not apply to
    the regression tests; they should use the newly compiled shell.
    
    src/cmd/INIT/package.sh, bin/package:
    - Set KEEP_SHELL to 2 when given a SHELL=* argument.
    - Before running the regression tests, override the known-good
      shell with the compiled one if $KEEP_SHELL < 2, ensuring that all
      tests, including the iffe ones, are run with the compiled shell.
      This allows 'bin/package test' to run if the known-good shell is
      not a ksh93, while testing that the compiled shell successfully
      runs iffe. (re: e08ca80d)
    - Standardise 'test' command use: -a and -o are deprecated.
    - Remove some more unused cruft. (re: beb3c64a)
    
    src/cmd/ksh93/Mamfile:
    - Do not override SHELL when running shtests; this is now set
      correctly in 'bin/package test'.
    
    src/cmd/INIT/rt.sh:
    - Removed. This regression test output filter was only used with
      nmake, which we deleted. (re: 2940b3f5, 6cc2f6a0, 954dc446)

commit 887b043f465c7c72a303d1636c1909abcd6254d2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 14 09:00:50 2022 +0200

    macro.c: varsub(): Fix use-after-free problem
    
    When varsub(), which "handles $param, ${param}, and ${param op
    word}", handles arrays, it obtains an 'ap' array pointer once using
    nv_arrayptr(np). In several locations it calls nv_putsub() which
    may call array_grow() which invalidates that pointer. But the
    pointer is never updated. So whenver an array grows, there is a
    use-after-free problem, easily caught by AddresSanitizer.
    
    This commit makes sure the 'ap' pointer, if non-null, is refreshed
    whenever nv_putsub() may previously have been called.

commit c4823e979e40d033d5dd391b09897972b97290b6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 14 07:54:53 2022 +0200

    More misc. tweaks and cleanups
    
    Notable changes:
    
    .github/workflows/ci.yml:
    - Run 'bin/package test' on the github runner so we test iffe too.
    
    src/cmd/ksh93/sh/subshell.c:
    - sh_assignok was usually called like 'np = sh_assignok(np,0)'. But
      the function never changes np, it just returns the np value
      passed to it, so the assignment is pointless and that function
      can be changed to a void.
    
    src/cmd/ksh93/sh/fault.c: sh_fault():
    - Remove check for sh.subshell after sh_isstate(SH_INTERACTIVE). As
      of 48ba6964, it is never set in subshells.

commit f0156e6b07b06d0c36139f39e108f3fd58be415d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 14 05:51:17 2022 +0200

    Fix bad job control msg on trapped SIGINT and set -b (re: fc655f1)
    
    When running an external command while trapping Ctrl+C via SIGINT,
    and set -b is on, then a spurious Done job control message is
    printed. No background job was executed.
    
        $ trap 'ls' INT
        $ set -b
        $ <Ctrl+C>[file listing follows]
    
        [1] +  Done                    set -b
    
    In jobs.c (487-493), job_reap() calls job_list() to list a running
    or completed background job, passing the JOB_NFLAG bit to only
    print jobs with the P_NOTIFY flag. But the 'ls' in the trap is not
    a background job. So it is getting the P_NOTIFY flag by mistake.
    
    In fact all processes get the P_NOTIFY flag by default when they
    terminate. Somehow the shell normally does not follow a code path
    that calls job_list() for foreground processes, but does when
    running one from a trap. I have not yet figured out how that works.
    
    What I do know is that there is no reason why non-background
    processes should ever have the P_NOTIFY flag set on termination,
    because those should never print any 'Done' messages. And we seem
    to have a handy P_BG flag that is set for background processes; we
    can check for this before setting P_NOTIFY. The only thing is that
    flag is only compiled in if SHOPT_BGX is enabled, as it was added
    to support that functionality.
    
    For some reason I am unable to reproduce the bug in a pty session,
    so there is no pty.sh regression test.
    
    src/cmd/ksh93/sh/jobs.c:
    - Rename misleadingly named P_FG flag to P_MOVED2FG; this flag is
      not set for all foreground processes but only for processes moved
      to the foreground by job_switch(), called by the fg command.
    - Compile in the P_BG flag even when SHOPT_BGX is not enabled. We
      need to set this flag to check for a background job.
    - job_reap(): Do not set the P_NOTIFY flag for all terminated
      processes, but only for those with P_BG set.
    
    src/cmd/ksh93/sh/xec.c: sh_fork():
    - Also pass special argument 1 for background job to job_post() if
      SHOPT_BGX is not enabled. This is what gets it to set P_BG.
    - Simplify 5 lines of convoluted code into 1.
    
    Resolves: https://github.com/ksh93/ksh/issues/481

commit de462918025463517fb2872aaebd057b566f81f8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 12 17:48:44 2022 +0200

    Robustify ${.sh.level} scope switching (re: 7e317c5d, e1c41bb2)
    
    Switching the function scope to a parent scope by assigning to
    .sh.level (SH_LEVELNOD) leaves the shell in an inconsistent state,
    causing invalid-free and/or use-after-free bugs. The intention of
    .sh.level was always to temporarily switch scopes inside a DEBUG
    trap, so this commit minimises the pitfalls and instability by
    imposing some sensible limitations:
    1. .sh.level is now a read-only variable except while executing a
       DEBUG trap;
    2. while it's writeable, attempts to unset .sh.level or to change
       its attributes are ignored;
    3. attempts to set a discipline function for .sh.level are ignored;
    4. it is an error to set a level < 0 or > the current scope.
    
    Even more crashing bugs are fixed by simplifiying the handling and
    initialisation of .sh.level and by exempting it completely from
    virtual subshell scoping (to which it's irrelevant).
    
    TODO: one thing remains: scope corruption and use-after-free happen
    when using the '.' command inside a DEBUG trap with ${.sh.level}
    changed. Behaviour same as before this commit. To be investigated.
    
    All changed files:
    - Consistently use the int16_t type for level values as that is the
      type of its non-pointer storage in SH_LEVELNOD.
    - Update .sh.level by using an update_sh_level() macro that assigns
      directly to the node value, then restores the scope if needed.
    - To eliminate implicit typecasts, use the same int16_t type (the
      type used by short ints such as SH_LEVELNOD) for all variables
      containing a function and/or dot script level.
    
    src/cmd/ksh93/include/variables.h:
    - Add update_sh_level() macro.
    
    src/cmd/ksh93/include/name.h,
    src/cmd/ksh93/sh/macro.c:
    - Add a nv_nonptr() macro that checks attributes for a non-pointer
      value -- currently only signed or unsigned short integer value,
      accessed via the 's' member of 'union Value' (e.g. np->nvalue.s).
    - nv_isnull(): To avoid undefined behaviour, check for attributes
      indicating a non-pointer value before accessing the nvalue.cp
      pointer (re: 5aba0c72).
    - varsub(): In the set/unset check, remove the now-redundant
      exception for SH_LEVELNOD.
    
    src/cmd/ksh93/data/variables.c,
    src/cmd/ksh93/sh/init.c:
    - shtab_variables[]: Make .sh.level a read-only short integer.
    - sh_inittree(): To avoid undefined behaviour, do not assign to the
      'union Value' char pointer if the attribute indicates a non-
      pointer short integer value. Instead, the table value is ignored.
    
    src/cmd/ksh93/sh/subshell.c: sh_assignok():
    - Never create a subshell scope for SH_LEVELNOD.
    
    src/cmd/ksh93/sh/xec.c:
    - Get rid of 'struct Level' and its maxlevel member. This was only
      used in put_level() to check for an out of range assignment, but
      this can be trivially done by checking sh.fn_depth+sh.dot_depth.
    - This in turn allows further simplification that reduces init for
      .sh.level to a single nv_disc() call in sh_debug(), so get rid of
      init_level().
    - put_level(): Throw a "level out of range" error if assigned a
      wrong level.
    - sh_debug():
      - Turn off the NV_RDONLY (read-only) attribute for SH_LEVELNOD
        while executing the DEBUG trap.
      - Restore the current scope when trap execution is finished.
    - sh_funct(): Remove all .sh.level handling. POSIX functions (and
      dot scripts) already handle it in b_dot_cmd(), so sh_funct(),
      which is used by both, is the wrong place to do it.
    - sh_funscope(): Update .sh.level for ksh syntax functions here
      instead. Also, do not bother to initialise its discipline here,
      as it can now only be changed in a DEBUG trap.
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - When it's not read-only, ignore all attribute changes for
      .sh.level, as changing the attributes would crash the shell.
    
    src/cmd/ksh93/sh/nvdisc.c: nv_setdisc():
    - Ignore all attempts to set a discipline function for .sh.level,
      as doing this would crash the shell.
    
    src/cmd/ksh93/bltins/misc.c: b_dot_cmd():
    - Bug fix: also update .sh.level when quitting a dot script.
    
    src/cmd/ksh93/sh/name.c:
    - _nv_unset():
      - To avoid an inconsistent state, ignore all attempts to unset
        .sh.level.
      - To avoid undefined behaviour, do not zero np->nvalue.cp if
        attributes for np indicate a non-pointer value (the actual bit
        value of a null pointer is not defined by the standard, so
        there is no guarantee that zeroing .cp will zero .s).
    - sh_setscope(): For consistency, always set error_info.id (the
      command name for error messages) to the new scope's cmdname.
      Previously this was only done for two calls of this function.
    - nv_name(): Fix a crashing bug by checking that np->nvname is a
      non-null pointer before dereferencing it.
    
    src/cmd/ksh93/include/nval.h:
    - The NV_UINT16P macro (which is unsigned NV_INT16P) had a typo in
      it, which went unnoticed for many years because it's not directly
      used (though its bit flags are set and used indirectly). Let's
      fix it anyway and keep it for completeness' sake.

commit b0fc3bd402999fcc9649bd62c0c5cc02efc420ef
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 11 00:35:10 2022 +0200

    lex.c: endword(): fix out-of-bounds index to state table
    
    The lexer use 256-byte state tables (see data/lexstates.c), one
    byte per possible value for the (unsigned) char type. But the sp
    variable used as an index to a state table in loops like this...
                    while((n = state[*sp++]) == 0)
                            ;
    ...is a char*, a pointer to a char. The C standard does not define
    if the char type is signed or not (!). On clang and gcc, it is
    signed. That means that, whenever a single-byte, high-bit (> 127)
    character is encountered, the value wraps around to negative, and a
    read occurs outside of the actual state table, causing potentially
    incorrect behaviour or a crash.
    
    src/cmd/ksh93/sh/lex.c:
    - endword(): Make sp and three related variables explicitly
      unsigned char pointers. This requires a bunch of annoying
      typecasts to stop compilers complaining; so be it.
    - To avoid even more typecasts, make stack_shift() follow suit.
    - Reorder variable declarations for legibility.

commit d034edf46d3f305c44b126eaa946c065f9854d15
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 10 22:29:45 2022 +0200

    nv_clone(): don't call num_clone() for array nodes
    
    num_clone handles simple numeric values of all types but not array
    nodes. Calling it for an array node caused the arith.sh regression
    test below to crash in num_clone() with a buffer overflow when ksh
    is compiled with AddressSanitizer. The array has the NV_INTEGER
    attribute because it is an array of numeric values, but that
    doesn't mean the array node itself holds a number.
    
    After this, all the arith.sh tests pass with AddressSanitizer.
    The failing test in arith.c was this one, introduced in d50d3d7c:
    
    got=$(
            typeset -r -A -i ro_arr=([a]=10 [b]=20 [c]=30)
            set +x
            for ((i=0; i<loopcount; i++)); do
                    ( ((ro_arr[i+1] += 5)) )
            done 2>&1
    )
    [[ $got == *recursion* ]] && err_exit "recursion level not reset on readonly error (subshell)"

commit 13f329ac9f562348fe307144d069d0dad321520f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 10 20:12:10 2022 +0200

    history: fix out-of-bounds read on retrieving empty line
    
    Reproducer: Compile a ksh with AddressSanitizer. In that ksh, edit
    the last command line with 'fc', insert an empty line at the start,
    and save. Now use the up-arrow to retrieve the empty line. Ksh
    aborts on history.c line 1011 as hist_copy() tries to read before
    the beginning of the buffer pointed to by s1.
    
    src/cmd/ksh93/edit/history.c: hist_copy():
    - Verify that the s1 pointer was increased from the original s1
      before trying to read the character *(s1-1).

commit 5c3dea0fca3d999b9ce2561661f49e87ebdfad48
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 10 06:16:52 2022 +0200

    Fix race condition in coprocess test with external 'cat'
    
    The race is between '$cat |&' and 'kill $pid'. In between, there
    are only a variable assignment and two buffered writes, so there
    is nothing that waits for the external 'cat' to finish forking,
    execve'ing and initialising -- meaning there is no guarantee it is
    ready to catch SIGTERM. This explains the hang; 'cat' misses the
    signal, continues to initialise, and simply waits for more input.
    
    src/cmd/ksh93/tests/coprocess.sh:
    - Actually read from the /bin/cat coprocess and verify that it
      works. This has the beneficial side effect of ensuring it is
      fully loaded and initialised before SIGTERMing it.
    
    Resolves: https://github.com/ksh93/ksh/issues/132

commit 0dc0e1a9467dddc363175c64671a5b68e29dfd03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 9 22:40:25 2022 +0200

    Fix oddly specific syntax error corrupting subsequent [[ ... ]]
    
    Reproducer:
    
        $ x=([x]=1 [y)
        -ksh: syntax error: `)' unexpected
        $ [[ -z $x ]]
        -ksh: [[ -z  ]]: not found
    
    Any '[[' command following that syntax error will fail similarly;
    the whole of it (after variable expansion) is incorrectly looked up
    as a command name. The syntax error must be generated by an
    associative array assignment (with or without an explicit typeset
    -A) with at least one valid assignment element followed by an
    invalid assignment element starting with '[' but not containing
    ']='.
    
    This seems to be another bug that is in every ksh93 version ever.
    I've confirmed that ksh 1993-12-28 s+ and ksh2020 fail identically.
    Presumably, so does everything in between.
    
    Analysis:
    
    The syntax error function, sh_syntax(), calls lexopen() in mode 0
    to reset the lexer state. There is a variable that isn't getting
    reset there though it should be. Using systematic elimination I
    found that the variable that needs to be reset is lp->assignok (set
    "when name=value is legal"). If it is set, '[[' is not processed.
    
    src/cmd/ksh93/sh/lex.c: lexopen():
    - Reset 'assignok' in the lexer state (regardless of mode).
    - In the mode 0 total lexer state reinit, several members of lexd
      (struct _shlex_pvt_lexdata_) were not getting reset; just memset
      the whole thing to zero.
         Note for backporters: this change requires commit b75752a1 to
      be correct. That commit took the stack size and pointer (lex_max
      and *lex_match) out of this struct; those should not be reset!
    
    Resolves: https://github.com/ksh93/ksh/issues/486

commit 3a7c81f9e99d2032adff40b2dba0a4411303eb50
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 9 05:21:37 2022 +0200

    Disable SHOPT_DYNAMIC by default
    
    Dynamically loadable built-ins do not work well with a statically
    linked ksh; they cannot use ksh's statically linked copies of
    libast and libshell, so they would need to bring their own, but
    multiple copies of those don't play well together. So dynamically
    loaded built-ins cannot interface with the shell. Only non-AST,
    non-SFIO built-ins are possible. Which is something that perhaps
    five people in the world know how to do as this is not documented
    anywhere (hint: your built-in needs the BLT_NOSFIO attribute to use
    stdio without problems). And those five people are also able to
    compile their own ksh with SHOPT_DYNAMIC reenabled.
    
    Plus, the SHOPT_DYNAMIC code causes strange $PATH search
    regressions on a few systems. The cause of that bug has eluded me
    so far, but disabling this is effectively a fix on those systems.
    
    src/cmd/ksh93/SHOPT.sh:
    - Turn off SHOPT_DYNAMIC by default.
    
    src/cmd/ksh93/data/builtins.c:
    - Do not compile in irrelevant sh_optbuiltin[] (builtin --man)
      documentation if SHOPT_DYNAMIC is disabled.

commit 7577f389a6ed916138414ad8005721db04514fbd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 7 21:58:23 2022 +0200

    Multibyte character handling overhaul; allow global disable
    
    The SHOPT_MULTIBYTE compile-time option did not make much sense as
    disabling it only disabled multibyte support for ksh/libshell, not
    libast or libcmd built-in commands. This commit allows disabling
    multibyte support for the entire codebase by defining the macro
    AST_NOMULTIBYTE (e.g. via CCFLAGS). This slightly speeds up the
    code and makes an optimised binary about 5% smaller.
    
    src/lib/libast/include/ast.h:
    - Add non-multibyte fallback versions of the multibyte macros that
      are used if AST_NOMULTIBYTE is defined. This should cause most
      multibyte handling to be automatically optimised out everywhere.
    - Reformat the multibyte macros for legibility.
    - Similify mbchar() and and mbsize() macros by defining them in
      terms of mbnchar() and mbnsize(), eliminating code duplication.
    - Correct non-multibyte fallback of mbwidth(). For consistent
      behaviour, control characters and out-of-range values should
      return -1 as they do for UTF-8. The fallback is now the same as
      default_wcwidth() in src/lib/libast/comp/setlocale.c.
    
    src/lib/libast/comp/setlocale.c:
    - If AST_NOMULTIBYTE is defined, do not compile in the debug and
      UTF-8 locale conversion functions, including several large
      conversion tables. Define their fallback macros as 0 as these are
      used as function pointers.
    
    src/cmd/ksh93/SHOPT.sh,
    src/cmd/ksh93/Mamfile:
    - Change the SHOPT_MULTIBYTE default to empty, indicating "probe".
    - Synchronise SHOPT_MULTIBYTE with !AST_NOMULTIBYTE by default.
    
    src/cmd/ksh93/include/defs.h:
    - When SHOPT_MULTIBYTE is zero but AST_NOMULTIBYTE is not non-zero,
      then enable AST_NOMULTIBYTE here to use the ast.h non-multibyte
      fallbacks for ksh. When this is done, the effect is that
      multibyte is optimized out for ksh only, as before.
    - Remove previous fallback for disabling multibyte (re: c2cb0eae).
    
    src/cmd/ksh93/include/lexstates.h,
    src/cmd/ksh93/sh/lex.c:
    - Define SETLEN() macro to assign to LEN (i.e. _Fcin.fclen) for
      multibyte only and do not assign to it directly. With no
      SHOPT_MULTIBYTE, define that macro as empty. This allows removing
      multiple '#if SHOPT_MULTIBYTE' directives from lex.c, as that
      code will all be optimised out automatically if it's disabled.
    
    src/cmd/ksh93/include/national.h,
    src/cmd/ksh93/sh/string.c:
    - Fix flagrantly incorrect non-multibyte fallback for sh_strchr().
      The latter returns an integer offset (-1 if not found), whereas
      strchr(3) returns a char pointer (NULL if not found). Incorporate
      the fallback into the function for correct handling instead of
      falling back to strchr(3) directly.
    
    src/cmd/ksh93/sh/macro.c:
    - lastchar() optimisation: avoid function call if SHOPT_MULTIBYTE
      is enabled but we're not actually in a multibyte locale.
    
    src/cmd/ksh93/sh/name.c:
    - Use ja_size() even with SHOPT_MULTIBYTE disabled (re: 2182ecfa).
      Though no regression tests failed, the non-multibyte fallback for
      typeset -L/-R/-Z length calculation was probably not quite
      correct as ja_size() does more. The ast.h change to mbwidth()
      ensures correct behaviour for non-multibyte locales.
    
    src/cmd/ksh93/tests/shtests:
    - Since its value in SHOPT.sh is now empty by default, add a quick
      feature test (for the length of the UTF-8 character 'é') to check
      if SHOPT_MULTIBYTE needs to be enabled for the regression tests.

commit c8245c54819a8e4f086f19052b0594929cbf585b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 6 20:21:37 2022 +0200

    parse.c: eliminate global flag (re: e4133f9b)
    
    inout() initialises its 'token' variable to the value of
    lexp->token. So when inout() returns upon finding a process
    subtitution, lexp->token is known to contain either IPROCSYM or
    OPROCSYM; simple() can check for that instead, making a global flag
    unnecessary.
    
    The fact that inout() calls itself recursively to process multiple
    redirections does not influence this because the recursive call is
    done right before returning from the current call.

commit 9c037b0458dc44b37f7f8ca773b307e76b41e6b1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 5 22:09:29 2022 +0200

    Fix syntax error detection in associative array assignments
    
    Reproducer:
    
    $ fn=([foo_key]=foo_val [bar_key])
    -ksh: [bar_key]: not found
    
    Expected output:
    -ksh: syntax error: `[bar_key]' unexpected
    
    As soon as one correct associative array assignment element has
    been processed, a subsequent one, starting with '[' but not
    containing ']=', is incorrectly seen as a command to execute.
    If a command '[bar_key]' existed on $PATH, it would have been run.
    
    src/cmd/ksh93/sh/parse.c: simple():
    - In the syntax check for associative array assignments, don't just
      check for an initial '[' but also verify the presence of ']='.
    
    Thanks to @JohnoKing for finding this bug.
    
    Resolves: https://github.com/ksh93/ksh/issues/427

commit e4133f9bb5cfe0b8f9f276b5293f75753e8ae117
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 5 13:01:26 2022 +0200

    Fix wrong syntax error upon process substitution after redirection
    
    Grammatically, redirections may occur anywhere within a command
    line and are removed after processing them, whereas a process
    substitution (<(commandlist) or >(commandlist)) is replaced by a
    file name which should be treated as just another simple word.
    So the following should not be a syntax error:
    
    $ cat </dev/null <(true)
    -ksh: syntax error: `)' unexpected
    $ cat </dev/null >(true)
    -ksh: syntax error: `)' unexpected
    $ cat >/dev/null <(true)
    -ksh: syntax error: `)' unexpected
    $ cat >/dev/null >(true)
    -ksh: syntax error: `)' unexpected
    
    This bug is in every ksh93 version.
    
    The problem is in the parser (parse.c). The process substitution is
    misparsed as a redirection due to inout() recursively parsing
    multiple redirections without recognising process substitutions.
    inout() is mistaking '<(' for '<' and '>(' for '>', which explains
    the incorrect syntax error.
    
    This also causes the following to fail to detect a syntax error:
    $ cat >&1 <(README.md
    [the contents of README.md are shown]
    
    ...and other syntax errors detected in the wrong spot, for example:
    $ { true; } <(echo wrong)
    -ksh: syntax error: `wrong' unexpected
    which should be:
    -ksh: syntax error: `<(' unexpected
    
    src/cmd/ksh93/sh/parse.c:
    - Add global inout_found_procsub flag.
    - inout(): On encountering a process substitution, set this flag
      and return, otherwise clear the flag.
    - simple(): After calling inout(), check this flag and, if set,
      jump back to where process substitutions are parsed.
    
    Resolves: https://github.com/ksh93/ksh/issues/418

commit a06c96143df80c7c2758e1cf969492bb58a8ab9c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 4 00:16:05 2022 +0200

    Yet another round of accumulated tweaks and cleanups
    
    Notable changes:
    
    - sh/timers.c: Rename timerdel() to sh_timerdel() for consistency;
      we had timerdel() but sh_timeradd().
    
    - include/shell.h: Remove unused sh struct members:
      - sh.lastpath (this was still being saved/restored in several
        places, but not actually used since 2008-06-02 ksh93t-)
      - sh.lastbase (unused since 2000-10-31 ksh93k)
      - sh.inpool (unused since libcoshell was removed in 3613da42)
    
    - sh/xec.c: sh_exec(): Add comments for the various command types.

commit 5442d15aa333b1666d0dece606fca864d936404b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 3 19:21:32 2022 +0200

    restore build on ancient Mac OS X (re: 22e044c3)
    
    For some reason that I can't be bothered to investigate, gcc 3.3 on
    my museum-grade PowerMac G5 running Mac OS X 10.3 doesn't like -lm
    when compiling the output{...}end blocks in features/pty and
    features/dll. The compilation fails silently. But some other
    systems require the -lm for it to work.
    
    Thankfully iffe has a syntax for trying a test repeatedly with
    different flags (a.k.a. prerequisites). From 'iffe --man':
    
        -     Prereq grouping mark; prereqs before the first - are
              passed to all feature tests. Subsequent groups are
              attempted in left-to-right order until the first
              successful group is found.
    
    src/cmd/builtin/features/pty,
    src/lib/libdll/features/dll:
    - Try compiling the output{...}end block once with -lm and, if that
      fails, try once without -lm before erroring out.

commit 8deeb1a5722dc0aa3c6835e155f64997d6727b41
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 3 17:58:49 2022 +0200

    restore C90 compat: do not repeat a typedef (re: 3e0da770)
    
    We try to stay compatibile with C90. Turns out that repeating a
    typedef is valid only from C11 onwards, as a feature taken from
    C++. So I goofed and broke the build on old or strict compilers.
    
    src/cmd/ksh93/include/{name,shell}.h:
    - union Value: Since we will now once again have to typecast to use
      nvalue.bfp in any case, just make it a void pointer; that is how
      pointers that require typecasts are handled in every other case.
    - Since the funptr() macro needs a typecast to Shbltin_f which is
      defined in libast's shcmd.h, move this macro to shell.h which
      (unlike name.h) includes that header.
    
    src/cmd/ksh93/sh/{init,nvdisc}.c:
    - Typecast to void* when assigning to *->nvalue.bfp.
    
    src/lib/libast/include/shcmd.h:
    - Use shell_h_defined (introduced in 4491bc6a) and defs_h_defined
      to check if ksh's shell.h or defs.h were included before shcmd.h,
      instead of random macros defined by them; much clearer.

commit 48cb80713c26023105168f9f838f1e1669064c93
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 3 12:21:51 2022 +0200

    cleanup: remove redundant sh.st.execbrk flag
    
    The 'break' and 'continue' flow control commands use three int
    variables in the scoped sh.st struct:
    
            sh.st.execbrk:  nonzero if 'break' or 'continue' are used
            sh.st.breakcnt: number of levels to 'break'/'continue'
                            (negative if 'continue')
            sh.st.loopcnt:  loop level counter for 'break'/'continue'
    
    Reading the code that sets and uses these (in bltins/cflow.c and
    sh/xec.c) makes it fairly obvious that the sh.st.execbrk flag is
    redundant; it is zero if no 'break' or 'continue' should happen,
    but the same is true for sh.st.breakcnt.
    
    This commit simplifies the code by removing sh.st.execbrk.
    It also adds some comments clarifying the use of the other two.
    
    Trivia: the ancient "Version 06/03/86a" ksh source code was
    recently discovered. It uses global execbrk, breakcnt and loopcnt
    variables with the same redundancy. More evidence that the AT&T
    team always lacked a question-everything department...
    https://minnie.tuhs.org/pipermail/tuhs/2020-December/022640.html
    https://github.com/weiss/original-bsd/blob/master/local/toolchest/ksh/sh/builtin.c
    https://github.com/weiss/original-bsd/blob/master/local/toolchest/ksh/sh/xec.c

commit c2c7c9c8c81ea84661e156c4e4b6c5fbe9ec637a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 3 00:54:01 2022 +0200

    Do not avoid creating subshell for last command if there are traps
    
    Reproducer:
    
    $ ksh -c 'trap "echo OK" TERM; (kill -s TERM $$)'
    
    Actual output: none
    Expected output: OK
    
    The bug is only triggered if 'kill' is executed from a subshell
    that is optimised out due to being the last command in the script.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): case TPAR:
    - Instead of only checking for EXIT and ERR traps, do not avoid
      creating a virtual subshell if there are any traps (except DEBUG,
      SIGKILL, SIGSTOP); for this, use the sh.st.trapdontexec flag
      introduced in 88aa369e.

commit d71b313ae55eb2182ea6f5f881612c790e08fea6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 2 17:50:52 2022 +0200

    Fix signal exit status of last command in subshell (re: b90b8cd5)
    
    Reproducer (on macOS/*BSD where SIGUSR1 has signal number 30):
    
      $ ksh -c '(sh -c '\''kill -s USR1 $$'\''); echo $?'
      ksh: 54220: User signal 1
      30
    
    Expected output for $?: 286, not 30. The signal is not reflected in
    the 9th bit of the exit status.
    
    This bug was introduced for virtual subshells in b90b8cd5 but
    exists in every ksh93 version for real (forked) subshells:
    
      $ ksh -c '(ulimit -t unlimited; trap : EXIT; \
            sh -c '\''kill -s USR1 $$'\''); echo $?'
      ksh: 54267: User signal 1
      30
    
    (As of f0b0b67d, a dummy trap is needed to trigger the bug, or it
    will be masked by the exec optimization for the sh invocation.)
    
    This is caused by the exit status being masked to 8 bits when a
    subshell terminates. For a real subshell, this is inevitable as the
    kernel does this. As of b90b8cd5, virtual subshells behave in a
    manner consistent with real subshells in this regard.
    
    However, for both virtual and real subshells, if its last command
    was terminated by a signal, then that should still be reflected in
    the 9th bit of ksh's exit stauts.
    
    The root of the problem is that ksh simply cannot rely internally
    on the 9th bit of the exit status to determine if a command exited
    due to a signal. The 9th bit may be trimmed by a subshell or may be
    set by 'return' without a signal being involved. This commit fixes
    it by introducing a separate flag which will be a reliable
    indicator of this.
    
    src/cmd/ksh93/include/shell.h:
    - Add sh.chldexitsig flag (set if the last command was a child
      process that exited due to a signal).
    
    src/cmd/ksh93/sh/jobs.c: job_wait():
    - When the last child process exited due to a signal, not only set
      the 9th (SH_EXITSIG) bit of sh.exitval but also sh.chldexitsig.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Fix the virtual subshell reproducer above. After trimming the
      exit status to 8 bit, set the 9th bit if sh.chldexitsig is set.
      This needs to be done in two places: one that runs in the parent
      process after sh_subfork() and one for the regular virtual
      subshell exit.
    
    src/cmd/ksh93/sh/fault.c:
    - sh_trap(): Save and restore sh.chldexitsig so that this fix does
      not get deactivated if a trap is set.
    - sh_done():
      - Fix the real subshell reproducer above. When the last command
        of a real subshell is a child process that exited due to a
        signal (i.e., if (sh.chldexitsig && sh.realsubshell)), then
        activate the code to pass down the signal to the parent
        process. Since there is no way to pass a 9-bit exit status to a
        parent process, this is the only way to ensure a correct exit
        status in the parent shell environment.
      - When exiting the main shell, use sh.chldexitsig and not the
        unreliable SH_EXITSIG bit to determine if the 8th bit needs to
        be set for a portable exit status indicating its last command
        exited due to a signal.

commit 00b1bc685ab0b29add24c7fa1e2ee99b16da0f59
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 2 05:53:58 2022 +0200

    Do not default to emacs if explicitly turned off (re: 10e4ce5f)
    
    When a user invokes 'ksh +o emacs' they should not land in the
    emacs line editor, as they explicitly asked not to have it. So
    default to no editor mode in that case.

commit 1dd7e0125e0dc56367238b238770b366a73eb409
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 1 01:20:40 2022 +0200

    {edit,fault}.c: improve SIGWINCH and SIGINT handling
    
    The fault.c and edit.c changes in this commit were inspired by
    changes in the 93v- beta but take a slightly different approach:
    mainly, the code to update $COLUMNS and $LINES is put in its own
    function instead of duplicated in sh_chktrap() and ed_setup().
    
    src/cmd/ksh93/sh/fault.c:
    - Move code to update $COLUMNS and $LINES to a new
      sh_update_columns_lines() function so it can be reused.
    - Fix compile error on systems without SIGWINCH.
    
    src/cmd/ksh93/edit/edit.c:
    - ed_setup(): Call sh_update_columns_lines() instead of issuing
      SIGWINCH to self.
    - Change two sh_fault(SIGINT) calls to issuing the signal to the
      current process using kill(2). sh_fault() is now never called
      directly (as in the 93v- beta).
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - On non-interactive, call sh_update_columns_lines() and set the
      signal handler for SIGWINCH to sh_fault(), causing $COLUMNS and
      $LINES to be kept up to date when the terminal window is resized
      (this is handled elsewhere for interactive shells). This change
      makes ksh act like mksh, bash and zsh. (Previously, ksh required
      setting a dummy SIGWINCH trap to get auto-updated $COLUMNS and
      $LINES in scripts, as this set the SIGWINCH signal handler to
      sh_fault(). This persisted even after unsetting the trap again,
      so that was inconsistent behaviour.)
    
    src/cmd/ksh93/include/shell.h:
    - Don't define sh.winch on systems without SIGWINCH.
    
    src/cmd/ksh93/sh.1:
    - Update and tweak the COLUMNS and LINES variable documentation.
    - Move them up to the section of variables that are set by the
      shell (which AT&T should have done before).

commit 1f86dcb0847c799a03129a17d35c7c8cc07c0336
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 28 20:16:31 2022 +0300

    Fix seeking on block devices with FD 0, 1 or 2
    
    @stephane-chazelas reports:
    > A very weird issue:
    >
    > To reproduce on GNU/Linux (here as superuser)
    >
    > # truncate -s10M file
    > # export DEV="$(losetup -f --show file)"
    > # ksh -c 'exec 3<> "$DEV" 3>#((0))'   # fine
    > # ksh -c 'exec 1<> file 1>#((0))'     # fine
    > # ksh -c 'exec 1<> "$DEV" 1>#((0))'
    > ksh: 0: invalid seek offset
    >
    > Any seek offset is considered "invalid" as long as the file is a
    > block device and the fd is 0, 1 or 2. It's fine for fds above 2
    > and it's fine with any fd for regular files.
    
    Apparently, block devices are not seekable with sfio. In io.c there
    is specific code to avoid using sfio's sfseek(3) if there is no
    sfio stream in sh.sftable[] for the file descriptor in question:
    
    1398:   Sfio_t *sp = sh.sftable[fn];
    [...]
    1420:           if(sp)
    1421:           {
    1422:                   off=sfseek(sp, off, SEEK_SET);
    1423:                   sfsync(sp);
    1424:           }
    1425:           else
    1426:                   off=lseek(fn, off, SEEK_SET);
    
    For file descriptors 0, 1 or 2 (stdin/stdout/stderr), there is a
    sh.sftable[] stream by default, and it is marked as not seekable.
    This makes it return -1 in these lines in sfseek.c, even if the
    system call called via SFSK() succeeds:
    
    89:     if(f->extent < 0)
    90:     {       /* let system call set errno */
    91:             (void)SFSK(f,(Sfoff_t)0,SEEK_CUR,f->disc);
    92:             return (Sfoff_t)(-1);
    93:     }
    
    ...which explains the strange behaviour.
    
    src/lib/libast/sfio/sfseek.c: sfseek():
    - Allow for the possibility that the fallback system call might
      succeed: let it handle both errno and the return value.
    
    Resolves: https://github.com/ksh93/ksh/issues/318

commit 3e0da7702ec06215aa3f9ccc3b83edfd6824d9ba
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 24 15:25:05 2022 +0100

    Another round of tweaks
    
    Notable changes:
    - Change a bunch of uses of memcmp(3) to compare strings (which can
      cause buffer read overflows) to strncmp(3).
    - src/cmd/ksh93/include/name.h: Eliminate redundant Nambfp_f type.
      Replace with Shbltin_f type from libast's shcmd.h. Since that is
      not guaranteed to be included here, repeat the type definition
      here without fully defining the struct (which is valid in C).

commit b75752a1f6944e42e9fad40a23aeb0aacc005913
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 23 02:56:18 2022 +0100

    lex.c: prevent restoring outdated stack pointer
    
    Lexical levels are stored in a dynamically grown array of int values
    grown by the stack_grow function. The pointer lex_match and the
    maximum index lex_max are part of the lexer state struct that is now
    saved and restored in various places -- see e.g. f99ce517, 2322f939.
    If the stack needs to be grown, it is reallocated in stack_grow()
    using sh_realloc(). If that happens between saving and restoring the
    lexer state, then an outdated pointer is restored, and crash.
    
    src/cmd/ksh93/include/shlex.h,
    src/cmd/ksh93/sh/lex.c:
    - Take lex_match and lex_max out of the lexer state struct and make
      them separate static variables.
    
    src/cmd/ksh93/edit/edit.c:
    - While we're at it, save and restore the lexer state in a way that
      is saner than the 93v- beta approach (re: f99ce517) as well as
      more readable. Instead of permanently allocating memory, use a
      local variable to save the struct. Save/restore directly around
      the sh_trap() call that actually needs this done.
    
    Resolves: https://github.com/ksh93/ksh/issues/482

commit dfe836d44c775a49d31c17e4f30680b428ef98f7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 22 17:02:25 2022 +0100

    sh_setenviron(): deactivate compound assignment prefix
    
    Reproducers:
    
    $ ksh -c 'typeset -a arr=( ( (a $(($(echo 1) + 1)) c)1))'
    ksh: echo: arr[0]._AST_FEATURES=CONFORMANCE - ast UNIVERSE - ucb: cannot be an array
    ksh: [1]=1: invalid variable name
    $ ksh -c 'typeset -a arr=( (a $(($(echo 1) + 1)) c)1)'
    ksh: echo: arr._AST_FEATURES=CONFORMANCE - ast UNIVERSE - ucb: is not an identifier
    ksh: [1]=1: invalid variable name
    
    src/cmd/ksh93/sh/name.c: sh_setenviron():
    - Save and clear the current compound assignment prefix (sh.prefix)
      while assigning to the _AST_FEATURES variable.

commit ca06aef2f82385aee0ebfbcdcce1c4dd9c1f7385
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 22:21:31 2022 +0100

    tweak: make better use of funptr() macro and sh.bltinfun pointer
    
    src/cmd/ksh93/include/name.h:
    - Include the ususally-wanted (Shbltin_f) typecast in funptr().
    
    Various files:
    - Change several direct foo->nvalue.bfp usages to funptr(np).
    - Reduce explicit typecasts after the name.h change.
    - To determine if we are (or just were) running a certain built-in
      command, instead of comparing sh.bltindata.bnode with a builtin
      table node, use sh.bltinfun to directly compare the builtin's
      function; this is more readable and efficient.

commit 73028c92a0eb8df16d090d51645f874daee66291
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 19:50:35 2022 +0100

    More 'command -x' robustification (re: 6f6b2201, 6a0e9a1a, 66e1d446)
    
    The xargs-like functionality of 'command -x' was still failing with
    E2BIG in cases or on systems where the environment variables list
    is very large. For instance, on a default NixOS installation it's
    about 50k by default (absurd; *each* process carries this weight).
    
    This commit tweaks the feature test and introduces a runtime
    fallback if it still fails.
    
    POSIX: "The number of bytes available for the new process' combined
    argument and environment lists is {ARG_MAX}. It is implementation-
    defined whether null terminators, pointers, and/or any alignment
    bytes are included in this total."
    https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html
    
    More recommended reading:
    https://mina86.com/2021/the-real-arg-max-part-1/
    https://mina86.com/2021/the-real-arg-max-part-2/
    
    So, operating systems are free to consume ARG_MAX space in whatever
    bizarre way they want, and may even come up with more innovative
    ways to waste buffer space in future. <sigh>
    
    command_xargs() allows for the possibility of adding a certain
    number of extra bytes per argument to account for pointers and
    whatnot. As of this commit, we still start off from the value that
    was determined by the _arg_extrabytes test in features/externs, but
    path_spawn() will now increase that number at runtime and retry if
    E2BIG still occurs. Hopefully this makes it future-proof.
    
    src/cmd/ksh93/features/externs:
    - Rename generated ARG_EXTRA_BYTES macro to _arg_extrabytes for
      better naming consistency with other iffe feature tests.
    - Tweaks to avoid detecting 9 extra bytes instead of 8 on some
      versions of 64-bit Linux (it needs the size of a 64 bit pointer).
    - Show the result in the iffe output.
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/init.c:
    - Do not store getconf(CONF_ARG_MAX) at init time; on Linux, this
      value may be changed dynamically (via ulimit -s), so it must be
      re-obtained on every use.
    
    src/cmd/ksh93/sh/path.c:
    - command_xargs():
      - Use a static global variable for the number of extra bytes per
        argument. Initialise it with the results of the feature test.
        This allows increasing it at runtime if an OS does something
        weird causing an E2BIG failure.
      - Abort instead of return if command_xargs() is called with
        sh.xargmin < 0; this should never happen.
      - To allow retrying without crashing, restore saved args before
        returning -1.
      - Leave more generous space for the environment -- half the size
        of the existing environment. This was experimentally determined
        to be needed to keep Linux and macOS happy.
      - Instead of crashing, return with E2BIG if there is too little
        space to run.
      - Get rid of unnecessary (void*) typecasts; we no longer pretend
        to be compatible with C++ (re: a34e8319).
      - Remove a couple of dead 'if(saveargs) free(saveargs);'
        statements; at those points, saveargs is known to be NULL.
      - Return -2 instead of -1 when retrying would be pointless.
    - path_spawn():
      - When command_xargs() returns -1 and the error is E2BIG,
        increase the number of extra bytes by the size of a char*
        pointer and try again. Give up if adding bytes the size of 8
        char* pointers fails.
    
    src/cmd/ksh93/sh/xec.c: check_exec_optimization():
    - Do not use this optimization if we are running 'command -x';
      I noticed some instances of the PATH search yielding incorrect
      results if we do. TODO: work this out at some point.

commit 3c8ca1c9c1ff595c1d124d33b8f896d9049fb73f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 18:41:28 2022 +0100

    Fix more "/dev/null: cannot create" (re: 57cbbce6)
    
    Reproducer:
    
      trap : USR1
      while :; do kill -s USR1 $$ || exit; done &
      while :; do : >/dev/null; done
    
    It can take between a fraction of a second and a few minutes, but
    eventually it will fail like this:
    
      $ ksh foo
      foo[3]: /dev/null: cannot create
      kill: 77946: no such process
    
    It fails similarly with "cannot open" if </dev/null is used instead
    of >/dev/null.
    
    This is the same problem as in the referenced commit, except when
    handling traps -- so the same fix is required in sh_fault().

commit 7ab9ba197176ead0f7ce2f33234bffd1b85ced9e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 16:09:35 2022 +0100

    do not sh_close() a -1 file descriptor (re: 94fc9837, 57cbbce6)
    
    Researching #483 revealed several instances in coprocess cleanup
    where sh_close() is called with a file descriptor of -1 (which
    flags that the pipe is already closed). As of ec6639f5, this sets
    errno to EBADF. While the race condition triggered by this was
    fixed in 57cbbce6, it's still better to avoid it.
    
    This re-applies most of the changes reverted in 94fc9837.

commit 57cbbce63ef5b257e9b840f2c038def3a68f7e59
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 14:46:22 2022 +0100

    Fix "/dev/null: cannot create [Bad file descriptor]" (re: ec6639f)
    
    Reproducer for a race condition:
    
      typeset -i i
      cat=${ command -pv cat; }
      for((i=0;i<20000;i++))
      do    printf '\r%d ' "$i"
            ksh |&
            cop=$!
            print -p $'print hello | '$cat$'\nprint '$exp
            read -t 1 -p
            read -t 1 -p
            redirect 5<&p 6>&p 5<&- 6>&-
            { sleep .4; kill $cop; } &
            spy=$!
            if    wait $cop 2>/dev/null # "/dev/null: cannot create"?
            then  kill $spy
            else  kill $spy; exit       # boom
            fi
            wait
      done
    
    Result on my system. The time it takes to fail varies a lot:
    
      $ arch/*/bin/ksh foo
      717 foo[13]: /dev/null: cannot create [Bad file descriptor]
      $
    
    Analysis:
    
    errno may get a value during SIGCHLD processing. This may cause the
    functions called by the signal interrupt to call sh_close() with a
    negative file descriptor, giving errno the EBADF value as this loop
    in sh_open() is interrupted:
    
    ksh/src/cmd/ksh93/sh/io.c in 94fc983
    851:     while((fd = open(path, flags, mode)) < 0)
    852:            if(errno!=EINTR || sh.trapnote)
    853:                    return(-1);
    
    Commit ec6639f caused sh_close() to set errno to EBADF if it gets
    called with a negative file descriptor. In the cleanup of
    coprocesses during the SIGCHLD interrupt handling, there are
    several locations where sh_close() may be called with a negative
    file descriptor, which now sets errno to EBADF. If SIGCHLD is
    handled between open() being interrupted and the check for
    errno!=EINTR, sh_open() will return -1 instead of retrying, causing
    sh_redirect() to issue the "cannot create" error message.
    
    SIGCHLD is issued whenever a process (such as the coprocess in the
    reproducer) terminates. job_reap() is called (via job_waitsafe())
    to handle this. That function does not always restore errno, which
    allowed this race condition to happen.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - Always save/restore errno.
    
    Resolves: https://github.com/ksh93/ksh/issues/483

commit 94fc9837b1ada45bbb14b9e2d9a709b80400fc7b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 12:53:15 2022 +0100

    Revert "Fix "/dev/null: cannot create [Bad file descriptor]" (re: ec6639f)"
    
    This reverts commit 43c4501ca2408181af58cb284e28cdda4eef82da.
    
    It's broken:
    
    test coprocess begins at 2022-06-20+02:34:59
            coprocess.sh[198]: FAIL: traps when reading from cat coprocess not working
            coprocess.sh[198]: FAIL: traps when reading from /bin/cat coprocess not working
    test coprocess failed at 2022-06-20+02:35:01 with exit code 2 [ 32 tests 2 errors ]
    
    Reopens: https://github.com/ksh93/ksh/issues/483

commit 43c4501ca2408181af58cb284e28cdda4eef82da
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 20 03:16:57 2022 +0100

    Fix "/dev/null: cannot create [Bad file descriptor]" (re: ec6639f)
    
    Intermittent regression test failure:
    
    test coprocess begins at 2022-02-08+23:41:52
    /usr/local/src/ksh93/ksh/src/cmd/ksh93/tests/coprocess.sh[116]: /dev/null: cannot create [Bad file descriptor]
            coprocess.sh[118]: FAIL: /bin/cat coprocess hung after 'exec 5<&p 6>&p; exec 5<&- 6>&-'
    test coprocess failed at 2022-02-08+23:41:56 with exit code 1 [ 33 tests 1 error ]
    
    The coprocess didn't hang; the 2>/dev/null redirection in the
    regression test somehow failed.
    
    Running the regression test in a loop 10000 times is a fairly
    reliable way of reproducing the failure on my system. This has
    allowed me to find the commit that introduced it. It is: ec6639f
    
    How odd. That commit merely sets errno to EBADF if sh_close() is
    called with a file descriptor < 0. I don't understand how this
    causes a race condition.
    
    But calling abort() in the location of the ec6639f patch did allow
    me to trace all the sh_close() calls with a negative file
    descriptor. Those shouldn't be happening in any case.
    
    All those sh_close() calls were related to co-processes, which that
    regression test also tests. A co-process pipe that is not in use is
    set to -1 so we need to avoid calling sh_close() if that happened.
    
    This commit does that (as well as making some consistency tweaks)
    and it reliably makes the race condition go away on my system. The
    "why" of this remains a mystery as the only difference is that
    errno is not set to EBADF in these situations, and both
    sh_redirect() and sh_open() explicitly set errno to 0.
    
    Resolves: https://github.com/ksh93/ksh/issues/483

commit eb3ee932689634dabf67cfcb155aa09a63b3bb78
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 18 22:21:20 2022 +0100

    Yet more accumulated tweaks and cleanups
    
    Notable changes:
    
    src/cmd/ksh93/bltins/trap.c: b_trap():
    - Disable the unadvertised 'trap + SIG' feature in POSIX mode; it's
      not compatible as '+' is a legitimate command name.
    
    src/cmd/ksh93/data/builtins.c:
    - Give "pwd", "alarm" and "times" the BLT_ENV flag for better
      performance. There is no need for those to be stoppable.
    
    src/cmd/ksh93/sh/xec.c:
    - sh_eval(): Remove a "temporary tksh hack" and associated
      sh.fn_reset flag.
    - sh_exec():
      - Remove now-used 'unpipe' flag and one remaining dead check for
        it (re: 42becab6, 2dfdc4fb).
      - Fix unnecessary and confusing reuse of the 'type' variable.
    
    src/lib/libast/comp/conf.sh:
    - trap: Use 'rm -rf' instead of 'rm -f' to remove temp executables;
      on macOS, they may include *.dSYM directories.

commit 49b90ef4e54219f99dda03477c0a8d4cbaf12101
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 18 19:17:44 2022 +0100

    sh_subshell(): remove nofork flag and some dead code
    
    Part of the *subshell_data/*sp struct:
    92:     int             nofork;
    
    In subshell.c, sh_subshell(), before entering a virtual subshell:
    628:                    if(!(sp->nofork = sh_state(SH_NOFORK)))
    629:                            sh_onstate(SH_NOFORK);
    ...and upon restoring when leaving the subshell:
    696:            if(!sp->nofork)
    697:                    sh_offstate(SH_NOFORK);
    
    This code is clearly nonsense, because 'sh_state(SH_NOFORK)' is
    a static expression that always has the value 1. This can be seen
    by looking at the definitions in defs.h:
    194:    #define sh_state(x)     ( 1<<(x))
    ...and in shell.h:
    68:     #define SH_NOFORK       0       /* set when fork not necessary */
    
    So, sh_state(SH_NOFORK) == 1<<(0) == 1, meaning sp->nofork is
    always 0, meaning the statements conditional on it are never
    executed. We can get rid of all of this; it's dead code.
    
    In subshell.c on line 628, perhaps sh_isstate(SH_NOFORK) was meant
    instead of sh_state(SH_NOFORK) -- but that state flag is supposed
    to signal that forking is not necessary when running an external
    command, that we can potentially 'exec' it directly if it's the
    last command in the subshell -- which makes no sense at all when
    being in a virtual subshell which does not have its own process.
    
    This dead code was added in version 2008-09-21 ksh93t.
    
    The subsequent 'flags |= sh_state(SH_NOFORK)' (subshell.c line 630)
    probably makes more sense, since this sets execflg in sh_exec(),
    which is also used for optimising redirections (avoids bothering to
    store previous state if it's the last command in the subshell).

commit 88aa369eb8ceeae489e65a41f14429721744bdbf
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 18 16:44:30 2022 +0100

    Fix the exec optimisation mess (re: 17ebfbf6, 6701bb30, f0b0b67d)
    
    This commit supersedes @lijog's Solaris patch 280-23332860 (see
    17ebfbf6) as this is a more general fix that makes the patch
    redundant. Of course its associated regression tests stay.
    
    Reproducer script:
    
            trap 'echo SIGUSR1 received' USR1
            sh -c 'kill -s USR1 $PPID'
    
    Run as a normal script.
    Expected behaviour: prints "SIGUSR1 received"
    Actual behaviour: the shell invoking the script terminates. Oops.
    
    As of 6701bb30, ksh again allows an exec-without-fork optimisation
    for the last command in a script. So the 'sh' command gets the same
    PID as the script, therefore its parent PID ($PPID) is the invoking
    script and not the script itself, which has been overwritten in
    working memory. This shows that, if there are traps set, the exec
    optimisation is incorrect as the expected process is not signalled.
    
    While 6701bb30 reintroduced this problem for scripts, this has
    always been an issue for certain other situations: forked command
    substitutions, background subshells, and -c option argument
    scripts. This commit fixes it in all those cases.
    
    In sh_exec(), case TFORK, the optimisation (flagged in no_fork) was
    only blocked for SIGINT and for the EXIT and ERR pseudosignals.
    That is wrong. It should be blocked for all signal and pseudosignal
    traps, except DEBUG (which is run before the command) and SIGKILL
    and SIGSTOP (which cannot be trapped).
    
    (I've also tested the behaviour of other shells. One shell, mksh,
    never does an exec optimisation, even if no traps are set. I don't
    know if that is intentional or not. I suppose it is possible that a
    script might expect to receive a signal without trapping it first,
    and they could conceivably be affected the same way by this exec
    optimisation. But the ash variants (e.g. Busybox ash, dash, FreeBSD
    sh), as well as bash, yash and zsh, all do act like this, so the
    behaviour is very widespread. This commit makes ksh act like them.)
    
    Multiple files:
    - Remove the sh.errtrap, sh.exittrap and sh.end_fn flags and their
      associated code from the superseded Solaris patch.
    
    src/cmd/ksh93/include/shell.h:
    - Add a scoped sh.st.trapdontexec flag for sh_exec() to disable
      exec-without-fork optimisations. It should be in the sh.st scope
      struct because it needs to be reset in subshell scopes.
    
    src/cmd/ksh93/bltins/trap.c: b_trap():
    - Set sh.st.trapdontexec if any trap is set and non-empty (an empty
      trap means ignore the signal, which is inherited by an exec'd
      process, so the optimisation is fine in that case).
    - Only clear sh.st.trapdontexec if we're not in a ksh function
      scope; unlike subshells, ksh functions fall back to parent traps
      if they don't trap a signal themselves, so a ksh function's
      parent traps also need to disable the exec optimisation.
    
    src/cmd/ksh93/sh/fault.c: sh_sigreset():
    - Introduce a new -1 mode for sh_funscope() to use, which acts like
      mode 0 except it does not clear sh.st.trapdontexec. This avoids
      clearing sh.st.trapdontexec for ksh functions scopes (see above).
    - Otherwise, clear sh.st.trapdontexec whenever traps are reset.
    
    src/cmd/ksh93/sh/xec.c: check_exec_optimization():
    - Consolidate all the exec optimisation logic into this function,
      including the logic from the no_fork flag in sh_exec()/TFORK.
    - In the former no_fork flag logic, replace the three checks for
      SIGINT, ERR and EXIT traps with a single check for the
      sh.st.trapdontexec flag.

commit f0b0b67d437d857f13a8b0eeec7942884efc3682
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 18 12:45:51 2022 +0100

    Allow exec of last command in forked non-bg subshell (re: 2124f146)
    
    The exec optimization only happened in background subshells and not
    in regular subshells when they had forked via sh_subfork(), which
    makes little sense.
    
    src/cmd/ksh93/sh/xec.c: sh_exec: case TLST:
    - A subshell is executed as a list of commands which is TLST. If
      the shell had not forked at the beginning of the subshell, the
      sh_state(SH_FORKED) flag was not passed on to recursive sh_exec()
      invocations, and a sh_subfork() event did not change this. To fix
      this, re-check for the SH_FORKED state and pass that bit on to
      the recursive sh_exec() invocation if set (note that sh_isstate()
      returns a bitmask and not a boolean value).
    
    src/cmd/ksh93/sh/subshell.c: sh_subfork():
    - Remove redundant sh_onstate(SH_FORKED); this is already done in
      sh_fork() which this function calls.

commit 2124f1462c80837636d3710974e9c73340faaf83
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 18 11:21:03 2022 +0100

    Fix incorrect exec optimisation with monitor/pipefail on
    
    Reproducer script:
        tempfile=/tmp/out2.$$.$RANDOM
        bintrue=$(whence -p true)
        for opt in monitor pipefail
        do
                (
                        set +x -o "$opt"
                        (
                                sleep .05
                                echo "ok $opt" >&2
                        ) 2>$tempfile | "$bintrue"
                ) &
                wait
                cat "$tempfile"
                rm -f "$tempfile"
        done
    
    Expected output:
        ok monitor
        ok pipefail
    
    Actual output:
        (none)
    
    The 'monitor' and 'pipefail' options are supposed to make the shell
    wait for the all commands in the pipeline to terminate and not only
    the last component, regardless of whether the pipe between the
    component commands is still open. In the failing reproducer, the
    dummy external true command is subject to an exec optimization, so
    it replaces the subshell instead of forking a new process. This is
    incorrect, as the shell is no longer around to wait for the
    left-hand part of the pipeline, so it continues in the background
    without being waited for. Since it writes to standard error after
    .05 seconds (after the pipe is closed), the 'cat' command reliably
    finds the temp file empty. Without the sleep this would be a race
    condition with unpredictable results.
    
    Interestingly, this bug is only triggered for a (background
    subshell)& and not for a forked (regular subshell). Which means the
    exec optimization is not done for a forked regular subshell, though
    there is no reason not to. That will be fixed in the next commit.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - case TFORK: Never allow an exec optimization if we're running a
      command in a multi-command pipeline (pipejob is set) and the
      shell needs to wait for all pipeline commands, i.e.: either the
      time keyword is in use, the SH_MONITOR state is active, or the
      SH_PIPEFAIL option is on.
    - case TFIL: Fix the logic for setting job.waitall for the
      non-SH_PIPEFAIL case. Do not 'or' in the boolean value but assign
      it, and include the SH_TIMING (time keyword in use) state too.
    - case TTIME: After that fix in case TFIL, we don't need to bother
      setting job.waitall explicitly here.
    
    src/cmd/ksh93/sh.1:
    - Add missing documentation for the conditions where the shell
      waits for all pipeline components (time, -o monitor/pipefail).
    
    Resolves: https://github.com/ksh93/ksh/issues/449

commit d247638a7f02f5ec96c0afc6240e5c4adad5ed2b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 15 04:38:01 2022 +0100

    Forking workaround for converting to associative array in subshell
    
    $ arch/*/bin/ksh -xc 'typeset -a a=(1 2 3); \
      (typeset -A a; typeset -p a); typeset -p a'
    typeset -A a=()
    typeset -a a=(1 2 3)
    
    The associative array in the subshell is empty, so the conversion
    failed. So far, I have been unsuccessful at fixing this in the
    array and/or virtual subshell code (a patch that fixes it there
    would still be more than welcome).
    
    As usual, real subshells work correctly, so this commit adds
    another forking workaround. The use case is rare and specific
    enough that I have no performance concerns.
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - Fork a virtual subshell if we're actually converting a variable
      to an associative array, i.e.: the NV_ARRAY (-A, associative
      array) attribute was passed, there are no assignments (sh.envlist
      is NULL), and the variable is not unset.
    
    src/cmd/ksh93/tests/arith.sh:
    - Fix the "Array subscript quoting test" tests that should not have
      been passing and that correctly failed after this fix; they used
      'typeset -A' without an assignment in a subshell, assuming it was
      unset in the parent shell, which it wasn't.
    
    Resolves: https://github.com/ksh93/ksh/issues/409

commit 6605c68f1f9940bff289e47310bf8a5443544077
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 15 01:29:04 2022 +0100

    cleanup: libast: remove pre-fork(2) code (re: 7b0e0776)
    
    I had removed the legacy code for systems without fork(2) from
    ksh93, but not from libast. This commit deos that.

commit 7e317c5d67d6ff336e74ccd7acdb25832bc1ebc5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 14 13:18:48 2022 +0100

    parse.c: fix use-after-free probs related to funstaks()
    
    When the funstaks() function deletes a stack, other code could
    still reference that stack's pointer, at least if a script's DEBUG
    trap changed the function context by assigning to ${.sh.level}.
    This crashed @ormaaj's funcname.ksh script in certain contexts, at
    least when run as a dot script or in a virtual subshell.
    
    This allows that script to run in all contexts by making
    funstaks(s) set the stack pointer to NULL after deleting the stack
    and making various other points in the code check for a null
    pointer before dereferencing it.
    
    This may not be the most elegant fix but (in my testing) it does
    work, even when compiling ksh with AddressSanitiser.
    
    Thanks to @JohnoKing for help researching this problem.
    
    Resolves: https://github.com/ksh93/ksh/issues/212

commit 2dfdc4fb3573e17b714551e1ea3b109847e783de
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 13 23:34:46 2022 +0100

    rm bg job double-fork workaround (re: 3d1a4722, 5a9d13f2, e3d7bf1d)
    
      $ ksh -c '(sleep 1 & echo ${.sh.stats.forks}); :'
      2
    
    The shell forks twice. A virtual subshell that launches a
    background job forks first before forking the background job.
    
    As discussed in the P.S. in e3d7bf1d, this is caused by the
    following code in sh_exec() in xec.c (as since changed in 4ce486a7,
    e40aaa8a, 88a1f3d6, and 42becab6):
    
    1505:   if((type&(FAMP|TFORK))==(FAMP|TFORK))
    1506:   {
    1507:           if(sh.comsub && !(sh.fdstatus[1]&IONOSEEK))
    1508:                   unpipe = iousepipe();
    1509:           if(!sh.subshare)
    1510:                   sh_subfork();
    1511:   }
    
    This smells like an ugly workaround. It forks a virtual subshell
    whenever a background job is launched within it, whether there is
    an actual reason to do this or not. Researching the ksh93-history
    repo reveals that this workaround had already gone through many
    different versions before we restarted ksh development.
    
    In the e3d7bf1d P.S. discussion, four regression test failures were
    caused by removing this workaround. I recently tried it again and
    two of the failures were already gone. (Testing which commits fix
    it would require recompiling every 93u+m commit with the workaround
    patched out and I can't be bothered.) Two were left: the two
    signal.sh failures. The last commit (3d1a4722) fixed those as well.
    
    So I believe we no longer need this workaround, which never did
    make very much sense. Removing it significantly improves the
    performance of ksh when launching background jobs from subshells.

commit 3d1a47225abae82cc3508763376d2006aa295713
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 13 19:41:36 2022 +0100

    Fix subshell trap integrity, e.g. re-trapping a signal in subshell
    
    Ksh handles local traps in virtual subshells the same way as local
    traps in ksh-style shell functions, which can cause incorrect
    operation.
    
    Reproducer script:
    
            trap 'echo "parent shell trap"; exit 0' USR1
            (trap 'echo "subshell trap"' USR1; kill -USR1 $$)
            echo wrong
    
    Output on every ksh93 version: 'wrong'
    Output on every other shell: 'parent shell trap'
    
    The ksh93 output is wrong because $$ is the PID of the main shell,
    therefore 'kill -USR1 $$' from a subshell needs to issue SIGUSR1 to
    the main shell and trigger the 'echo SIGUSR1' trap.
    
    This is an inevitable consequence of processing signals in a
    virtual subshell. Signals are a process-wide property, but a
    virtual subshell and the parent shell share the same process.
    Therefore it is not possible to distinguish between the parent
    shell and subshell trap.
    
    This means virtual subshells are fundamentally incompatible with
    receiving signals. No workaround can make this work properly.
    
    Ksh could either assume the signal needs to be caught by the
    subshell trap (wrong in this case, but right in others) or by the
    parent shell trap. But it does neither and just gives up and does
    nothing, which I suppose is the least bad way of doing it wrong.
    
    As another example, consider a subshell that traps a signal, then
    passes its own process ID (as of 9de65210, that's ${.sh.pid}) to
    another process to say "here is where to signal me". A virtual
    subshell will send it the PID that it shares with the the parent
    shell. Even if a virtual subshell receives the signal correctly, it
    may fork mid-execution afterwards, depending on the commands that
    it runs (and this varies by implementation as we fix or work around
    bugs). So its PID could be invalidated at any time.
    
    Forking a virtual subshell at the time of trapping a signal is the
    only way to ensure a persistent PID and correct operation.
    
    src/cmd/ksh93/bltins/trap.c: b_trap():
    - Fork when trapping (or ignoring) a signal in a virtual subshell.
      (There's no need to fork when trapping a pseudosignal.)
    
    src/cmd/ksh93/tests/signal.sh:
    - Add tests. These are simplified versions of tests already there,
      which issued 'kill' as a background job. Currently, running a
      background job causes a virtual subshell to fork before forking
      the 'kill' background job (or *any* background job, see e3d7bf1d)
      -- an ugly partial workaround that I believe just became
      redundant and which I will remove in the next commit.

commit 5a9d13f20ddaca9fb8827e476fb64eed970ea7f6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 13 11:18:03 2022 +0100

    remove ( simple_command & ) optimisation (re: e3d7bf1d)
    
    I didn't trust this back in e3d7bf1d (which disabled it for
    interactive shells) and I trust it less now. In af6a32d1/6b380572,
    this was also disabled for virtual subshells as it caused program
    flow corruption there. Now, on macOS 10.14.6, a crash occurs when
    repeatedly running a command with this optimisation:
    
    $ ksh -c 'for((i=0;i<100;i++));do print -n "$i ";(sleep 1&);done'
    0 1 2 3 4 5 6 7 Illegal instruction
    
    Oddly enough it seems that I can only reproduce this crash on macOS
    -- not on Linux, OpenBSD, or Solaris. It could be a macOS bug,
    particularly given the odd message in the stack trace below.
    
    I've had enough, though. Out it comes. Things now work fine, the
    reproducer is fixed on macOS, and it didn't optimise much anyway.
    
    The double-fork issue discussed in e3d7bf1d remains.
    ________
    For future reference, here's an lldb debugger session with a stack
    trace. It crashes on calling calloc() (via sh_calloc(), via
    sh_newof()) in jobsave_create(). This is not an invalid pointer
    problem as we're allocating new memory, so it does look like an OS
    bug. The "BUG IN CLIENT OF LIBPLATFORM" message is interesting.
    
    $ lldb -- arch/*/bin/ksh -c 'for((i=0;i<100;i++));do print -n "$i ";(sleep 1&);done'
    (lldb) target create "arch/darwin.i386-64/bin/ksh"
    Current executable set to 'arch/darwin.i386-64/bin/ksh' (x86_64).
    (lldb) settings set -- target.run-args  "-c" "for((i=0;i<100;i++));do print -n \"$i \";(sleep 1&);done"
    (lldb) run
    error: shell expansion failed (reason: lldb-argdumper exited with error 2). consider launching with 'process launch'.
    (lldb) process launch
    Process 35038 launched: '/usr/local/src/ksh93/ksh/arch/darwin.i386-64/bin/ksh' (x86_64)
    0 1 2 3 4 5 6 7 8 9 Process 35038 stopped
    * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
        frame #0: 0x00007fff70deb1c2 libsystem_platform.dylib`_os_unfair_lock_recursive_abort + 23
    libsystem_platform.dylib`_os_unfair_lock_recursive_abort:
    ->  0x7fff70deb1c2 <+23>: ud2
    
    libsystem_platform.dylib`_os_unfair_lock_unowned_abort:
        0x7fff70deb1c4 <+0>:  movl   %edi, %eax
        0x7fff70deb1c6 <+2>:  leaq   0x1a8a(%rip), %rcx        ; "BUG IN CLIENT OF LIBPLATFORM: Unlock of an os_unfair_lock not owned by current thread"
        0x7fff70deb1cd <+9>:  movq   %rcx, 0x361cb16c(%rip)    ; gCRAnnotations + 8
    Target 0: (ksh) stopped.
    (lldb) bt
    * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
      * frame #0: 0x00007fff70deb1c2 libsystem_platform.dylib`_os_unfair_lock_recursive_abort + 23
        frame #1: 0x00007fff70de7c9a libsystem_platform.dylib`_os_unfair_lock_lock_slow + 239
        frame #2: 0x00007fff70daa3bd libsystem_malloc.dylib`tiny_malloc_should_clear + 188
        frame #3: 0x00007fff70daa20f libsystem_malloc.dylib`szone_malloc_should_clear + 66
        frame #4: 0x00007fff70dab444 libsystem_malloc.dylib`malloc_zone_calloc + 99
        frame #5: 0x00007fff70dab3c4 libsystem_malloc.dylib`calloc + 30
        frame #6: 0x000000010003fa5d ksh`sh_calloc(nmemb=1, size=16) at init.c:264:13
        frame #7: 0x000000010004f8a6 ksh`jobsave_create(pid=35055) at jobs.c:272:8
        frame #8: 0x000000010004ed42 ksh`job_reap(sig=20) at jobs.c:363:9
        frame #9: 0x000000010004ff6f ksh`job_waitsafe(sig=20) at jobs.c:511:3
        frame #10: 0x00007fff70de9b5d libsystem_platform.dylib`_sigtramp + 29
        frame #11: 0x00007fff70d39ac4 libsystem_kernel.dylib`__fork + 12
        frame #12: 0x00007fff70c57d80 libsystem_c.dylib`fork + 17
        frame #13: 0x000000010009590d ksh`sh_exec(t=0x0000000101005d30, flags=4) at xec.c:1883:16
        frame #14: 0x0000000100096013 ksh`sh_exec(t=0x0000000101005d30, flags=4) at xec.c:2019:4
        frame #15: 0x0000000100096c4f ksh`sh_exec(t=0x0000000101005a40, flags=5) at xec.c:2213:9
        frame #16: 0x0000000100096013 ksh`sh_exec(t=0x0000000101005a40, flags=5) at xec.c:2019:4
        frame #17: 0x000000010001c23f ksh`exfile(iop=0x0000000100405750, fno=-1) at main.c:603:4
        frame #18: 0x000000010001b23c ksh`sh_main(ac=3, av=0x00007ffeefbff4f0, userinit=0x0000000000000000) at main.c:365:2
        frame #19: 0x0000000100000776 ksh`main(argc=3, argv=0x00007ffeefbff4f0) at pmain.c:45:9
        frame #20: 0x00007fff70bfe3d5 libdyld.dylib`start + 1

commit e7ed6790390a0860994357fc12437e7933ff692b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 12 21:17:33 2022 +0100

    sh_exec(), sh_ntfork(): rm leftover pre-fork(2) code (re: 7b0e0776)
    
    I had missed something while removing the legacy code for ancient
    systems without fork(2). The SH_NTFORK bit flag was only ever
    passed to sh_exec() from the version of sh_ntfork() that was
    compiled on systems without fork(2). With that call removed, this
    flag is now completely unused. This commit removes the flag and the
    code that is never executed since that flag is never passed.

commit 4b66ea424dd66cbc3c15573b2c9821a232332dd8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 12 15:31:17 2022 +0100

    [v1.1] default 3-decimals output for 'time'/'times' (re: a1af93f3)
    
    The 'time' keyword and 'times' built-in now display three digits
    after the decimal point by default. Up to six remain configurable
    in TIMEFORMAT, but that was excessive as a default and annoyed more
    than it informed. When benchmarking anything, the margin of error
    obliterates the significance of anything after the second position
    following the decimal point, so three is plenty.
    
    The POSIX mode now also disables left-hand zero-padding of seconds
    in 'time'/'times' output. The standard specifies the output format
    quite exactly and zero-padding is not in it.

commit 11d1ae28d265db277ab50aa225fdd28d6ce889a9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 12 12:44:17 2022 +0100

    sh_exec(): do not save/restore PWD for non-BLT_ENV builtins
    
    The question-everything department reporting for duty once again.
    
    Version 2005-05-22 ksh93q+ introduced code that saves the inode and
    path of the present working directory before invoking a built-in
    command without the BLT_ENV attribute (see data/builtins.c). When
    the built-in completes, it gets the PWD's inode again and compares.
    If they're different, it uses chdir(2) to change back to the old
    working directory.
    
    The corresponding commit in the ksh93-history repo contains no
    relevant entries in src/cmd/ksh93/RELEASE so no form of rationale
    for this addition is available.
    
    Changing back to a previous directory by path name is unsafe,
    because the directory may have been removed and even replaced by a
    completely different one by then. This is a common vector for
    symlink attacks.
    
    In the 93v- beta, this code was improved to use fstat(2) and
    fchdir(2) to guarantee changing back to the same directory.
    
    But is this worth doing at all? Why should a built-in not be able
    to change the current working directory? If it's not intended to do
    this, it simply should not do it. Even in the case of dynamically
    loadable third-party built-ins, we're running built-in code in the
    same process as ksh, so we've already decided the code is trusted.
    If it's not, there are far worse things than $PWD to worry about.
    
    Not only that, this code comes at a performance hit as the file
    system is accessed before and after running a non-BLT_ENV builtin.
    
    Before removing this:
    
    $ arch/*/bin/ksh.old -c 'typeset -i i; \
      time for((i=0;i<=100000;i++)); do sleep 0; done >/dev/null'
    
    real    0m00.863135s
    user    0m00.428718s
    sys     0m00.433581s
    
    After removing this:
    
    $ arch/*/bin/ksh -c 'typeset -i i; \
      time for((i=0;i<=100000;i++)); do sleep 0; done >/dev/null'
    
    real    0m00.263084s
    user    0m00.262078s
    sys     0m00.000632s
    
    Removing this nonsense causes no regressions -- which is obvious.
    because none of our built-ins except 'cd' change the PWD.
    
    (On a side note, I should probably change the new default
    $TIMEFORMAT [re: a1af93f3] to show three digits after the decimal
    point. Six is excessive, especially as a default.)

commit abbd9ffa8a332264d4c87affa00ad6cb14dec1c5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 12 05:35:15 2022 +0100

    Another build system overhaul (re: 35672208, 580ff616, 6cc2f6a0)
    
    So far we've been handling AST release build and git commit flags
    and ksh SHOPT_* compile time options in the generic package build
    script. That was a hack that was necessary before I had sufficient
    understanding of the build system. Some of it did not work very
    well, e.g. the correct git commit did not show up in ${.sh.version}
    when compiling from a git repo.
    
    As of this commit, this is properly included in the mamake
    dependency tree by handling it from the libast and ksh93 Mamfiles,
    guaranteeing they are properly up to date.
    
    For a release build, the _AST_ksh_release macro is renamed to
    _AST_release, because some aspects of libast also use this.
    
    This commit also adds my first attempt at documenting the (very
    simple, six-command) mamake language as it is currently implemented
    -- which is significantly different from Glenn Fowler's original
    paper. This is mostly based on reading the mamake.c source code.
    
    src/cmd/INIT/README-mamake.md:
    - Added.
    
    bin/package, src/cmd/INIT/package.sh:
    - Delete the hack.
    
    **/Mamfile:
    - Remove KSH_RELFLAGS and KSH_SHOPTFLAGS, which supported the hack.
    - Delete 'meta' commands. They were no-ops; mamake.c ignores them.
      They also did not add any informative value.
    
    src/lib/libast/Mamfile:
    - Add a 'virtual' target that obtains the current git commit,
      examines the git branch, and decides whether to auto-set an
      _AST_git_commit and/or or _AST_release #define to a new
      releaseflags.h header file. This is overwritten on each run.
    - Add code to the install target that copies limit.h to
      include/ast, but only if it doesn't exist or the content of the
      original changed. This allows '#include <releaseflags.h>' from
      any program using libast while avoiding needless recompiles.
    - When there are uncommitted changes, add /MOD (modified) to the
      commit hash instead of not defining it at all.
    
    src/cmd/ksh93/**:
    - Mamfile: Add a shopt.h target that reads SHOPT.sh and converts it
      into a new shopt.h header file in the object code directory. The
      shopt.h header only contains SHOPT_* directives that have a value
      in SHOPT.sh (not the empty/probe ones). They also do not redefine
      the macros if they already exist, so overriding with something
      like CCFLAGS+=' -DSHOPT_FOO=1' remains possible.
    - **.c: Every c file now #includes "shopt.h" first. So SHOPT_*
      macros are no longer passed via environment/MAM variables.
    * SHOPT.sh: The AUDITFILE and CMDLIB_DIR macros no longer need an
      extra backslash-escape for the double quotes in their values.
      (The old way required this because mamake inserts MAM variables
      directly into shell scripts as literals without quoting.  :-/ )
    
    src/cmd/INIT/mamake.c:
    - Import the two minor changes between from 93u+ and 93v-: bind()
      is renamed to bindfile() and there is a tweak to detecting an
      "improper done statement".
    - Allow arbitrary whitespace (isspace()) everywhere, instead of
      spaces only. This obsoletes my earlier indentation workaround
      from 6cc2f6a0; turns out mamake always supported indentation, but
      with spaces only.
    - Do not skip line numbers at the beginning of each line. This
      undocumented feature is not and (AFAICT) never has been used.
    - Throw an error on unknown command or rule attribute. Quite an
      important feature for manual maintenance: catches typos, etc.

commit 25bae765e56f843aaae6276fd422a8b2496d3821
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 10 13:29:29 2022 +0100

    sh_exec(): do not simulate close-on-exec for (very few) built-ins
    
    The question-everything department is productive today.
    
    When executing a built-in, ksh checks execflg, which is set if the
    command is run in a location where an exec optimisation would take
    place if the command were an external command (i.e. if it's the
    last command in the script). In that case, and if there are no
    traps, and we're not running a function (which we wouldn't anyway
    if execflg is set), and the built-in does not have the BLT_ENV
    attribute, ksh simulates close-on-exec by manually closing the file
    descriptors with the IOCLEX attribute before running the built-in.
    
    This is yet another thing that makes no sense:
    - The command is a built-in. There is no exec, so close-on-exec
      should not happen.
    - Why only for the last command in the script? For external
      commands, close-on-exec happens regardless of the command's
      location, because external commands fork, then exec. So if this
      was meant to introduce behavioural consistency between externals
      and built-ins: FAIL
    - Why only for built-ins without the BLT_ENV attribute? There are
      only a few of them (see data/builtins.c).
    
    Researching ksh93-history shows that this code was introduced in
    2005-03-19 ksh93q+. The changes in ksh93/RELEASE in that commit
    have a couple of entries that could be superficially related, but
    nothing directly relevant. It also introduced several regression
    tests that are still present, and none of them fail after we delete
    this. So, this looks like yet more undocumented nonsense.

commit 1be0d7310840f9c4028f581f5318e976ba72e0d7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 10 11:16:55 2022 +0100

    sh_exec(): do not turn off editors for path-bound builtins
    
    Here's another one from the "question everything" department.
    
    Every time ksh executes a built-in, it checks whether it is bound
    to a path (the name contains a '/') and if so, it turns off the vi,
    emacs and gmacs shell options before executing it. After executing
    the built-ins, those shell options are restored again. The comment
    is: "turn off editors for built-in versions of commands on PATH".
    
    But why? Commands do not and cannot ever use the command line
    editors. They are only ever executed on an interactive shell
    *between* running commands. So turning them off during the
    execution of a command makes no difference.
    
    The only possible effect is that these commands cannot check if a
    user has the vi, emacs or gmacs option on, or change these options
    itself. But what purpose could that limitation possibly serve? And
    what sense does it make to do this for path-bound built-ins only
    and not for other commands? And what sense does it make to have
    this limitation only for the editor shell options and not others?
    
    This waste of CPU cycles has been there since the beginning of the
    ksh93-history repo (1995) so if there was ever any good reason for
    it, it has been lost in the mist of history. I'm 99.999% sure that
    nothing will happen after deleting this.

commit 51e61fcc1299432578f901d13869b729da77fa12
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 10 02:57:13 2022 +0100

    typeset -T: fix spurious 2nd error on redef (re: 1fbbeaa1, d309d604)
    
    Reproducers:
    
        $ ksh -c 'typeset -T foo=(x=1); typeset -T foo=(integer x)'
        ksh: typeset: foo: type cannot be redefined
        ksh: foo: type definition requires compound assignment
    
        $ ksh -c 'typeset -T foo=(x=1); typeset -T foo=(integer x=2)'
        ksh: foo: type cannot be redefined
        ksh: foo: type definition requires compound assignment
    
    In both cases, the second error message is spurious, as there is in
    fact a compound assignment.
    
    The first case was introduced in 1fbbeaa1. The 'integer' command no
    longer resolves to a special built-in but is now a regular built-in
    so it does not cause the shell to exit on error. The code path
    continues and nv_mktype() is called which issues the bad error as
    the compound assignment was not fully processed.
    
    The second case was introduced in d309d604. This commit inhibits
    the exit-on-error for the assignment list of a regular built-in.
    For type definitions, nv_mktype() is called via this code path too.
    
    Since all declaration commands were either special built-ins or
    aliases to special built-ins in 93u+, they all exited on error and
    this problem never happened. Now that some regular built-ins are
    allowed inside 'typeset -T', we need some special-casing to make
    them exit on error as before. Arguably this is the correct thing to
    do anyway, as their errors are also an error in the enveloping
    'typeset' which is a special built-in.
    
    This regression is cosmetic and the case is rare, so this is
    probably not worth a NEWS item.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Fix the second case by adding a test for non-NULL 'sh.mktype' to
      the conditions where the assignments list is processed with exit
      on error. This pointer is set while executing a type definition.
    - Fix the first case by saving the sh.mktype state before executing
      a built-in and then checking the saved value if a built-in exits
      on error. Saving is needed as sh.mktype has been reset by then.

commit 97aeda81423cb9b34c36bc1f071b80a2e3dc2d2b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 9 22:22:24 2022 +0100

    Add error message for ambiguous long-form option abbreviation
    
    Before:
    
      $ set -o hist
      -ksh: set: hist: bad option(s)
    
    After:
    
      $ set --hist
      -ksh: set: hist: ambiguous option
    
    In ksh 93u+m, there are three options starting with 'hist', so the
    abbreviation does not represent a single option. It is useful to
    communicate this in the error message.
    
    In addition, "bad option(s)" was changed to "unknown option", the
    same message as that given by AST optget(3), for consistency.
    
    src/cmd/ksh93/sh/string.c:
    - Make sh_lookopt() return -1 for an ambiguous option. This is
      trivial as there is already an 'amb' variable flagging that up.
    
    src/cmd/ksh93/sh/args.c:
    - Use the negative sh_lookopt() return status to decide between
      "unknown option" and "ambiguous option".
    
    src/cmd/ksh93/data/builtins.c: sh_set[]:
    - Explain the --option and --nooption forms in addition to the -o
      option and +o option forms.
    - Document the long options without their 'no' prefixes (e.g. glob
      instead of noglob) as this simplifies documentation and the
      relation with the short options makes more sense. Those names are
      also how they show up in 'set -o' output and it is better for
      those to match.
    - Tweaks.

commit 6dba1ccb8e790cd5428233a4eacc603b8bb48a01
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 9 21:50:26 2022 +0100

    posix: re-allow preset aliases on interactive (re: ddaa145b)
    
    The POSIX standard in fact contains a sentence that specifically
    allows preset aliases: "Implementations also may provide predefined
    valid aliases that are in effect when the shell is invoked."
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_03_01
    
    I had missed that back then. It's still a terrible idea for scripts
    (particularly the way 93u+ implemented them), but for interactive
    POSIX shells it makes a lot more sense and does not violate POSIX.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Preset aliases for interactive shell regardless of SH_POSIX.

commit 0cab3fa2894aa0ef1480d879db4570b6b2743531
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 9 15:51:44 2022 +0100

    posix: use real pipe(2) instead of socketpair(2)
    
    The POSIX standard requires real UNIX pipes as in pipe(2). But on
    systems supporting it (all modern ones), ksh uses socketpair(2)
    instead to make it possible for certain commands to peek ahead
    without consuming input from the pipe, which is not possible with
    real pipes. See features/poll and sh/io.c.
    
    But this can create undesired side effects: applications connected
    to a pipe may test if they are connected to a pipe, which will fail
    if they are connected to a socket. Also, on Linux:
    
      $ cat /etc/passwd | head -1 /dev/stdin
      head: cannot open '/dev/stdin' for reading: No such device or address
    
    ...which happens because, unlike most systems, Linux cannot open(2)
    or openat(2) a socket (a limitation that is allowed by POSIX).
    
    Unfortunately at least two things depend on the peekahead
    capability of the _pipe_socketpair feature. One is the non-blocking
    behaviour of the -n option of the 'read' built-in:
    
      -n      Causes at most n bytes to be  read  instead  of  a  full
              line, but will return when reading from a slow device as
              soon as any characters have been read.
    
    The other thing that breaks is the <#pattern and <##pattern
    redirection operators that basically grep standard input, which
    inherently requires peekahead.
    
    Standard UNIX pipes always block on read and it is not possible to
    peek ahead, so these features inevitably break. Which means we
    cannot simply use standard pipes without breaking compatibility.
    
    But we can at least fix it in the POSIX mode so that cross-platform
    scripts work more correctly.
    
    src/cmd/ksh93/sh/io.c: sh_pipe():
    - If _pipe_socketpair is detected at compile time, then use a real
      pipe via sh_rpipe() if the POSIX mode is active. (If
      _pipe_socketpair is not detected, a real pipe is always used.)
    
    src/cmd/ksh93/data/builtins.c:
    - sh.1 documents the slow-device behaviour of -n but 'read --man'
      did not. Add that, making it conditional on _pipe_socketpair.
    
    Resolves: https://github.com/ksh93/ksh/issues/327

commit fb422a9a0a13336750f9adfc039be9a03f2947d4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 9 02:53:33 2022 +0100

    Another round of minor tweaks and cleanups
    
    Notable changes:
    - The typeset builtin's usage and error messages for incompatible
      options used with -f has been corrected to show that -t and -u
      can be used with -f.
    - In name.c, get rid of misleaadingly named Null static which is
      actually the empty string, not the null value. Replace with a new
      AltEmpty macro that is defined similarly to Empty. This is now
      also used in nvtype.c (re: de037b6e).

commit 009445bf4539dfe163f2702de6bf81f7a5cf9458
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 8 20:56:18 2022 +0100

    posix: block brace expansion of unquoted expansions (re: a14d17c0)
    
    Historically, ksh (including ksh88 and mksh) allow brace expansion
    not just on literal patterns but also on patterns resulting from
    unquoted variable expansions or command substitutions:
    
      $ a='{a,b}' ksh -c 'echo X{a,b} Y$a'
      Xa Xb Ya Yb
    
    Most people expect only the first (literal) pattern to be expanded,
    as in bash and zsh:
    
      $ a='{a,b}' bash -c 'echo X{a,b} Y$a'
      Xa Xb Y{a,b}
    
    The historic ksh behaviour is poorly documented and nearly unknown,
    violates the principle of least astonishment, and makes unquoted
    variable expansions even more unsafe. See discussion at:
    https://www.austingroupbugs.net/view.php?id=1193
    https://github.com/ksh93/ksh/issues/140
    
    Unfortunately, we cannot change it in default ksh without breaking
    backward compatibility. But we can at least fix it for the POSIX
    mode (which disables brace expansion by default but allows turning
    it back on), particularly as it looks like POSIX, if it decides to
    specify brace expansion in a future version of the standard, will
    disallow brace expansion on unquoted variable expansions.
    
    src/cmd/ksh93/sh/macro.c: endfield():
    - When deciding whether to do brace expansion + globbing or only
      globbing, also check that we do not have POSIX mode and an
      unquoted variable expansion (mp->pattern==1).

commit b374afc0a954914a80a7be6b1476c653d2594614
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 8 00:39:27 2022 +0100

    Error on defining disc for undeclared type member (re: 77929981)
    
      $ typeset -T _bad_disc_t=(typeset dummy; function foo.get { :; })
      Abort
    
    One of the abort() calls that replaced a debug message in the
    referenced commit was triggered when trying to define a discipline
    function for a nonexistent type member inside a 'typeset -T' type
    definition.
    
    src/cmd/ksh93/sh/nvtype.c: std_disc():
    - Issue a proper error message for that condition.

commit bafff8eca28d201c052d4ca4edf109a8302a9131
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 7 17:52:12 2022 +0100

    Fix crash on setting attribute to variable with getn discipline
    
    The 'getn' discipline is experimental and undocumented, the only
    mention of it being an old mailing list post from David Korn:
    https://www.mail-archive.com/ast-users@research.att.com/msg00601.html
    
    But it still should not crash.
    
    $ LC_NUMERIC=C ENV=/./dev/null arch/*/bin/ksh
    $ foo.getn() { .sh.value=2.3*4.5; }
    $ typeset -F foo
    Memory fault
    
    src/cmd/ksh93/sh/nvdisc.c: assign():
    - Check that the nvalue union has a non-NULL pointer before
      using it.
    
    Progresses: https://github.com/ksh93/ksh/issues/435

commit 2f779e13dfafd8bc3030234a0ff49c057ae70245
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 7 04:16:48 2022 +0100

    Fix spurious export attribute when printing compound variables
    
    Reproducer script:
    
        typeset -Ttyp1 typ1=(
                function get {
                        .sh.value="'Sample'";
                }
        )
        typ1 var11
        typeset -p .sh.type
        typeset -p .sh.type
    
    Buggy output:
    
        namespace sh.type
        {
                typeset -r typ1='Sample'
        }
        namespace sh.type
        {
                typeset -x -r typ1='Sample'
        }
    
    An -x (export) attribute is magically pulled out of a hat.
    
    Analysis: The walk_tree() function in nvdisc.c repurposes (!) the
    NV_EXPORT attribute as an instruction to turn *off* indenting when
    pretty-printing the values of compound variables. The
    print_namval() function in typeset.c, implementing 'typeset -p',
    turns on NV_EXPORT for compound variables to inhibit indentation.
    But it then does not bother to turn it off, which causes this bug.
    
    src/cmd/ksh93/bltins/typeset.c: print_namval():
    - When printing compound variables, only turn on NV_EXPORT
      temporarily.
    
    Resolves: https://github.com/ksh93/ksh/issues/456

commit a1af93f32382dec17c83b84f98a133b0d425f548
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 6 06:37:20 2022 +0100

    [v1.1] high precision output for 'time' and 'times'
    
    This applies an updated version of a patch from @JohnoKing that
    increases the default precision of the 'time' and 'times' command
    output to six digits after the decimal point.
    
    A new %C formatting specifier is also supported for $TIMEFORMAT --
    it is the total of user and system CPU time used.

commit 7a5dcdd50eec3a81af5d60bafafcc85526c90b3e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 6 02:46:57 2022 +0100

    Fix completion following $'foo\'bar'
    
    On an interactive shell in emacs or vi, type a command with a $'…'
    quoted string that contains a backslash-escaped single quote, like:
    
        $ true $'foo\'bar' ▁
    
    Then begin to type the name of a file present in the current
    working directory and press tab. Nothing happens as completion
    fails to work.
    
    The completion code does not recognise $'…' strings. Instead, it
    parses them as '…' strings in which there are no backslash escapes,
    so it considers the last ' to open a second quoted string which is
    not terminated.
    
    Plus, when replacing a $'…' string with a (backslash-escaped)
    completed string, the initial '$' is not replaced:
    
        $ $'/etc/hosts<Tab>
        $ $/etc/hosts
    
    src/cmd/ksh93/edit/completion.c:
    - find_begin():
      - Learn how to recognise $'…' strings. A new local dollarquote
        flag variable is used to distinguish them from regular '…'
        strings. The difference is that backslash escapes (and only
        those) should be recognised as in "…".
      - Set a special type -1 for $'…' as the caller will need a way
        to distinguish those from '…'.
    - ed_expand(): When replacing a quoted string, remove an extra
      initial character (being the $ in $') if the type set by
      find_begin() is -1.
    
    Resolves: https://github.com/ksh93/ksh/issues/462

commit dcbaaa9b80d3d0debd8aae1bac4668161229702d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 6 02:12:33 2022 +0100

    Fix more spurious comsub execution in tab completion (re: 7a2d3564)
    
    Comsubs were either executed or caused a syntax error when attempting
    to complete them within single quotes. Since single quotes do not
    expand anything, no such completion should take place.
    
    $ '`/de<TAB>-ksh: /dev/: cannot execute [Is a directory]
    
    $ '$(/de<TAB>-ksh: syntax error: `end of file' unexpected
    
    src/cmd/ksh93/edit/completion.c:
    - find_begin():
      - Remove recursive handling for '`' comsubs from 7a2d3564; it is
        sufficient to set the return pointer to the current location cp
        (the character following '`') if we're not in single quotes.
      - For '$' and '`', if we are within single quotes, set type '\''
        and set the return pointer bp to the location of the '$' or
        '`'.
    - ed_expand(): If find_begin() sets type '\'' and the current begin
      character is $ or `, refuse to attempt completion; return -1 to
      cause a terminal beep.
    
    Related:
    https://github.com/ksh93/ksh/issues/268
    https://github.com/ksh93/ksh/issues/462#issuecomment-1038482307

commit da256194d5d72a4d44ed82d565180bed45e71962
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 5 17:50:26 2022 +0100

    fix radix point regress test bug (re: 955c2fb0)
    
    A previous test left LC_ALL set, causing a spurious failure in one
    of the newly added tests. The bug was masked because another test
    conditional upon SHOPT_MULTIBYTE unset LC_ALL again. The fix is to
    unset all locale variables before testing, just to be sure.

commit 955c2fb0308a8a5cfcf80cb65000fb0c44b28105
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 5 14:27:31 2022 +0100

    Fix omission: update radix point on LANG change (re: 9f3e0d8b)
    
    Of course we need to check LC_LANG (for the LANG variable) as well.

commit 66c8432b32dc5596d796ee55b4ef8987fb90c88c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 4 17:02:05 2022 +0100

    Add --functrace shell option (re: 2a835a2d)
    
    A side effect of the bug fixed in 2a835a2d caused the DEBUG trap
    action to appear to be inherited by subshells, but in a buggy way
    that could crash the shell. After the fix, the trap is reset in
    subshells along with all the others, as it should be. Nonetheless,
    as that bug was present for years, some have come to rely on it.
    
    This commit implements that functionality properly. When the new
    --functrace option is turned on, DEBUG trap actions are now
    inherited by subshells as well as ksh function scopes. In addition,
    since it makes logical sense, the new option also causes the
    -x/--xtrace option's state to be inherited by ksh function scopes.
    Note that changes made within the scope do not propagate upwards;
    this is different from bash.
    
    (I've opted against adding a -T short-form equivalent as on bash,
    because -T was formerly a different option on 93u+ (see 63c55ad7)
    and on mksh it has yet anohter a different meaning. To minimise
    confusion, I think it's best to have the long-form name only.)
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/data/options.c:
    - Add new "functrace" (SH_FUNCTRACE) long-form shell option.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - When functrace is on, copy the parent's DEBUG trap action into
      the virtual subshell scope after resetting the trap actions.
    
    src/cmd/ksh93/sh/xec.c: sh_funscope():
    - When functrace is on and xtrace is on in the parent scope, turn
      it on in the child scope.
    - Same DEBUG trap action handling as in sh_subshell().
    
    Resolves: https://github.com/ksh93/ksh/issues/162

commit c0ca93d7eee1ebf5250c16d8adf6016c65102073
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 4 11:29:43 2022 +0100

    tests/coprocess.sh: activate known intermittent fail as warning
    
    https://github.com/ksh93/ksh/issues/132#issuecomment-997432781

commit 2ff1116ebeeb0d01c9c267cc661ffdf9faa5caef
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 22:51:35 2022 +0100

    Honour attribs for assignments preceding sp. builtins, POSIX functs
    
    After the previous commit, one inconsistency was left. Assignments
    preceding special built-ins and POSIX functions (which persist past
    the command :-/) caused pre-existing attributes of the respective
    variables to be cleared.
    
    $ (f() { typeset -p n; }; typeset -i n; n=3+4 f)
    n=3+4
    
    (expected output: 'typeset -i n=7')
    
    This problem was introduced shortly before the release of ksh 93u+,
    in version 2012-05-04, by adding these lines of code to the code
    for processing preceding assignments in sh_exec():
    
    src/cmd/ksh93/sh/xec.c:
    1055:   if(np)
    1056:           flgs |= NV_UNJUST;
    
    So, for special and declaration commands and POSIX functions, the
    NV_UNJUST flag is passed to nv_open(). In older ksh versions, this
    flag cleared justify attributes only, but in early 2012 it was
    repurposed to clear *all* attributes -- without changing the name
    or the relevant comment in name.h, which are now both misleading.
    
    The reason for setting this flag in xec.c was to deal with some
    bugs in 'typeset'. Removing those two lines causes regressions:
    
      attributes.sh[316]: FAIL: typeset -L should not preserve old attributes
      attributes.sh[322]: FAIL: typeset -R should not preserve old attributes
      attributes.sh[483]: FAIL: typeset -F after typeset -L fails
      attributes.sh[488]: FAIL: integer attribute not cleared for subsequent typeset
    
    Those are all typeset regressions, which suggests this fix was
    relevant to typeset only. This is corroborated by the relevant
    AT&T ksh93/RELEASE entry:
    
    12-04-27  A bug in which old attributes were not cleared when
              assigning a value using typeset has been fixed.
    
    So, to fix this 2012 regression without reintroducing the typeset
    regressions, we need to set the NV_UNJUST flag for invocations of
    the typeset family of commands only. This is changed in xec.c.
    
    While we're at it, we might as well rename that little-used flag to
    something that reflects its current purpose: NV_UNATTR.

commit 870ca92a0821775a400445126bc87ade6b203f94
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 21:09:16 2022 +0100

    Honour attributes for local assignments preceding certain commands
    
    Reproducer:
    
        $ typeset -i NUM=123
        $ (NUM=3+4 env; :)|grep ^NUM=
        NUM=3+4
        $ (NUM=3+4 env)|grep ^NUM=
        NUM=7
    
    The correct output is NUM=7. This is also the output if ksh is
    compiled with SHOPT_SPAWN disabled, suggesting that the problem is
    here in sh_ntfork(), where the invocation-local environment list is
    set using a sh_scope() call:
    
    src/cmd/ksh93/sh/xec.c:
    3496:   if(t->com.comset)
    3497:   {
    3498:           scope++;
    3499:           sh_scope(t->com.comset,0);
    3500:   }
    
    Analysis:
    
    When ksh is compiled with SHOPT_SPAWN disabled, external commands
    are always run using the regular forking mechanism. First the shell
    forks, then in the fork, the preceding assignments list (if any)
    are executed and exported in the main scope. Replacing global
    variables is not a problem as the variables are exported and the
    forked shell is then replaced by the external command using
    execve(2).
    
    But when using SHOPT_SPAWN/sh_ntfork(), this cannot be done as the
    fork(2) use is replaced by posix_spawn(2) which does not copy the
    parent process into the child, therefore it's not possible to
    execute anything in the child before calling execve(2). Which means
    the preceding assignments list must be processed in the parent, not
    the child. Which makes overwriting global variables a no-no.
    
    To avoid overwriting global variables, sh_ntfork() treats preceding
    assignments like local variables in functions, which means they do
    not inherit any attributes from the parent scope. That is why the
    integer attribute is not honoured in the buggy reproducers.
    
    And this is not just an issue for external commands. sh_scope() is
    also used for assignments preceding a built-in command. Which is
    logical, as those don't create a process at all.
    
    src/cmd/ksh93/sh/xec.c:
    1325:   if(argp)
    1326:   {
    1327:           scope++;
    1328:           sh_scope(argp,0);
    1329:   }
    
    Which means this bug exists for them as well, regardless of whether
    SHOPT_SPAWN is compiled in.
    
    $ /bin/ksh -c 'typeset -i NUM; NUM=3+4 command eval '\''echo $NUM'\'
    3+4
    (expected: 7, as on mksh and zsh)
    
    So, the attributes from the parent scope will need to be copied
    into the child scope. This should be done in nv_setlist() which is
    called from sh_scope() with both the NV_EXPORT and NV_NOSCOPE flags
    passed. Those flag bits are how we can recognise the need to copy
    attributes.
    
    Commit f6bc5c0 fixed a similar inconsistency with the check for the
    read-only attribute. In fact, the bug fixed there was simply a
    specific instance of this bug. The extra check for readonly was
    because the readonly attribute was not copied to the temporary
    local scope. So that fix is now replaced by the more general fix
    for this bug.
    
    src/cmd/ksh93/sh/name.c: nv_setlist():
    - Introduce a 'vartree' local variable to avoid repetitive
      'sh.prefix_root ? sh.prefix_root : sh.var_tree' expressions.
    - Use the NV_EXPORT|NV_NOSCOPE flag combination to check if parent
      scope attributes need to be copied to the temporary local scope
      of an assignment preceding a command.
    - If so, copy everything but the value itself: attributes (nvflag),
      size parameter (nvsize), discipline function pointer (nvfun) and
      the name pointer (nvname). The latter is needed because some
      code, at least put_lang() in init.c, compares names by comparing
      the pointers instead of the strings; copying the nvname pointer
      avoids a regression in tests/locale.sh.
    
    src/cmd/ksh93/sh/xec.c: local_exports():
    - Fix a separate bug exporting attributes to a new ksh function
      scope, which was previously masked by the other bug. The
      attributes (nvflag) were copied *after* nv_putval()ing the value,
      which is incorrect as the behaviour of nv_putval() is influenced
      by the attributes. But here, we're copying the value too, so we
      can simplify the whole function by using nv_clone() instead. This
      may also fix other corner cases. (re: c1994b87)
    
    Resolves: https://github.com/ksh93/ksh/issues/465

commit 779299811d4dfe77feb4b539ffce99398f9e354d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 19:27:37 2022 +0100

    {array,nvtype}.c: Tidy up old debug messages
    
    Those debug messages were written straight to standard error
    without going through the shell's error/warning message mechanism.
    They look like debug messages that aren't really supposed to appear
    (no one ever sees them AFAIK).
    
    This commit removes them, in some cases replacing them with abort()
    calls so that a stack trace is generated if the unexpected thing
    happens, instead of the shell continuing in an inconsistent state.

commit 648caedd9523d061ef5feadcccd885f5b213e030
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 18:44:45 2022 +0100

    Remove more unused stuff
    
    A systematic grepping of the extern function definitions in
    src/cmd/ksh93/include/*.h revealed more functions that either don't
    exist or are not used anywhere. Some of them have never seen any
    use in the entire ksh93-history repo (i.e. since 1995). They were
    also all undocumented, so it's unlikely third-party custom
    built-ins rely on them.

commit 216a78ac6570eb1e46abddcb42330b76bb647ece
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 16:09:19 2022 +0100

    nvdisc.c: remove unused nv_mkclone() and related functions

commit ff4e912ce5c8762e49a070781213696aeacac3e3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 11:34:34 2022 +0100

    Fix import of float attribute/value from environment (re: 960a1a99)
    
    Bug 1: as of 960a1a99, floating point literals were no longer
    recognised when importing variables from the environment. The
    attribute was still imported but the value reverted to zero:
    
    $ (export LC_NUMERIC=C; typeset -xF5 num=7.75; \
       ksh -c 'typeset -p num')
    typeset -x -F 5 num=0.00000
    
    Bug 2 (inherited from 93u+): The code that imported variable
    attributes from the environment only checked '.' to determine
    whether the float attribute should be set. It should check the
    current radix point instead.
    
    $ (export LC_NUMERIC=debug; typeset -xF5 num=7,75; \
       ksh -c 'typeset -p num')
    typeset -x -i num=0
    ...or, after fixing bug 1 only, the output is:
    typeset -x -i num=75000
    
    src/cmd/ksh93/sh/arith.c: sh_strnum():
    - When importing untrusted env vars at init time, handle not only
      "base#value" literals using strtonll, but also floating point
      literals using strtold. This fixes the bug without reallowing
      arbitary expressions. (re: 960a1a99)
    - When not initialising, use sh.radixpoint (see 9f3e0d8b) instead
      of '.' to help decide whether to evaluate an arith expression.
    
    src/cmd/ksh93/sh/init.c: env_import_attributes():
    - Use sh.radixpoint instead of '.' to check for a decimal fraction.
      (This code is needed because doubles are exported as integers for
      ksh88 compatibility; see attstore() in name.c.)

commit 9f3e0d8ba3687b530f2a9e11fe81946d72adc4e7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 3 10:29:56 2022 +0100

    Improve radix point (decimal point/comma) handling
    
    The GETDECIMAL(x) macro in src/cmd/ksh93/features/locale uses a
    global static variable 'lp' to get the localeconv() results.
    Several functions in ksh use local variables called 'lp'. It's dumb
    luck that this hasn't conflicted yet; it's a bug waiting to happen.
    It's also slightly inefficient as it calls localeconv() every time.
    
    In addition there is a redundant 'sh.decomma' flag that is set to 1
    if the radix point is a comma, but only once, by sh_init(). It is
    not updated if the locale changes. That is not correct.
    
    This commit gets rid of both and implements a new approach instead:
    store the radix point in sh.radixpoint at init time in sh_init(),
    and in the put_lang() locale discipline function, reinitialise
    sh.radixpoint whenever LC_ALL or LC_NUMERIC changes. The rest of
    the code can then simply use sh.radixpoint without worry.

commit 08c5e54c0c294bfdd041f524e9720c69948f03e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 2 03:19:16 2022 +0100

    Correctly exit from namespace on error (re: 7bb35849)
    
    The referenced commit introduced at least one bug: EXIT traps were
    not triggered if a special builtin threw an error in a namespace
    that is within a virtual subshell.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TNSPACE:
    - When an error occurs, siglongjmp to the previous saved
      environment; it is not correct to sh_exit directly.
    
    src/cmd/ksh93/tests/namespace.sh:
    - Remove the forkign workaround and the TODO where I incorrectly
      blamed this problem on the virtual subshell mechanism.

commit f1bb7512c7d2253e21e16a0dd3cb479ca98fef30
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 1 17:14:51 2022 +0100

    New feature: 'typeset -g' as in bash 4.2+
    
    typeset -g allows directly manipulating the attributes of variables
    at the global level from any context. This feature already exists
    on bash 4.2 and later.
    
    mksh (R50+), yash and zsh have this flag as well, but it's slightly
    different: it ignores the current local scope, but a parent local
    scope from a calling function may still be used -- whereas on bash,
    '-g' always refers to the global scope. Since ksh93 uses static
    scoping (see III.Q28 at <http://kornshell.com/doc/faq.html>), only
    the bash behaviour makes sense here.
    
    Note that the implementation needs to be done both in nv_setlist()
    (name.c) and in b_typeset() (typeset.c) because assignments are
    executed before the typeset built-in itself. Hence also the
    pre-parsing of typeset options in sh_exec().
    
    src/cmd/ksh93/include/nval.h:
    - Add new NV_GLOBAL bit flag, using a previously unused bit that
      still falls within the 32-bit integer range.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - When pre-parsing typeset flags, make -g pass the NV_GLOBAL flag
      to the nv_setlist() call that processes shell assignments prior
      to running the command.
    
    src/cmd/ksh93/sh/name.c: nv_setlist():
    - When the NV_GLOBAL bit flag is passed, save the current variable
      tree pointer (sh.var_tree) as well as the current namespace
      (sh.namespace) and temporarily set the former to the global
      variable tree (sh.var_base) and the latter to NULL. This makes
      assignments global and ignores namesapces.
    
    src/cmd/ksh93/bltins/typeset.c:
    - b_typeset():
      - Use NV_GLOBAL bit flag for -g.
      - Allow combining -n with -g, permitting 'typeset -gn var' or
        'nameref -g var' to create a global nameref from a function.
      - Do not allow a nonsensical use of -g when using nested typeset
        to define member variables of 'typeset -T' types. (Type method
        functions can still use it as normal.)
    - setall():
      - If NV_GLOBAL is passed, use sh.var_base and deactivate
        sh.namespace as in nv_setlist(). This allows attributes
        to be set correctly for global variables.
    
    src/cmd/ksh93/tests/{functions,namespace}.sh:
    - Add regression tests based on reproducers for problems found
      by @hyenias in preliminary versions of this feature.
    
    Resolves: https://github.com/ksh93/ksh/issues/479

commit 7bb3584960d171fc2d50d5021269b03076133780
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 29 22:50:24 2022 +0100

    Restore namespace's parent scope when exiting due to error
    
    Reproducer:
    
        $ namespace test { x=123; typeset -g x=456; }
        $ echo $x ${.test.x}
        456 123
        $ namespace test { typeset -Q; }
        arch/darwin.i386-64/bin/ksh: typeset: -Q: unknown option
        [usage message snipped for brevity]
        $ echo $x ${.test.x}
        123 123                 <== expected: 123 456
        $ x=789
        $ echo $x ${.test.x}
        789 789                 <== expected: 789 456
        $ # look at that, we never left the namespace...
    
    When prefixing the erroneous 'typeset' with 'command', the problem
    does not occur. 'command' disables the properties of special
    built-ins such as exit on error. So, when a special built-in exits
    on error, the parent scope is not properly resotred.
    
    This bug exists in every ksh93 version with SHOPT_NAMESPACE so far.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Before entering a namespace, use sh_pushcontext and sigsetjmp to
      make sure we return here if sh_exit() is called, e.g. when a
      special builtin throws an error, to ensure the parent scope
      (oldnspace) is restored.
    
    Thanks to @hyenias for making me aware of this bug.
    Discussion: https://github.com/ksh93/ksh/issues/479#issuecomment-1140468965

commit 58289b21f391c537e2f3f8a9ba65338b564d659d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 28 00:02:46 2022 +0100

    set --default: properly restore ksh IFS behaviour (re: 0c74dab9)
    
    Reproducer:
    
    $ (IFS=$'\t\t'; val=$'\tone\t\ttwo\t'; set --posix; \
       set -- $val; echo $#; set --noposix; set -- $val; echo $#)
    2
    4   <== OK
    
    $ (IFS=$'\t\t'; val=$'\tone\t\ttwo\t'; set --posix; \
       set -- $val; echo $#; set --default; set -- $val; echo $#)
    2
    2   <== bug
    
    The output of the seconnd command line should be like the first.
    
    When POSIX mode is turned off using 'set --noposix' (or 'set +o
    posix'), sh.ifstable is invalidated as it needs to be repopulated
    on the next field split to restore ksh-specific special handling of
    a repeated $IFS whitespace character as non-whitespace. However,
    when 'set --default' is used, this does not happen, which is a bug.
    
    src/cmd/ksh93/sh/args.c: sh_argopts():
    - While processing --default, when turning off SH_POSIX, call
      sh_invalidate_ifs() to invalidate sh.ifstable.

commit 0513e760f3541bcab9819b3b9731abb839fc045d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 26 00:04:53 2022 +0100

    Fix incorrect typeset -L/-R/-Z on input with spaces (re: bdb99741)
    
    The typeset output for -L/-R/-Z seems to be wrong when the input
    has leading/trailing spaces. This started occurring after the
    dynamic buffer size changes introduced in name.c as part of the
    fix for <https://github.com/ksh93/ksh/issues/142>.
    
    Test script:
      typeset -L8  s_date1=" 22/02/09 08:25:01"; echo "$s_date1"
      typeset -R10 s_date1="22/02/09 08:25:01 "; echo "$s_date1"
      typeset -Z10 s_date1="22/02/09 08:25:01 "; echo "$s_date1"
    
    Actual output:
    22/02/0
      08:25:01
    0008:25:01
    
    Expected output:
    22/02/09
    9 08:25:01
    9 08:25:01
    
    src/cmd/ksh93/sh/name.c: nv_newattr():
    - Simplify allocation code, replacing the earlier dynamic buffer
      size calculation with just the greater of the strlen and size.
    
    Resolves: https://github.com/ksh93/ksh/issues/476
    Co-authored-by: George Lijo <george.lijo@gmail.com>

commit e5e19cdf27ac31ce49f2afe851697f9366bdf347
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 22 12:36:58 2022 +0100

    Fix 'cd -e' regress fails on some UNIXen (re: ecd3d878, d6f0c8c6)
    
    On some systems, including at least Solaris 10.1 and QNX 6.5.0, the
    regression tests below occurred. This is because, on these systems,
    'cd .' always fails with 'no such file or directory', regardless of
    flags, if the present working directory no longer exists. This is a
    legitimate variation in UNIX-like systems so the tests should be
    compatible.
    
    test builtins begins at 2022-05-22+13:08:28
    /usr/local/src/ksh/src/cmd/ksh93/tests/builtins.sh[1499]: cd: .: [No such file or directory]
            builtins.sh[1501]: FAIL: cd -P without -e exits with error status if $PWD doesn't exist (expected 0, got 1)
    /usr/local/src/ksh/src/cmd/ksh93/tests/builtins.sh[1504]: cd: .: [No such file or directory]
            builtins.sh[1506]: FAIL: cd -eP doesn't fail if $PWD doesn't exist (expected 1, got 2)
    test builtins failed at 2022-05-22+13:08:37 with exit code 2 [ 287 tests 2 errors ]
    
    src/cmd/ksh93/tests/builtins.sh:
    - Delete the 'cd -P .' test for a nonexistent PWD.
    - For the 'cd -eP .' test for a nonexistent PWD, redirect standard
      error to /dev/null and also accept exit status 2, which we would
      expect with the '-e' flag if a 'no such file or directory' error
      is thrown.

commit 51c7cb3b1df69e3dbfa0dbba6815f049c5ba24ae
Author: vmihalko <35222576+vmihalko@users.noreply.github.com>
Date:   Sun May 22 13:05:48 2022 +0200

    Fix build with gcc 12 on Fedora 36 (#478)
    
    Due to missing or incorrectly positioned links with the m library
    (-lm flag), ksh failed to build with gcc 12 on Fedora 36.

commit f73d69893bf3b6530a59f78ed4462050c05439c3
Author: atheik <14833674+atheik@users.noreply.github.com>
Date:   Sat May 21 23:51:50 2022 +0100

    Fix line continuation within command substitutions
    
    In command substitutions of the $(standard) and ${ shared state; }
    form, backslash line continuation is broken.
    
    Reproducer:
    
            echo $(
            echo one two\
            three
            )
    
    Actual output (ksh93, all versions):
    
            one two\ three
    
    Expected output (every other shell, POSIX spec):
    
            one twothree
    
    src/cmd/ksh93/sh/lex.c: sh_lex(): case S_REG:
    - Do not skip new-line joining if we're currently processing a
      command substitution of one of these forms (i.e., if the
      lp->lexd.dolparen level is > 0).
    
    Background info/analysis:
    
    comsub() is called from sh_lex() when S_PAR is the current state.
    In src/cmd/ksh93/data/lexstates.c, we see that S_PAR is reached in
    the ST_DOL state table at index 40. Decimal 40 is ( in ASCII. So,
    the previous skipping of characters was done according to the
    ST_DOL state table, and the character that stopped it was (. This
    means we have $(.
    
    Alternatively, comsub() may be called from sh_lex() by jumping to
    the do_comsub label. In brief, that is the case when we have ${.
    
    Regardless of which it is from the two, comsub() is now called from
    sh_lex(). In comsub(), lp->lexd.dolparen is incremented at the
    beginning and decremented at the end. Between them, we see that
    sh_lex() is called. So, lp->lexd.dolparen in sh_lex() indicates the
    depth of nesting $( or ${ statements we're in. Thus, it is also the
    number of comsub() invocations seen in a backtrace taken in
    sh_lex().
    
    The codepath for `...` is different (and never had this bug).
    
    Co-authored by: Martijn Dekker <martijn@inlv.org>
    Resolves: https://github.com/ksh93/ksh/issues/367

commit 490edfe28e5c4ee45f8542e6fedc3afc7e03f971
Author: atheik <14833674+atheik@users.noreply.github.com>
Date:   Fri May 20 22:29:20 2022 +0100

    Allow double quotes within backtick comsub within double quotes
    
    The following reproducer causes a spurious syntax error:
    
        foo="`: "("`"
    
    The nested double quotes are not recognised correctly, causing a
    syntax error at the '('. Removing the outer double quotes (which
    are unnecessary) is a workaround, but it's still a bug as every
    other shell accepts this. This bug has been present since the
    original Bourne shell.
    
    src/cmd/ksh93/sh/lex.c: sh_lex(): case S_QUOTE:
    - If the current character is '"' and we're in a `...` command
      substitution (ingrave is true), then do not switch to the old
      mode but keep using the ST_QUOTE state table.
    
    Thanks to @JohnoKing for the report and to @atheik for the fix.
    
    Co-authored by: Martijn Dekker <martijn@inlv.org>
    Resolves: https://github.com/ksh93/ksh/issues/352

commit a9632d2dfb028af6f0d98af42dec07adec61efcf
Author: Trey Valenta <t@trey.net>
Date:   Sat Apr 30 04:42:46 2022 -0700

    Fix typo "HOSTYPE" in package.sh documentation (#477)
    
    This commit fixes typos in the documentation of:
    -  src/cmd/INIT/package.sh: HOSTYPE is corrected as HOSTTYPE

commit 14de00dab9e7d1aefb0ce1c860f0f3b699468a5e
Author: atheik <14833674+atheik@users.noreply.github.com>
Date:   Thu Apr 21 22:47:30 2022 +0200

    optget: Improve memory leak fix (re: 333a8ca6)
    
    The memory leak only occurred when an \f...\f string was used
    outside a braces block ('{'...'}' a.k.a. GO...OG). This shows
    the way to a more correct and elegant fix.
    
    Co-authored by: Martijn Dekker <martijn@inlv.org>

commit ca4ac0b52fb3503b86bd43d64a99bce0b9978e45
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 21 02:34:33 2022 +0200

    edit: avoid potential crash with overlapping strings
    
    In vi.c, there is a potential use of strcpy(3) on overlapping
    strings, which is undefined behaviour:
    
    >       SHOPT_MULTIBYTE == 0
    >
    >       # define gencpy(a,b)  strcpy((char*)(a),(char*)(b))
    >
    >               .
    >               .
    >               .
    >
    >       if( mode != 'y' )
    >       {
    >               gencpy(cp,cp+nchars);
    
    Thanks to Heiko Berges for the report.
    
    src/cmd/ksh93/edit/{edit,emacs,vi}.c:
    - Change almost all use of strcpy(3) to libast strcopy(), which
      is a simple implementation that does not have a problem with
      overlapping strings. Note that the return value is different
      (it returns a pointer to the terminating '\0') but that is not
      relevant in any of these cases.
    - Same for strncpy(3) => libast strncopy().
    
    src/lib/libast/string/strcopy.c:
    - Backport a couple of cosmetic tweaks from the 93v- beta.

commit 1bbe573caee6ffa6a17d0faff12d24b77844b9b1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 20 20:32:35 2022 +0200

    Restore build on QNX Neutrino 6.5.0 (re: a874f8c1)
    
    The QNX system at polarhome.com seems to be back up, at least
    temporarily, though polarhome has officially shut down. This
    allowed me to test ksh on QNX again, discovering that the build
    was broken since reworking the standards macros handling.
    
    src/lib/libast/features/standards:
    - On QNX, define _QNX_SOURCE=1 to enable all extensions and
      _FILE_OFFSET_BITS=64 to enable large file support with standard
      library function names.

commit 333a8ca65baf6a52ff93cd9fe52401f6edec793f
Author: atheik <14833674+atheik@users.noreply.github.com>
Date:   Fri Mar 11 20:24:35 2022 +0100

    libast: optget(3): Fix memory leak in --help/--man info
    
    src/lib/libast/misc/optget.c: textout(): case ']':
    - Before returning, call pop() to free any \f...\f info items that
      are left. Note that this is a safe no-op if the pointer is null.
    
    Resolves: https://github.com/ksh93/ksh/issues/407
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit d95997a8311d93f7be49179092e2613f4e94b53f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 11 17:07:22 2022 +0100

    tests/posix.sh: fix run with SHOPT_BRACEPAT disabled, take 2

commit a82cde9295a92360711a37b55ea5484189c4f021
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 11 16:05:10 2022 +0100

    tests/posix.sh: fix run with SHOPT_BRACEPAT disabled (re: 9ca2f752)

commit 9ca2f752548f4cb1e8fa6253f0801146ad9cc3ce
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 11 02:15:41 2022 +0100

    Fix another test/[ corner case bug; add --posix test script
    
    This fixes another corner case bug in the horror show that is the
    test/[ comand.
    
    Reproducer:
    
       $ ksh --posix -c 'test X -a -n'
       ksh: test: argument expected
    
    Every other shell returns 0 (success) as, POSIXly, this is a test
    for the strings 'X' and '-n' both being non-empty, combined with
    the binary -a (logical and) operator. Instead, '-n' was taken as a
    unary primary operator with a missing argument, which is incorrect.
    
    POSIX reference:
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html
    > 3 arguments:
    > * If $2 is a binary primary, perform the binary test of $1 and $3.
    
    src/cmd/ksh93/bltins/test.c:
    - e3(): If the final argument begins with a dash, always treat it
      as a test for a non-empty string, therefore return true. Do not
      limit this to "new flags" only.
    
    src/cmd/ksh93/tests/posix.sh:
    - Added. These are tests for every aspect of the POSIX mode.

commit 0c74dab96289961721830f721060ae1ffb98be82
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 8 20:20:57 2022 +0100

    posix mode: disable effect of repeating whitespace char in $IFS
    
    ksh has a little-known field splitting feature that conflicts with
    POSIX: if a single-byte whitespace character (cf. isspace(3)) is
    repated in $IFS, then field splitting is done as if that character
    wasn't a whitespace character. An exmaple with the tab character:
    
      $ (IFS=$'\t'; val=$'\tone\t\ttwo\t'; set -- $val; echo $#)
      2
      $ (IFS=$'\t\t'; val=$'\tone\t\ttwo\t'; set -- $val; echo $#)
      4
    The latter being the same as, for example
      $ (IFS=':'; val=':one::two:'; set -- $val; echo $#)
      4
    
    However, this is incompatible with the POSIX spec and with every
    other shell except zsh, in which repeating a character in IFS does
    not have any effect. So the POSIX mode must disable this.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/init.c:
    - Add sh_invalidate_ifs() function that invalidates the IFS state
      table by setting the ifsnp discipline struct member to NULL,
      which will cause the next get_ifs() call to regenerate it.
    - get_ifs(): Treat a repeated char as S_DELIM even if whitespace,
      unless --posix is on.
    
    src/cmd/ksh93/sh/args.c:
    - sh_argopts(): Call sh_invalidate_ifs() when enabling or disabling
      the POSIX option. This is needed to make the change in field
      splitting behaviour take immediate effect instead of taking
      effect at the next assignment to IFS.

commit abc7f04d58a93700d7f1089b12e3e4c3d9d1b207
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 5 01:43:29 2022 +0100

    enum: remove arbitrary one-argument limitation
    
    b_enum() contains a check that exactly one argument is given:
    
    237:    if (error_info.errors || !*argv || *(argv + 1))
    
    But the subsequent argument handling loop will happily deal with
    multiple arguments:
    
    246:    while(cp = *argv++)
    
    Every other declaration command supports multiple arguments and I
    see no reason why enum shouldn't. Simply removing the '*(argv + 1)'
    check allows 'enum' to create more than one type per invocation.
    
    src/cmd/ksh93/bltins/enum.c:
    - b_enum(): Remove check for >1 args as described above.
    - Update documentation to describe the behaviour of enumeration
      types in arithmetic expressions and to add an example: a bool
      type with two enumeration values 'false' (0) and 'true' (1).
      That type is predefined in ksh 93v- and 2020. We're not going
      to do that in 93u+m but it's good to document the possibility.
    
    src/cmd/ksh93/sh.1:
    - Make changes parallel to the enum.c self-doc update.

commit d6f0c8c65e1d0fb29a57b024ea93bad404936b14
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 1 21:10:38 2022 +0100

    Another round of accumulated minor fixes and cleanups
    
    Only notable changes listed below.
    
    **/Mamfile:
    - Do not bother redirecting standard error for 'cmp -s' to
      /dev/null. Normally, 'cmp -s' on Linux, macOS, *BSD, or Solaris
      do not not print any message. If it does, something unusual is
      going on and I would want to see the message.
    - Since we now require a POSIX shell, we can use '!'.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/init.c:
    - Remove SH_TYPE_PROFILE symbol, unused after the removal of the
      SHOPT_PFSH code. (re: eabd6453)
    
    src/cmd/ksh93/sh/io.c:
    - piperead(), slowread(): Replace redundant sffileno() calls by
      the variables already containing their results. (re: 50d342e4)
    
    src/cmd/ksh93/bltins/mkservice.c,
    rc/lib/libcmd/vmstate.c:
    - If these aren't compiled, define a stub function to silence the
      ranlib(1) warning that the .o file does not contain symbols.

commit ee2ba810fe5d42b41eab5a856e7b0eee61f3dea6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 1 11:38:15 2022 -0800

    Fix a few minor issues (#473)
    
    Changes:
    - Fixed two xtrace test failures introduced in commit cfc8744c.
    - The definition of _use_ntfork_tcpgrp in xec.c is now dependent on
      SHOPT_SPAWN being defined (re: 8e9ed5be).
    - Removed many unnecessary newlines and fixed various typos.

commit d4ee91395e61bf1b93e6463b4bdfbcbf81acb53e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 28 01:37:07 2022 +0100

    package test: actually make the dir argument work (re: 75dc6c5d)
    
    Whoops, forgot to commit that bit of code.

commit 75dc6c5da612b433344d9883705ac308fcf79f62
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 25 03:34:11 2022 +0100

    Restore full 'bin/package test' functionality
    
    package now uses mamake to run all available regression tests
    (currently iffe, mamake and ksh93) instead of just the ksh tests.
    
    However, as a consequence, passing options or other arguments to
    the shtests script via bin/package is no longer possible -- run
    bin/shtests directly for that.
    
    src/Mamfile, src/*/Mamfile:
    - Make the 'test' virtual target execute subdirectories by
      including the 'install' and 'all' virtual targets within it.
    
    src/cmd/ksh93/Mamfile:
    - Simplify and update the script in the 'test' virtual target.
    
    src/cmd/builtin/Mamfile:
    - Add dummy 'test' target to avoid an error.
    
    bin/package, src/cmd/INIT/package.sh:
    - Run 'mamake test' from the arch/*/src directory. This is the one
      that must be the initial working directory for mamake, though the
      Mamfiles aren't here; mamake finds them via the VPATH variable.
    - Update self-doc.

commit cfc8744c309b8157776bbf1e5fc4d3df55034910
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Feb 23 21:01:44 2022 -0800

    Backport ksh93v- regression tests and fix various regression test bugs (#472)
    
    - tests/*.sh: Backported many additional regression tests and test
      fixes from the alpha and beta releases of ksh93v-.
    
    - tests/alias.sh: Avoid trying to add vi to the hash table, as some
      platforms do not provide a vi(1) implementation installed as part
      of the default system. This fixes a regression test failure I was
      getting in one of my Linux virtual machines.
    
    - tests/builtins.sh: Fixed a bug in one of the regression tests that
      caused an incorrect total error count if any of the tests failed.
    
    - tests/sh_match.sh: Fixed a regression test failure on DragonFly
      BSD caused by the diff command printing an extra 'No differences
      encountered' line.

commit f5bae9af23d686b660b56e6a386b57de17c105b7
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Feb 23 07:11:24 2022 -0800

    Fix infinite loop when posix_spawn fails (re: f762a81a) (#468)
    
    This commit fixes an infinite loop introduced in commit f762a81a
    that caused ksh to enter an infinite loop if posix_spawn failed
    to start a new process after setting the terminal process group.
    Reproducer (warning: it will cause ksh to crash Wayland sessions
    and drives up CPU usage by a ton):
    
       $ /tmp/this/file/does/not/exist
       /usr/bin/ksh: /tmp/this/file/does/not/exist: not found
       $ <Press enter>
       (ksh now prints $PS1 in a loop until killed with SIGKILL)
    
    The first bug fixed is the infinite loop that occurs when
    posix_spawn fails to execute a command. This was fixed by setting
    the terminal process group to the main interactive shell.
    
    The second bug fixed is related to the signal handling of the
    SIGTTIN, SIGTTOU and SIGTSTP signals. In sh_ntfork() these signals
    are set to their default signal handlers (SIG_DFL) before running
    a command. The signal handlers were only restored to SIG_IGN
    (ignore signal) when sh_ntfork() successfully ran a command.
    This could cause a SIGTTOU lockup under strace when a command
    failed to execute in an interactive shell, while also being one
    cause of the infinite loop.
    
    src/cmd/ksh93/sh/xec.c: sh_ntfork():
    - Restore the terminal process group if posix_spawn failed to
      launch a new process. This is necessary because posix_spawn will
      set the terminal process group before it attempts to run a
      command and doesn't restore it on failure.

commit 50d342e411a36d538ba3456b784b2b799374b2cd
Author: atheik <14833674+atheik@users.noreply.github.com>
Date:   Wed Feb 23 05:39:15 2022 +0200

    slowread(): Turn off O_NONBLOCK for stdin if it is on (#471)
    
    This change turns off O_NONBLOCK for stdin if a previously ran
    program left it on so that interactive programs that expect it
    to be off work properly.
    
    src/cmd/ksh93/sh/io.c: slowread():
    - Turn off O_NONBLOCK for stdin if it is on.
    
    Fixes: https://github.com/ksh93/ksh/issues/469

commit a833053ad53bba1503c88fb5a6f1795ee11aed78
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Feb 19 12:55:35 2022 -0800

    Fix use after free bug when using += (re: 75796a9c) (#466)
    
    The previous fix for the += operator introduced a use-after-free
    bug that could result in a variable pointing to random garbage:
       $ foo=bar
       $ foo+=_foo true
       $ typeset -p foo
       foo=V V
    The use after free issue occurs because when nv_clone creates a
    copy of $foo in the true command's invocation-local scope, it does
    not duplicate the string $foo points to. As a result, the $foo
    variable in the parent scope points to the same string as $foo in
    the invocation-local scope, which causes the use after free bug
    when cloned $foo variable is freed from memory.
    
    src/cmd/ksh93/sh/nvdisc.c:
    - To fix the use after free bug, allow nv_clone to duplicate the
      string with memdup or strdup when no flags are passed.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add a regression test for using the += operator with regular
      commands.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add a regression test to ensure the bugfix doesn't introduce any
      memory leaks.

commit 0a4ad7b053ce6d8dde78c0bc5d2011f15fbba723
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 19 21:45:01 2022 +0100

    path_pwd(): Fix use after free (re: 85a1b79d)
    
    Of course, we should not free the 'cp' pointer when we still need
    to use it.
    
    Resolves: https://github.com/ksh93/ksh/issues/467
    Thanks to @atheik for the report.

commit 65a68b1b12f2d0cf66ad6f74cfa9661a048f66c1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 18 03:06:37 2022 +0000

    Improve custom type declaration command parsing (re: c5018f7c)
    
    dcl_dehacktivate() actually left a bit of inconsistent state beyond
    the current line because it did not clear the dummy builtins tree.
    This caused assignments to variables of types whose definitions
    were parsed but not executed to throw a "not found" error instead
    of a syntax error, even beyond the current line.
    
    There is also an opportunity for an optimisation. We do not need to
    initialise and maintain the dummy builtins tree if we're never
    going to use it. So move that to the check_typedef() function right
    before the sh_addbuiltin() call: check there if the tree exists and
    if not create it and open a view. If no 'typeset -T' or 'enum'
    type definition command is executed, the tree is never created.
    
    dcl_hacktivate() now basically does nothing until the tree is
    needed, but it does still count the recursion level and install the
    error_info.exit hook because we need this to dcl_dehacktivate() at
    the correct time when the tree does exist.
    
    dcl_dehacktivate() is amended to clear the tree -- except if we're
    running shcomp, as shcomp parses the script line by line without
    executing anything, so we need the dummies to persist beyond the
    sh_parse() invocation for the entire script. (Note that we do not
    need this workaround for dot scripts or noexec mode, as the script
    is entirely parsed in a single sh_parse() call in those cases.)

commit 26f5ff9f3c2c749d05859acf39562f73a782f4f7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 17 20:07:56 2022 +0000

    Fix crash when suspending a blocked write to a FIFO
    
    Reproducer (symptoms on at least macOS and FreeBSD):
    
    $ mkfifo f
    $ echo foo > f
    (press Ctrl+Z)
    ^Zksh: f: cannot create [Interrupted system call]
    Abort
    
    The shell either aborts (dev builds) or crashes with 'Illegal
    instruction' (release builds). This is consistent with
    UNREACHABLE() being reached.
    
    Backtrace:
    
    0   libsystem_kernel.dylib    __kill + 10
    1   ksh                       sh_done + 836 (fault.c:678)
    2   ksh                       sh_fault + 1324
    3   libsystem_platform.dylib  _sigtramp + 29
    4   dyld                      ImageLoaderMachOCompressed::resolve(ImageLoader::LinkContext const&, char const*, unsigned ch
    5   libsystem_c.dylib         abort + 127
    6   ksh                       sh_redirect + 3576 (io.c:1356)
    7   ksh                       sh_exec + 7231 (xec.c:1308)
    8   ksh                       exfile + 3247 (main.c:607)
    9   ksh                       sh_main + 3551 (main.c:368)
    10  ksh                       main + 38 (pmain.c:45)
    11  libdyld.dylib             start + 1
    
    This means that UNREACHABLE() is actually reached here:
    
    ksh/src/cmd/ksh93/sh/io.c
    1351: if((fd=sh_open(tname?tname:fname,o_mode,RW_ALL)) <0)
    1352: {
    1353:   errormsg(SH_DICT,ERROR_system(1),((o_mode&O_CREAT)?e_create:e_open),fname);
    1354:   UNREACHABLE();
    1355: }
    
    The cause is that, in the following section of code in sh_fault():
    
    ksh/src/cmd/ksh93/sh/fault.c
    183: #ifdef SIGTSTP
    184:            if(sig==SIGTSTP)
    185:            {
    186:                    sh.trapnote |= SH_SIGTSTP;
    187:                    if(pp->mode==SH_JMPCMD && sh_isstate(SH_STOPOK))
    188:                    {
    189:                            sigrelease(sig);
    190:                            sh_exit(SH_EXITSIG);
    191:                            return;
    192:                    }
    193:            }
    194: #endif /* SIGTSTP */
    
    ...sh_exit() is not getting called and the function will not return
    because the SH_STOPOK bit is not set while the shell is blocked
    waiting to write to a FIFO.
    
    Even if sh_exit() did get called, that would not fix it, because
    that function also checks for the SH_STOPOK bit and returns without
    doing a longjmp if the signal is SIGTSTP and the SH_STOPOK bit is
    not set. That is direct the reason why UNREACHABLE() was raeched:
    errormsg() does call sh_exit() but sh_exit() then does not longjmp.
    
    src/cmd/ksh93/sh/fault.c: sh_fault():
    - To avoid the crash, we simply need to return from sh_fault() if
      SH_STOPOK is off, so that the code path does not continue, no
      error message is given on Ctrl+Z, UNREACHABLE() is not reached,
      and the shell resumes waiting on trying to write to the FIFO.
      The sh.trapnote flag should not be set if we're not going to
      process the signal. This makes ksh behave like all other shells.
    
    Resolves: https://github.com/ksh93/ksh/issues/464

commit 85a1b79d1e698330cd6738dce8b78bda40dc9c0b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 17 16:19:17 2022 +0000

    Fix crash on cd in subshell with PWD unset (re: 5ee290c)
    
    Reproducer:
    
    $ ksh -c 'unset PWD; (cd /); :'
    Memory fault
    
    The shell crashes because b_cd() is testing the value of the PWD
    variable without checking if there is one.
    
    src/cmd/ksh93/sh/path.c: path_pwd():
    - Never return an unfreeable pointer to e_dot; always return a
      freeable pointer. This fixes another corner-case crashing bug.
    - Make sure the PWD variable gets assigned a value if it doesn't
      have one, even if it's the "." fallback. However, if the PWD is
      inaccessible but we did inherit a $PWD value that starts with a
      /, then use the existing $PWD value as this will help the shell
      fail gracefully.
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - b_cd(): When checking if the PWD is valid, use the sh.pwd copy
      instead of the PWD variable. This fixes the crash above.
    - b_cd(): Since path_pwd() now always returns a freeable value,
      free sh.pwd unconditionally before setting the new value.
    - b_pwd(): Not only check that path_pwd() returns a value starting
      with a slash, but also verify it with test_inode() and error out
      if it's wrong. This makes the 'pwd' command useful for checking
      that the PWD is currently accessible.
    
    src/cmd/ksh93/data/msg.c:
    - Change e_pwd error message for accuracy and clarity.

commit 4d182da866047e4496c33f56ecdede6e9479a247
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 16 07:19:37 2022 +0000

    Backport 'read -a' and 'read -p' from ksh 93v-/2020
    
    This backports two minor additions to the 'read' built-in from ksh
    93v-: '-a' is now the same as '-A' and '-u p' is the same as '-p'.
    This is for compatibility with some 93v- or ksh2020 scripts.
    
    Note that their change to the '-p' option to support both prompts
    and reading from the coprocess was *not* backported because we
    found it to be broken and unfixable. Discussoin at:
    https://github.com/ksh93/ksh/issues/463
    
    src/cmd/ksh93/bltins/read.c: b_read():
    - Backport as described above.
    - Rename the misleadingly named 'name' variable to 'prompt'.
      It points to the prompt string, not to a variable name.
    
    src/cmd/ksh93/data/builtins.c: sh_optpwd[]:
    - Add -a as an alterative to -A. All that is needed is adding '|a'
      and optget(3) will automatically convert it to 'A'.
    - Change -u from a '#' (numeric) to ':' option to support 'p'. Note
      that b_read() now needs a corresponding strtol() to convert file
      descriptor strings to numbers where applicable.
    - Tweaks.
    
    src/cmd/ksh93/sh.1:
    - Update accordingly.
    - Tidy up the unreadable mess that was the 'read' documentation.
      The options are now shown in a list.

commit f7417f777d8d875e2d2b2220043c7774fbbbae6f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 15 17:54:45 2022 +0000

    Improve and document fast filescan loops (SHOPT_FILESCAN)
    
    From README:
    
    FILESCAN on  Experimental option that allows fast reading of files
                 using while < file;do ...; done and allowing fields in
                 each line to be accessed as positional parameters.
    
    As SHOPT_FILESCAN has been enabled by default since ksh 93l
    2001-06-01, the filescan loop is now documented in the manual page
    and the compile-time option is no longer considered experimental.
    
    We must disable this at runtime if --posix is active because it
    breaks a portable use case: POSIXly, 'while <file; do stuff; done'
    repeatedly excutes 'stuff' while 'file' can successfully be opened
    for reading, without actually reading from 'file'.
    
    This also backports a bugfix from the 93v- beta. Reproducer:
    
    $ echo 'one two three' >foo
    $ while <foo; do printf '[%s] ' "$@"; echo; done
    [one two three]
    
    Expected output:
    [one] [two] [three]
    
    The bug is that "$@" acts like "$*", joining all the positional
    parameters into one word though it should be generating one word
    for each.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Backport fix for the bug described above. I do not understand the
      opaque macro.c code well enough yet to usefully describe the fix.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Improved sanity check for filescan loop: do not recognise it if
      the simple command includes variable assignments, more than one
      redirection, or an output or append redirection.
    - Disable filescan loops if --posix is active.
    - Another 93v- fix: handle interrupts (errno==EINTR) when closing
      the input file.

commit ed1368d1086db10f3db7a09ec5609164b31c33d4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 14 14:40:21 2022 +0000

    Remove SHOPT_ENV dead code and sh.env variable (re: 8d7f616e)
    
    As so often with SHOPT_* compile-time options, not all the relevant
    code was actually conditional on the option macro. After removing
    SHOPT_ENV, the arguments to sh_putenv() and env_delete() macro
    calls are dead code and, after removing that, the sh.env variable
    is unused.

commit a8f5c3cf6d7ac975f5a4becebbdaa282645bc528
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Feb 12 20:25:12 2022 -0800

    Remove unnecessary sh.defpathlist variable (re: 24d5cd85) (#461)
    
    - The sh.defpathlist variable is never set once, which makes every
      use of this variable unnecessary (as it's always null). This
      commit removes sh.defpathlist while also fixing a possible memory
      leak (there was another location where defpathinit() was invoked
      without saving the returned pointer, causing a memory leak).

commit 6b77da2fbfadb69091bbb1339704e7b86aa6a7b7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 12 21:27:36 2022 +0000

    Disable broken KEYBD trap for multibyte characters
    
    In UTF-8 locales, ksh breaks when a KEYBD trap is active, even a
    dummy no-op one like 'trap : KEYBD'. Entering multi-byte characters
    fails (the input is interrupted and a new prompt is displayed) and
    pasting content with multi-byte characters produces corrupted
    results.
    
    The cause is that the KEYBD trap code is not multibyte-ready.
    Unfortunately nobody yet understands the edit.c code well enough
    to implement a proper fix. Pending that, this commit implements
    a workaround that at least avoids breaking the shell.
    
    src/cmd/ksh93/edit/edit.c: ed_getchar():
    - When a multi-byte locale is active, do not trigger the the KEYBD
      trap except for ASCII characters (1-127).
    
    Resolves: https://github.com/ksh93/ksh/issues/307

commit 31634d6af0805a79d7593eb978340ba0186de1c9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 12 15:41:15 2022 +0000

    tests/sh_match.sh: redirect ulimit to 2>/dev/null
    
    macOS 12.2.1 doesn't seem to like the -M, -v or -d ulimit options:
    
      sh_match.sh[502]: FAIL: test_xmlfragment1/0/testfile1.xml:
      Expected empty stderr, got $'test1_script.sh[2]: ulimit: 1048576:
      limit exceeded [Invalid argument]\ntest1_script.sh[3]: ulimit:
      1048576: limit exceeded [Invalid argument]\ntest1_script.sh[4]:
      ulimit: 1048576: limit exceeded [Invalid argument]'
    
    The 'Invalid argument' addition is caused by errno==EINVAL and
    suggests the OS either doesn't support setting this limit, or
    support for it was somehow disabled.
    
    src/cmd/ksh93/tests/sh_match.sh:
    - Redirect standard error for ulimit commands to 2>/dev/null. If
      they fail it's pretty inconsequential and it's not related to
      actual ${.sh.match} testing at all.
    
    Resolves: https://github.com/ksh93/ksh/issues/459
    Thanks to @posguy99 for the report.

commit 4b445059788aeeadd8ff9940263140d6235a0e56
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 12 12:23:16 2022 +0000

    libast/sfio: remove unused Vthread API and support code
    
    Sfio may theoretically be compiled with threads support using a
    separate AT&T library called Vthread, also by Kiem-Phong Vo. That
    library was never shipped in the AST distribution, though. It is
    only available with a standalone version of Sfio.
    
    The only standalone Sfio version with Vthread that I've found is
    from 2005, mirrored at <https://github.com/lichray/sfio>. More
    recent versions never seem to have made it out of the defunct AT&T
    software download site.
    
    Even if they weren't, the rest of libast doesn't support threads,
    and at this point it never will, so for our purposes the Sfio
    threads code is never going to be usable. Meanwhile, macros such as
    SFMTXENTER and SFMTXRETURN make the code a lot harder to read. And
    not quite all threading code is disabled; some of it is dead code
    that is getting compiled in.
    
    Chances are that code now won't work properly in any case as we've
    not had any chance to test it as we were making changes. Bit rot
    has surely set in by now.
    
    So this commit expands all the sfio/stdio threading-related macros
    to their non-threads fallbacks (which is null for most of them, but
    not all), deletes dead mutex-related code and struct fields, and
    removes the related documentation from the sfio.3 man page. Unless
    I did something wrong, there should be no change in behaviour.

commit 910b9c0172b20b8511533987f8a6e8dc6550aee1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 11 12:02:27 2022 +0000

    Do not disable completion along with pathname expansion
    
    The -f/--noglob shell option is documented simply as: "Disables
    pathname expansion." But after 'set -f' on an interactive shell,
    command completion and file name completion also stop working. This
    is because they internally use the pathname expansion mechanism.
    But it is not documented anywhere that 'set -f' disables
    completion; it's just a side effect of an implementation detail.
    
    Though ksh has always acted like this, I think it should change
    because it's not useful or expected behaviour. Other shells like
    bash, yash or zsh don't act like this.
    
    src/cmd/ksh93/sh/expand.c,
    src/cmd/ksh93/sh/macro.c:
    - Allow the SH_COMPLETE (command completion) or SH_FCOMPLETE
      (file name completion) state bit to override SH_NOGLOB in
      path_generate() and in sh_macexpand().

commit f210d35f03a99f8f4175168eddc90cf90068930b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 11 09:27:17 2022 +0000

    tests/sigchild.sh: try to fix intermittent fail (re: dc80f40d)
    
    It probably won't make a difference since the 'sleep' is run in the
    background, but let's change 'sleep .5 &' back to the original
    'sleep 1 &' from the 93u+ 2012-08-01 version and see what happens.
    
    See: https://github.com/ksh93/ksh/issues/344#issuecomment-982219206

commit 95bd644a8081266a045dd33e5937c20a0d6fd68a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 11 03:17:45 2022 +0000

    do not save file desc state for subshares (re: f808296f, fb755163)
    
    The >&- redirection subshell leak fixed in f808296f still existed
    for shared-state ${ command substitutions; } a.k.a. subshares,
    which cannot be forked.
    
    I previously noticed that sh_subsavefd() saves the FD state even
    for subshares. That seems logically incorrect as subshares share
    their state with the invoking environment by definition.
    
    src/cmd/ksh93/sh/subshell.c: sh_subsavefd():
    - Sure enough, adding a check for !sh.subshare fixes the bug.
    - Use the sh.subshell counter and not the subshell data pointer to
      check for a virtual subshell. If the shell is reinitialised in a
      fork to execute a new script (see 0af81992), any parent virtual
      subshell data is currently not cleared as it is locally scoped to
      subshell.c, so that check would be incorrect then.
    
    src/cmd/ksh93/sh/io.c: sh_redirect:
    - Remove now-redundant (and actually incorrectly placed) check for
      sh.subshare added in fb755163.

commit f808296f49b7f300be07ebf46291f2a077b5b2b4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 11 02:21:47 2022 +0000

    Fix corner-case >&- redirection leak out of subshell
    
    Reproducer:
    
        exec 9>&1
        ( { exec 9>&1; } 9>&- )
        echo "test" >&9 # => 9: cannot open [Bad file descriptor]
    
    The 9>&- incorrectly persists beyond the { } block that it
    was attached to *and* beyond the ( ) subshell. This is yet another
    bug with non-forking subshells; forking it with something like
    'ulimit -t unlimited' works around the bug.
    
    In over a year we have not been able to find a real fix, but I came
    up with a workaround that forks a virtual subshell whenever it
    executes a code block with a >&- or <&- redirection attached. That
    use case is obscure enough that it should not cause any performance
    regression except in very rare corner cases.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TSETIO:
    - This is where redirections attached to code blocks are handled.
      Check for a >&- or <&- redirection using bit flaggery from
      shnodes.h and fork if we're executing such in a virtual subshell.
    
    Resolves: https://github.com/ksh93/ksh/issues/161
    Thanks to @ko1nksm for the bug report.

commit eabd645312ea980756ee7a147296f42e43d8cb4e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 10 13:44:43 2022 +0000

    Yet more misc. cleanups; rm SHOPT_PFSH, SHOPT_TYPEDEF
    
    Notable changes:
    - Remove SHOPT_PFSH compile-time option and associated code.
      This was meant to work with Solaris rights profiles, see:
      https://docs.oracle.com/cd/E23824_01/html/821-1461/profiles-1.html#REFMAN1profiles-1
      But it has been obsolete for years as Solaris stopped using
      it in its shipped ksh several OS versions ago, preferring a
      library-based wrapper around ksh and other shells.
      Nonetheless I experimented with the option on Solaris 11.4.
      Result: no external command will run; output of unitialised
      memory in error message. So it's already fallen victim to bit
      rot. There's nothing interesting here, so just get rid.
    - Remove SHOPT_TYPEDEF compile-time option (but keep the code!).
      Turning it off caused the build to fail. It may be possible to
      fix it, but the type definition code is integral to ksh now (e.g.
      'enum' depends on much of it) so it makes no sense to disable it.
      This was removed in the ksh 93v- beta version as well.
    - Remove nv_close() calls and remove nv_close() documentation from
      the nval.3 man page. This function is a dummy, present without
      any changes since the beginning of the ast-open-archive repo in
      1995. The comment was: "Currently this is a dummy, but someday
      will be needed for reference counting". 27 or more years later,
      it's time to admit it's never going to happen. (And of course,
      nv_close() calls were not being used with anything resembling
      consistency.)
    - Add a null nv_close() macro to nval.h for compatibility with
      third party code that follows the old documentation.
    - Add a few missing regression tests.

commit dfb09da8958ca874ecc0e69e3941d0b86f1fc050
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Feb 9 18:04:44 2022 -0800

    Fix one buffer overflow in 'typeset -p .sh.type' (#457)
    
    This small commit replaces one instance of memcmp with strncmp to
    fix one of the buffer overflows that causes 'typeset -p .sh.type'
    to crash (see also https://github.com/ksh93/ksh/issues/456).

commit b1b8d6ffaa39b79ca549dbbe528202cd63c4c305
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Feb 8 16:01:40 2022 -0800

    Fix multiple bugs in .sh.match (#455)
    
    This commit backports all of the relevant .sh.match bugfixes from
    ksh93v-. Most of the .sh.match rewrite is from versions 2012-08-24
    and 2012-10-04, with patches from later releases of 93v- and
    ksh2020 also applied. Note that there are still some remaining bugs
    in .sh.match, although now the total count of .sh.match bugs should
    be less that before.
    
    These are the relevant changes in the ksh93v- changelog that were
    backported:
    12-08-07  .sh.match no longer gets set for patterns in PS4 during
              set -x.
    12-08-10  Rewrote .sh.match expansions fixing several bugs and
              improving performance.
    12-08-22  .sh.match now handles subpatterns that had no matches with
              ${var//pattern} correctly.
    12-08-21  A bug in setting .sh.match after ${var//pattern/string}
              when string is empty has been fixed.
    12-08-21  A bug in setting .sh.match after [[ string == pattern ]]
              has been fixed.
    12-08-31  A bug that could cause a core dump after
              typeset -m var=.sh.match has been fixed.
    12-09-10  Fixed a bug in typeset -m the .sh.match is being renamed.
    12-09-07  Fixed a bug in .sh.match code that coud cause the shell
              to quitely
    13-02-21  The 12-01-16 bug fix prevented .sh.match from being used
              in the replacement string. The previous code was restored
              and a different fix which prevented .sh.match from being
              computed for nested replacement has been used instead.
    13-05-28  Fixed two bug for typeset -c and typeset -m for variable
              .sh.match.
    
    Changes:
    - The SHOPT_2DMATCH option has been removed. This was already the
      default behavior previously, and now it's documented in the man
      page.
    - init.c: Backported the sh_setmatch() rewrite from 93v- 2012-08-24
      and 2012-10-04.
    - Backported the libast 93v- strngrpmatch() function, as the
      .sh.match rewrite requires this API.
    - Backported the sh_match regression tests from ksh93v-, with many
      other sh_match tests backported from ksh2020. Much of the sh_match
      script is based on code from Roland Mainz:
      https://marc.info/?l=ast-developers&m=134606574109162&w=2
      https://marc.info/?l=ast-developers&m=134490505607093
    - tests/{substring,treemove}.sh: Backported other relevant .sh.match
      fixes, with tests added to the substring and treemove test scripts.
    - tests/types.sh: One of the (now reverted) memory leak bugfixes
      introduced a CI test failure in this script, so for that test the
      error message has been improved.
    - string/strmatch.c: The original ksh93v- code for the strngrpmatch()
      changes introduced a crash that could occur because strlen would
      be used on a null pointer. This has been fixed by avoiding strlen
      if the string is null.
    
    One nice side effect of these changes is a considerable performance
    improvement in the shbench[1] gsub benchmark (results from 20
    iterations with CCFLAGS=-Os):
    --------------------------------------------------
    name      /tmp/ksh-current     /tmp/ksh-matchfixes
    --------------------------------------------------
    gsub.ksh  0.883 [0.822-0.959]  0.457 [0.442-0.505]
    --------------------------------------------------
    
    Despite all of the many fixes and improvements in the backported
    93v- .sh.match code, there are a few remaining bugs:
    
    - .sh.match is printed with a default [0] subscript (see also
      https://github.com/ksh93/ksh/issues/308#issuecomment-1025016088):
         $ arch/*/bin/ksh -c 'echo ${!.sh.match}'
           .sh.match[0]
      This bug appears to have been introduced by the changes from
      ksh93v- 2012-08-24.
    - The wrong variable name is given for 'parameter not set' errors
      (from https://marc.info/?l=ast-developers&m=134489094602596):
         $ arch/*/bin/ksh -u
         $ x=1234
         $ true "${x//~(X)([012])|([345])/}"
         $ compound co
         $ typeset -m co.array=.sh.match
         $ printf "%q\n" "${co.array[2][0]}"
         arch/linux.i386-64/bin/ksh: co.array[2][(null)]: parameter not set
    - .sh.match leaks out of subshells. Further information and a
      reproducer can be found here:
      https://marc.info/?l=ast-developers&m=136292897330187
    
    [1]: https://github.com/ksh-community/shbench

commit 0af81992ed81cb00af98d8df15d5c3cf76f6833a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 8 21:40:19 2022 +0000

    Fix multiple bugs in executing scripts without a #! path
    
    When executing a script without a hashbang path like #!/bin/ksh,
    ksh forks itself, longjmps back to sh_main(), and then (among other
    things) calling sh_reinit() which is the function that tries to
    reinitialise as much of the shell as it can. This is its way of
    ensuring the child script is run in ksh and not some other shell.
    
    However, this appraoch is incredibly buggy. Among other things,
    changes in built-in commands and custom type definitions survived
    the reinitialisation, "exporting" variables didn't work properly,
    and the hash table and ${.sh.stats} weren't reset. As a result,
    depending on what the invoking script did, the invoked script could
    easily fail or malfunction.
    
    It is not actually possible to reinitialise the shell correctly,
    because some of the shell state is in locally scoped static
    variables that cannot simply be reinitialised. There are probably
    huge memory leaks with this approach as well. At some point, all
    this is going to need a total redesign. Clearly, the only reliable
    way involves execve(2) and a start from scratch.
    
    For now though, this seems to fix the known bugs at least. I'm sure
    there are more to be discovered.
    
    This commit makes another change: instead of the -h/trackall option
    (which has been a no-op for decades), the posix option is now
    inherited by the child script. Since there is no hashbang path from
    which to decide whether the shell should run in POSIX mode nor not,
    the best guess is probably the invoking script's setting.
    
    src/cmd/ksh93/sh/init.c: sh_reinit():
    - Keep the SH_INIT state on during the entire procedure.
    - Delete remaining non-exported, non-default variables.
    - Remove attributes from exported variables. In POSIX mode, remove
      all attributes; otherwise, only remove readonly.
    - Unset discipline function pointers for variables.
    - Delete all custom types.
    - Delete all functions and built-ins, then reinitialise the built-ins
      table from scatch.
    - Free the alias values before clearing the alias table.
    - Same with hash table entries (tracked aliases).
    - Reset statistics.
    - Inherit SH_POSIX instead of SH_TRACKALL.
    - Call user init function last, not somewhere in the middle.
    
    src/cmd/ksh93/sh/name.c: sh_envnolocal():
    - Be sure to preserve the export attribute of kept variables.
    
    Resolves: https://github.com/ksh93/ksh/issues/350

commit de037b6ee3c7c576d2e42593cfe75ae2434a432e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Feb 8 11:52:13 2022 -0800

    Fix 'typeset -p' output of compound array types (#453)
    
    This bugfix was backported from ksh93v- 2012-10-04. The bug fixed
    by this change is one that causes 'typeset -p' to omit the -C flag
    when listing compound arrays belonging to a type:
    
       $ typeset -T Foo_t=(compound -a bar)
       $ Foo_t baz
       $ typeset -p baz.bar
       typeset -a baz.bar=''  # This should be 'typeset -C -a'
    
    src/cmd/ksh93/sh/nvtype.c:
    - Backport change from 93v- 2012-10-04 that sets the array nvalue to
      a pointer named Null (which is "") in nv_mktype(), then to Empty
      in fixnode().
    - Change the Null name from the 93v- code to AltEmpty to avoid
      misleading code readers into thinking that it's a null pointer.
    
    src/cmd/ksh93/tests/types.sh:
    - Backport the relevant 93v- changes to the types regression tests.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 60486bdcae323ce03e8cc125ab5e9913491e11dd
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Feb 8 11:40:17 2022 -0800

    Fix the output of `typeset -p` for two dimensional indexed arrays (#454)
    
    In ksh93v- 2012-10-04 the following bugfix is noted in the changelog
    (this fix was most likely part of ksh93v- 2012-09-27, although that
    version is not archived anywhere):
    12-09-21  A bug in which the output of a two dimensional sparse
              indexed array would cause the second subscript be treated
              as an associative array when read back in has been fixed.
              Elements that are sparse indexed arrays now are prefixed
              type "typeset -a".
    
    Below is a before and after of this change:
    
       # Before
       $ typeset -a foo[1][2]=bar
       $ typeset -p foo
       typeset -a foo=([1]=([2]=bar) )
    
       # After
       $ typeset -a foo[1][2]=bar
       $ typeset -p foo
       typeset -a foo=(typeset -a [1]=([2]=bar) )
    
    src/cmd/ksh93/sh/*.c:
    - Backport changes from ksh93v- to print 'typeset -a' before sparse
      indexed arrays and properly handle 'typeset -a' in reinput
      commands from 'typeset -p'.
    
    src/cmd/ksh93/tests:
    - Add two regression tests to arrays.sh for this change.
    - Update the existing regression tests for compatibility with the
      new printed typeset output.

commit 7d8c453fa184c98e0d8a360c5674dc36cdf14d11
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 8 18:33:44 2022 +0000

    Don't allow 'enum' and 'typeset -T' to override special built-ins
    
    Special builtins are undeleteable for a reason. But 'enum' and
    'typeset -T' allow overriding them, causing an inconsistent state.
    
    @JohnoKing writes:
    | The behavior is rather buggy, as it appears to successfully
    | override normal builtins but fails to delete the special
    | builtins, leading to scenarios where both the original builtin
    | and type are run:
    |
    | $ typeset -T eval=(typeset BAD; typeset TYPE)  # This should have failed
    | $ eval foo=BAD
    | /usr/bin/ksh: eval: line 1: foo: not found
    | $ enum trap=(BAD TYPE)   # This also should have failed
    | $ trap foo=BAD
    | /usr/bin/ksh: trap: condition(s) required
    | $ enum umask=(BAD TYPE)
    | $ umask foo=BAD
    | $ echo $foo
    | BAD
    |
    | # Examples of general bugginess
    | $ trap bar=TYPE
    | /usr/bin/ksh: trap: condition(s) required
    | $ echo $bar
    | TYPE
    | $ eval var=TYPE
    | /usr/bin/ksh: eval: line 1: var: not found
    | $ echo $var
    | TYPE
    
    This commit fixes the following:
    
    The 'enum' and 'typeset -T' commands are no longer allowed to
    override and replace special built-in commands, except for type
    definition commands previously created by these commands; these
    are already (dis)allowed elsewhere.
    
    A command like 'typeset -T foo_t' without any assignments no longer
    creates an incompletely defined 'foo_t' built-in comamnd. Instead,
    it is now silently ignored for backwards compatibility. This did
    have a regression test checking for it, but I'm changing it because
    that's just not a valid use case. An incomplete type definition
    command does nothing useful and only crashes the shell when run.
    
    src/cmd/ksh93/bltins/enum.c: b_enum():
    - Do not allow overriding non-type special built-ins.
    
    src/cmd/ksh93/sh/name.c: nv_setlist():
    - Do not allow 'typeset -T' to override non-type special built-ins.
      To avoid an inconsistent state, this must be checked for while
      processing the assignments list before typeset is really invoked.
    
    src/cmd/ksh93/bltins_typeset.c: b_typeset():
    - Only create a type command if sh.envlist is set, i.e., if some
      shell assignment(s) were passed to the 'typeset -T' command.
    
    Progresses: https://github.com/ksh93/ksh/issues/350

commit 011fc1122af8203984a24e72397da84821843c90
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 6 02:32:17 2022 +0000

    Fix build on tcc with glibc 2.35
    
    Building ksh with the tcc (tinycc) compiler failed as of glibc
    commit 5d98a7da. The NEWS file in that commit adds:
    
    +* When _DYNAMIC_STACK_SIZE_SOURCE or _GNU_SOURCE are defined,
    +  PTHREAD_STACK_MIN is no longer constant and is redefined to
    +  sysconf(_SC_THREAD_STACK_MIN).
    
    The tcc build failure seeminly had nothing to do with that --
    however, deleting the PTHREAD_STACK_MIN entry and its dependent
    THREAD_STACK_MIN entry from conf.tab fixes the build failure.
    
    For reasons unknown, gcc didn't have a problem with it. However,
    these config identifiers aren't used anywhere in the ast codebase
    (including the full ast-open-history repo) so it should be fine to
    just get rid of them; ksh is not and will not be threaded.
    
    NOTE: To build ksh with tcc, you need to build the latest tcc code
    from <https://repo.or.cz/tinycc>. The tcc release packages in OS
    distributions are typically too old and will not work.
    
    Resolves: https://github.com/ksh93/ksh/issues/437
    Thanks to @JohnoKing for the report.

commit ad5f2b019a1106037aa909357ad8c940576bcb71
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 5 22:52:47 2022 +0000

    Fix conditional expansions ${array[i]=value}, ${array[i]?error}
    
        $ unset foo
        $ echo ${foo[42]=bar}
        (empty line)
    
    Instead of the empty line, 'bar' was expected. As foo[42] was
    unset, the conditional assignment should have worked.
    
        $ unset foo
        $ : ${foo[42]?error: unset}
        (no output)
    
    The expansion should have thrown an error with the given message.
    
    This bug was introduced in ksh 93t 2008-10-01. Thanks to @JohnoKing
    for finding the breaking change.
    
    Analysis: The problem was experimenally determined to be in in the
    following lines of nv_putsub(). If the array member is unset (i.e.
    null), the value is set to the empty string instead:
    
    src/cmd/ksh93/sh/array.c
    1250:           else
    1251:                   ap->val[size].cp = Empty;
    
    It makes some sense: if there is a value (even an empty one), the
    variable is set and these expansions should behave accordingly.
    Sure enough, deleting these lines fixes the bug, but at the expense
    of introducing a lot of other array-related regressions. So we need
    a way to special-case the affected expansions.
    
    Where to do this? If we replace line 1251 with an abort(3) call, we
    get this stack trace:
    
    0   libsystem_kernel.dylib    __pthread_kill + 10
    1   libsystem_pthread.dylib   pthread_kill + 284
    2   libsystem_c.dylib         abort + 127
    3   ksh                       nv_putsub + 1411 (array.c:1255)
    4   ksh                       nv_endsubscript + 940 (array.c:1547)
    5   ksh                       nv_create + 4732 (name.c:1066)
    6   ksh                       nv_open + 1951 (name.c:1425)
    7   ksh                       varsub + 4934 (macro.c:1322)
    [rest omitted]
    
    The special-casing needs to be done on line 1250 of array.c, but
    flagged in varsub() which processes these expansions. So, varsub()
    calls nv_open() calls nv_create() calls nv_endsubscript() calls
    nv_putsub(). That's a fairly deep call stack, so passing an extra
    flag argument does not seem doable. I did try an approach using a
    couple of new bit flags passed via these functions' flags and mode
    parameters, but the way this code base uses bit flags is so
    intricate, it does not seem to be possible to add or change
    anything without unwanted side effects in all sorts of places.
    
    So the only fix I can think of adds yet another global flag
    variable for a very special case. It's ugly, but it works.
    An elegant fix would probably involve a fairly comprehensive
    redesign, which is simply not going to happen.
    
    src/cmd/ksh93/include/shell.h:
    - Add global sh.cond_expan flag.
    
    src/cmd/ksh93/sh/array.c: nv_putsub():
    - Do not set value to empty string if sh.cond_expan is set.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Set sh.cond_expan flag while calling nv_open() for one of the
      affected expansions.
    - Minor refactoring for legibility and to make the fix fit better.
    - SSOT: Instead of repeating string "REPLY", use the node's nvname.
    - Do not pointlessly add an extra 0 byte when saving id for error
      message; sfstruse() already adds this.
    
    Resolves: https://github.com/ksh93/ksh/issues/383

commit e77e61d3924316e13984e3e374500b3c1425816a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 5 15:04:12 2022 +0000

    Do not export variables with dot names (re: 608c1b6d)
    
    Variables with a dot in their name, such as those declared in
    namespace { ... } blocks, are usually stored in a separate tree
    with their actual names not containing any dots. But under some
    circumstances, including at least direct assignment of a
    non-preexisting dot variable, dot variables are stored in the main
    sh.var_tree with names actually containing dots. With allexport
    active, those could end up exported to the environment. This bug
    was also present in previous release versions of ksh.
    
    src/cmd/ksh93/sh/name.c: pushnam():
    - Check for a dot in the name before pushing a variable to export.

commit e19bac3c6eec1ad48df181a63ef9af9ed2d5e44d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Feb 5 05:09:25 2022 -0800

    typeset -p: fix output of nonexistent [0]= array element (#451)
    
    This fix was backported from ksh 93v- 2012-10-04.
    
    src/cmd/ksh93/sh/nvtree.c: nv_outnode():
    - If the array is supposed to be empty, do not continue. This
      avoids outputting a nonexistent [0]= element for empty arrays.
    
    Resolves: https://github.com/ksh93/ksh/issues/420
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 1e4575d4adfe81a91b2afdeb77cae90f50ea8db8
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Feb 4 18:29:23 2022 -0800

    trap: fix use after free (#446)
    
    This commit adds a fix for the trap command, backported from a fork
    of ksh2020: https://github.com/l0stman/ksh/commit/2033375f
    
    src/cmd/ksh93/sh/jobs.c: job_chldtrap():
    - Fixed a use after free bug in the for loop. The string pointed to
      by sh.st.trapcom[SIGCHLD] may be freed from memory after
      sh_trap(), so it must be reobtained each time sh_trap() is called
      from within the for loop.

commit f762a81a822c20ef30897e2c3921802d77b1b141
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Feb 4 11:12:59 2022 -0800

    libast: spawnveg(3): update for glibc 2.35 (re: 8e9ed5be) (#450)
    
    Version 2.35 of glibc has recently been released[1]. Shortly before
    the release, posix_spawnattr_tcsetpgrp_np was replaced by
    posix_spawn_file_actions_addtcsetpgrp_np()[2]. This commit updates
    spawnveg(3) to use the new function instead for setting the
    terminal group.
    
    [1]: https://sourceware.org/pipermail/libc-alpha/2022-February/136040.html
    [2]: https://sourceware.org/git/?p=glibc.git;a=commit;h=6289d28d3c4e56f34830cfb011c31271ef850418
    
    src/lib/libast/comp/spawnveg.c,
    src/lib/libast/man/spawnveg.3:
    - Allow spawnveg to set the terminal process group when pgid == 0.
      This was necessary to avoid race conditions when using the new
      function.
    - Updated the man page to account for spawnveg's change in
      behavior.
    
    src/lib/libast/features/api,
    src/cmd/ksh93/include/defs.h:
    - Increment libast version since spawnveg now doesn't ignore tcfd
      if pgid is zero.

commit 608c1b6d3ac8fbbc5972180bbf6ffb64c31dca08
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Feb 3 21:52:53 2022 -0800

    Export all variables assigned to while allexport is on (#431)
    
    All variables that are assigned a value should be exported while
    the allexport shell option is enabled. This works in most cases,
    but variables assigned to with ${var:=foo} or $((var=123)) aren't
    exported while allexport is on.
    
    src/cmd/ksh93/sh/name.c:
    - nv_putval(): This is the central assignment function; all forms
      of variable assignment end up here. So this is the best place
      to check for SH_ALLEXPORT and turn on the export attribute.
    - nv_setlist(): Remove allexport handling, now redundant.
    
    src/cmd/ksh93/bltins/read.c: sh_readline():
    - Remove allexport handling, now redundant.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - nv_putval() is used to initialize PS4 and IFS using nv_putval();
      this is after an -a/--allexport specified on the ksh command
      line has been processed, so temporarily turn that off.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 11c6968acf6b7dfdb2d55d8f185214cf362e462c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 3 00:49:17 2022 +0000

    README.md: update NEWS and SHOPT.sh links
    
    They still pointed to the master branch after it was renamed to dev
    on the 2nd of January. Thanks to @Maselko for the heads-up.
    
    Resolves: https://github.com/ksh93/ksh/issues/448

commit 8e9ed5be147c16a3cd61e01070b8b2669db9172a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Feb 2 16:34:52 2022 -0800

    Implement support for POSIX_SPAWN_TCSETPGROUP (#438)
    
    This commit implements support for the glibc POSIX_SPAWN_TCSETPGROUP
    and posix_spawnattr_tcsetpgrp_np extensions[1]. This was done with
    the intention of improving performance in interactive shells without
    reintroducing previous race conditions[2][3]. These changes were
    tested with glibc commit 342cc934.
    
    [1]: https://sourceware.org/git/?p=glibc.git;a=commit;h=342cc934a3bf74ac618e2318d738f22ac93257ba
    [2]: https://github.com/ksh93/ksh/issues/79
    [3]: https://www.mail-archive.com/ast-developers@research.att.com/msg00717.html
    
    src/cmd/ksh93/sh/path.c:
    - Tell spawnveg to set the terminal process group when launching a
      child process in an interactive shell.
    
    src/cmd/ksh93/sh/xec.c:
    - Allow usage of spawnveg when posix_spawnattr_tcsetpgrp_np is
      available.
    - Reimplement most of the sh_ntfork() SIGTSTP handling code removed
      in commit 66c37202.
    
    src/lib/libast/comp/spawnveg.c,
    src/lib/libast/misc/procopen.c,
    src/lib/libast/features/sys:
    - Add support for POSIX_SPAWN_TCSETPGROUP as implemented in glibc.
      This code (with a few changes) might also work on QNX, but I've
      avoided changing anything on that OS since I don't have a QNX
      system to test with.
    
    src/lib/libast/man/spawnveg.3:
    - Document the changes to spawnveg(3) in the corresponding man
      page. Currently spawnveg will only use the new tcfd argument if
      posix_spawnattr_tcsetpgrp_np is supported. This could also be
      implemented for the fork fallback, but for now I've avoided
      changing that since actually using it in the fork code would
      likely require a lot of hackery to avoid attempting tcsetpgrp
      with vfork (the behavior of tcsetpgrp after vfork is not
      portable) and would only benefit systems that don't have
      posix_spawn and vfork (I can't recall any off the top of my head
      that would fall under that category).
    
    src/lib/libast/features/lib:
    - Detect the existence of the GNU posix_spawnattr_tcsetpgrp_np()
      extension.
    - Do not detect an OS spawnveg(3). With the API changes to spawnveg
      in this pull request ksh probably can't use the OS's spawnveg
      function anymore. (That's assuming anything else even provides a
      spawnveg function to begin with, which is unlikely.)
    
    src/lib/libast/features/api,
    src/cmd/ksh93/include/defs.h:
    - Bump libast version (20220101 => 20220201) due to the spawnveg(3)
      API change.

commit 10e4ce5f8c31d0fea51760f6f96b332838fa12dc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 1 23:38:14 2022 +0000

    Default to emacs upon invoking interactive shell
    
    If the VISUAL or EDITOR environment variable is not set to a value
    matching *[Vv][Ii]* or *macs* at initialisation time, then ksh does
    not turn on any line editor.
    
    This is user-hostile. New users on Unix-like systems typically have
    a simple editor like nano preconfigured as their default, or may
    not have the VISUAL or EDITOR variable set at all. So if they try
    ksh, they find themselves without basic functionality such as arrow
    keys and probably go straight back to bash.
    
    The emacs line editor is by far the most widely used, especially
    among new users, so ksh should default to that. Most other shells
    already do this.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - On an interactive shell, if on editor was turned on based on
      $VISUAL or $EDITOR, turn on emacs before reading input.

commit 2d6a474026ef4a248ab5665421fcba1f41852691
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 1 03:11:10 2022 +0000

    Fix SIGINT handling for external commands run from scripts
    
    Reproducer:
    
      $ ksh -c 'bash -c '\''kill -s INT $$'\''; echo "$?, continuing"'
    
    Expected result: output "258, continuing"; exit status 0.
    
    Actual result: no output; exit status 258. The child process sent
    SIGINT only to itself and not to the process group, so the parent
    script was wrongly interrupted.
    
    Every shell except ksh93 produces the expected result. ksh93 also
    gave the expected result before version 2008-01-31 93s+, which
    introduced the code below.
    
    Analysis: The problem is in these lines of code in xec.c,
    sh_exec(), TFORK case, parent branch of fork:
    
    1649:   if(!sh_isstate(SH_MONITOR))
    1650:   {
    1651:           if(!(sh.sigflag[SIGINT]&(SH_SIGFAULT|SH_SIGOFF)))
    1652:                   sh_sigtrap(SIGINT);
    1653:           sh.trapnote |= SH_SIGIGNORE;
    1654:   }
    [...pipe and I/O handling, wait for command to finish...]
    1667:   if(!sh_isstate(SH_MONITOR))
    1668:   {
    1669:           sh.trapnote &= ~SH_SIGIGNORE;
    1700:           if(sh.exitval == (SH_EXITSIG|SIGINT))
    1701:                   kill(sh.current_pid,SIGINT);
    1702:   }
    
    When a user presses Ctrl+C, SIGINT is sent to the entire process
    group. If job control is fully off (i.e., !sh_isstate(SH_MONITOR)),
    then the process group includes the parent script. Therefore, in a
    script such as
    
      $ ksh -c 'bash -c '\''read x'\''; echo "$?, continuing"'
    
    when the user presses Ctrl+C while bash waits for 'read x' input,
    the parent ksh script should be interrupted as well.
    
    Now, the code above ignores SIGINT while bash is running. (This is
    done using special-casing in sh_fault() to handle that SH_SIGIGNORE
    flag for SIGINT.) So, when Ctrl+C interrupts the process group, the
    parent script is not getting interrupted as it should.
    
    To compensate for that, the code then detects, using sh.exitval
    (the child process' exit status), whether the child process was
    killed by SIGINT. If so, it simply assumes that the signal was
    meant for the process group including the parent script, so it
    reissues SIGINT to itself after unignoring it.
    
    But, as we can see from the broken reproducer above, that
    assumption is not valid. Scripts are perfectly free to send SIGINT
    to themselves only, and that must work as expected.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TFORK: parent branch:
    - Instead of ignoring SIGINT, sigblock() it, which delays handling
      the signal until sigrelease(). (Note that these are macros
      defined in src/cmd/ksh93/features/sigfeatures according to OS
      capabilities.)
    - This makes reissuing SIGINT redundant, so delete that, which
      fixes the bug.
    
    src/cmd/ksh93/sh/fault.c:
    - Nothing now sets the SH_SIGIGNORE flag in sh.trapnote, so remove
      special-casing added in 2008-01-31 93s+.

commit 4474f2959bb0a654bbccb8110d026ba9d9cdd2ea
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jan 31 13:09:50 2022 -0800

    Add support for more keyboard shortcuts (#410)
    
    Add extra key bindings to the emacs and vi modes
    
    This patch adds the following key bindings to the emacs and vi
    editing modes:
    - Support for Home key sequences ^[[1~ and ^[[7~ as well as End key
      sequences ^[[4~ and ^[[8~.
    - Support for arrow key sequences ^[OA, ^[OB, ^[OC and ^[OD.
    - Support for the following keyboard shortcuts (if the platform
      supports the expected escape sequence):
      - Ctrl-Left Arrow:  Go back one word
      - Alt-Left Arrow:   Go back one word     (Not supported on Haiku)
      - Ctrl-Right Arrow: Go forward one word
      - Alt-Right Arrow:  Go forward one word  (Not supported on Haiku)
      - Ctrl-G:           Cancel reverse search
      - Ctrl-Delete:      Delete next word     (Not supported on Haiku)
    - Added a key binding for the Insert key, which differs in the
      emacs and vi editing modes:
      - In emacs mode, Insert escapes the next character.
      - In vi mode, Insert will switch the editor to insert mode (like
        in vim).
    
    src/cmd/ksh93/edit/{emacs,vi}.c:
    - Add support for the <M-Left> and <M-Right> sequences. Like in
      bash and mksh, these shortcuts move the cursor one word backward
      or forward (like the <Ctrl-Left> and <Ctrl-Right> shortcuts).
    - Only attempt to process these shortcuts if the escape sequence
      begins with $'\E[1;'.
    
    src/cmd/ksh93/edit/vi.c:
    - If the shell isn't doing a reverse search, insert the bell
      character when Ctrl+G is input.
    - Add the Ctrl-Delete shortcut as an alias of 'dw'. Calling
      ed_ungetchar twice does not work for 'dw', so Ctrl-Delete was
      implemented by using a vp->del_word variable.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit ea830096194ee3d704e6f104516d043635ccfafc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 30 20:37:09 2022 +0000

    Update copyright years in files changed since 1st Jan 2022

commit 8a9c0a89deaf9b268c97690ec9076db77982d055
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jan 30 12:09:14 2022 -0800

    Accumulated fixes for minor issues (#442)
    
    This commit applies various accumulated bugfixes:
    
    - Applied some fixes for compiler warnings based off of the
      following pull requests (with whitespace changes excluded to
      avoid inflating the size of the diff):
    
      https://github.com/att/ast/pull/281
      https://github.com/att/ast/pull/283
      https://github.com/att/ast/pull/303
      https://github.com/att/ast/pull/304
    
    - clone_type(): Two separate variables in this function share the
      same name. A bugfix from ksh93v- 2013-05-24 was backported to
      avoid conflict issues.
    
    - Backported a minor error message improvement from ksh2020 for
      when the user attempts to run too many coprocesses.
    
    - Backported a ksh2020 bugfix for a file descriptor leak:
      https://github.com/att/ast/commit/58bc8b56
    
    - Backported ksh2020 bugfixes for unused variable and pointless
      assignment lint warnings:
      https://github.com/att/ast/commit/47650fe0
      https://github.com/att/ast/commit/df209c0d
      https://github.com/att/ast/commit/5e417b00
    
    - Applied a few minor improvements to libast from graphviz:
      https://gitlab.com/graphviz/graphviz/-/commit/e7c03541
      https://gitlab.com/graphviz/graphviz/-/commit/969a7cde
    
    - dtmemory(): Mark unused parameters with NOT_USED(). Based on:
      https://gitlab.com/graphviz/graphviz/-/commit/6ac3ad99
    
    - Applied a few documentation/comment tweaks for the NEWS file,
      printf -v and spawnveg.
    
    - Added a missing regression test for using the rm builtin's -f
      option without additional arguments (this was fixed in
      ksh93u+ 2012-02-14).

commit 24d5cd853e3661c704abb55ed596d03d51c4e722
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jan 29 09:37:48 2022 -0800

    Fix memory leak in defpathinit() (#441)
    
    Currently, running ksh under ASan without the ASAN_OPTIONS variable
    set to 'detect_leaks=0' usually ends with ASan complaining about a
    memory leak in defpathinit() (this leak doesn't grow in a loop, so
    no regression test was added to leaks.sh). Reproducer:
    
     $ ENV=/dev/null arch/*/bin/ksh
     $ cp -?
     cp: invalid option -- '?'
     Try 'cp --help' for more information.
     $ exit
    
     =================================================================
     ==225132==ERROR: LeakSanitizer: detected memory leaks
    
     Direct leak of 85 byte(s) in 1 object(s) allocated from:
         #0 0x7f6dab42d459 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cpp:154
         #1 0x5647b77fe144 in sh_calloc /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/init.c:265
         #2 0x5647b788fea9 in path_addcomp /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/path.c:1567
         #3 0x5647b78911ed in path_addpath /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/path.c:1705
         #4 0x5647b7888e82 in defpathinit /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/path.c:442
         #5 0x5647b78869f3 in ondefpath /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/sh/path.c:67
     --- cut ---
     SUMMARY: AddressSanitizer: 174 byte(s) leaked in 2 allocation(s).
    
    Analysis: The previous code was leaking memory because
    defpathinit() returns a pointer from path_addpath(), which has
    memory allocated to it in path_addcomp(). This is the code ASan
    traced as having allocated memory:
    
    442:    return(path_addpath((Pathcomp_t*)0,(defpath),PATH_PATH));
    
    In path_addpath():
    1705:   first = path_addcomp(first,old,cp,type);
    [...]
    1729:   return(first);
    
    In path_addcomp():
    1567:   pp = sh_newof((Pathcomp_t*)0,Pathcomp_t,1,len+1);
    
    The ondefpath() function doesn't save a reference to the pointer
    returned by defpathinit(), which causes the memory leak:
    
    66:     if(!defpath)
    67:             defpathinit();
    
    The changes in this commit avoid this problem by setting the
    defpath variable without also calling path_addpath().
    
    src/cmd/ksh93/sh/path.c:
    - Move the code for allocating defpath from defpathinit() into its
      own dedicated function called std_path(). This function is called
      by defpathinit() and ondefpath() to obtain the current string
      stored in the defpath variable. This bugfix is adapted from a
      fork of ksh2020: https://github.com/l0stman/ksh/commit/db5c83a6

commit daf483d7a6d03fd60f68fac49a6770ea86f9cc05
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 29 03:52:27 2022 +0000

    array_grow(): fix wrong sizeof()
    
    The array_grow() function calculates the size by multiplying with
    sizeof(union Value*), where sizeof(union Value) was clearly meant.
    In practice, these are the same size on most (or maybe even all)
    systems, as no current member of union Value is larger than a
    pointer -- see name.h. But it's still wrong.

commit e38cd6098a1c787cb3a3ffce9693c7b229b87792
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 28 21:06:36 2022 +0000

    libast/regex: do not use small block size for stack (re: e311f1e6)
    
    Opening the match stack with the STK_SMALL flag causes the stk code
    to allocate memory in blocks of 64*sizeof(char*) instead of
    1024*sizeof(char*). This caused a significant slowdown which was
    exposed by the extglob.ksh module of shbench. Thanks to @JohnoKing
    for noticing and reporting the problem.
    
    src/lib/libast/regex/regcomp.c: regcomp():
    - Remove STK_SMALL from the stkopen() option bit flags.
    
    Resolves: https://github.com/ksh93/ksh/issues/440

commit 9b4891ab0840e8fa5c214d874c02748a4d2be874
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 28 20:30:52 2022 +0000

    Another round of accumulated tweaks and cleanups
    
    Notable changes:
    
    src/cmd/ksh93/*.c:
    - Get rid of all the dtuserdata(FOO,&sh,1) calls backported in
      cc492752. These set pointers to sh in Cdt objects. As of 4491bc6a
      and its follow-up commits, the code does not use any pointers to
      sh, so these are superfluous.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - As of ksh 93l 2001-06-01, the -h/trackall option has no effect at
      all, so trim its documentation.
    
    src/lib/libast/man/stk.3,
    src/lib/libast/man/stak.3:
    - Correct the documentation on what the ST(A)K_SMALL option bit
      actually does based on a reading of the code.
    - Document the STK_NULL option bit.
    
    README.md,
    src/cmd/ksh93/README:
    - Add a note that -fdiagnostics-color=always will break the build.
      Ref.: https://github.com/ksh93/ksh/issues/379
    
    src/lib/libast/Mamfile:
    - Remove a 'rm -f astmath' command -- a file that is never created.
      But on Cygwin this removes astmath.exe, which *is* used. As a
      result, executing it failed on Cygwin, so the system incorrectly
      detected that Cygwin needs -lm for math functions.

commit 87ad17e64f02f78ae2f17ce007a9c2a5e257cbf7
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 27 22:58:01 2022 -0800

    libast: Use POSIX_SPAWN_SETSID in spawnveg when needed (#439)
    
    This commit implements support for POSIX_SPAWN_SETSID in
    spawnveg(3). The fork/vfork fallback for spawnveg already attempts
    to use setsid in the manner described by the man page, so the
    posix_spawn implementation should also do so.
    
    src/lib/libast/comp/spawnveg.c:
    - Add support for POSIX_SPAWN_SETSID to the posix_spawn version of
      spawnveg.
    - Minor extra: Remove dead code that's never used (the
      _lib_posix_spawn < 2 code block is inside of _lib_posix_spawn >
      1, plus when it's manually enabled by changing the previous #if
      condition you'll find it causes many regression test failures (at
      least on OpenBSD)).
    
    src/lib/libast/man/spawnveg.3:
    - Document that spawnveg cannot make the new process a session
      leader if the operating system doesn't support POSIX_SPAWN_SETSID
      and the new process was created using posix_spawn.

commit 1a79c18c62bf7e947c702dfcc95d23528f3b4950
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 28 05:28:15 2022 +0000

    Fix resuming external command run from 'eval' (re: 7eb6514e)
    
    'eval' suffers from the same bug. Reproducer:
        $ eval vi
    then suspend vi, then try to resume it -- the same as in the
    reproducer shown in the previous commit.
    
    src/cmd/ksh93/bltins/misc.c: b_eval():
    - Same fix. Do *not* turn off SH_MONITOR.

commit 7eb6514e702fc31916ff7fb62eda17097b231529
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 28 04:43:16 2022 +0000

    Fix resuming external command run from POSIX function or dot script
    
    This fixes yet another whopper of a bug in job control. And it's
    been in every version of ksh93 back to 1995, the beginning of
    ast-open-archive. <sigh>
    
    This is also bug number 23 that is fixed by simply removing code.
    
    Reproducer:
    
    1. Run vi, or another suspendable program, from a dot script or
       POSIX function (ksh handles them the same way). So either:
       $ echo vi >v
       $ . ./v
       or:
       $ v() { vi; }
       $ v
    
    2. Suspend vi by typing Ctrl+Z.
    
    3. Not one but two jobs are registered:
       $ jobs -l
       [2] + 85513  Stopped                  . ./v
       [1] - 85512  Stopped                  . ./v
    
    4. 'fg' does not work on either of them, just printing the job
       command name but not resuming the editor. The second job
       disappears from the table after 'fg'.
       $ fg %2
       . ./v
       $ fg %2
       ksh: fg: no such job
       $ fg %1
       . ./v
       $ fg %1
       . ./v
    
    Either way, you're stuck with an unresumable vi that you have to
    'kill -9' manually.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TFORK:
    - Do *not* turn off the SH_MONITOR state flag (which tells ksh to
      keep track of jobs) when running an external command from a
      profile script or dot script/POSIX function. It's obvious that
      this results in an inconsistent job control state as ksh will not
      update it when the external command is suspended. The purpose of
      this nonsense is surely lost to history as it's been there since
      1995 or before. My testing says that removing it doesn't break
      anything. If that turns out to be wrong, then the breakage will
      have to be fixed in a correct way instead.

commit 76888a635b51d4c3af64edd71b5167e5979ed322
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 28 03:49:28 2022 +0000

    libast/port/lcgen.c: fix bad output: initialise allocated memory
    
    On my machine, the build system has been intermittently rebuilding
    a sizeable part of libast for no apparent reason. I think I've
    finally tracked down the cause: occasionally, the lctab.c file,
    generated by port/lcgen.c, randomly changes, triggering said
    recompile.
    
    Diff of the latest instance on my system:
    
    --- lctab.c.save        2022-01-28 03:22:47.000000000 +0000
    +++ arch/darwin.i386-64/src/lib/libast/lctab.c  2022-01-28 03:30:01.000000000 +0000
    @@ -2146,7 +2146,7 @@
     #endif
     0,0,0,
     },
    -{"no","norway",LC_primary,
    +{"no","norway",0,
     #ifdef CTRY_NORWAY
     CTRY_NORWAY,
     #else
    
    In the port/lc.tab input file, "norway" does *not* have the
    "primary" tag, unlike e.g. "sweden" or "united-kingdom". So that
    LC_primary value did not belong in the generated code.
    
    A look at the port/lcgen.c code shows that it's using uninitialised
    memory. The newof() macro uses malloc, which does not initialise
    the memory blocks it allocates:
    
    131:#define newof(p,t,n,x)      ((t*)malloc(sizeof(t)*(n)+(x)))
    
    This is then used as follows:
    
    403:    case TERRITORY:
    404:            if (!(tp = newof(0, Territory_t, 1, s - b + 1)))
    [...]
    444:                                    if (!strcmp(b, "primary"))
    445:                                            tp->primary = 1;
    
    The flag is not set to zero if the string does not match, so it's
    left uninitialised. Perhaps there are more such problems, but
    instead of spending time trying to find them, I'll fix newof().
    
    src/lib/libast/port/lcgen.c:
    - In the newof() macro, call calloc(3) instead of malloc(3),
      ensuring that all allocated memory is initialised to zero.

commit 29b8ad9ef036ffa8f04d7aab0a065d2533da997c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 27 21:50:51 2022 +0000

    Fix syntax error in lib_posix_spawn feature test (re: 1064933e)
    
    posix_spawn(2) was never used as a result of this error as the test
    failed to compile, with most systems falling back to vfork(2).
    
    src/lib/libast/features/lib: tst lib_posix_spawn:
    - Fix parentheses goof.

commit 632214c30e3d69e4037ae8dc09833c7389259f08
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 27 04:55:36 2022 -0800

    Fix spurious syntax error when using ${foo[${bar}..${baz}]} (#436)
    
    Attempting to use array subscript expansion with variables that
    aren't set currently causes a spurious syntax error (in ksh93u+ and
    older commits the reproducer crashes):
       $ ksh -c 'echo ${foo[${bar}..${baz}]}'  # Shouldn't print anything
       ksh: : arithmetic syntax error
    
    src/cmd/ksh93/sh/macro.c:
    - Backport a parser bugfix from ksh93v- 2012-08-24 that avoids
      setting mp->dotdot until the copyto() function's loop is
      finished.
    
    src/cmd/ksh93/tests/arrays.sh:
    - Add regression tests for this bug.

commit 7f4935eb7965426ce77634a08529f8310f5bc845
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 26 04:20:56 2022 +0000

    Cygwin: workaround for ksh to execute #!-less scripts with itself
    
    On Cygwin, ksh does not execute scripts without a #! path in a fork
    of the ksh process as it does on other systems. Reproducer (run
    from ksh):
    
      $ cat test.sh
      echo "${BASH_VERSION:-not bash}"
      echo "${.sh.version}"
      $ chmod +x test.sh
      $ ./test.sh
      4.4.12(3)-release
      ./test.sh: line 2: ${.sh.version}: bad substitution
    
    The script was executed in bash instead of ksh.
    
    After this fix, the output on Cygwin is like ksh on other systems:
    
      not bash
      Version AJM 93u+m/1.1.0-alpha+dev 2022-01-26
    
    This also fixes a number of regression test failures, as quite a
    few tests create and execute temp scripts without a hashbang path.
    
    Analysis: On Cygwin, execve(2) happily executes shell scripts
    without a #! path with /bin/sh (which is bash --posix). However,
    ksh relies on execve(2) executing binaries or #! only, as it uses
    an ENOEXEC failure to decide whether to fork and execute a #!-less
    shell script with a reinitialized copy of itself via exscript().
    
    src/cmd/ksh93/sh/path.c: path_spawn():
    - Look at the magic first two bytes of the file; if it is "MZ"
      (Mark Zbikowski, originator of the .exe format) or "#!", continue
      as normal, otherwise simulate an ENOEXEC failure from execve(2)
      which will cause ksh to fall back on #!-less script execution.

commit 80c694acccaae016243b1e81121bfc22fe473016
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 25 14:56:07 2022 +0000

    Some more accumulated minor tweaks and cleanups
    
    Notable changes:
    
    src/cmd/ksh93/include/fault.h:
    - Get rid of the superflous sh pointer argument in the
      sh_pushcontext() and sh_popcontext() macros. (re: 4491bc6a)
    
    src/cmd/ksh93/tests/io.sh:
    - Tweak a process substitution test to allow up to a second for
      unused process substitution processes to disappear. On the Alpine
      Linux console (at least the musl libc version), this is needed to
      avoid a test failure as long as no GUI is active. As soon as you
      start X11, this phenomenon disappears, even on the console. Very
      strange, but also very probably not ksh's fault.
    
    src/cmd/ksh93/tests/shtests:
    - Instead of just SIGCONT and SIGPIPE, set all signals to default,
      just to be sure to avoid spurious test failures due to signals
      that were ignored on entry. (It made no difference to the
      aforementioned Alpine Linux test failure, so ignored signals had
      nothing to do with that -- but still a good idea.)
    
    .github/workflows/ci.yml:
    - On the GitHub CI runs, when testing with SHOPTs disabled, disable
      SHOPT_SPAWN as well, which tests that everything still works
      correctly with the regular fork(2) method.
    
    COPYRIGHT:
    - Remove duplicate of BSD license.

commit 893df4d0228f815941e59a8329f67a38b8209c9e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 25 03:16:53 2022 +0000

    Document history expansion and fix a few loose ends
    
    src/cmd/ksh93/sh.1:
    - Add a new section on history expansion mostly adapted from the
      "History substitution" section from the tcsh(1) man page. This
      has the standard BSD license which is already in the COPYRIGHT
      file. Inapplicable stuff was removed, some new stuff added.
    
    src/cmd/ksh93/edit/hexpand.c: hist_expand():
    src/cmd/ksh93/sh/io.c:
    - Set '#' as the default history comment character as on bash;
      no longer disable it by default.
    - Add the 'a' modifier as a synonym for 'g', as on bash.
    - Remove pointless static keyword from np variable; since the
      value from previous calls is never used it can just be local.
    - Use NV_NOADD flag with nv_open() to avoid pointlessly creating
      the node if the variable doesn't exist yet.
    - Fix a bug in history expansion where the 'p' modifier had no
      effect if the 'histverify' option is on.
      Reproducer:
        $ set -H -o histv
        $ true a b c
        $ !!:p
        $ true a b c▁  <= instead of printed, the line is re-edited
      Expected:
        $ set -H -o histv
        $ true a b c
        $ !!:p
        true a b c
        $ ▁
      This is fixed by making 'p' remove the HIST_EVENT bit from the
      returned flag bits in hist_expand(), leaving only the HIST_PRINT
      flag, then adding special handling to io.c (see below).
    
    src/cmd/ksh93/sh/io.c: slowread():
    - Add special handling for r==HIST_PRINT: print the line, then
      instead of executing it, continue and read the next line.

commit 89184ea19e40b70aae99873c83b4508a2b2747eb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 24 08:22:39 2022 +0000

    Fix a crashing bug in history expansion
    
    Reproducer:
    
    $ set -o histexpand
    $ echo foo !#^:h !#^:&
    /usr/local/bin/ksh: :&: no previous substitution
    ksh(80822,0x10bc2a5c0) malloc: *** error for object 0x10a13bae3: pointer being freed was not allocated
    ksh(80822,0x10bc2a5c0) malloc: *** set a breakpoint in malloc_error_break to debug
    Abort
    
    Analysis: In hist_expand(), the 'cc' variable has two functions:
    it holds a pointer to a malloc'ed copy of the current line, and is
    also used as a temporary pointer with functions like strchr().
    After that temporary use, it is set to NULL again, because the
    'done:' routine checks if it non-NULL to decide whether to free the
    pointer. But if an error occurs, the function may jump straight to
    'done' without first setting cc to NULL if it had been used as a
    temporary pointer. It then tries to free an unallocated pointer.
    
    src/cmd/ksh93/edit/hexpand.c: hist_expand():
    - Eliminate this bad practice by using a separate variable for
      temporary pointer purposes.
    
    (I was unable to reproduce the crash in a pty regression test,
    though it is consistently reproducible in a real interactive
    session. So I haven't added that test.)

commit 5820d019755e9e01178b20deebc437547a365a69
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 24 02:29:33 2022 +0000

    Document SHOPT_ACCT and SHOPT_AUDIT
    
    A 2008 blog post by Finnbar P. Murphy is the only documentation
    on these facilities that is available to date. Thankfully, Finnbarr
    has graciously granted me permission to use all his ksh93-related
    blog posts for ksh 93u+m under the same license as ksh.
    
    Since SHOPT_ACCT (disabled by default) is essentially an older and
    more primitive version of SHOPT_AUDIT (enabled by default), we
    should probably remove the former in a future release.
    
    src/cmd/ksh93/README-AUDIT.md:
    - Added.

commit 3f8add41482147bfa5595281c878953068e33c68
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 21 16:34:11 2022 +0000

    Various cleanups, mostly in regression tests
    
    src/cmd/ksh93/data/variables.sh: shtab_variables[]:
    - Remove unused "CSWIDTH" entry. All use of it (including the
      matching CSWIDTHNOD macro) was removed in version 2003-04-22.
    
    src/cmd/ksh93/tests/variables.sh:
    - For the tests on the shtab_variables[] variables, read the
      variable names straight from variables.c instead of synching
      the list in the test script, which would surely be forgotten.
    
    src/cmd/ksh93/tests/*.sh:
    - Fix a number of mistaken tries to count errors from a subshell.
    - Fix miscellaneous minor breakage and typos.

commit f792c4b2631e7ce275bf287922f22f1e14e055c4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 21 01:18:34 2022 +0000

    history expansion: add missing bounds check
    
    So far all ksh versions accept event numbers referring to
    nonexistent history events in history expansion (-H/-o histexpand),
    e.g. !9999 is accepted even if the history file has no item 9999.
    These expansions seem to show random content from the history file,
    sometimes including binary data. Of course an "event not found"
    error should have been thrown instead.
    
    hist_expand() in hexpand.c calls hist_seek() (from history.c)
    without any bounds checking except verifying the history event
    number is greater than zero. This commit adds a bounds check
    to hist_seek() itself as it's called from three other places
    in history.c, so perhaps this fixes a few other bugs as well.
    
    src/cmd/ksh93/edit/history.c: hist_seek():
    - Use the hist_min() and hist_max() macros provided in history.h
      to check bounds. Note that hist_max() yields the number of the
      command line currently being entered, so the maximum for seeking
      purposes is actually its result minus 1.
    
    NEWS:
    - Also add entry for previous fix. (re: 07618240)

commit 076182407c96fa98274646595ad91f7fa73f0e44
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 20 14:30:02 2022 -0800

    Fix history expansion buffer overflow (#434)
    
    History expansion currently crashes under ASan due to a buffer
    overflow. Reproducer:
    
       $ set -H
       $ !!:s/old/new/
    
    Explanation from <https://github.com/att/ast/issues/1369>:
    > The problem is the code assumes the buffer allocated for a string
    > stream is zero initialized. But the SFIO code uses malloc() to
    > allocate the buffer and does not explicitly initialize it with
    > memset(). That it works at all, even without ASAN enabled, is
    > purely accidental. It will fail if that malloc() returns a block
    > that had been previously allocated, used, and freed. Under ASAN
    > the buffer is initialized (at least on my system) to a sequence
    > of 0xBE bytes. So the strdup() happily tries to duplicate a
    > string that is the size of that buffer and fails when it reads
    > past the end of the buffer looking for the terminating zero byte.
    
    src/cmd/ksh93/edit/hexpand.c:
    - Backport ksh2020 bugfix that avoids assuming the string stream
      has been initialized to zeros:
      https://github.com/att/ast/commit/cf16bcca
      (minus the incorrect change to the static wm variable).

commit bb0c31e1e6899108df855d1a27896b18de0a44e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 20 05:46:23 2022 +0000

    sfio: fix "SF_SYNC redefined" warning on FreeBSD
    
    FreeBSD defines an SF_SYNC macro in sys/socket.h that conflicts
    with sfio's SF_SYNC discipline, at best rendering it ineffective.
    
    src/lib/libast/sfio/sfhdr.h:
    - Temporarily undef __BSD_VISIBLE while including <sys/socket.h>
      to hide the BSD extension with the conflicting definition.

commit a046436fb252ffcd0aea6267135fd42ac5612ad8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 20 04:20:17 2022 +0000

    tie up standards macros loose ends (re: e6f3d543)
    
    src/lib/libast/features/standards:
    - Do not emit #defines for the typ u_long test which is only used
      as a heuristic in subsequent tests in this file. (Note that 'set'
      can set and unset any iffe command-line --option at runtime.)
    - Remove definition of _ISOC99_SOURCE macro. This is another old
      GNU thing; feature_test_macros(7) says invoking the compiler with
      the option -std=c99 has the same effect. But modern GCC has C11
      with GNU extensions as the default, which is fine. If a
      particular standard is desired, pass a -std=... flag in $CC.
    
    src/cmd/ksh93/features/rlimits:
    - Remove overlooked Linux *64* types/functions hackery.
      After defining standards macros it caused a build failure
      on at least one version of Void Linux (but not 5.15.14_1).
      Thanks to @JohnoKing for the report.
    
    src/cmd/ksh93/sh/subshell.c,
    src/lib/libdll/dllnext.c:
    - Remove now-redundant local definitions of _GNU_SOURCE and
      __EXTENSIONS__ macros.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Fix broken sed invocation (re: 63c55ad7).

commit 63c55ad71bda27e5f1a33b4f1e9e1e3da12419b0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 20 00:30:54 2022 +0000

    Various minor cleanups and fixes
    
    The more notable ones are:
    
    src/lib/libast/features/standards:
    - Do not redefine _GNU_SOURCE and _FILE_OFFSET_BITS if already
      defined from $CCFLAGS. Thanks to @hyanias for the heads-up.
      (re: e6f3d543)
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/args.c,
    src/cmd/ksh93/sh/name.c:
    - Remove -T test code activation option. It was basically unused.
      The only thing it did was intentionally introduce a memory leak
      in table_unset() if the 4th bit in the option argument was set.
      A search in ast-open-history reveals a few more trivial test uses
      that were later deleted, but nothing interesting.
    
    src/cmd/ksh93/tests/{basic,path}.sh:
    - Skip a couple of tests on AIX avoid hangs, at least one of which
      is not ksh's fault. Thanks to @HansH111 for the report.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Change one awk use to a more portable sed invocation to placate
      systems with ancient awk commands, such as AIX. (re: f5a5c691)

commit e6f3d543db6a3900adb81958bcfb3642d64a0f7d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 19 01:40:32 2022 +0000

    build: include standards macros for all AST code (re: a874f8c1)
    
    Turns out that the standards macros set by features/standards (such
    as _GNU_SOURCE for Linux or _DARWIN_SOURCE for macOS) were still
    *not* included for most C source files! Instead, they were
    selectively included for some files only, sometimes via
    FEATURE/standards (the output of features/standards), sometimes
    via ast_standards.h which is copied from FEATURE/standards.
    
    Consequently, there were still inconsistencies in the system header
    interfaces exposed on Linux, macOS, Solaris, et al. It's no wonder
    it sometimes took so much hackery to keep everything building.
    
    Of course, making this consistent had to break things somewhere.
    Breakage occurred on 32-bit Linux due to a lot of ugly hackery
    involving direct use of internal GNU types like off64_t and
    functions like fseek64(). This is now all removed and they are
    activated by setting the appropriate feature macro instead, so
    these types and functions can be used with their standard names
    (off_t, fseek, etc.)
    
    Before committing I've tested these changes on the following
    i386/x86_64 systems: Linux (glibc 32 and 64 bit, musl libc 64 bit),
    Solaris (32 and 64 bit), illumos (32 and 64 bit), FreeBSD (64 bit),
    macOS (64 bit), Cygwin (32 bit), and Haiku (64 bit).
    
    (Note: ast_standards.h is copied from FEATURE/standards, whereas
    ast_common.h is copied from FEATURE/common.)
    
    src/lib/libast/include/ast_std.h,
    src/lib/libast/stdio/stdhdr.h:
    - Include <ast_standards.h> first. This should cause all the AST
      and dependent code (such as ksh) to get the standards macros.
    
    src/lib/libast/features/standards:
    - For GNU (glibc), #define _FILE_OFFSET_BITS 64 to get large file
      support with 64-bit offsets.
    - Stop GNU and Cygwin <string.h> form defining the GNU version of
      basename(3); on Cygwin, that declaration conflicts with the AST
      version (and with POSIX) by using a const char* argument instead
      of char*. It is deactivated by defining the macro 'basename' (as
      'basename'); this causes GNU string.h to consider it to be
      already defined by the standard libgen.h header.
    
    All other changed files:
    - Remove direct use of *64* types and functions and a lot of
      related hackery.

commit 61d701d15d2c779cd0ced0ca75f9befcddcb89ba
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jan 17 11:52:55 2022 -0800

    Fix build error on AIX 64-bit (#428)
    
    This commit adds a wrapper for the AIX ar command that uses the
    -X64 flag to avoid build errors on that platform.
    
    Resolves: https://github.com/ksh93/ksh/issues/385

commit 8386afcddfe8deb5daced94cb885222c2ce4e967
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 14 22:13:28 2022 +0000

    Fix build on Cygwin (again) (re: a38e8047, f9364b17)
    
    Commit a38e8047 broke the build on Cygwin in comp/setlocale.c by no
    longer defining _GNU_SOURCE on that system in features/standards.
    This caused wcwidth() to be hidden by wchar.h though it was
    detected in the libraries.
    
    src/lib/libast/features/standards:
    - Detect Cygwin along with GNU as a system on which to define
      _GNU_SOURCE.
    - Add wcwidth() compilation as an extra heuristic to the BSD,
      SunOS, Darwin and GNU/Cygwin tests. (Since it's specified as an
      optional (X/Open) feature, it should not be tested for in the
      generic fallbacks.)

commit fe7400fa487306bde756c9dd7dd076f2472c4d32
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 14 16:56:41 2022 +0000

    bump internal libast version; various minor cleanups
    
    These are minor things I accumulated over the last month or so.
    
    Notable changes:
    
    src/lib/libast/features/api,
    src/lib/libast/misc/state.c,
    src/lib/libast/comp/conf.tab,
    src/cmd/ksh93/include/defs.h:
    - Bump internal libast version to 20220101L. We've made a few
      additions to the API, at least pathicase (see 71934570, ca3ec200)
      and astconf_long (see 3082ad87), so this should have been done
      already.
    - Use AST_VERSION instead of outdated _AST_VERSION.
    - In state.c, use AST_VERSION instead of hardcoding the version.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove 'restorefd' variable, unused as of 42becab6.
    - Remove 'cmdrecurse' function and SH_RUNPROG macro; this was once
      used by a few libcmd commands, but ast-open-archive reveals it's
      unused as of ast 1999-12-25.
    
    src/cmd/ksh93/sh/*.c:
    - Where available, use e_dot instead of "." for consistency; it is
      defined as an extern so we might as well use it.
    
    src/cmd/ksh93/tests/*.sh:
    - When reporting signal names in fails, include the SIG prefix.
    - Fix a broken process hang test in subshell.sh.
    
    src/lib/libast/man/sfdisc.3:
    - Removed. The interfaces described here never made it out of AT&T;
      they do not exist in any libast version in ast-open-archive.
      Resolves: https://github.com/ksh93/ksh/issues/426

commit d3fcbc75ea8afa687a01e15a094a4bb6255cfcba
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 13 04:39:45 2022 -0800

    Fix use after free bug in discipline functions (#424)
    
    This fixes one of the ASan failures in the variables.sh regression
    tests. Explanation from <https://github.com/att/ast/issues/1268>:
    
    > The problem is caused by this block of code freeing the Namfun_t*
    > (via the call to chktfree()):
    > https://github.com/ksh93/ksh/blob/c0ba72e8/src/cmd/ksh93/sh/nvdisc.c#L570-L577
    >> 570  else
    >> 571  {
    >> 572          struct blocked *bp;
    >> 573          action = vp->disc[type];
    >> 574          vp->disc[type] = 0;
    >> 575          if(!(bp=block_info(np,(struct blocked*)0)) || !isblocked(bp,UNASSIGN))
    >> 576                  chktfree(np,vp);
    >> 577  }
    > That invalidates the value stored in vp which is dereferenced here:
    > https://github.com/ksh93/ksh/blob/c0ba72e8/src/cmd/ksh93/sh/nvdisc.c#L411-L421
    >> 419          unblock(bp,type);
    >> 420          if(!vp->disc[type])
    >> 421                  chktfree(np,vp);
    
    ksh2020 commit:
    https://github.com/att/ast/commit/df1e8165
    
    src/cmd/ksh93/sh/nvdisc.c:
    - Block nv_setdisc from freeing the memory associated with the vp pointer.

commit c0ba72e8dabef9c08b9cb99a1b858ec9003d5d55
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 13 04:17:36 2022 -0800

    time: Fix precision bug in times(3) fallback (#425)
    
    In the times(3) fallback for the time keyword (which can be enabled
    in xec.c by undefining _lib_getrusage and timeofday), ksh will
    print the obtained time incorrectly if TIMEFORMAT is set to use a
    precision level of three:
       $ TIMEFORMAT=$'\nreal\t%3lR'
       $ time sleep .080
       real 0m00.008s  # Should be '00.080s'
    This commit corrects that issue by using 10^precision to get the
    correct fractional scaling. Note that the fallback still doesn't
    support a true precision level of three (times(3) alone doesn't
    support it), so this in effect pads a zero to the end of the output
    when the precision level is three.
    
    Additional change to tests/builtins.sh:
    - While fixing the above issue I found out that ksh93v- broke
      support for passing microseconds to the sleep builtin in the form
      of <num>U. I've added a regression test for that bug to ensure it
      isn't backported to ksh93u+m by accident.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 6db765849be5f5cbb4694a05a13ceb1e39c17de2
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jan 12 17:55:36 2022 -0800

    alias: Avoid unnecessary forks (re: ec888867) (#417)
    
    The code used to fork subshells when creating/changing aliases will
    always fork, even when the alias tree isn't changed:
       $ echo $(unalias --man 2> /dev/null; echo $$ ${.sh.pid})
       375097 375107
       $ alias foo=bar; echo $(alias -p foo; echo $$ ${.sh.pid})
       alias foo=bar 375097 375110
    This is a bit inefficient, so this commit avoids forking a subshell
    unless at least one change is made to the alias table.
    
    src/cmd/ksh93/bltins/typeset.c:
    - b_alias(), b_unalias(): Remove sh_subfork() calls.
    - setall(): When creating an alias (name contains '='), fork a
      virtual subshell before calling nv_open() to add the node.
    - unall():
      - When unsetting all aliases (-a), fork subshell before dtclear().
      - When unsetting one alias, fork subshell before nv_delete().
      - Move sh_pushcontext() and sh_popcontext() expansions so that
        sh_subfork() is not in between them, as that would cause
        program flow corruption or a crash.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 25e2858f647ee005c0b24c1a4a5a791326dd4dac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 12 19:19:42 2022 +0000

    edit: do not enable multiline mode with no editor active
    
    If neither gmacs/emacs nor vi are active, the multiline mode should
    not be enabled even if the multiline option is on. Doing so can
    cause inconsistent behaviour, particularly in multibyte locales
    where, if the shell is compiled with SHOPT_RAWONLY (as is default),
    the no-editor mode is actually handled by vi.c.
    
    Also, the new --histreedit and --histverify options only work in
    the emacs or vi editors, or in no-editor mode when handled by vi.
    Which means they cannot ever work if neither emacs or vi were
    compiled in (i.e. SHOPT_ESH and SHOPT_VSH were both disabled).
    In that case, there's no point in compiling in those options.
    Come to think of it, the same applies to the multiline option.
    
    All changed files:
    - Update SHOPT_ESH/SHOPT_VSH preprocessor directives as per above.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/include/shell.h:
    - Move definitions of history expansion-related options to shell.h,
      which is where all the other shell options are defined.

commit 7b25709a9543e910d103c69b9b599c42f90a0c55
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 12 14:55:02 2022 +0000

    Expose --histreedit and --histverify options (re: 921bbcae)
    
    This adds two long-form shell options that modify history expansion
    (-H/--histexpand). If --histreedit is on and a history expansion
    fails, the command line is reloaded into the next prompt's edit
    buffer, allowing corrections. If --histverify is on, the results of
    a history expansion are not immediately executed but instead loaded
    into the next prompt's edit buffer, allowing further changes.
    
    SH_HISTREEDIT and SH_HISTVERIFY were already handled all along in
    slowread() in io.c and via 'reedit' arguments to functions called
    there, but could not be turned on as they were only ever exposed as
    shopt options in the removed bash compatibility mode (in theory
    only, as it failed to compile). I had overlooked them until now.
    
    So, since the code is there, let's expose these options through the
    normal long options interface. They're working fine, and activating
    them actually makes history expansion tolerable to use.
    
    src/cmd/ksh93/data/options.c:
    - Make these options available as "histreedit" and "histverify".
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Document the "new" options.
    
    src/cmd/ksh93/include/defs.h:
    - Remove unused SH_HISTAPPEND and SH_HISTORY2 macros which were
      part of the removed bash compatibility code. Note that ksh does
      not need a histappend option as it never overwrites the history
      file (in the bash mode, this shopt option was a no-op).

commit e373e8c1b5192fa1f1ff5e40590c85d215080f80
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 11 14:26:14 2022 +0000

    Fix comsub hang on subshell fork (re: 090b65e7)
    
    The referenced commit introduced a bug that caused command
    substitutions to hang, writing infinite zero bytes, when
    redirecting standard output on a built-in comand that forks the
    command substitution subshell.
    
    The bug was caused by removing the fork when redirecting standard
    output in a non-permanent manner. However, simply reintroducing the
    fork causes multiple regressions that we had fixed in the meantime.
    
    Thankfully, it looks like this forking workaround is only necessary
    when redirecting the output of built-ins. It appears that moving
    workaround from io.c to the built-ins handling code in sh_exec() in
    xec.c, right before calling sh_redirect(), allows reintroducing the
    forking workaround for non-permanent redirections without causing
    other regressions.
    
    It would be better if the underlying cause of the hang were fixed
    so the workaround becomes unnecessary, but I don't think that is
    going to happen any time soon (AT&T didn't manage, either).
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - Remove forking workaround for redirecting stdout in a comsub.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TCOM: built-ins handling code:
    - Reimplement the workaround here.
    
    Resolves: https://github.com/ksh93/ksh/issues/416

commit 868858b0a347174eb376bb8b1d33f11881cd1e61
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 11 13:11:43 2022 +0000

    Make process substitutions work on Haiku
    
    On Haiku:
    
        # /bin/cat <(echo hi)          # no redirection
        cat: /tmp/ksh.f29pd8f: No such file or directory
    
    Whereas this works fine:
    
        # /bin/cat < <(echo hi)        # with redirection
        hi
        # /opt/ast/bin/cat <(echo hi)  # no redirection; use built-in
        hi
    
    Haiku does not have /dev/fd, so uses the FIFO (named pipe) fallback
    mechanism. See also: c3eac977
    
    Analysis: In the TFORK part of sh_exec(), forked branch (child),
    the FIFO (sh.fifo) is unlinked immediately after opening it. This
    is not a problem if the process substitution is used in combination
    with a redirection, but if not, then the FIFO is passed on to the
    command as a file name argument. This creates a race condition: ksh
    was counting on the external 'cat' command opening the FIFO before
    the child could unlink it. Whether that race is won depends on
    operating system implementation details. When invoking an external
    command on Haiku, the race is lost.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TFORK: child branch:
    - Delay unlinking the FIFO until after executing the process
      substitution, when we're about to exit from the child process.

commit c2f1e8c304fd9c7577929f116316f10621ca51f3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 9 21:43:14 2022 +0000

    iffe: some more tweaks
    
    src/cmd/INIT/iffe.sh:
    - Remove obsolete $posix_noglob/$posix_glob code to disable and
      re-enable pathname expansion. Instead, globally disable it using
      'set -o noglob'. Except a couple of 'rm' commands, no aspect of
      this code uses globbing (note: 'case' patterns do not count), nor
      do any of the shell code feature tests that are eval'ed by iffe.
      Field splitting is heavily used via unquoted variable expansions;
      globbing should not interfere. (Concrete example: one of the test
      notes in src/cmd/ksh93/features/options is "SHOPT_* option probe"
      and that SHOPT_* is taken as a file name pattern, so could be
      expanded.) For the rm commands, globbing is turned back on in a
      subshell. If this breaks something that I've missed, hopefully
      that will turn up soon.
    - Remove $show/$SHOW code to massage different versions of 'echo'
      into acting consistently; instead, use a show_test() function
      that uses the POSIX-specified printf command.
    - For debugging level 2 and 3, use much more extensive PS4 prompts
      taken from modernish (which I wrote), depending on the shell.
    - Replace the obsolete 'set -' command. In the ancient Bourne
      shell, this disables the v and x options, so is equivalent to
      'set +v +x'. This still works on almost all modern shells, but
      not yash, and POSIX considers it "unspecified".
    - Remove a few echo|sed fallbacks I'd missed (re: 215efa15).
    
    src/cmd/ksh93/features/math.sh:
    - Disable pathname expansion here as well.
    - Pass down an inherited $IFFEFLAGS to recursive iffe invocations.

commit 00300f976fc5e049c3f4d9dfab8900fd6e7ce567
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jan 7 07:44:05 2022 -0800

    Fix vi mode tab completion with spaces (#413)
    
    Attempting to complete file names in vi mode using tab completion can
    fail if the last character on the command line is a space. Reproducer
    (note that this bug doesn't occur in emacs mode):
       $ set -o vi
       $ mkdir '/tmp/foo bar'
       $ test -d /tmp/foo\ <Tab>
    
    src/cmd/ksh93/edit/vi.c:
    - Don't disable tab completion or reset the tab count just because the
      last character on the command line is a space. This bugfix was
      backported from ksh93v- 2014-06-06.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for the tab completion bug.

commit f7a65750bfa130858e6263d611f5b6d71b67c7e3
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jan 7 07:00:00 2022 -0800

    Fix various typos, man page issues and improve the documentation (#415)
    
    This commit makes various different improvements to the documentation:
    - sh.1: Backported (with changes) mandoc warning fixes from ksh2020
      for the ksh93(1) man page: <https://github.com/att/ast/pull/1406>
    - Removed unnecessary spaces at the end of lines to fix a few other
      mandoc warnings.
    - Fixed various typos and capitalization errors in the documentation.
    - ANNOUNCE: Document the addition of the ${.sh.pid} variable
      (re: 9de65210).
    - libast/man/str*: Update the man pages for the libast str* functions
      to improve how accurately each function is described.
    - ksh93/README: Update regression test/compatibility notes to include
      OpenBSD 7.0, FreeBSD 13.0 and WSL running Ubuntu 20.04.
    - Change a few places to store the return value from strlen in a
      size_t variable rather than signed int.
    - comp/setlocale.c: To avoid confusion of two separate variables named
      lang, the function local variable has been renamed to langidx.

commit a73a5d4cc7cfa7a3c0b4bed05f887a5d60a370b6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 6 21:11:17 2022 -0800

    iffe: Correct backslashes in POSIX command substitutions (re: 215efa1) (#414)
    
    In backtick command substitutions '\\' will only print one backslash,
    while placing a backslash in front of a different character will
    print a backslash followed by that character:
       $ echo `echo '\\\\ \3'`
       \\ \3
       $ echo $(echo '\\\\ \3')
       \\\\ \3
    This difference in behavior was causing iffe to fail on Haiku after
    the changes in 215efa1. This commit applies fixes for backslashes
    in quoted strings to fix the Haiku build failure and other possible
    bugs introduced by the referenced commit.

commit 4d8f5bc1d043a5c48532eda1d46870afe645d440
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jan 6 12:35:44 2022 -0800

    Allow ksh to compile on Haiku; implement SIGKILLTHR support (#408)
    
    This commit implements the build fixes required to get ksh running on
    Haiku. Note that while ksh does compile, it has a ton of regression test
    failures on Haiku.
    
    src/cmd/ksh93/data/signals.c,
    src/lib/libast/features/signal.c:
    - Add support for the SIGKILLTHR signal, which is supported by BeOS and
      Haiku.
    - SIGINFO was missing an entry in the libast feature test, so add one
      (re: 658bba74).
    
    src/cmd/ksh93/RELEASE:
    - Add an entry noting that ksh now compiles on Haiku, albeit with many
      regression test failures.
    
    src/cmd/ksh93/{include/terminal.h,sh/path.c}:
    - Silence compiler warnings on Haiku.
    
    src/lib/libast/features/mmap:
    - The mmap feature test freezes on Haiku, so modify the test to fail
      immediately on that OS.
    
    src/lib/libast/misc/signal.c:
    - Avoid redefining the signal definition on Haiku to fix a compiler
      error.
    
    src/lib/libast/features/nl_types:
    - For some reason the nl_item typedef on Haiku doesn't work correctly.
      Work around that by creating the nl_item type in the libast nl_types
      feature test.

commit f48d4ebcab0fc2e7b426f173278b7a5290704f24
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 6 14:06:51 2022 +0000

    [shp cleanup 20] wrap-up (re: 4491bc6a)
    
    src/cmd/ksh93/shell.3,
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/init.c:
    - Remove sh.gd/shgd; this is now unused and was never documented
      or exposed in the shell.h public interface.
    - sh_sigcheck() was documented in shell.3 as taking no arguments
      whereas in the actual code it took a shp argument. I decided to
      go with the documentation.
    - That leaves sh_parse() as the only documented function that still
      takes an shp argument. I'm just going to go ahead and remove it
      for consistency, reverting sh_parse() to its pre-2003 spec.
    - Remove undocumented/unused sh_bltin_tree() function which simply
      returned sh.bltin_tree.
    - Bump SH_VERSION to 20220106.

commit 0ba525f2e31587f5fbfb5f37b75410ac77abb5ca
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 5 13:43:18 2022 +0000

    [shp cleanup 19] edit/*.c (re: 4491bc6a)

commit d8b9c4249a66244d1d80230011e7bd35978d7a24
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 5 10:46:21 2022 +0000

    [shp cleanup 18] bltins/*.c (re: 4491bc6a)
    
    Apart from the usual shp cleanup:
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/sh/name.c,
    src/cmd/ksh93/sh/nvdisc.c:
    - 'struct adata' and 'struct tdata', defined as local struct types
      in these files, need to have their first three fields in common,
      the first being a pointer to sh. This is because scanfilter() in
      name.c accesses these fields via a type conversion. So the sh
      field needed to be removed in all three at the same time.
      TODO: de-obfuscate: good practice definition via a header file.
    
    src/cmd/ksh93/bltins/print.c: genformat():
    - Remove preformat[] which was always empty and had no effect.

commit 69066cae56f32311946c742473c4a0528c27c5a7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 4 14:40:45 2022 +0000

    [shp cleanup 17] xec.c (re: 4491bc6a)
    
    Also:
    
    src/cmd/ksh93/sh/name.c:
    - De-obfuscate the relationship between nv_scan() and scanfilter().
      The former just calls the latter as a static function, there's no
      need to do that via a function pointer and void* type conversions.

commit 6c680ba37581d41153560fbcc788720e4fb4abc2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 4 08:24:40 2022 +0000

    In the original ast code base, src/{cmd/nmake,lib/libast}/Makefile
    (nmake makefiles) defined this macro:
    
            __OBSOLETE__ == $("6 months ago":@F=%(%Y0101)T)
    
    This was used to automatically disable code after a period between
    6 and 18 months, on 1st Jan of each year, in preprocessor
    directives like:
    
            #if __OBSOLETE__ < 20080101
            // obsolete code here
            #endif
    
    However, when compiling without nmake (as we do), this __OBSOLETE__
    macro is not defined at all. And undefined macros evaluate to zero
    in arithmetic comparisons, so all that obsolete code has been
    getting compiled. Thankfully it doesn't seem to have done any harm,
    but all that code was supposed to expire between 2008 and 2014.
    
    src/lib/libast/disc/sfstrtmp.c:
    - Removed. Was supposed to be a stub #if __OBSOLETE__ >= 20070101.
    
    src/lib/libast/include/ast.h:
    - Remove unused fmtbasell() macro (/* until 2014-01-01 */).
    
    Other changed files:
    - Remove __OBSOLETE__d code.

commit da3042f9ab948dbc074d6711b8940323f7aada6e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 4 07:53:52 2022 +0000

    [shp cleanup 16] {timers,trestore,waitevent}.c (re: 4491bc6a)
    
    Also:
    
    src/cmd/ksh93/sh/suid_exec.c:
    - Replace an incorrect reference to shgd->current_pid with
      getpid(); it cannot work as (contrary to its misleading directory
      placement) suid_exec is an independent libast program with no
      link to ksh or libshell at all. However, no one noticed because
      this was in fallback code for ancient systems without
      setreuid(2). Since that standard function was specified in POSIX
      Issue 4 Version 2 from 1994, we should remove that fallback code
      sometime as part of another obsolete code cleanup operation to
      avoid further bit rot. (re: 843b546c)

commit 8ae3375229739f3c086c5975a386468abad97a8c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 23:02:52 2022 +0000

    [shp cleanup 15] {shcomp,streval,subshell}.c (re: 4491bc6a)
    
    Also:
    
    src/cmd/ksh93/include/streval.h,
    src/cmd/ksh93/sh/streval.c:
    - Rename extern strval() to arith_strval() for consistency.
    
    src/cmd/ksh93/sh/string.c:
    - Remove outdated/incorrect isxdigit() fallback; '#ifnded isxdigit'
      is not a correct test as isxdigit() is specified as a function.
      Plus, it's part of C89/C90 which we now require. (re: ac8991e5)

commit c5c0d8f8e721e27e409248480918026fd6e50909
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 21:24:27 2022 +0000

    [shp cleanup 14] path.c (re: 4491bc6a)
    
    In addition to the usual shp cleanup:
    
    src/cmd/ksh93/sh/path.c:
    - Naming consistency: reserve the path_ function name prefix for
      externs and rename statics with that prefix.
    - The default path was sometimes referred to as the standard path.
      To use one term, rename std_path to defpath and onstdpath() to
      ondefpath().
    - De-obfuscate SHOPT_PFSH conditional code by only calling
      pf_execve() (was path_pfexecve()) if that is compiled in.

commit 0da7da6464abd75fc4ddabb2bea90354cbe5e899
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 20:55:53 2022 +0000

    tests/builtins.sh: skip cd permission test if root (re: 59bacfd4)

commit 230453df57fe2461d877ff45cc162360015bfdf9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 16:30:04 2022 +0000

    [shp cleanup 13] parse.c (re: 4491bc6a)

commit 5b035862c40c4ee3afa12aa24ab11e18f42b85c6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 14:08:04 2022 +0000

    [shp cleanup 12] nv{disc,tree,type}.c (re: 4491bc6a)

commit 6fa173f4e3ada38c97857ffef5151dff01eee3ae
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 3 03:13:01 2022 +0000

    [shp cleanup 11] name.c (re: 4491bc6a)

commit 7b6b3ef04bc46465150b7faccaa91e9230b56406
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 23:32:55 2022 +0000

    [shp cleanup 10] main.c (re: 4491bc6a)
    
    Apart from the ususal cleanup:
    
    src/cmd/ksh93/shell.3:
    - Minor copy-edit.
    - Remove documentation for nonexistent sh.infile_name. A search
      through ast-open-archive[*] reveals this never existed at all.
    - Document sh.savexit (== $?).

commit 07ccdff9ef7c5d4358b9a8f49f1714d1ff911d4f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 23:32:37 2022 +0000

    [shp cleanup 09] macro.c (re: 4491bc6a)

commit 52afbec5ebe88e2303ad1cd5206ece62c7765cf1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 21:50:38 2022 +0000

    [shp cleanup 08] lex.c (re: 4491bc6a)

commit a3fd96be635e69ab0a89c51137029ffe30873d21
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 21:04:09 2022 +0000

    [shp cleanup 07] jobs.c (re: 4491bc6a)

commit dfe5e910bcd8f8de55ad56348519aff5acb2256c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 19:08:26 2022 +0000

    [shp cleanup 06] io.c (re: 4491bc6a)

commit c21854ae15d4b409dd2e18d1b65934dfe8b37dde
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 17:22:08 2022 +0000

    package: more flat view fixes (re: 7d5d5901, 215efa15)
    
    bin/package, src/cmd/INIT/package.sh:
    - Automatically update an existing flat view even if 'flat' wasn't
      given for a make action. This stops a flat view becoming
      inaccurate if you forget to use 'bin/package flat make'
      consistently. If the $PACKAGEROOT/lib/package/gen directory
      exists, an existing flat view is assumed.
    - Correct symlink fallbacks. We need an absolute path for the
      symlink target or it's going to be broken.
    
    .gitignore:
    - Update.

commit e1c709977ebb006e1ffaf8f1344ae851e06eac56
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jan 2 03:59:35 2022 -0800

    Fix typeset -m crash under ASan and on OpenBSD (#412)
    
    This fixes the use after free issue that caused typeset -m to crash on
    older versions of OpenBSD and under ASan. The problem that was causing
    the failure was that the ap pointer wasn't set to null after the memory
    associated with it was freed. This commit backports a bugfix from
    ksh93v- 2013-06-28 that sets ap to null before freeing the associated
    memory and adds a check that makes sure ap is still a valid pointer
    before calling array_unscope().
    
    tests/types.sh changes:
    - Avoid redirecting stderr to /dev/null, as this test shouldn't print
      anything to stderr.
    - Apply error message improvement from
      https://github.com/ksh93/ksh/issues/231#issue-834252084.
    
    tests/arrays.sh change:
    - Apply error message improvement from
      https://github.com/ksh93/ksh/issues/229#issue-834240645 (re: 38999a6).
    
    Resolves: https://github.com/ksh93/ksh/issues/231

commit cbc6686af858b80eb46a06c6496c45b72646cdf9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 11:52:17 2022 +0000

    [shp cleanup 05] init.c (re: 4491bc6a)

commit 8b6ce77b6fa7323391126999571a4a89863b81fc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 10:12:21 2022 +0000

    [shp cleanup 04] fault.c (re: 4491bc6a)

commit 7c8e05022414c26db3b71e03e7f54d1c5e771a07
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 09:23:32 2022 +0000

    [shp cleanup 03] expand.c (re: 4491bc6a)

commit c70d63edd55ff83a304e0b1a96d642b641aaff4a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 09:23:23 2022 +0000

    [shp cleanup 02] arith.c (re: 4491bc6a)

commit 38999a64cb0ae1fe340700124456918db53c0995
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jan 2 00:08:33 2022 -0800

    Fix arrays.sh test failure under ASan (#411)
    
    This backports a ksh2020 fix for an ASan heap-use-after-free error in
    arrays.sh. The arrays regression tests were failing under ASan because
    the ap pointer was used after the memory allocated to it was freed by
    _nv_unset(). ksh2020 commit:
    https://github.com/att/ast/commit/f1e5119e315fa5e7ed9651177d15256e86ccf046

commit fb1a163a3c82fdc9351c45efc510cfcf3b06e3f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 2 07:41:39 2022 +0000

    [shp cleanup 01] args.c (re: 4491bc6a)
    
    Note: only externs in shell.h and nval.h are documented and should
    be kept for source-level compatibility, including their shp
    arguments. In the rest, those shp arguments can be removed.
    
    src/cmd/ksh93/sh/args.c:
    - Clean up pointer defererences to sh.
    - Remove shp arguments from functions.
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/init.c:
    - On second thought, get rid of the function version of
      sh_getinterp() as libshell ABI compatibility is moot. We've
      already been breaking that by reordering the sh struct, so there
      is no way it's going to work without recompiling.
    
    Other changed files:
    - Update function calls.

commit e8c087ca5475d1949e0682387c72d2b0108a7b0a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 1 02:41:14 2022 +0000

    package: report 'build failed' if interrupted (re: 5d6ae1ff)
    
    If we get a signal, we have to set error_status to nonzero manually
    so that the correct exit message is printed.

commit 215efa151eed2745c2f248ad616bcf3b5951bd92
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 31 21:00:32 2021 +0000

    more package and iffe tweaks/cleanups
    
    I've reconsidered excluding build system internals (and also '*.o'
    files) from the flat view. Really the only thing that should be
    excluded are *.old files.
    
    bin/package, src/cmd/INIT/package.sh:
    - Do not exclude anything except *.old files from the flat view.
    - This would delete bin/package when cleaning up the flat view,
      so explicitly keep bin/package in the clean routine.
    - Be much faster about updating an existing flat view by checking
      if a link already exists before creating one.
    - Add silent cleanup for dozens of orphaned macOS *.dSYM bundles
      belonging to deleted temporary feature test executables.
    
    src/cmd/INIT/{iffe,ignore,silent}.sh, bin/{ignore,silent}:
    - Remove obsolete Bourne shell fallbacks.
    - Modernise command substitutions.
    - Remove unused literal() function.
    - Update copy() function to use printf.
    - Distinguish just two shell types now: ksh and POSIX.
    - compile(): Remove obsolete/incorrect grepping for signal messages.
      Add a POSIX-compiliant check with 'kill -l' to see if the
      compiler was terminated by a signal.

commit b2f179bb4b454ca574c3e02d60841b8c0fd59ff1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 31 18:13:20 2021 +0000

    init.c: upstream init.c.patch for CDE's dtksh
    
    This upstreams the patch to init.c that is necessary to build dtksh
    (graphical extensions for CDE, see <https://cdesktopenv.sf.net/>).
    It has no effect when building regular ksh. Upstreaming it avoids
    the need to keep updating it when changes to init.c are made.

commit 7d5d59016f43cd9eb526ff9de0b2f12561bbee7c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 31 13:24:17 2021 +0000

    package: reintroduce/rewrite flat view (re: 20f8557c)
    
    I called the flat view featuritis, but it turns out the dtksh build
    system depends on it. But it was broken, so let's make a proper
    version instead. This new approach does not symlink directories
    before make, but hardlinks files after make. To make performance
    tolerable, it requires a modern POSIX 'find' utility with '{} +'.
    
    bin/package, src/cmd/INIT/package.sh:
    
    - We're going to depend on 'test X -ef Y' to check if X is the same
      file as Y, so add that to the $min_posix checks even though it is
      not technically POSIX. But it's so close to universally available
      it doesn't really make a difference.
    
    - After 'make', create a flat view by hardlinking arch/$HOSTTYPE
      files, minus build system internals, onto their corresponding
      paths in $PACKAGEROOT. Fall back to symlinking if hardlinking
      fails (this would happen when crossing device boundaries).
    
    - Clean up flat view when doing clean/clobber. This is done by
      using 'find' to loop through the files in arch/ again and
      removing any root paths that are the same file as their
      corresponding arch/ path (this is where test X -ef Y comes in).
      Then delete arch/$HOSTTYPE, then delete empty directories left.
    
    - Check for the 'flat' qualifier when doing clean/clobber. If
      given, do not delete arch/$HOSTTYPE but only clean up the flat
      view and remove empty directories.
    
    src/cmd/INIT/Mamfile:
    - Do not create the lib/package directory. (re: beb3c64a)
    
    .gitignore:
    - Update.

commit ac2d8220cd02548cff1891c5a4bcc89285b474e5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 31 08:22:11 2021 +0000

    iffe: really abort on output{ fail (re: e20c0c6b, e72543a, b6bd981)
    
    After further examining the iffe code I found that fail{ ... }end
    as well as pass{ ... }end blocks are executed in iffe's current
    environment, using a simple 'eval', with no safeguards whatsoever!
    
    This does of course afford maximum flexibility... for example, a
    block can 'exit 1' to abort the iffe run and the whole build with
    it. We can use this to abort properly on fatal compilation errors.
    
    src/cmd/INIT/iffe.sh:
    - Complete the fail{ and pass{ documentation; it should really be
      known that they run in iffe's current environment.
    - Make one change: for just the 'eval' command that runs these
      blocks, redirect standard error back to the saved $stderr file
      descriptor so these blocks can write error messages using the
      standard >&2 instead of the undocumented >&$stderr.
    
    src/lib/**/features/*:
    - Write error message to standard error and error out properly when
      an output{ ... }end block fails to compile, instead of writing an
      #error directive to error out later.

commit 5d6ae1ff0f4203292545a3e329339f1bebf532e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 31 08:12:55 2021 +0000

    package: report 'failed' if build failed
    
    bin/package, src/cmd/INIT/package.sh:
    - Make the EXIT (0) trap report failure based on $error_status
      (see d18469d6), replacing 'done' with 'failed' if it is nonzero.
    - Remove extra space before 'at' in that report line.

commit 4491bc6a991759b61c5f7d49dd0477a2f2bfb1a1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 29 19:55:00 2021 +0000

    [shp cleanup 00] Reunify the original sh state struct
    
    As observed previously (see 3654ee73, 7e6bbf85, 79d19458), the ksh
    93u+ codebase on which we rebased development was in a transition:
    AT&T evidently wanted to make it possible to have several shell
    interpreter states in the same process, which in theory would have
    made it possible to start a complete new shell (not just a
    subshell) without forking a new process.
    
    This required transitioning from accessing the 'sh' state struct
    directly to accessing it via pointers (usually but not always
    called 'shp'), introducing a lot of bug-prone passing around of
    those pointers via function arguments and other state structs.
    
    Some of the original 'sh' struct was separated into a 'struct
    shared' called 'shgd' a.k.a. 'sh.gd' (global data) instead; these
    were global state variables that were going to be shared between
    the different main shell environments sharing a process. Yet, for
    some reason, that struct was allocated dynamically once at init
    time, requiring yet another pointer to access it. <shrug>
    
    None of this ever worked, because that transition was incomplete.
    It was much further along in the ksh 93v- beta, but I don't think
    it actually worked there either (not very much really did). So,
    starting a new shell has always required starting a new process.
    
    So, now that it's clear what they were trying to do, should we try
    to make it work? I'm going to go with a firm "no" on that question.
    
    Even non-forking (virtual) subshells, something quite a bit less
    ambitious, were already an unmitigated nightmare of bugs. In 93u+m
    we fixed a load of bugs related to those, but I'm sure there are
    still many left. At the very least there are multiple memory leaks.
    
    I think the ambition to go even further and have complete shells
    running separate programs share a process, particularly given the
    brittle and buggy state of the existing codebase, is evidence that
    the AT&T team, in the final years, had well and truly lost the
    ability to think "wait a minute, aren't we in over our heads here,
    and why are we doing this again? Is this *actually* a feasible and
    useful idea?"
    
    In my view, having entirely separate programs share a process is a
    *terrible*, horrible, no-good idea that takes us back to the bad
    old days before Unix, when kernels and CPUs were unable to enforce
    any memory access restrictions. Programmers are imperfect. If
    you're going to run a new program, you need the kernel to enforce
    the separation between programs, or you're just asking for memory
    corruption and security holes. And that separation is enforced by
    starting a new program in a new process. That's what processes are
    *for*. And if you need *that* to be radically performance-optimised
    then you're probably doing it wrong anyway.
    
    (By the way, I would still argue the same for subshells, even after
    we fixed many bugs in virtual subshells. But forking all subshells
    would in fact cause many scripts to slow down, and the community
    would surely revolt. <sigh>  Maybe I should make it a shell option
    instead, so scripts can 'set -o subfork' for reliability.)
    
    It is also unclear how they were going to make something like
    'ulimit' work, which can only work in a separate process. There
    was no sign of a mechanism to fork a separate program's shell
    mid-execution like there is for subshells (sh_subfork()).
    
    Anyway... I had already changed some code here and there to access
    the sh state struct directly, but as of this commit I'm beginning
    to properly undo this exercise in pointlessness. From now on, we're
    exercising pointerlessness instead.
    
    I'll do this in stages to make any problems introduced more
    traceable. Stage 0 restores the full 'sh' state struct to its
    former static glory and reverts 'shgd' as a separate entity.
    
    src/cmd/ksh93/sh/defs.c,
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/include/shell.h
    src/cmd/ksh93/Mamfile::
    - Move 'struct sh_scoped' and 'struct limits' from defs.h to
      shell.h as the sh struct will need their complete definitions.
    - Get rid of 'struct shared' (shgd) in defs.h; its members are
      folded back into their original place, the main Shell_t struct
      (sh) in shell.h. There are no name conflicts.
    - Get rid of the _SH_PRIVATE macro in defs.h. The members it
      defines are now defined normally in the main Shell_t struct (sh)
      in shell.h.
    - To make this possible, move <history.h> and "fault.h" includes
      from defs.h to shell.h and update the Mamfile accordingly.
    - Turn sh_getinterp() and shgd into macros that resolve to (&sh).
      This will allow the compiler to optimise out many pointer
      dereferences already.
    - Keep extern sh_getinterp() for libshell ABI compatibility.
    
    src/cmd/ksh93/sh/init.c:
    - sh_init(): Do not calloc (sh_newof) the sh or shgd structs.
    - sh_getinterp(): Keep function for libshell ABI compat.

commit 5422af4e333e7c37c6beb46e7173c3653e8a0eaa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 23:53:08 2021 +0000

    Actually deactivate CDPATH when unsetting it
    
    After 'unset CDPATH', CDPATH continued to work as if nothing
    happened. Unsetting it should be a valid way to deactivate it.
    
    This bug is in every ksh93 version.
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - Fix a manifest logic error: first check if CDPATH (CDPNOD) is
      unset before assigning to 'cdpath', not the other way around.
      Setting the 'cdpath' pointer is what activates the CDPATH search.

commit f5f5d29a9478191733136a92724ea650f0acfc10
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 28 13:55:56 2021 -0800

    Add three options to 'ulimit' (#406)
    
    This patch adds a few extra options to the ulimit command (if the OS
    supports them). These options are also present in Bash, although in ksh
    additional long forms of each option are available:
      ulimit -k/--kqueues   This is the maximum number of kqueues.
      ulimit -P/--npts      This is the maximum number of pseudo-terminals.
      ulimit -R/--rttime    This is the time a real-time process can run
                            before blocking, in microseconds. When the
                            limit is exceeded, the process is sent SIGXCPU.
    
    Other changes:
    - bltins/ulimit.c: Change the formatting from sfprintf and increase the
      size of the tmp buffer to prevent text from being cut off in ulimit
      -a (this was required to add ulimit -R).
    - data/limits.c: Add support for using microseconds as a unit.

commit 4e469dd9b61f456ff7c79162439af9ee377aada7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 19:03:11 2021 +0000

    tests/leaks.sh: add a newly discovered leak as known
    
    Help us fix it at: https://github.com/ksh93/ksh/issues/407

commit 7796adbb71c9ccf7e6ececf6f04235a2fbd1a66e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 18:14:02 2021 +0000

    tests/types.sh: revert warning (re: e311f1e6)
    
    That regression, which was consistent on the github CI runners, has
    not been back in the last nine commits' CI runs, even with all the
    new regex code active. I've no idea what fixed it. Perhaps c5018f7c
    had something to do with it, as that's the only recent change with
    any relevance to 'typeset -T'. In any case, life is too short to
    track down intermittent failures that disappeared. Let's just turn
    a test failure back into an actual failure so we don't fail to
    notice if the regression ever shows up again.
    
    Closes: https://github.com/ksh93/ksh/issues/400 (at least for now)

commit 2569850f4a7caf1cd9464898cd6ff81251145530
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 17:43:34 2021 +0000

    tests/leaks.sh: fix typo in code (re: d845675c)
    
    That variable was _good_, then I changed it to .lt.good, but this
    one didn't get changed because I made a typo (missing final
    underscore).

commit 5915c6b07a7c41aad887b0650478b35af20fd965
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 17:35:54 2021 +0000

    tests/builtins.sh: correct /opt/ast/bin/cat detection (re: f5a5c691)

commit fd7e9bdaad2de9e75ae74873268688f3cb285b5b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 28 08:59:30 2021 -0800

    Fix ASan heap-buffer-overflow when handling syntax errors (#402)
    
    This commit backports a bugfix from ksh2020 to fix an ASan
    heap-buffer-overflow error in one of the regression tests. See:
    https://github.com/att/ast/commit/c57f7398
    https://github.com/att/ast/issues/1261
    
    This explanation comes from the linked issue:
    > The poplevel() in this block of code is called when lp->lexd.lex_max
    > is zero:
    > https://github.com/att/ast/blob/bd94eb56/src/cmd/ksh93/sh/lex.c#L921-L925
    > Since poplevel() first decrements lp->lexd.lex_max then uses it as
    > an index into lp->lexd.lex_match this causes the word before the
    > start of that buffer to be accessed. The buffer is allocated here:
    > https://github.com/att/ast/blob/bd94eb56/src/cmd/ksh93/sh/lex.c#L2210-L2218
    
    src/cmd/ksh93/sh/lex.c:
    - Avoid calling poplevel() twice when handling syntax errors.

commit f5a5c69171f7c025a87ec1356825a9dd158be0dc
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 28 08:57:50 2021 -0800

    Allow regression tests to pass without any /opt/ast/bin builtins (#403)
    
    This commit primarily makes changes that allow the regression tests to
    run without any of the /opt/ast/bin builtins compiled into ksh. It also
    makes a minor improvement to one of the tests in locale.sh by
    shellquoting an error message.

commit d724eccee47f22057c7c90f61dc97d503e771ea0
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 28 08:53:30 2021 -0800

    Fix `mkservice` compile errors and add `SHOPT_MKSERVICE` (#401)
    
    The unused mkservice and eloop builtins are currently not built, and if
    an attempt to compile them is made the build ends in failure. This
    commit backports a few build fixes from ksh93v- 2012-08-24 that allow
    mkservice and eloop to build (plus an additional compiler warning fix
    not in ksh93v-). I've also added a new SHOPT_MKSERVICE setting (turned
    off by default) so that mkservice and eloop can be built if the user
    chooses to include them in their build of ksh.

commit 23d3da9d1380228db0b54b4b9b92a33cbe33473f
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 28 08:36:54 2021 -0800

    Fix implicit warnings in the `iffe` feature tests (#396)
    
    This commit fixes some implicit function warnings in the iffe feature
    tests by adding missing include directives.

commit d845675ced42dc60eb359cd1706e7542dbed6d30
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 28 13:41:41 2021 +0000

    tests/leaks.sh: redesign with a more robust testing algorithm
    
    On modern operating systems, memory management is non-deterministic
    (i.e. random, unpredictable) to varying degrees. This makes testing
    for memory leaks a nightmare as the OS may decide to randomly grow
    a process's memory allocation at any time for no apparent reason,
    causing intermittent test failures that do not represent real
    memory leaks. So far, the leaks test tried to cope with this by
    using a large number of iterations plus a certain amount of bytes
    of tolerance per iteration. This was inefficient and on some
    systems still did not fully eliminate intermittent test failures.
    
    This commit introduces a new testing algorithm that is designed to
    cope with a large degree of unpredictability. Instead of a fixed
    number of test iterations, it defines a maximum (16384), dividing
    them in blocks of 128 iterations. It also defines a minimum number
    of sequential "good" iteration blocks, counted if memory usage did
    not increase from one block to the next. That minimum number is set
    to 16. The theory is that if we can get 16 "good" iteration blocks
    in a row, we can safely assume it's not a real memory leak, break
    the loop, and consider the test succeeded. That "good" sequence is
    allowed to occur at any point in the loop, creating a high built-in
    tolerance for non-deterministic shenanigans. It also speeds up the
    tests, as successful tests can bow out at 16 * 128 == 2048
    iterations if they're lucky. If the OS decides to randomly grow the
    memory heap, it may take more tries, but almost (?) certainly not
    more than the maximum 16384 (128 blocks). If the counter reaches
    that, then we assume a memory leak and throw a test failure.
    
    We're also no longer testing with byte granularity in any case; the
    randomness of memory management makes that pointless. All getmem()
    function versions now return kibibytes (1024 bytes).
    
    This should eliminate the need for workarounds such as initial
    iterations to "steady the state" or a tolerance of a certain number
    of bytes. I've experimentally determined the exact values
    (max_iter, block_iter, min_good_blocks) that seem to work reliably
    on all systems I've tested. They are easy to tweak if necessary.
    
    To make all this manageable, this commit hides all the supporting
    code in a triplet of aliases (TEST, DO, DONE) that, when used
    correctly, create a grammatically robust shell code block: you can
    add redirections, pipe into it, etc. as expected. This makes the
    actual tests a great deal easier to read as well.
    
    src/cmd/ksh93/tests/pty.sh:
    - Implement new leaks testing framework as described and convert
      all the tests to it.
    - Mark known leaks with a 'known' variable. Print non-fail warnings
      for all known leaks, but skip the tests by default. Test them
      only if DEBUG is exported. This is better than commenting them
      out as we will no longer be tempted to forget about these.
    - Move the test for large command substitutions to subshell.sh --
      it's not in fact a leak test; instead, it checks that command
      substitutions don't lose data.
    
    src/cmd/ksh93/tests/_common: err_exit():
    - Since we're printing more warnings, clearly mark all test
      failures with 'FAIL:' to make them stand out.
    
    src/cmd/ksh93/tests/shtests.
    src/cmd/ksh93/tests/pty.sh:
    - Special-case leaks.sh for counting tests; grep ^TEST.
    - Special-case pty.sh as well while we're at it by grepping tst()
      calls. Remove all the dummy '# err_exit #' comments from pty.sh
      as they are now no longer used for counting the tests.

commit d7694cbb121da0dc49ccf5d7e925c8ec496a8e78
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 27 23:15:26 2021 +0000

    tests/alias.sh: fix regression test (re: 35a493cd)
    
    The variable 'i' had already been used for a non-numeric purpose,
    so when declaring it integer in a subshell it's necessary to
    initialise it with value 0 or an arithmetic error is shown (which
    does not interrupt the test or make it fail).
    
    For the record, the errpr was mine, not Johnothan's.

commit 5124e2f4470284e3a455d2d536a2216d1f1658cb
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 26 22:37:01 2021 -0800

    Backport -P and -t flags for 'type'/'whence' from ksh93v- (#392)
    
    This commit backports the whence '-t' option from ksh93v-. The '-t'
    option is useful when one needs to identify the type of a command.
    The '-t' flag was added by ksh93v- for compatibility with Bash.
    
    It should be noted the ksh93v- patch had one bug, which this commit
    fixes. Path-bound builtins from /opt/ast/bin were classified as
    files if loaded from /opt/ast/bin in the PATH. Reproducer:
       $ PATH=/opt/ast/bin whence -t cat
       file
    
    src/cmd/ksh93/bltins/whence.c:
    - Simplify the bitmask values for the command and whence builtin
      flags.
    - Add the -t flag to the whence and type builtins. To prevent bugs,
      -t will always override -v if both of those flags were passed.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Add documentation for the new -t option.

commit e311f1e65ccee5684de60cf6aa5692e6c2316fe0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 27 06:11:27 2021 +0000

    libast/regex: restore use of separate stack (re: b936c94f, ffe84ee7)
    
    This is the development branch, so if backporting an improvement
    breaks something else, let it break more often so we can fix it.
    
    src/lib/libast/regex/{regcomp.c,reglib.h,regnexec.c}:
    - Revert b936c94f.
    
    src/cmd/ksh93/tests/types.sh:
    - Turn the intermittent failure triggered by the regex changes into
      a warning, so the GitHub CI status isn't "failing" as a result of
      a known bug. Report it with a link to the related issue.
    
    Related: https://github.com/ksh93/ksh/issues/400

commit ad420f2ff828e34edf020d8c54a8e779b7e9dc30
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 27 05:43:07 2021 +0000

    Remove leftover pre-C89 code (re: 1064933e)
    
    I'd forgotten to check for uses of the __STDC__ macro. This is
    defined on all C compilers that support C89/C90 or later standards.
    So we can remove all fallback code disabled by that macro.

commit a7ed5d9fd76fb5387524ce953917c294cc6d0bee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 27 03:39:32 2021 +0000

    Fix crash in xtrace while processing here-document (re: 35583450)
    
    Depending on the OS, the heredoc.sh regression tests, and possibly
    others, still crashed with the -x option (xtrace) on.
    
    Analysis: The lexer crashes in lex_advance(). Something has caused
    an inconsistent lexer state, and it happened earlier on, so the
    backtrace is useless for figuring out where that happened.
    
    But I think I've found it. It's the sh_mactry() call here:
    
    src/cmd/ksh93/sh/xec.c, lines 2800 to 2807 in 35a493c
    2800:   if(!(cp=nv_getval(sh_scoped(shp,PS4NOD))))
    2801:           cp = "+ ";
    2802:   else
    2803:   {
    2804:           sh_offoption(SH_XTRACE);
    2805:           cp = sh_mactry(shp,cp);
    2806:           sh_onoption(SH_XTRACE);
    2807:   }
    
    sh_mactry() needs to parse the contents of $PS4 to perform
    expansions and command substitutions in it, which involves the
    lexer. If that happens in a here-document, the lexer is in the C
    function call stack, in the middle of parsing the here-document.
    Result: inconsistent lexer state. Solution: save and restore lexer
    state in sh_mactry().
    
    After this commit, all regression tests should pass with the
    '-x'/'--xtrace' option in use, with no errors or crashes.
    
    Note for backporters: this fix depends both on on 35583450 and on
    the consistency fix for the Lex_t type's size applied in f99ce517.
    
    src/cmd/ksh93/include/shlex.h:
    - Cosmetic fix: remove a copied & pasted backslash. (re: f99ce517)
    
    src/cmd/ksh93/sh/macro.c: sh_mactry():
    - Save and restore the lexer state before letting sh_mactrim()
      indirectly parse and execute code.
    
    src/cmd/ksh93/tests/*.sh:
    - Turn off xtrace in various command substitutions that contain
      2>&1 redirections, so that the xtrace output is not caught by
      the command substitutions, causing tests to fail incorrectly.
    - Turn off xtrace for a few code blocks with 2>&1 redirections,
      stopping xtrace output from being written to standard output.
    
    Resolves: https://github.com/ksh93/ksh/issues/306 (again)

commit ad8c4f8d872d436941ffbeebd099c7caebbfca5a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 27 03:00:15 2021 +0000

    Fix crash/freeze upon interrupting command substitution with pipe
    
    On some systems (at least Linux and macOS):
    
    1. Run on a command line: t=$(sleep 10|while :; do :; done)
    2. Press Ctrl+C in the first 10 seconds.
    3. Execute any other command substitution. The shell crashes.
    
    Analysis: Something in the job_wait() call in the sh_subshell()
    restore routine may be interrupted by a signal such as SIGINT on
    Linux and macOS. Exactly what that interruptible thing is remains
    to be determined. In any case, since job_wait() was invoked after
    sh_popcontext(), interrupting it caused the sh_subshell() restore
    routine to be aborted, resulting in an inconsistent state of the
    shell. The fix is to sh_popcontext() at a later stage instead.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Rename struct checkpt buff to checkpoint because it's clearer.
    - Move the sh_popcontext() call to near the end, just after
      decreasing the subshell level counters and restoring the global
      subshell data struct to its parent. This seems like a logical
      place for it and could allow other things to be interrupted, too.
    - Get rid of the if(shp->subshell) because it is known that the
      value is > 0 at this point.
    - The short exit routine run if the subshell forked now needs a new
      sh_popcontext() call, because this is handled before restoring
      the virtual subshell state.
    - While we're here, do a little more detransitioning from all those
      pointless shp pointers.
    
    Fixes: https://github.com/ksh93/ksh/issues/397

commit 35a493cd837450a6acc8f2f2769b5c349019bc0e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 26 16:25:05 2021 -0800

    Fix multiple bugs when using 'alias -p' to print aliases (#398)
    
    This commit was originally intended to fix just one bug with shcomp's
    handling of 'alias -p', but while fixing that I found a large number
    of related issues in the alias command's -p, -t and -x options. The
    current patch provides bugfixes for all of the bugs listed below:
    
    1) Listing aliases in a script with 'alias -p' or 'alias' broke
       shcomp's bytecode output:
       https://github.com/ksh93/ksh/issues/87#issuecomment-813819122
    
    2) Listing individual aliases with the -p option doesn't work:
          $ alias foo=bar bar=foo
          $ alias foo
          foo=bar
          $ alias -p foo  # No output
    
    3) Listing specific tracked aliases with -pt does not display them
       in a reusable format, but rather adds another tracked alias:
          $ hash -r cat vi
          $ alias -pt vi  # No output
          $ alias -pt rm
          $ alias -t
          cat=/usr/bin/cat
          rm=/usr/bin/rm
          vi=/usr/bin/vi
    
    4) Listing all tracked aliases with -pt does not output them in a
       reusable format (the resulting command printed only creates a
       normal alias, which is different from a tracked alias):
          $ hash -r cat
          $ alias -pt
          alias cat=/usr/bin/cat  # Expected 'alias -t cat'
    
    5) Listing a non-existent alias with -p doesn't cause an error:
          $ unalias -a
          $ alias -p notanalias  # No output
          $ echo $?
          0
          $ alias notanalias
          notanalias: alias not found
          $ echo $?
          1
          $ hash -r
          $ alias -pt notacommand  # No output
          $ echo $?
          0
    
    6) Attempting to list 256 non-existent aliases results in exit
       status zero:
          $ unalias -a
          $ alias $(awk -v ORS= 'BEGIN { for(i=0;i<256;i++) print "x "; }')
          x: alias not found
          --cut error message--
          $ echo $?
          0
    
    Changes:
    
    - typeset.c: Avoid printing anything while shcomp is compiling a
      script. This is needed because the alias command is run by shcomp
      to prevent parsing issues.
    
    - b_alias(): To avoid adding tracked aliases with -pt, set
      tdata.aflag to '+' so that setall() and other related functions
      only list tracked aliases.
    
    - b_alias(): Set tdata.pflag to 1 so that setall() and other
      functions recognize -p was passed.
    
    - print_value(): Add support for listing specific aliases with
      'alias -p'.
    
    - setall(): To avoid any issues with zombie tracked aliases (see also
      the regression tests) ignore tracked alias nodes marked with the
      NV_NOALIAS attribute. This bit is set for tracked alias nodes by
      the nv_rehash() function.
    
    - setall(): For backward compatibility, continue incrementing the
      exit status for each invalid alias and tracked alias passed. This
      was already how alias behaved when listing aliases without -p, so
      using -p shouldn't cause a change in behavior:
          $ unalias -a
          $ alias foo bar
          foo: alias not found
          bar: alias not found
          $ echo $?
          2
      To fix bug 6, the exit status is set to one if an enforced 8-bit
      exit status would be zero.
    
    - print_namval(): Set the prefix to 'alias -t' so that listing
      tracked aliases with 'alias -pt' works correctly.
    
    - data/msg.c and include/name.h: Add an error message for when
      'alias -pt' doesn't find a tracked alias.
    
    - tests/alias.sh: Add a ton of regression tests for the bugs fixed in
      this commit.

commit ec6639f5efb38a0029152b6161aa77c7dbf810b9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 26 09:03:51 2021 -0800

    sh_close(): Set errno to EBADF for invalid file descriptors (#399)
    
    The sh_close() function fails to set errno to EBADF when passed a
    negative (invalid) file descriptor. This commit fixes the issue
    by setting errno if the file descriptor is a negative value
    (backported from ksh93v- 2012-08-24).

commit ab09ca3bc1ced3ed75af859f266840dac247dcaa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 24 17:51:10 2021 +0000

    shtests --posix: ensure consistent locale: unset all LC_* vars
    
    When running tests in --posix/-p mode, not all LC_* variables were
    unset, so that certain aspects of the locale could be non-POSIX.

commit 64001f9ea3e478961785298cf611479dfd18d9ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 23 19:11:20 2021 +0000

    cleanup: tie up some loose ends; fix building old code
    
    src/cmd/INIT/proto.sh:
    - Building old code was broken. Make the stub properly backwards
      compatible by parsing the options in the same way the original
      did. (re: 594f3090, a34e8319)
    
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/sh/name.c:
    - Restore libshell ABI compatibility function versions of macros.
      A "proto workaround" comment in the original code mislead me into
      thinking this had something to do with the removed proto(1), but
      it's unrelated. Call the workaround macro BYPASS_MACRO instead.
      (re: 1064933e)
    
    src/cmd/ksh93/include/defs.h:
    - sh_sigcheck() macro: allow &sh as an argument: parenthesise shp.
    
    src/cmd/ksh93/sh/nvtype.c:
    - Remove unused nv_mkstruct() function. (re: d0a5cab1)

commit 1064933eec11591a6a7057a19b094209ed1f7859
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 23 06:28:54 2021 +0000

    Major cleanup of obsolete and unused constructs (re: a34e8319)
    
    See referenced commit for explanation.
    
    This commit changes the following in 850-ish source files:
    - Remove all '#pragma prototyped' directives.
    - Remove all C++ compat code conditional upon defined(__cplusplus).
    - Remove all use of the _ARG_ macro, which on standard C expands to
      its argument:
            #define _ARG_(x)        x
      (on K&R C, it expanded to nothing)
    - Remove all use of _BEGIN_EXTERNS_ and _END_EXTERNS_ macros (empty
      on standard C; this was for C++ compatibility)
    - Reduce all #if __STD_C (standard code) #else (K&R code) #endif
      blocks to the standard code only, without use of the macro.
    - Same for _STD_ macro which seems to have had the same function.
    - Change all instances of 'Void_t' to standard 'void'.
    
    **/features/*:
    - Remove obsolete iffe 'set prototyped' option.
    
    **/Mamfile:
    - Remove all references to the ast/prototyped.h header.
    - Remove all use of the proto command. Simply copy instead.
    
    This code base should now be a little easier to understand for
    people who are familiar with a modern(ish) C standard.
    
    In addition, there are miscellaneous tweaks and minor cleanups.

commit 7f12326e5207d47f009587d46ddb5c7e27215f80
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 23 04:32:45 2021 +0000

    fix iffe regression test (re: a34e8319)
    
    src/cmd/INIT/iffe.tst:
    - Fix a regression test I broke in the last commit; proto(1)
      mangling code was not correctly removed.
      By the way, iffe can be regression-tested as follows:
            $ bin/package use   # set up environment in a child shell
            $ regress src/cmd/INIT/iffe.tst
            $ exit              # leave package environment
    
    And that reminded me of annoying issue with 'bin/package use':
    
    bin/package, src/cmd/INIT/package.sh: 'use':
    - Unset LC_ALL before invoking a new shell, respecting the user's
      locale again and avoiding multibyte character corruption on the
      command line.

commit a34e83192b62493eb0e08874c855c386c1be6615
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 23 03:14:20 2021 +0000

    INIT: remove proto, ratz (re: 594f3090, beb3c64a)
    
    This takes another step towards cleaning up the build system. We
    now do not even pretend to be theoretically compatible with
    pre-1989 K&R C compilers or with C++ compilers. In practice, this
    had already been broken for many years due to bit rot.
    
    Commit 594f3090 already removed the license handling enormity that
    depended on proto, so now we can cleanly remove it altogether. But
    we do need to leave some backwards compatibility stubs to keep the
    build system compatible with older AST code; it should remain
    possible to build older ksh versions with the current build system
    (the bin/ and src/cmd/INIT/ directories) for testing purposes.
    
    So as of now there is no more __MANGLE__d rubbish in your generated
    header files. This is only about a quarter of a century overdue...
    
    TODO: a huge amount of code cleanup to remove thousands of unused
    K&R C fallbacks and other cruft, particularly in libast. This is
    not yet done now, so that this commit can prove that the cleaned-up
    build system works well with obsolete code.
    
    ratz is now also removed; this was a standalone and simplified 2005
    version of gunzip. As of beb3c64a, none of our code uses it, even
    theoretically. And the real g(un)zip is now everywhere.
    
    There are too many tweaks and updates to list. General summary:
    
    src/cmd/INIT/proto.c, src/cmd/INIT/ratz.c:
    - Removed.
    
    COPYRIGHT:
    - Remove zlib license; this only applied to ratz.
    
    bin/package, src/cmd/INIT/package.sh:
    - Related cleanups.
    
    src/cmd/INIT/proto.sh:
    - Add stub for backwards compatibility with Mamfiles that depend on
      proto. It does nothing but pass input without modification and is
      now installed as the new arch/*/bin/proto by src/cmd/INIT/Mamfile.
    
    src/cmd/INIT/iffe.sh:
    - Ignore the proto-related -e (--package) and -p (--prototyped)
      options; keep parsing them for backwards compatibility.
    - Trim the macros passed to every test to their standard C
      versions, removing K&R C and C++ versions. These are now
      considered to be for backwards compatibility only.
    
    src/cmd/INIT/make.probe, src/cmd/INIT/probe.win32:
    - Remove code to handle C++.
    
    src/lib/libast/features/common:
    - As in iffe.sh above, trim macros designed for compatibility with
      C++ and ancient C compilers to their standard C versions and
      comment that they are for backwards compatibility with AST code.
      This is needed to keep all the old ast and ksh code compiling.

commit 4e185eea8e29757d1dea3029760a824df59382c9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Dec 22 05:25:26 2021 -0800

    Fix process substitutions printing PIDs in profile scripts (#395)
    
    - sh/args.c: A process substitution run in a profile script may print
      its PID as if it was a command spawned with '&'. Reproducer:
         $ cat /tmp/env
         true >(false)
         $ ENV=/tmp/env ksh
         [1]        730227
         $
      This bug is fixed by turning off the SH_PROFILE state while running
      a process substitution.
    
    - sh/subshell.c: The SH_INTERACTIVE fix in 35b02626 renders the extra
      check for SH_PROFILE redundant, so it has been removed.
    
    - tests/io.sh: Update the procsub PIDs test to also check the result
      after using process substitution in a profile script.

commit d40d998e3a3598c4779076f86790ce571588eccf
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 21 22:33:36 2021 -0800

    Fix ASan buffer overflow errors caused by memcmp (#393)
    
    This commit replaces more instances of memcmp with strncmp to fix some
    more heap-buffer-overflow errors in ASan, some of which can occur when
    running the regression tests with xtrace enabled. It combines two
    existing patches plus another fix in name.c for xtrace:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg00877.html
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/035-CR7036535.patch

commit d11d4c7acd44ae478fd182a4fa5db9e45f989a04
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 22 04:43:42 2021 +0000

    Interactive: Avoid losing the job after suspending a subshell
    
    Reproducer: run vi in a subshell:
    
            $ (vi)
    
    vi opens; now press Ctrl+Z to suspend. The output is as expected:
    
            [2] + Stopped                  (vi)
    
    …but the exit status is 18 (SIGTSTP's signal number) instead of 0.
    
    Now do:
    
            $ fg
            (vi)
            $
    
    The exit status is 18 again, vi is not resumed, and the job is
    lost. You have to find vi's pid manually using ps and kill it.
    
    Forking all non-command substitution subshells invoked from the
    interactive main shell is the only reliable and effective fix I've
    found. I've tried to fork the subshell conditionally in every other
    remotely plausible place I can think of in fault.c and xec.c, but I
    can't get anything to work properly. If anyone can get this to work
    without forking as much (or at all), please do submit a patch or PR
    that supersedes this fix.
    
    At least subshells of subshells don't need to fork, so the
    performance impact can be limited. Plus, it's not as if most people
    need maximum speed on the interactive command line. Scripts
    (including login/profile scripts) are not affected at all.
    
    Command substitutions can be handled differently. My testing shows
    that all shells except ksh93 simply block SIGTSTP (the ^Z signal)
    while they run. We should do the same, so they don't need to fork.
    
    NOTE for any backporters: the subshell.c and fault.c changes depend
    on commits 35b02626 and 48ba6964 to work correctly.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - If the interactive shell state bit is on, then before executing
      the subshell's code:
      - for command substitutions, block SIGTSTP;
      - for other subshells, fork.
    - For command substitutions, release SIGTSTP if the interactive
      shell state bit was on upon invoking the subshell.
    
    src/cmd/ksh93/sh/fault.c:
    - Instead of checking for a virtual subshell, check the shell's
      interactive state bit to decide whether to handle SIGTSTP, as
      that is only turned on in the interactive main shell.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - To avoid bugs, ignore SIGTSTP while running profile scripts.
      Blocking it doesn't work because delaying it until after
      sigrelease() will cause a crash. Thanks to @JohnoKing for this.
    - While we're here, prevent a possible overflow of the 'beenhere'
      static char variable by only incrementing it once.
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Resolves: https://github.com/ksh93/ksh/issues/390

commit 35b026269dfed56a9b810f3d242b8056152ae8da
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 22 03:10:11 2021 +0000

    sh_parse(): don't turn on interactive state (re: 48ba6964)
    
    Reproducer:
    
            $ (sleep 1& echo done)
            done
            $ (eval "echo hi"; sleep 1& echo done)
            hi
            [1]     30587
            done
    
    No job control output should be printed for a background process
    invoked from a subshell, not even after 'eval'.
    
    The cause: sh_parse() turns on the shell's interactive state bit
    (sh_state(SH_INTERACTIVE)) if the interactive shell option is on.
    
    This is incorrect. The parser should have no involvement with shell
    interactivity in principle because that's not its domain.
    
    Not only that, the parser may need to run in a subshell, e.g. when
    executing traps or 'eval' commands (as above). By definition, a
    subshell can never be interactive.
    
    We already fixed many bugs related to job control and the shell's
    interactive state. Even if these two lines previously papered over
    some breakage, I can't find any now after simply removing them. If
    any is found later, then it'll need to be fixed properly instead.
    
    Related: https://github.com/ksh93/ksh/issues/390

commit ac0a3a523840fd582476f55f9601dab376dffb10
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 21 00:00:29 2021 -0800

    Port cksum builtin performance improvements from illumos (#391)
    
    This commit ports performance optimizations from illumos for the libsum
    code (used by the cksum and sum builtins):
    https://github.com/illumos/ast/commit/98bea71f0d345ee7a661e1d9873e8d9b0cd78d37
    The new codepath in libsum uses prefetching and loop unrolling to
    improve performance (prefetching is done with __builtin_prefetch()
    or sun_prefetch_read_many() if either is available).
    
    Script for testing (note that cksum must be enabled in
    src/cmd/ksh93/data/builtins.c):
       #!/bin/ksh
       builtin cksum || exit 1
       for ((i=0; i!=50000; i++)) do
           cksum -x att /etc/hosts
       done >/dev/null
    
    Results on Linux x86_64 (using CCFLAGS=-O2):
    $ echo 'UNPATCHED:'; time arch/linux.i386-64/bin/ksh /tmp/foo; echo 'PATCHED'; time /tmp/ksh /tmp/foo
    UNPATCHED:
    
    real    0m09.989s
    user    0m07.582s
    sys     0m02.406s
    PATCHED:
    
    real    0m06.536s
    user    0m04.331s
    sys     0m02.204s
    
    src/lib/libsum/{sum-att.c,sum-crc.c,Mamfile}:
    - Port the performance optimizations from illumos to 93u+m libsum. To
      prevent problems with older versions of GCC, avoid the new codepath
      if GCC is older than the 3.1 release series. Additionally, the ast.h
      header must be included to handle tcc defining __GNUC__ on FreeBSD.
    - Apply some build fixes to allow the new codepath to build with Clang
      3.6 and newer (my own testing indicates an even better performance
      improvement with Clang than with GCC).

commit ecd3d87891a3e9b9a9b7f39f89641f7d614e12ac
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Dec 20 23:44:59 2021 -0800

    Fix yet more minor bugs related to the regression tests (#389)
    
    - Redirect error output from the ulimit builtin (re: 3e58851f).
    - Fix the test failure for 'cd -eP' on illumos by making a directory
      symlink first, then removing the symlink after cd.
    - Fix the test failure for 'getconf -l' on illumos by quoting
      strings with the -q option.
    - astconf.c: Only quote strings if the -q option was passed.
    - Improve error messages from intermittently failing types.sh tests

commit 13c959abf816cc3f6a8a7f83e9edca560cd8725f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 21 06:10:18 2021 +0000

    bin/package: fix 64-bit detection on systems without 'cc'
    
    If the compiler is called gcc but not cc, the 64-bit detection
    didn't work and $HOSTTYPE (and the arch/ subdirectory) did not get
    the -64 suffix.
    
    bin/package, src/cmd/INIT/package.sh:
    - Run checkcc() before attempting to compile the program. This will
      set $cc to the path to gcc if there is no 'cc' command.
    - trap: use 'rm -rf' to also delete .dSYM directories (macOS).
    - checkcc(): Since we're here, find clang as well.

commit 5a88a0e09dc59bc278a53a5d650d24799194ce03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 21 06:35:30 2021 +0000

    standards: fix build on Solaris <11.4, illumos (re: a38e8047)
    
    These SunOS versions are extremely picky with their standards
    macros and will disable basic functionality if you pass the ones
    recommend by the standards(5) manual.
    
    src/lib/libast/features/standards:
    - Revert to the __EXTENSIONS__ and _XOPEN_SOURCE values known to
      work for whatever reason, and avoid passing _POSIX_C_SOURCE under
      any circumstances. (It's still working fine without any compiler
      wrapper script.)
    - Add a new heuristic. _POSIX_PATH_MAX and _SC_PAGESIZE are among
      the basic macros disabled when you pass recommended standards
      macros, killing the build, so it's good to check if they compile.

commit 68657364b3005de63cc6af1f90c27aba251388f4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 20 16:54:59 2021 +0000

    Fix regress test failures (re: 544ddfad)
    
    That didn't work; it caused a few regression test failures due to
    inconsistencies in ${.sh.lineno}. <sigh>
    
    src/cmd/ksh93/tests/shtests
    - New strategy. Don't save/restore/assign LINENO at all. Only
      incorporate the aliases for shcomp; dot/source the rest of the
      code as normal. Replace the first few lines with the aliases to
      avoid affecting $LINENO; they are comments anyway.

commit a38e8047786b1576d1ef979a9bbafbcd1c343a74
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 20 12:21:37 2021 +0000

    Sanitise standards/feature macros, remove compiler/linker wrappers
    
    The goal is to get rid of all compiler/linker wrapper scripts as
    they are overridden by passing CC/LD and it should be possible to
    select your compiler or linker without breaking the build. The
    probing and feature testing system should set the appropriate flags
    and macros. This makes some progress towards that.
    
    src/lib/libast/features/standards:
    - Eliminate the shotgun approach to standards macros on popular
      systems where the macros we we need to set are known and
      documented. The following will enable standards compliance plus
      all the available extensions:
      - Set no macros at all for any BSD system (excluding macOS).
      - Set _DARWIN_C_SOURCE on Darwin/macOS.
      - Set everything and the kitchen sink for Solaris/illumos in
        a way that enables backwards compatibility with older Solaris.
      - Set _GNU_SOURCE for GNU (glibc).
      - Remove the covered macros from the shotgun approach fallback.
    
    src/cmd/INIT/ar.freebsd12.amd64,
    src/cmd/INIT/ar.linux.i386-64:
    - Removed. May cause build failures on some systems as not all 'ar'
      implementations support the U option. Plus, I can think of no
      good reason to disable deterministic mode (which always creates
      identical output) on 'ar' implementations that support it. See:
      https://groups.google.com/g/comp.unix.shell/c/LdOD1Ya0C9E/m/U6DhgHVICwAJ
    
    src/cmd/INIT/cc.linux.*-icc,
      Removed icc wrappers. These manually source /etc/profile.d/icc.sh
      but I don't think that is the build system's job. Profile scripts
      should be run at login time and export variables we inherit
      through the environment.
    
    src/cmd/INIT.cc.{freebsd,linux,openbsd}*:
    - Removed. Should be entirely superfluous now that the standards
      feature test sets the appropriate macros.
    
    src/cmd/INIT.cc.sol11.*:
    - Removed as the standards feature test now sets the approopriate
      macros. Note the Solaris build system should now simply pass CC
      as normal instead of passing CC_EXPLICIT.

commit 544ddfad2b1736443b014369dce66f86b6ec16e1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 20 02:26:14 2021 +0000

    shtests: report correct line numbers for shcomp fails (re: bd38c804)
    
    Inserting the _common script instead of sourcing it caused all test
    failures in shcomp runs to be reported with the number of lines in
    _common added.
    
    src/cmd/ksh93/shtests:
    - In the sed script inserting the _common code, insert (i) a line
      to save LINENO before reading (r) _common, then append (a) code
      to restore it after reading the file. LINENO needs to be
      increased by one after restoring it, but that is conveniently
      fixed by adding 'unset' on a new line.

commit 4e6d1433a74eaee2bd8fe4df7fada404b81f26a6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Dec 18 14:38:23 2021 +0000

    bin/package: more cleanups (re: 20f8557c)
    
    src/cmd/INIT/package.sh, bin/package:
    - Derive the command name from $0 instead of hardcoding it.
    - Remove NPROC and related code to support parallel building. This
      is not supported with mamake, is unlikely to be reintroduced any
      time soon, and if it ever is it will need to be done in a
      different way anwyay.
    - Invoke 'sed' and 'tr' directly instead of via $SED and $TR
      variables. We're not building our own dynamically linked 'sed'
      and 'tr' in this distribution so LD_LIBRARY_PATH is irrelevant.
      If we ever do again, there are better ways to make sure the OS
      standard 'sed' and 'tr' are invoked than this kludge.
    - Use note() consistently to print warnings to standard error.
      note() is changed to print each argument on a new line prefixed
      by the command name, so arguments need to be quoted now if they
      are to be shown on a single line.
    - Use a new err_out() function to error out, avoiding code
      repetition.

commit f978d0193b7a4c4cf6fbad86fce6326e622a76dc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 17 04:43:49 2021 +0100

    TODO: update from 1.0 branch

commit 3285b7383017fd0cdacc5eabee8a7f490491662c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Dec 16 18:24:56 2021 -0800

    Backport ksh93v- bugfix for [[ 1<2 ]] (#380)
    
    Strings compared in [[ with the > and < operators should be compared
    lexically. This does not work when the strings are single digits, as
    the parser interprets it as a syntax error:
       $ [[ 10<2 ]]   # 10 lexically sorts before 2
       $ echo $?
       0
       $ [[ 1<2 ]]
       /usr/bin/ksh: syntax error: `<' unexpected
       $ echo $?
       3
    
    src/cmd/ksh93/sh/lex.c:
    - Don't interpret numbers next to > and < as a redirection while
      inside of [[. This bugfix was backported from ksh93v- 2014-06-25.
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add regression tests for the > and < operators.

commit c5018f7c9523a1e9d2039ae83caf52a8011dec82
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 17 01:02:01 2021 +0100

    Re-fix defining types conditionally or in subshells (re: 5cc9fcc1)
    
    New version. I'm pretty sure the problems that forced me to revert
    it earlier are fixed.
    
    This commit mitigates the effects of the hack explained in the
    referenced commit so that dummy built-in command nodes added by the
    parser for declaration/assignment purposes do not leak out into the
    execution level, except in a relatively harmless corner case.
    
    Something like
    
        if false; then
            typeset -T Foo_t=(integer -i bar)
        fi
    
    will no longer leave a broken dummy Foo_t declaration command. The
    same applies to declaration commands created with enum.
    
    The corner case remaining is:
    
        $ ksh -c 'false && enum E_t=(a b c); E_t -a x=(b b a c)'
        ksh: E_t: not found
    
    Since the 'enum' command is not executed, this should have thrown
    a syntax error on the 'E_t -a' declaration:
    ksh: syntax error at line 1: `(' unexpected
    
    This is because the -c script is parsed entirely before being
    executed, so E_t is recognised as a declaration built-in at parse
    time. However, the 'not found' error shows that it was successfully
    eliminated at execution time, so the inconsistent state will no
    longer persist.
    
    This fix now allows another fix to be effective as well: since
    built-ins do not know about virtual subshells, fork a virtual
    subshell into a real subshell before adding any built-ins.
    
    src/cmd/ksh93/sh/parse.c:
    
    - Add a pair of functions, dcl_hactivate() and dcl_dehacktivate(),
      that (de)activate an internal declaration built-ins tree into
      which check_typedef() can pre-add dummy type declaration command
      nodes. A viewpath from the main built-ins tree to this internal
      tree is added, unifying the two for search purposes and causing
      new nodes to be added to the internal tree. When parsing is done,
      we close that viewpath. This hides those pre-added nodes at
      execution time. Since the parser is sometimes called recursively
      (e.g. for command substitutions), keep track of this and only
      activate and deactivate at the first level.
         (Fixed compared to previous version of this commit: calling
      dcl_dehacktivate() when the recursion level is already zero is
      now a harmless no-op. Since this only occurs in error handling
      conditions, who cares.)
    
    - We also need to catch errors. This is done by setting libast's
      error_info.exit variable to a dcl_exit() function that tidies up
      and then passes control to the original (usually sh_exit()).
         (Fixed compared to previous version of this commit: dcl_exit()
      immediately deactivates the hack, no matter the recursion level,
      and restores the regular sh_exit(). This is the right thing to
      do when we're in the process of erroring out.)
    
    - sh_cmd(): This is the most central function in the parser. You'd
      think it was sh_parse(), but $(modern)-form command substitutions
      use sh_dolparen() instead. Both call sh_cmd(). So let's simply
      add a dcl_hacktivate() call at the beginning and a
      dcl_deactivate() call at the end.
    
    - assign(): This function calls path_search(), which among many
      other things executes an FPATH search, which may execute
      arbitrary code at parse time (!!!). So, regardless of recursion
      level, forcibly dehacktivate() to avoid those ugly parser side
      effects returning in that context.
    
    src/cmd/ksh93/bltins/enum.c: b_enum():
    
    - Fork a virtual subshell before adding a built-in.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    
    - Fork a virtual subshell when detecting typeset's -T option.
    
    Improves fix to https://github.com/ksh93/ksh/issues/256

commit 04588416de2d8d9b53b2ae8d90c9554d2730a351
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 22:35:49 2021 +0100

    ANNOUNCE: update for dev branch

commit 55dc80ce4e305a2fee70f07ad597a671fdf5d11f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 16:40:42 2021 +0100

    Do not exit shell on Ctrl+C with SIGINT ignored (re: 7e5fd3e9)
    
    The killpg(getpgrp(),SIGINT) call added to ed_getchar() in that
    commit caused the interactive shell to exit on ^C even if SIGINT is
    being ignored. We cannot revert or remove that call without
    breaking job control. This commit applies a new fix instead.
    
    Reproducers fixed by this commit:
    
      SIGINT ignored by child:
    
        $ PS1='childshell$ ' ksh
        childshell$ trap '' INT
        childshell$ (press Ctrl+C)
        $
    
      SIGINT ignored by parent:
    
        $ (trap '' INT; ENV=/./dev/null PS1='childshell$ ' ksh)
        childshell$ (press Ctrl+C)
        $
    
      SIGINT ignored by parent, trapped in child:
    
        $ (trap '' INT; ENV=/./dev/null PS1='childshell$ ' ksh)
        childshell$ trap 'echo test' INT
        childshell$ (press Ctrl+C)
        $
    
    I've experimentally determined that, under these conditions, the
    SFIO stream error state is set to 256 == 0400 == SH_EXITSIG.
    
    src/cmd/ksh93/sh/main.c: exfile():
    - On EOF or error, do not return (exiting the shell) if the shell
      state is interactive and if sferror(iop)==SH_EXITSIG.
    - Refactor that block a little to make the new check fit in nicely.
    
    src/cmd/ksh93/tests/pty.sh:
    - Test the above three reproducers.
    
    Fixes: https://github.com/ksh93/ksh/issues/343

commit 0508608fa043579942583b760825eaf2844e7ee8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 11:45:53 2021 +0100

    more regression test updates (re: 13a57a8f)

commit e66b8613f21fc25c08886c8c7b8bd7f642b15d76
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 09:20:00 2021 +0100

    tests/path.sh: update regression test (re: 13a57a8f)

commit 13a57a8f862469d593793f9e977402b02ec993e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 08:48:06 2021 +0100

    New selection of default libcmd /opt/ast/bin built-ins
    
    Note that this is only about the /opt/ast/bin built-in commands,
    not about the regular pathless builtins such as printf.
    To use these, either add /opt/ast/bin to your $PATH or use a
    command like 'builtin cp'. As usual, --man provides info.
    
    Removed as defaults for lack of convincing advantages over the OS's
    external commands:
    - chmod, cmp, head, logname, mkdir, sync, uname, wc
    
    Remain as useful defaults:
    - basename, cat, cut, dirname. These are commonly used in
      performance-sensitive code paths in scripts and having them as
      built-ins can be good for performance.
    - getconf: This is the only interface to some libast internals that
      is available to ksh. It's also has better functionality than most
      OS-shipped 'getconf' commands, e.g., it can list and query all
      the configuration values.
    
    Added as defaults:
    - cp, ln, mv: Having these built in can speed up scripts that
      manage files. Also the AST versions have extended functionality
      (see cp --man, etc.).
    - mktemp: External mktemp commands vary too widely and are
      incompatible, but it's important that scripts can securely make
      temporary files, so it's good to ship a known interface to this
      functionality.
    
    As a result, the statically linked ksh binary is very slightly
    smaller than before.
    
    Resolves: https://github.com/ksh93/ksh/issues/349

commit 41cb219244a5a8943c6d387838c7945240ff2b4c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 16 07:24:27 2021 +0100

    shtests: don't run pty tests with shcomp by default
    
    The pty tests tests the interactive shell. Therefore, running them
    through the script compiler is a waste of time.
    
    Not only that, it is reported that the pty tests intermittently
    fail with shcomp on some systems. This is not worth trying to fix.
    
    src/cmd/ksh93/tests/shtests:
    - Only run pty.sh with shcomp if -c/--compile was explicitly
      specified.
    - Document the change.

commit b936c94fbcd9613687c9ce1e8139a03f7b5e74d2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 15 18:53:22 2021 +0100

    Temporarily revert separate stack for libast/regex (re: ffe84ee7)
    
    Welcome to AT&T engineering practices in action: a fix in one thing
    breaks a completely unreleated thing, but only in very specific
    and inscrutable circumstances.
    
    Commit ffe84ee7 introduced a regression test failure in types.sh:
    
    test types begins at 2021-12-14+23:57:35
            types.sh[130]: z.r.s should be z.r.x
    test types failed at 2021-12-14+23:57:35 with exit code 1 [ 86 tests 1 error ]
    test types(C.UTF-8) begins at 2021-12-14+23:57:35
    test types(C.UTF-8) passed at 2021-12-14+23:57:35 [ 86 tests 0 errors ]
    test types(shcomp) begins at 2021-12-14+23:57:35
    test types(shcomp) passed at 2021-12-14+23:57:35 [ 86 tests 0 errors ]
    
    Only enough, I've *only* found this regression on the GitHub CI
    runner. I've tried it on three different regular Linux systems and
    it occurs on none of them, nor on macOS.
    
    Another odd thing: it only fails on the first of those three test
    runs. But my experiments show it fails very consistently.
    
    Through a process of systematic elimination in a test branch, I've
    found that the failure is triggered by the change to using a
    separate stack in the regex code. All the other changes are fine.
    
    Using a separate stack improves the robustness of the regex code,
    but it apparently exposes some breakage in how the very dodgy
    'typeset -T' code is handling the stack, which was being masked by
    sharing a stack with it. Or at least that seems like the most
    plausible explanation to me right now.
    
    So, until that breakage can be traced and fixed, the regex code now
    shares the main stack with everything else again for the time being.
    
    _____
    Just to record this: by adding a couple of debug lines:
    
      typeset -p z | sed 's/^/[DEBUG] /'
      printf '[DEBUG] %s\n' "${z.r.s}" "${z.r.x}"
    
    the symptom reveals itself more clearly on the GitHub runner:
    
      test types begins at 2021-12-15+17:25:57
      [DEBUG] Y_t z=(X_t r=(x=foo;y=bam;s=''))
      [DEBUG]
      [DEBUG] foo
              types.sh[132]: z.r.s should be z.r.x
      test types failed at 2021-12-15+17:25:57 with exit code 1 [ 86 tests 1 error ]
      test types(C.UTF-8) begins at 2021-12-15+17:25:57
      [DEBUG] Y_t z=(X_t r=(x=foo;y=bam;s=foo))
      [DEBUG] foo
      [DEBUG] foo
      test types(C.UTF-8) passed at 2021-12-15+17:25:57 [ 86 tests 0 errors ]
      test types(shcomp) begins at 2021-12-15+17:25:57
      [DEBUG] Y_t z=(X_t r=(x=foo;y=bam;s=foo))
      [DEBUG] foo
      [DEBUG] foo
      test types(shcomp) passed at 2021-12-15+17:25:57 [ 86 tests 0 errors ]

commit 20f8557cea3028178ee6cf0c754e0c036b8f92c9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 15 04:53:47 2021 +0100

    bin/package: go POSIX
    
    Yes, we're finally abandoning the old Bourne shell so we can
    use sane $(command substitutions) and the like. POSIX sh (with
    tolerance for shell bugs) is very highly portable these days.
    Even Solaris 10 has a POSIX shell, though not as /bin/sh.
    
    bin/package, src/cmd/INIT/package.sh:
    - Be nice: if we're on an obsolete or broken shell, try hard to
      escape to a good one. This should preserve the possibility to
      just run 'bin/package make' via ancient /bin/sh on Solaris 10.
      - Note: zsh without sh emulation is considered broken because
        $path, which we use, is linked to $PATH. You have to run it via
        a symlink named sh or via 'zsh --emulate sh' to disable this.
        Enabling emulation mode after initialisation will not work.
    - More self-documentation cleanups and updates.
    - Regenerate the text-only fallback version of the self-doc.
    - Remove flat view functionality (no arch directory); it may have
      been broken for some time, but quite frankly I could not care
      less. It's yet more featuritis. Building in arch/ is fine.

commit ffe84ee7898820948e89dc3739384765ea314ecd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 15 00:41:46 2021 +0100

    libast: regex: backport robustness improvements from 93v- beta
    
    There are two main changes:
    
    1. The regex code now creates and uses its own stack (env->mst)
       instead of using the shared standard stack (stkstd). That seems
       likely to be a good thing.
    
    2. Missing mbinit() calls were inserted. The 93v- code uses a
       completely different multibyte characters API, so these needed
       to be translated back to the older API. But, as mbinit() is no
       longer a no-op as of 300cd199, these calls do stop things from
       breaking if a previous operation is interrupted mid-character.
    
    I think there might be a couple of off-by-one errors fixed as well,
    as there are two instances of this change:
    
    -               while ((index += skip[buf[index]]) < mid);
    +               while (index < mid)
    +                       index += skip[buf[index]];

commit b9171968b40935b013c1c80c646d7b8379147506
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 14 22:33:59 2021 +0100

    package: allow 'tee' to catch up before returning (re: beb3c64a)
    
    In the referenced commit message I neglected to mention that, when
    doing bin/package make, we're now running 'tee' in the background
    again and the building job in the foreground, as opposed to the
    other way around. Foreground jobs are more reliably interruptable.
    But that reintroduced the problem fixed in 5b8d29d3. Now I don't
    know what I was thinking then -- the obvious fix is to add a 'wait'
    command, allowing 'tee' to catch up before returning to the prompt.

commit beb3c64a480bb9f752314adf1d1b3f4a63cbb8a0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 14 21:13:43 2021 +0100

    package: remove a lot more unused AT&T cruft
    
    This reduces the bin/package script by more than half!
    
    bin/package, src/cmd/INIT/package.sh:
    - Remove obsolete and unused package commands: admin, contents,
      license, list, remote, regress, setup, update, verify, write.
    - Remove associated documentation.
    - Replace install command with a dummy. It'll come back when we
      reintroduce the building of dynamic libaries.
    - Update the test command to run the regression tests properly
      and capture the output in arch/*/lib/package/gen/tests.out, as
      documented. Arguments are simply passed to bin/shtests.
    
    src/cmd/INIT/{ditto.sh,hurl.sh,release.c}:
    - Removed. These were support scripts for some of the removed
      package commands.
    
    src/cmd/ksh93/tests/pty.sh:
    - Avoid failure when capturing output via 'bin/package test' by
      redirecting standard error to /dev/tty when running the tests.

commit be20341c500a9d3a7315a6bcff20b3d0989c17c1
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 14 01:22:30 2021 -0800

    The `chown` builtin should fail with the same error consistently (#378)
    
    This bug was first reported at <https://www.illumos.org/issues/3782>.
    The chown builtin when used on illumos can fail with different error
    messages after running the same command twice:
    
      $ touch /tmp/x
      $ /opt/ast/bin/chown -h 433:434 /tmp/px
      chown: /tmp/x: cannot change owner and group [Not owner]
      $ /opt/ast/bin/chown -h 433:434 /tmp/px
      chown: /tmp/x: cannot change owner and group [Invalid argument]
    
    The error messages differ because the libast struid and strgid
    functions will return -2 if the same nonexistent ID is used twice.
    
    The fix for this bug has been ported from here:
    https://github.com/illumos/illumos-gate/commit/4162633a7c5961f388fd
    
    src/lib/libcmd/chgrp.c:
    - Remove NOID macro and check for a < 0 error status instead.
      This is different from the Illumos fix at
      <https://github.com/illumos/illumos-gate/commit/4162633a7c59>
      which added another macro.
    
    src/lib/libast/man/{strgid,struid}.3:
    - Correct errors in the strgid and struid documentation.
    - Document that the strgid and struid functions will return -2 if
      the same invalid name is used twice.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 2084e97f27f87f50854584f81d71407d00752df5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 14 09:58:45 2021 +0100

    Fix build on illumos (re: a874f8c1, 580ff616)
    
    The standards macros consistency fix for iffe exposed breakage on
    illumos: the standards flags aren't set properly. Back in 580ff616,
    I set _XPG6 from features/common, which is the wrong place; the
    correct place is features/standards -- especially now that iffe
    uses its results.
    
    In addition, to get header declarations that aren't somehow in
    conflict with themselves on illumos, don't result in "implicit
    function declaration" warnings, and expose all the functionality,
    we need to define *all* the _XPG[4-7] macros *and* __EXTENSIONS__
    *and* _XOPEN_SOURCE. Welp. Thankfully, that's just fine with
    Solaris, too.
    
    Thanks to @JohnoKing for the heads-up.

commit ff8231af6023d9c0cf91cf73fc976529edbb7173
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Dec 13 18:53:55 2021 -0800

    Fix buggy `bin/package environment` behavior (#377)
    
    Running 'bin/package environment' should only show what will happen
    during the build process, but in it's current state the feature has
    some bugs:
    
    1. Errors can occur relating to the failed creation of files and a
       failed attempt to change the directory. Various errors from
       'bin/package environment make' and 'bin/package environment make
       CC=tcc':
       bin/package[5632]: cd: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen: [No such file or directory]
       bin/package: line 5869: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/CC: cannot create [No such file or directory]
       bin/package: line 5869: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/CCFLAGS: cannot create [No such file or directory]
       bin/package: line 5869: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/CCLDFLAGS: cannot create [No such file or directory]
       bin/package: line 5869: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/LDFLAGS: cannot create [No such file or directory]
       bin/package: line 5869: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/KSH_RELFLAGS: cannot create [No such file or directory]
       bin/package[5888]: /home/johno/GitRepos/KornShell/ksh/arch/linux.i386-64/lib/package/gen/host: cannot create [No such file or directory]
    
    2. The package script may in some scenarios create a temporary file
       at the root of the repository, such as 'pkg77213.c'.
    
    bin/package, src/cmd/INIT/package.sh:
    - Avoid creating files or changing the directory while the
      environment qualifier is on (this also affects the debug
      qualifier). Part of this fix is based on a patch from Marcin
      Cieślak[*], with other fixes applied for similar problems the
      environment qualifier had.

commit 594f309059f4ace4cf8b2931d4f28b3fc28eebc1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 14 02:21:05 2021 +0100

    Get rid of overcomplicated AT&T copyright/license maintenance code
    
    I'm now taking another small step towards extricating this build
    system from the long-dead AT&T AST universe.
    
    This commit modifies/reduces the tool called proto. AT&T used proto
    for two purposes:
    
      1. To convert ANSI C code to a form compatible with ancient
         (pre-ANSI) K&R C compilers using extremely complex macro
         voodo. It was similarly capable of translating to C++.
         Theoretically, this entire code base should compile on
         anything from a 1980s K&R C compiler to a modern C++ compiler.
         In practice, given the massive amount of bit rot we inherited,
         I am 99.9% sure that this has been broken for many years.
    
      2. To automagically insert license comments into source files
         based on an extremely complicated license database system.
         (In all-too-typical AT&T fashion, this second function of
         proto is completely unrelated to the first.)
    
    Function 2 has now been removed because, unlike the AT&T legal
    department, I don't think it's worth going to unspeakably extreme
    lengths to avoid maintaining license information in source code
    files by hand.
    
    In the process, proto.c was cleaned up to look halfway like actual
    C code, but it's still processed code: most macros have been
    expanded to their numeric value, all comments were stripped, etc.
    So don't expect to understand this code. The actual source code is
    in these two directories in the ast-open-history repo:
    
    https://github.com/ksh93/ast-open-history/tree/master/src/cmd/proto
    https://github.com/ksh93/ast-open-history/tree/master/src/lib/libpp
    
    Meanwhile, nobody wants to compile ksh with a pre-ANSI K&R C
    compiler in 2021 -- and there's no good reason to be compatible
    with C++ because standard C compilers are universally available.
    So, proto will go away when I manage to figure out how to pry it
    loose from the innards of this build system.
    
    src/lib/libast/port/astlicense.c:
    - Removed. This is al the license handling code that was
      incorporated in proto.c in stripped form. It was not used
      anywhere else, and the environment where it was useful is gone.
    
    src/cmd/INIT/proto.c:
    - Cleanup to make this halfway maintainable: indentation, huge
      blocks of empty lines, #line directives, etc.
    - Delete all the code corresponding to astlicense.c. This was
      actually easy as it was in a discrete block.
    - proto(), pppopen(): Remove 'license'/'notice' and 'options'
      arguments.
    - main(): Remove processing of -l (license) and -o (license
      options) flags.
    
    **/Mamfile:
    - Update all the proto invocations to remove the -l and -o flags.
    
    bin/package, src/cmd/INIT/package.sh:
    - Delete the 'copyright' command, which used the -l and -o
      options to tell proto to extract copyright information from
      *.lic/*.def files in lib/package.
    
    COPYRIGHT:
    - Added. This has the information from 'bin/package copyright', with
      the copyright years corrected to plausible values as the AST code
      used the current year (2021) for all of them. It adds ksh 93u+m
      copyright and contributor information at the top as well.
         (Yes, some of the lines in the old non-AT&T copyright notices
      are clipped. This is the actual output of the 'bin/package
      copyright' command as generated by 'proto' in the AST
      distribution. For all that extreme complexity, they couldn't even
      reproduce the notices correctly. But it's officially sanctioned
      by AT&T in exactly this form, so there you have it.)
    
    lib/package/**:
    - Removed. All these files are now obsolete and redundant.

commit 3082ad87d6c7c2f4d9cd889da0a1b80223e3d702
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 12 22:51:59 2021 -0800

    Use dynamic maximum configuration values when necessary (#370)
    
    This commit fixes an issue with how ksh was obtaining the value of
    NGROUPS_MAX. On some systems this setting can be changed (e.g., on
    illumos adding 'set ngroups_max=32' to /etc/system then rebooting
    changes NGROUPS_MAX from 16 to 32). Ksh was using NGROUPS_MAX with
    the assumption it's a static value, which could cause issues on
    systems where it isn't static. This bugfix is inspired by the one
    from <https://github.com/lkujaw/ast/commit/b1362c3a5>, although it
    has been expanded a bit to account for OPEN_MAX as well.
    
    src/cmd/ksh93/sh/init.c, src/lib/libcmd/fds.c:
    - Rename the getconf() macro to astconf_long() and move it to ast.h
      to prevent redundancy. Other sections of the code have been
      modified to use this macro for astconf() to account for
      dynamic settings.
    - An equivalent macro for unsigned long values (astconf_ulong) has
      been added.
    - Prefer sysconf(3) where available. It has better performance as it
      returns a numeric value directly instead of via string
      conversion.
    - The astconf_long and astconf_ulong macros have been documented in
      the ast(3) man page.

commit f90a6745ddc7a2fcf94c5b46bdf95bef08e504a6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 13 01:33:26 2021 +0100

    Re-match '.' and '..' in tab completion (re: 5312a59d, aad74597)
    
    Turns out there is a bona fide, honest-to-goodness use case for
    matching '.' and '..' in globbing after all. It's when globbing is
    used as the backend mechanism for file name completion in
    interactive shell editors. A tab invisibly adds a * at the end of
    the word to the left of your cursor and the resulting pattern is
    expanded. In 5312a59d, this broke for '.' and '..'.
    
    Typing '.' followed by two tabs should result in a menu that
    includes './' and '../'. Typing '..' followed by a tab should
    result in '../', (or a menu that includes it if there are files
    with names starting with '..'). This is the behaviour in 93u+ and
    we should maintain this.
    
    To restore this functionality without reintroducing the harmful
    behaviour fixed in the referenced commits, we should special-case
    this, allowing '.' and '..' to match only for file name completion.
    
    src/lib/libast/include/glob.h:
    - Fix an inaccurate comment: the GLOB_COMPLETE flag is used for
      command completion, not file name completion. This is very clear
      from reading the path_expand() function in sh/expand.c.
    - Add new GLOB_FCOMPLETE flag for file name completion.
    
    src/lib/libast/misc/glob.c:
    - Adapt flags mask to fit the new flag.
    - glob_dir(): If GLOB_FCOMPLETE is passed, allow '.' and '..' to
      match even if expanded from a pattern.
    - Clarify the fix from aad74597 with an extended comment based on
      <https://github.com/ksh93/ksh/issues/146#issuecomment-790991990>.
    
    src/cmd/ksh93/sh/expand.c: path_expand():
    - If we're in the SH_FCOMPLETE (file name completion) state, then
      pass the new GLOB_FCOMPLETE flag to AST glob(3).
    
    Fixes: https://github.com/ksh93/ksh/issues/372
    Thanks to @fbrau for the bug report.

commit 4923741c9a9ef27157c7370215b1f79681551923
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 12 13:40:38 2021 -0800

    Various minor capitalization and typo fixes (#371)
    
    This commit fixes various minor typos, punctuation errors and
    corrects the capitalization of many names.

commit 3e8fa40128f82e25a02fbe7254cd9b3ae5eb1f48
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 12 13:25:07 2021 -0800

    Port more shell lint improvements from illumos and ksh93v- (#374)
    
    This commit adds onto <https://github.com/ksh93/ksh/pull/353> by porting
    over two additional improvements to the shell linter:
    
    1) The changes in the aforementioned pull request were merged into
       illumos-gate with an additional change.[*] The illumos revision of
       the patch improved the warning for (( $foo = $? )) to specify '$foo'
       causes the warning.[**] Example:
          $ ksh -n -c '(( $? != $bar ))'
          ksh: warning: line 1: in '(( $? != $bar ))', using '$' as in '$bar' is slower and can introduce rounding errors
       While I was porting the illumos patch I did notice one problem. The
       string it uses from paramsub() skips over the initial '{' in
       '${var}', resulting in the warning printing '$var}' instead:
          $ ksh -n -c '(( ${.sh.pid} != $$ ))'
          ...  in '(( ${.sh.pid} != $$ ))', using '$' as in '$.sh.pid}' is slower  ...
       This was fixed by including the missing '{' in the string returned by
       paramsub for ${var} variables.
    
    2) In ksh93v-, parsing x=$((expr)) with the shell linter will cause ksh
       to warn the user x=$((expr)) is slower than ((x=expr)). This
       improvement has been backported with a modified warning:
          # Result from this commit
          $ ksh -n -c 'x=$((1 + 2))'
          ksh: warning: line 1: x=$((1 + 2)) is slower than ((x=1 + 2))
          # Result from ksh93v-
          $ ksh93v -n -c 'x=$((1 + 2))'
          ksh93v: warning: line 1: ((x=1 + 2)) is more efficient than x=$((1 + 2))
       Minor note: the ksh93v- patch had an invalid use of memcmp; this
       version of the patch uses strncmp instead.
    
    References:
    https://github.com/illumos/illumos-gate/commit/be548e87bcb4979e0b8a7bce5620a9916b888fdc
    https://code.illumos.org/c/illumos-gate/+/1834/comment/65722363_22fdf8e7/

commit 56522ec7a1d0d597f3061c50c2c413acb9dd9497
Author: Ryan Schmidt <ryandesign@macports.org>
Date:   Sun Dec 12 14:39:26 2021 -0600

    Include <unistd.h> in "fd is * arg to poll" tests (#376)
    
    The "fd is first arg to poll()" and "fd is second arg to poll()" tests
    use write() but don't include the system header in which that function
    is declared, leading to "error: implicit declaration of function 'write'
    is invalid in C99'" when trying to compile the test. By including the
    header, the test can now compile and run as intended.

commit a49b46044cf70bbadf7c70907fd78cf1463a292e
Author: Ryan Schmidt <ryandesign@macports.org>
Date:   Sun Dec 12 14:29:46 2021 -0600

    Include <string.h> in "mmap is worth using" test (#375)
    
    The "mmap is worth using" test uses memcpy but doesn't include the
    system header in which that function is declared, leading to
    "error: implicitly declaring library function 'memcpy'" when trying
    to compile the test. By including the header, the test can now
    compile and run as intended.
    
    On macOS, the result is still negative. The test seems to time
    using mmap and another method and only picks mmap if it's faster.
    Editing the test to print out timing information on a few runs, I
    see that mmap is 2–3✕ slower than the other method:
    
    $ for i in $(seq 1 5); do ./mmap_worth_using; done
    /* mmtm=11 rdtm=3 */
    /* 4*mmtm=44 3*rdtm=9 */
    /* 4*mmtm=44 5*rdtm=15 */
    /* mmtm=9 rdtm=5 */
    /* 4*mmtm=36 3*rdtm=15 */
    /* 4*mmtm=36 5*rdtm=25 */
    /* mmtm=10 rdtm=4 */
    /* 4*mmtm=40 3*rdtm=12 */
    /* 4*mmtm=40 5*rdtm=20 */
    /* mmtm=12 rdtm=4 */
    /* 4*mmtm=48 3*rdtm=12 */
    /* 4*mmtm=48 5*rdtm=20 */
    /* mmtm=12 rdtm=4 */
    /* 4*mmtm=48 3*rdtm=12 */
    /* 4*mmtm=48 5*rdtm=20 */

commit 5d8ae3604ac2dfa2b32056b296f243fff7e5c5d6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Dec 12 00:57:11 2021 +0100

    libast: fix memccpy(3) feature test
    
    If you passed CC=/some/compiler, the build broke on macOS because the
    cc.darwin compiler wrapper wasn't used. Among other things, this
    wrapper adds a -D_lib_memccpy flag, defining _lib_memccpy as 1
    during the build. That was used to override a false negative result
    of the lib_memccpy feature test. This commit fixes that feature
    test instead, so it correctly returns positive on macOS.
    
    Thanks to Ryan Smith (@ryandesign) for the bug report and for the
    fix to the lib_memccpy test.
    
    src/lib/libast/features/lib:
    - Fix the lib_memccpy feature test. It was checking the result of
      mmap(2) incorrectly, resulting in the test crashing on macOS.
      Failure does not return NULL, it returns MAP_FAILED which is
      usually -1.
    
    src/cmd/INIT/cc.darwin*:
    - Removed. Any other flags in these wrappers are either related to
      building dynamic libraries, which is not currently supported, or
      were determined to be unnecessary. See the GitHub issue for
      discussion. This now makes it possible to pass `CC` to use any
      compiler you like on the Mac. Notes:
      - Apple's -D_ast_int8_t=int64_t is a no-op; another AST feature
        test already defines _ast_int8_t a 64-bit integer type, even on
        32-bit systems (on which it is defined as 'long long').
      - The -search_paths_first linker flag is the default since 2010.
        But even on my museum-grade Power Mac G5 with Mac OS X 10.3
        (from 2004), it builds and runs just fine without.
      - DCLK_TCK=100 is a no-op as even that ancient Mac system already
        defines it as 100. Plus, it's not even actually used.
      If a need is found for any of these, please report this in a new
      issue so I can special-case it elsewhere in the code.
    
    Resolves: https://github.com/ksh93/ksh/issues/373

commit dfb699b5caeac31494886de5fe0151bd7456446a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Dec 11 04:27:54 2021 +0100

    Fix two more PS2/SIGINT crashing bugs (re: 3023d53b)
    
    *** Crash 1: ***
    
    ksh crashed if the PS1 prompt contains one or more command
    substitutions and you enter a multi-line command substitution
    on the command line, then interrupt while on the PS2 prompt.
    
        $ ENV=/./dev/null /usr/local/bin/ksh -o emacs
        $ PS1='$(echo foo) $(echo bar) $(echo baz) ! % '
        foo bar baz 16999 % echo $(
        > true              <-- here, press Ctrl+C instead of Return
    
        Memory fault
    
    The crash occurred due to a corrupted lexer state while trying to
    display the PS1 prompt.
    
    Analysis: My fix for the crashing bug with Ctrl+C in commit
    3023d53b is incorrect and only worked accidentally. sh_fault() is
    not the right place to reset the lexer state because, when we press
    Ctrl+C on a PS2 prompt, ksh had been waiting for input to finish
    lexing a multi-line command, so sh_lex() and other lexer functions
    are on the function call stack and will be returned to.
    
    src/cmd/ksh93/sh/fault.c: sh_fault():
    - Remove incorrect SIGINT fix.
    
    src/cmd/ksh93/sh/io.c: io_prompt():
    - Reset the lexer state immediately before printing every PS1
      prompt. Even in situations where this is redundant it should be
      perfectly safe, the overhead is negligible, and it resolves this
      crash. It may pre-empt other problems as well.
    
    *** Crash 2: ***
    
    If an INT trap is set, and you start entering a multi-line command
    substitution, then press Ctrl+C on the PS2 prompt to trigger the
    crash, the lexer state is corrupted because the lexer is invoked to
    eval the trap action. A crash then occurs on entering the final ')'
    of the command substitution.
    
        $ trap 'echo TRAPPED' INT
        $ echo $(
        > trueTRAPPED       <-- press Ctrl+C to output "TRAPPED"
        > )
        Memory fault
    
    Technically, as SIGINT is trapped, it should not interrupt, so ksh
    should execute the trap, then continue with the PS2 prompt to let
    the user finish inputting the command. But I have been unsuccessful
    in many different attempts to make this work properly. I managed to
    get multi-line command substitutions to lex correctly by saving and
    restoring the lexer state, but command substitutions were still
    corrupted at the parser and/or execution level and I have not
    managed to trace the cause of that.
    
    My testing showed that all other shells interrupt the PS2 prompt
    and return to PS1 when the user presses Ctrl+C, even if SIGINT is
    trapped. I think that is a reasonable alternative, and it is
    something I managed to make work.
    
    src/cmd/ksh93/sh/fault.c: sh_chktrap():
    - Immediately after invoking sh_trap() to run a trap action, check
      if we're in a PS2 prompt (sh.nextprompt == 2). If so, assume the
      lexer state is now overwritten. Closing the fcin stream with
      fcclose() seems to reliably force the lexer to stop doing
      anything else. Then we can just reset the prompt to PS1 and
      invoke sh_exit() to start new command line, which will now reset
      the lexer state as per above.

commit f0e54607e760ddf7540cd340ca1c2ebd2f899dca
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 10 07:35:50 2021 +0100

    emacs.c: fix compiler warning (re: 298c274e)

commit 3023d53b3a061825f8649201cfeb1a9d36383f5a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 9 07:05:36 2021 +0100

    Reset lexer state on syntax error and on SIGINT (Ctrl+C)
    
    ksh crashed if you pressed Ctrl+C or Ctrl+D on a PS2 prompt while
    you haven't finished entering a $(command substitution). It
    corrupts subsequent command substitutions. Sometimes the situation
    recovers, sometimes the shell crashes.
    
    Simple crash reproducer:
    
      $ PS1="\$(echo foo) \$(echo bar) \$(echo baz) > "
      foo bar baz > echo $(                        <-- now press Ctrl+D
      > ksh: syntax error: `(' unmatched
      Memory fault
    
    The same happens with Ctrl+C, minus the syntax error message.
    
    The problem is that the lexer state becomes inconsistent when the
    lexer is interrupted in the middle of reading a command
    substitution of the form $( ... ). This is tracked in the
    'lexd.dolparen' variable in the lexer state struct.
    
    Resetting that variable is sufficient to fix this issue. However,
    in this commit I prefer to just reinitialise the lexer state
    completely to pre-empt any other possible issues. Whether there was
    a syntax error or the user pressed Ctrl+C, we just interrupted all
    lexing and parsing, so the lexer *should* restart from scratch.
    
    src/cmd/ksh93/sh/fault.c: sh_fault():
    - If the shell is in an interactive state (e.g. not a subshell) and
      SIGINT was received, reinitialise the lexer state. This fixes the
      crash with Ctrl+C.
    
    src/cmd/ksh93/sh/lex.c: sh_syntax():
    - When handling a syntax error, reset the lexer state. This fixes
      the crash with Ctrl+D.
    
    NEWS:
    - Also add the forgotten item for the previous fix (re: 2322f939).

commit 2322f939429ae002f92ea333a3bb6b149aad1431
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 9 06:31:54 2021 +0100

    Further robustify .get and .set discipline functions (re: 430e4781) (#368)
    
    This should fix various crashes that remain, at least:
    * when running a PS2 discipline at parse time
    * when pressing Ctrl+C on a PS2 prompt
    * when a special builtin within a discipline throws an error within
      a virtual subshell
    
    src/cmd/ksh93/sh/nvdisc.c:
    - In both assign() which handles .set disciplines and lookup()
      which handles .get disciplines, to stop errors in discipline
      functions from wreaking havoc:
      - Save, reinitialise and restore the lexer state in case the
        discipline is run at parse time. This happens with PS2; I'm not
        currently aware of other contexts but that doesn't mean there
        aren't any or that there won't be any. Plus, I determined by
        experimenting that doing this here seems to be the only way to
        make it work reliably. Thankfully the overhead is low.
      - Check the topfd redirection state and run sh_iorestore() if
        needed. Without this, if a special builtin with a redirection
        throws an error in a discipline function, its redirection(s)
        remain permanent. For example, 'trap --bad-option 2>/dev/null'
        in a PS2.get() discipline would kill standard error, including
        all your prompts.
    
    src/cmd/ksh93/sh/io.c: io_prompt():
    - Before getting the value of the PS2 prompt, save the stack state
      and restore it after. This stops a PS2.get discipline function
      from corrupting a command substitution that the user is typing.
      Doing this in assign()/lookup() is ineffective, so do it here.
    
    Fixes: https://github.com/ksh93/ksh/issues/347

commit d56eaff67b44347bbf7de1b918db427339a9b76f
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Dec 8 16:58:40 2021 -0800

    Minor improvements to the regression tests (#366)
    
    - tests/basic.sh: Fix a regression test that was failing under dtksh by
      allowing the error message to name ksh 'lt-dtksh'. Additionally, fix
      the test's inaccurate failure message (a version string is not what
      the regression test expects).
    
    - test/builtins.sh: Exclude the expr builtin from the unrecognized
      options test because it's incompatible. Additionally, put the
      unrecognized options test inside of a function to ensure that it works
      with the future local builtin (https://github.com/ksh93/ksh/issues/123).
    
    - tests/io.sh: The long seek test may fail to seek past the 2 GiB
      boundary on 32-bit systems, so only allow it to run on 64-bit.
      References:
      https://src.fedoraproject.org/rpms/ksh/blob/3222ac2b59c042bb60413bdc53e2301b7ecc1555/f/ksh-1.0.0-beta.1-regre-tests.patch
      https://github.com/att/ast/commit/a5c692e1bd0d800e3f19be249d3170e69cbe001d
    
    - tests/substring.sh: Add a regression test for the ${.sh.match}
      crashing bug fixed in commit 1bf1d2f8.

commit aaa0c66a682c3260f85dc90a10ad2f9e0e7f7c79
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Dec 9 01:13:59 2021 +0100

    ksh93/Mamfile: add missing header dependencies
    
    src/cmd/ksh93/sh/Mamfile:
    - For edit/edit.c, add include/shlex.h (re: f99ce517).
    - For sh/shcomp.c, add include/{path,terminal}.h (re: 141fa68e).
    
    Thanks to @JohnoKing for flagging these up.

commit 298c274e5025553d36e0be2f36d5dcf63ce62a50
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 8 22:16:11 2021 +0100

    cleanup: get rid of KSHELL and _BLD_shell preprocessor macros
    
    Once upon a time it might have been possible to build certain parts
    of ksh, such as the emacs and vi editors and possibly even the
    name/value library (nval(3)) as independent libraries. But given
    the depressing amount of bit rot in the code that we inherited, I
    am certain that disabling either of these macros had been resulting
    in a broken build for many years before AT&T abandoned this code
    base. These are certainly not going to be useful now.
    
    Meanwhile the KSHELL macro got in the way of me today, because the
    Mamfile did not define it for all the .c files, but some headers
    declared some functionality conditionally upon that macro. So
    including <io.h> in, e.g., nvdisc.c did not declare the same
    functions as including that header in files with KSHELL defined.
    This inconsistency is now gone as well, for various files.
    
    I'm currently working on making it possible once again to build
    libshell as a dynamic library; that should be good enough. And that
    never involved disabling either of these macros.

commit 66039a7e9e98716b79089da46acc663479561687
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 7 22:56:52 2021 -0800

    Fix handling of files without newlines in the `head` and `tail` builtins (#365)
    
    The head and tail builtins don't correctly handle files that lack
    newlines[*]:
        $ print -n foo > /tmp/bar
        $ /opt/ast/bin/head -1 /tmp/bar  # No output
        $ print -n 'foo\nbar' > /tmp/bar
        $ /opt/ast/bin/tail -1 /tmp/bar
        foo
        bar$
    This commit backports the required changes from ksh93v- to handle files
    without a newline in the head and tail builtins. (Also note that the
    required fix to sfmove was already backported in commit 1bd06207.)
    
    src/lib/libcmd/{head,tail}.c:
    - Backport the relevant ksh93v- code for handling files
      without newlines.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a few regression tests for using 'head -1' and 'tail -1' on a file
      missing and ending newline.
    
    [*]: https://www.illumos.org/issues/4149

commit e298267fecdbf951aa8b0dbe92008849cc14f796
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Dec 7 22:51:38 2021 -0800

    Fix various compiler warnings and minor issues (#362)
    
    List of changes:
    - Fixed some -Wuninitialized warnings and removed some unused variables.
    
    - Removed the unused extern for B_login (re: d8eba9d1).
    
    - The libcmd builtins and the vmalloc memfatal function now handle
      memory errors with 'ERROR_SYSTEM|ERROR_PANIC' for consistency with how
      ksh itself handles out of memory errors.
    
    - Added usage of UNREACHABLE() where it was missing from error handling.
    
    - Extend many variables from short to int to prevent overflows (most
      variables involve file descriptors).
    
    - Backported a ksh2020 patch to fix unused value Coverity issues
      (https://github.com/att/ast/pull/740).
    
    - Note in src/cmd/ksh93/README that ksh compiles with Cygwin on
      Windows 10 and Windows 11, albeit with many test failures.
    
    - Add comments to detail some sections of code. Extensive list of
      commits related to this change:
      ca2443b5, 7e7f1372, 2db9953a, 7003aba4, 6f50ff64, b1a41311,
      222515bf, a0dcdeea, 0aa9e03f, 61437b27, 352e68da, 88e8fa67,
      bc8b36fa, 6e515f1d, 017d088c, 035a4cb3, 588a1ff7, 6d63b57d,
      a2f13c19, 794d1c86, ab98ec65, 1026006d
    
    - Removed a lot of dead ifdef code.
    
    - edit/emacs.c: Hide an assignment to avoid a -Wunused warning. (See
      also https://github.com/att/ast/pull/753, which removed the assignment
      because ksh2020 removed the !SHOPT_MULTIBYTE code.)
    
    - sh/nvdisc.c: The sh_newof macro cannot return a null pointer because
      it will instead cause the shell to exit if memory cannot be allocated.
      That makes the if statement here a no-op, so remove it.
    
    - sh/xec.c: Fixed one unused variable warning in sh_funscope().
    
    - sh/xec.c: Remove a fallthrough comment added in commit ed478ab7
      because the TFORK code doesn't fall through (GCC also produces no
      -Wimplicit-fallthrough warning here).
    
    - data/builtins.c: The cd and pwd man pages state that these builtins
      default to -P if PATH_RESOLVE is 'physical', which isn't accurate:
         $ /opt/ast/bin/getconf PATH_RESOLVE
         physical
         $ mkdir /tmp/dir; ln -s /tmp/dir /tmp/sym
         $ cd /tmp/sym
         $ pwd
         /tmp/sym
         $ cd -P /tmp/sym
         $ pwd
         /tmp/dir
      The behavior described by these man pages isn't specified in the ksh
      man page or by POSIX, so to avoid changing these builtin's behavior
      the inaccurate PATH_RESOLVE information has been removed.
    
    - Mamfiles: Preserve multi-line errors by quoting the $x variable.
      This fix was backported from 93v-.
      (See also <https://github.com/lkujaw/ast/commit/a7e9cc82>.)
    
    - sh/subshell.c: Remove set but not used sp->errcontext variable.

commit b90b8cd59fe051177bb6e835d194ca7fa5d5aca7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Dec 8 04:14:15 2021 +0100

    Fix 'return' emitting signals; allow arbitrary return values
    
    When a global EXIT trap is set, and a ksh-style function exits with
    a status > 256 that could have been the result of a signal, then
    the shell incorrectly issues that signal to itself. Depending on
    the signal, this causes ksh to terminate itself ungracefully:
    
        $ cat /tmp/exit267
        trap 'echo OK' EXIT  # This trap triggers the crash
        function foo { return 267; }
        foo
        $ bash /tmp/exit267
        OK
        $ ksh-3aee10d7 /tmp/exit267
        OK
        $ ksh /tmp/exit267
        Memory fault(coredump)
    
    On most systems, status 267 corresponds to SIGSEGV. The reported
    memory fault is not real; it results from ksh incorrectly killing
    itself with that signal.
    
    The problem is caused by two factors:
    
    1. As of 93u+ 2012-08-01, ksh explicitly allows 'return' to use an
       exit status corresponding to a signal (from 257 to end of signal
       range). The rest of the integer range is trunctated to 8 bits.
       This is contrary to both 'man ksh' and 'return --man' which both
       say it's always truncated to 8 bits. Plus, combined with point 2
       below, this new behaviour is nonsensical, as 'return' has no
       business actually generating signals. However, a couple of
       regression tests now depend on this, as may some scripts.
    
    2. When a ksh-style function does not handle a signal, the signal
       is passed down to the parent environment and ksh does this by
       reissuing the signal to its own process after leaving the
       function scope. However, it does this by checking the exit
       status, which is very bad practice as there is no guarantee
       that an exit status corresponding to a signal was in fact
       produced by a signal, particularly after they changed the
       behaviour of 'return' per 1 above.
    
    This commit fixes both issues. It also takes a proper decision on
    allowable 'return' exit status arguments. Since 93u+ was released
    nearly a decade ago and some scripts may now rely on being able to
    pass certain exit statuses out of the 8-bit range, we should not
    disallow this now. But neither should we be half-hearted in
    allowing only some arbitrary selection of 9-bit statuses; 'return'
    values categorically should have nothing to do with signals, so
    this is no basis for limiting them. We're now allowing the full
    unsigned integer range, which is usually 32 bits. This is like zsh,
    and may create some interesting possibilities for scripts.
    Just don't forget that $? will still lose all but its 8 least
    significant bits when leaving the current (sub)shell environment.
    
    src/cmd/ksh93/sh/xec.c: sh_funscope():
    - Fix passing down unhandled signals from interrupted ksh functions
      (jumpval==SH_JMPFUN) to the parent environment. Do not pay any
      attention to the exit status. Instead, use sh.lastsig (a.k.a.
      shp->lastsig). It is set by sh_fault() in fault.c for just this
      purpose and contains the last signal handled for the current
      command. It is reset in sh_exec() before running any new command.
      So if it contains a signal, that is the one that interrupted the
      ksh function, so it's the correct one to pass down. (Further
      evidence: sh_subshell() was already using this in the same way.)
    
    src/cmd/ksh93/bltins/cflow.c: b_return():
    - Allow any signed int return value when invoked as and behaving
      like 'return'.
    - Add warning if a passed value is out of int range. Set the exit
      status to 128 in that case; int overflow is undefined behaviour
      in C and we want consistent behaviour across platforms. It should
      be safe enough to check if the long and int values are equal.
    - Refactor for clarity.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - If a function returns with a status out of the 8 bit range in a
      virtual subshell, this status could be passed down to the parent
      shell in full. However, if the subshell forks, then the kernel
      will enforce an 8-bit exit status. That is inconsistent. Scripts
      should not be able to tell the difference between forked and
      non-forked subshells, so artificially enforce that limit here.
    
    Other changed files:
    - Documentation updates and copy-edits.
    - Update an AT&T functions.sh regress test to allow arbitrary
      integer return values for functions.
    - Add regression tests based in part on @JohnoKing's reproducers.
    - Rework some vaguely related regression tests to fail gracefully.
    
    Thanks to Johnothan King for the report and the testing.
    
    Fixes: https://github.com/ksh93/ksh/issues/364

commit a874f8c16989079143ceeae52c2ba6ffde1ce3f8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Dec 7 03:42:53 2021 +0100

    iffe: include OS standards macros in iffe tests by default
    
    In iffe tests, some C functions are found in system libraries, but
    then are not declared by the system headers on some systems because
    the expected standards macros aren't defined, causing the system
    headers to hide the function declarations. This may cause warnings
    about invalid implicit function declarations in some tests (which
    only show up if you export IFFEFLAGS=-d1), but may also cause false
    negative test results. The iffe tests should be given the same
    environment that their test results are going to be used in.
    
    libast's first-run and most central feature test, 'standards',
    figures out what standards macros need to be used on the current
    system to get the system headers to declare the expected
    functionality. All code that links to libast depends on the header
    generated by this feature test. So iffe should use this result for
    the tests as well, as soon as it's available (which is early in
    libast's compilation cycle).
    
    Concrete example: on Cygwin, in src/cmd/builtin/features/pty, the
    'lib ptsname' test detects ptsname(3) in the system library, but
    the output{...}end block that uses the _lib_ptsname feature test
    result throws an 'implicit function definition' warning because
    Cygwin's stdlib.h does not define this function without the
    appropriate standards macros being defined first.
    
    src/cmd/INIT/iffe.sh:
    - If ${INSTALLROOT}/src/lib/libast/FEATURE/standards is available,
      incorporate it directly into iffe's own block of compiler
      massaging macros. Do not use #include as the necessary -I flags
      are not added for every test.
    - Centrally define the iffe version once, not twice.
    - Update and tweak getopts self-documentation (iffe --man).
    - While we're here, add macOS/Darwin's DYLD_LIBRARY_PATH to the
      supported dynamic library search variables. On macOS, this is
      normally disabled by System Integrity Protection, plus this
      distribution uses static libraries at build time, so this is for
      completeness' sake and not much else. This was ported from
      @lkujaw's fork: https://github.com/lkujaw/ast/commit/48ff05442994
      (thanks to @JohnoKing for pointing it out).
    
    src/lib/libast/features/standards:
    - Add a comment. This is to update the file's timestamp, ensuring
      that everything will be recompiled after this commit.

commit f22f623a0f0f56749d4ea40b80ad5e74f163a920
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 6 11:24:26 2021 +0100

    tests/leaks.sh: increase tolerances again
    
    Another day, another attempt to quash regress test fails caused by
    implausibly small memory "leaks".
    
    Apparently, on later macOS versions, 'ps' got more unreliable, so
    increase tolerance from 8 to 12 bytes. Maximum reported leaks.sh
    failure was 188 KiB after 16384 iterations (11 bytes/iteration).
    
    And on some Linux versions, /proc sometimes acts weird. The
    following is apparently consistent on Arch Linux:
            shcomp-leaks.ksh[177]: memory leak with read -C when using
            <<< (leaked approx 65536 bytes after 4096 iterations)
    ...which is 16 bytes per iteration, still not large enough to make
    a real leak plausible.
    
    Resolves: https://github.com/ksh93/ksh/issues/363

commit d431900fbd0071735ad082c0292795925dc8e2f4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 6 08:35:29 2021 +0100

    Build & getconf fixes for macOS (and UnixWare)
    
    src/lib/libast/features/standards:
    - Add heuristic (u_long availability) for systems that hide rather
      than reveal functionality in the presence of _POSIX_SOURCE, etc.
    - Define _DARWIN_C_SOURCE, like _GNU_SOURCE, to enable the full
      range of definitions on macOS systems.
    - Due to the above, remove MACH (macOS)-specific hack.
    - These changes ported from https://github.com/att/ast/pull/1492 -
      thanks to Lev Kujawski (@lkujaw). His PR indicates that this
      fixes the standards macros on UnixWare, too. Therefore, no longer
      exclude UnixWare from standards macros (re: ff70c27f).
    
    src/lib/libast/comp/conf.sh:
    - Promote the 'op' member in Conf_t (struct Conf_s) from short to
      int. This allows some Darwin/macOS values, now exposed, to fit
      that would otherwise be truncated, namely:
      _CS_DARWIN_USER_CACHE_DIR               65538
      _CS_DARWIN_USER_DIR                     65536
      _CS_DARWIN_USER_TEMP_DIR                65537
      Thus, the following AST getconf values are now correct on macOS:
      $ /opt/ast/bin/getconf | grep ^DARWIN
      DARWIN_USER_CACHE_DIR=/var/folders/nx/(REDACTED)/C/
      DARWIN_USER_DIR=/var/folders/nx/(REDACTED)/0/
      DARWIN_USER_TEMP_DIR=/var/folders/nx/(REDACTED)/T/
    
    src/lib/libast/features/tty:
    - Include <sys/ioctl.h> if available. This silences a compiler
      warning in src/lib/libast/misc/procopen.c about an invalid
      implicit declaration of ioctl(2).

commit e18cf649d73d6a44760661c8d066e6e9b3b6bb9c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Dec 6 06:56:05 2021 +0100

    Documentation tweaks (re: abf87cb7)
    
    The information about an out of memory error does not apply
    to the version of the PR that was eventually committed since
    it does not use getcwd() which might cause such an error.
    See https://github.com/ksh93/ksh/pull/358#issuecomment-986294934

commit abf87cb768257eff2691fd6f70c2afee7d474144
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 5 21:48:32 2021 -0800

    Add the '-e' flag to the 'cd' builtin (#358)
    
    This change adds the -e flag to the cd builtin, as specified in
    <https://www.austingroupbugs.net/view.php?id=253>. The -e flag is
    used to verify if the the current working directory after 'cd -P'
    successfully changes the directory, and returns with exit status 1
    if the cwd couldn't be determined. Additionally, it causes all
    other errors to return with exit status >1 (i.e., status 2 unless
    ENOMEM occurs) if -e and -P are both active.
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - Add -e option to the cd builtin command. It verifies $PWD by
      using test_inode() to execute the equivalent of [[ . -ef $PWD ]].
    - The check for restricted mode has been moved after optget to
      allow 'cd -eP' to return with exit status 2 when in restricted
      mode. To avoid changing the previous behavior of cd when -e isn't
      passed, extra checks have been added to prevent cd from printing
      usage information in restricted mode.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for the exit status when using the cd -P
      flag with and without -e.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Document the addition of -e to the cd builtin.

commit f919df6192805681ff5d23dbfe54a2d118109cb2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Dec 5 22:00:08 2021 +0100

    out of memory checks: add missing sh_getcwd() wrapper (re: 7ad274f8)
    
    getcwd() with 0/NULL arguments also mallocs, so needs a check.

commit 850485d5415c65e13b689b2283168d0328e55e7a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Dec 5 10:55:15 2021 -0800

    Port over illumos fixes for conf.sh (#361)
    
    This commit ports over two of Andy Fiddaman's bugfixes to conf.sh
    on illumos:
    
    - The compiler isn't passed on to an invocation of iffe. The bugfix is
      from this commit: <https://github.com/citrus-it/ast/commit/63563232>
    - The getconf builtin is missing several parameters on illumos.
      Reproducer:
         $ /opt/ast/bin/getconf ADDRESS_WIDTH
         getconf: Invalid argument (ADDRESS_WIDTH)  # Should output '64'
      This bug occurs because conf.sh expects GNU sed and fails to work
      properly with other sed implementations. The bugfix and original bug
      report can be found here:
      https://www.illumos.org/issues/14044
      https://github.com/citrus-it/ast/commit/ba443cfd

commit f9364b17098ca05dc6ab886d8906ee55bfb2126c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Dec 5 19:00:11 2021 +0100

    Disable vmalloc by default; fix build on Cygwin
    
    Vmalloc is incompatible with Cygwin, but the code to disable it on
    Cygwin did not work properly, somehow causing the build to freeze
    at a seemingly unrelated point (i.e., when iffe feature tests
    attempt to write to sfstdout).
    
    Vmalloc has wasted my time for the last time, so now it's getting
    disabled by default even on development builds and you'll have to
    pass -D_AST_vmalloc in CCFLAGS to enable it for testing purposes.
    
    This commit has a few other build tweaks as well.
    
    src/lib/libast/features/vmalloc:
    - tst map_malloc: Remove no-op #if __CYGWIN__ block which was in
      the #else clause of another #if __CYGWIN__ block.
    - Output block ('cat{'):
      - Instead of disabling vmalloc for certain systems, disable it
        unless _AST_vmalloc is defined.
      - To disable it, set _AST_std_malloc as well as _std_malloc, just
        to be sure.
    
    src/lib/libast/vmalloc/malloc.c:
    - Remove ineffective Cygwin special-casing.
    
    src/lib/libcmd/vmstate.c:
    - This is only useful for vmalloc, so do not pointlessly compile it
      if vmalloc is disabled.
    
    src/lib/libast/man/vmalloc.3:
    - Add deprecation notice.
    
    Resolves: https://github.com/ksh93/ksh/issues/360

commit e44436276318230e7fcc5305c7182dd51b0b23ab
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 3 00:41:51 2021 +0100

    sh.1: correct doc on format used by ${.sh.command} (re: a959a352)
    
    It actually uses the same format as xtrace, which is *not* always
    shellquoted and eval-safe.

commit 430e47813cacf7366ea4ce03d170b254447c331c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Dec 1 20:43:41 2021 -0800

    nvdisc.c: Fix crash after an error or signal in discipline function (#356)
    
    This patch fixes the crashes experienced when a discipline function
    exited because of a signal or an error from a special builtin. The
    crashes were caused by ksh entering an inconsistent state after
    performing a longjmp away from the assign() and lookup() functions in
    nvdisc.c. Fixing the crash requires entering a new context, then setting
    a nonlocal goto with sigsetjmp(3). Any longjmps that happen while
    running the discipline function will go back to assign/lookup, allowing
    ksh to do a proper cleanup afterwards.
    
    Resolves: https://github.com/ksh93/ksh/issues/346

commit 42da7ca4a587483ed1aaf18e253731d62a82d887
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 30 21:43:50 2021 +0100

    lex.c: add default, though it should never happen (re: b0282f26)
    
    If a bug is ever introduced that causes a [[ ... ]] operator to be
    unhandled by the linter, we should at least avoid writing random
    memory contents to standard error. In non-release builds, let's
    abort() so the problem can be more easily backtraced.

commit b0282f26c5a048508e7257a9ec9c33399d8429ba
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Nov 30 12:26:17 2021 -0800

    Port illumos' shell linter improvements (#353)
    
    This commit ports over two improvements to the shell linter from
    illumos (original patch written by Andy Fiddaman). Links to the
    relevant bug reports and the original patch:
    https://www.illumos.org/issues/13601
    https://www.illumos.org/issues/13631
    https://github.com/illumos/illumos-gate/commit/c7b656fc7125adc5888ce934f1a3433da4b1bbc5
    
    The first improvement is to the lint warning for arithmetic
    operators in [[ ... ]]. The ksh linter now suggests the correct
    equivalent operator to use in ((...)). Example:
      $ ksh -nc '[[ 30 -gt 25 ]]'
      # Original warning
      warning: line 1: -gt within [[ ... ]] obsolete, use ((...))
      # New warning
      warning: line 1: [[ ... -gt ... ]] obsolete, use ((... > ...))
    
    The second improvement pertains to variable expansion in arithmetic
    expressions. The ksh linter now suggests referencing variable names
    directly:
      $ ksh -nc 'integer foo=40; (($foo < 50 ))'
      # Old warning
      warning: line 1: variable expansion makes arithmetic evaluation less efficient
      # New warning
      warning: line 1: in '(($foo < 50))', using '$' is slower and can introduce rounding errors
    
    src/cmd/ksh93/{data/lexstates,sh/lex,sh/parse}.c:
    - Port the improved shell lint warnings from illumos to ksh93u+m.
    - The original checks for arithmetic operators involved a bunch of
      if statements with inefficient calls to strcmp(3). These were
      replaced with a more efficient switch statement that avoids
      strcmp.

commit f99ce517c536b6e62f64f24d614fd0f4d3aa21c9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Nov 29 19:26:53 2021 -0800

    Fix `KEYBD` trap crash when inputting a command substitution (#355)
    
    This change fixes a crash that can occur after setting a KEYBD trap
    then inputting a multi-line command substitution. The crash is
    similar to issue #347, but it's easier to reproduce since it
    doesn't require you to setup a kshrc file. Reproducer for the
    crash:
    
      $ ENV=/./dev/null ksh
      $ trap : KEYBD
      $ : $(
      > true)
      Memory fault(coredump)
    
    The bugfix was backported (with considerable changes) from ksh93v-
    2013-10-08. The crash was first reported on the old mailing list:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg00313.html
    
    src/cmd/ksh93/{include/shlex.h,sh/lex.c}:
    - To fix this properly, we need sizeof(Lex_t) to work as expected
      in edit.c, but that is thwarted by the _SHLEX_PRIVATE macro in
      lex.c which shlex.h uses to add private structs to the Lex_t type
      in lex.c only. So get rid of that _SHLEX_PRIVATE macro and make
      those members part of the centrally defined struct, renaming them
      to make it clear they're considered private to lex.c.
    
    src/cmd/ksh93/edit/edit.c:
    - Now that we can get its size, save and restore the shell lexing
      context when a KEYBD trap is present.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for the KEYBD trap crash.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 5cc9fcc190154ed694ac4287f0959a757978d012
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 29 20:38:48 2021 +0100

    Revert "Fix defining types conditionally and/or in subshells (re: 1dc18346)"
    
    This reverts commit 5d3532100679911fa980bf8909a3539e8a826945.
    
    This is not ready for the main development branch as it's still
    broken, distracting from other issues that also need fixing.
    
    It crashses when running a $PS2 discipline function as the
    recursion tracking gets messed up. It is another context where
    arbitrary code is executed at parse time!
    
    I'm putting this one on the back burner. So that terrible problem
    with types is back, sorry about that.

commit e7b19eacb369357a9360445c1bb354f75b73f60d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Nov 29 04:38:17 2021 -0800

    Fix memory fault on ARM-based Macs (#354)
    
    Ksh segfaults on M1 Macs, apparently because Apple's compiler
    optimizer can't cope with overriding bzero(3) with libast's
    implementation (though it's nothing more than "memset(b, 0, n);").
    
    Apple has disabled libast's bzero function since 2018-12-04:
    https://opensource.apple.com/source/ksh/ksh-27/patches/src__lib__libast__comp__omitted.c.diff.auto.html
    
    src/lib/libast/comp/omitted.c:
    - Only fall back to the libast bzero function if the OS lacks an
      implementation of bzero.
    - Remove the bzero undef since this fallback is only reached if the
      OS doesn't have bzero.
    
    NEWS:
    - Add compat info for macOS on ARM64. This notes that macOS
      Monterey can now compile and run ksh, although there is one
      regression test failure:
            builtins.sh[345]: printf %H: invalid UTF-8 characters
            (expected %3F%C2%86%3F%3F%3F; got %3F%C2%86%3F%3Fv%3F%3F)
    
    Thanks to @DesantBucie for the report and the testing.
    
    Resolves: https://github.com/ksh93/ksh/issues/329

commit fcf9ff9919efe21a9aa211532eb5118e6b3ebddc
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Nov 29 00:16:23 2021 -0800

    Stop the time keyword overriding errexit (#351)
    
    This bug was first reported in <https://www.illumos.org/issues/7694>.
    The time keyword currently overrides the errexit shell option,
    allowing failing scripts to continue after an error:
    
      $ cat 1.sh
      #!/bin/sh
      time false   # This should cause the script to exit
      echo FAILURE
      true
      $ ksh -o errexit 1.sh
    
      real    0m0.00s
      user    0m0.00s
      sys     0m0.00s
      FAILURE
    
    src/cmd/ksh93/sh/xec.c:
    - When the time keyword runs a command, pass the errexit state flag
      to the sh_exec call. This state flag is required for ksh to exit
      when a command fails while the errexit option is on.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add a regression test based on the reproducer.

commit 5d3532100679911fa980bf8909a3539e8a826945
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 29 08:06:17 2021 +0100

    Fix defining types conditionally and/or in subshells (re: 1dc18346)
    
    This commit mitigates the effects of the hack explained in the
    referenced commit so that dummy built-in command nodes added by the
    parser for declaration/assignment purposes do not leak out into the
    execution level, except in a relatively harmless corner case.
    
    Something like
    
            if false; then
                    typeset -T Foo_t=(integer -i bar)
            fi
    
    will no longer leave a broken dummy Foo_t declaration command. The
    same applies to declaration commands created with enum.
    
    The corner case remaining is:
    
    $ ksh -c 'false && enum E_t=(a b c); E_t -a x=(b b a c)'
    ksh: E_t: not found
    
    Since the 'enum' command is not executed, this should have thrown
    a syntax error on the 'E_t -a' declaration:
    ksh: syntax error at line 1: `(' unexpected
    
    This is because the -c script is parsed entirely before being
    executed, so E_t is recognised as a declaration built-in at parse
    time. However, the 'not found' error shows that it was successfully
    eliminated at execution time, so the inconsistent state will no
    longer persist.
    
    This fix now allows another fix to be effective as well: since
    built-ins do not know about virtual subshells, fork a virtual
    subshell into a real subshell before adding any built-ins.
    
    src/cmd/ksh93/sh/parse.c:
    
    - Add a pair of functions, dcl_hactivate() and dcl_dehacktivate(),
      that (de)activate an internal declaration built-ins tree into
      which check_typedef() can pre-add dummy type declaration command
      nodes. A viewpath from the main built-ins tree to this internal
      tree is added, unifying the two for search purposes and causing
      new nodes to be added to the internal tree. When parsing is done,
      we close that viewpath. This hides those pre-added nodes at
      execution time. Since the parser is sometimes called recursively
      (e.g. for command substitutions), keep track of this and only
      activate and deactivate at the first level.
    
    - We also need to catch errors. This is done by setting libast's
      error_info.exit variable to a dcl_exit() function that tidies up
      and then passes control to the original (usually sh_exit()).
    
    - sh_cmd(): This is the most central function in the parser. You'd
      think it was sh_parse(), but $(modern)-form command substitutions
      use sh_dolparen() instead. Both call sh_cmd(). So let's simply
      add a dcl_hacktivate() call at the beginning and a
      dcl_deactivate() call at the end.
    
    - assign(): This function calls path_search(), which among many
      other things executes an FATH search, which may execute arbitrary
      code at parse time (!!!). So, regardless of recursion level,
      forcibly dehacktivate() to avoid those ugly parser side effects
      returning in that context.
    
    src/cmd/ksh93/bltins/enum.c: b_enum():
    
    - Fork a virtual subshell before adding a built-in.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    
    - Fork a virtual subshell when detecting typeset's -T option.
    
    Improves fix to https://github.com/ksh93/ksh/issues/256

commit 0ee1560ed2c235e14f9c4e850321085e52218c0a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 28 00:31:46 2021 +0100

    Fix 'command' prefix in enum type def pre-parsing (re: 1dc18346)
    
    Symptom:
    
    $ ksh -c 'command enum -i P_t=(a b); P_t -A v=([f]=b); typeset -p v'
    ksh: syntax error at line 1: `(' unexpected
    
    Expected: no syntax error, and output of 'P_t -A v=([f]=b)'.
    
    src/cmd/ksh93/sh/parse.c: check_typedef():
    - For enum, skip over any possible 'command' prefixes before
      pre-parsing options with optget (or, technically, skip anything
      else that might come before 'enum', though I don't think anything
      else is possible).
    - The sh_addbuiltin() call at the end to pre-add the builtin
      obtained the node pointer to the built-in and the node flags from
      the parser tree. This did not work if a 'command' prefix was
      present. However, we don't actually need this. For parsing
      purposes, the BLT_DCL flag for a declaration built-in is
      sufficient; this is what gets the parser to accept
      assignment-arguments including parentheses. So just apply that.
      In addition, let's point it to an actual dummy built-in, 'true'
      (SYSTRUE), so that if a user does run something like 'if false;
      then enum Foo_t=(...); fi', the leaked Foo_t dummy at least won't
      do anything (not even crash).

commit 026f0cab95e9829138fc715b9c0af99cc7edab9b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 28 00:11:23 2021 +0100

    typeset equivalents: use 'typeset' in error messages (re: 1fbbeaa1)
    
    When giving an invalid or incompatible option to a typeset option
    equivalent command (former default alias) such as 'compound' or
    'integer', the resulting usage messages are incorrect. Example:
    
    $ ksh -c 'compound -T foo=(typeset -a bar[1]=23)'
    ksh: compound: -T cannot be used with other options
    Usage: compound [-bflmnprstuxACHS] [-a[[type]]] [-i[base]] [-E[n]]
                    [-F[n]] [-L[n]] [-M[mapping]] [-R[n]] [-X[n]]
                    [-h string] [-T[tname]] [-Z[n]] [name[=value]...]
       Or: compound -f [name...]
       Or: compound -m [name=name...]
       Or: compound -n [name=name...]
       Or: compound -T [tname[=(type definition)]...]
     Help: compound [ --help | --man ] 2>&1
    
    The error message is wrong (there were no other options) and some
    of the listed usages are invalid, like 'compound -f'.
    
    Typeset option equivalent commands should just use 'typeset' in all
    their error messages to avoid confusion. This is done by setting
    error_info.id to the name of the typeset builtin.

commit 6d3796c0bcc6d073bb1c84981d6166cf3b6d5c53
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 25 18:34:36 2021 +0100

    jobs.c: refactor SIGHUP handling; document bug fixed (re: 62cf88d0)
    
    There is quite a bit of no-op code in the job_hup() function due
    to conditions that always test false. This commit removes that code
    and clarifies the rest, making the purpose of this function clear.
    
    job_hup() (before 62cf88d0: job_terminate()) is called via
    job_walk() by sh_done() in fault.c to issue SIGHUP, the "hang up"
    signal, to every background job's process group when the current
    session is ungracefully disconnected. (One way to trigger such a
    disconnection is to forcibly terminate a ssh session by typing '~.'
    on a new prompt.)
    
    The bug that Solaris patch 260-22964338 fixed is that ksh then
    killed all non-disowned jobs' process groups without considering
    that ksh still remembers a job even when all its processes are
    finished (have the P_DONE flag). In that condition, the process
    group ID may well be reused by another process by now, so it is
    dangerous to killpg() it; we risk killing unrelated processes!
    
    This is *not* a hypothetical problem; the Solaris patch exists
    because this happened to a Solaris customer. However, the bug
    exists on all operating systems. It's rarely triggered but serious,
    and it's more likely to occur on heavy workloads that re-use
    process/group IDs a lot. And it's on every currently released
    non-Solaris version of ksh93. Eesh.
    
    src/cmd/ksh93/sh/jobs.c:
    src/cmd/ksh93/include/jobs.h:
    - Remove job_terminate() which was unused as of 62cf88d0.
      It could have been fixed instead of replaced. Oh well.
    - Refactor job_hup():
      - Remove code that will never be executed because, at
        those points, it is known that pw->p_pgrp != 0.
      - Simplify the loop that checks that there is at least
        one non-P_DONE process so it doesn't need a flag.
    
    For documentation purposes, below is a reproducer for the bug
    before the Solaris patch. It is rather involved.
    
    1. Compile the C program below (cpid).
    2. In one terminal, 'ssh localhost'.
    3. Within the ssh session:
       - 'exec -a-ksh /path/to/buggy/ksh' to get a ksh login shell.
       - 'sleep 1 &' and let it finish. Note down the reported PID.
         That is the one we will reuse. Let's say 26650.
    4. In another terminal, run: ./cpid 26650 (the PID from the
       previous step). Now wait until it says "PID 26650 is ready"; it
       has now succeeded at re-using that PID, and will just sit there.
       This process will never voluntarily terminate. If we have the
       bug, the termination of this process will be the symptom.
    5. In the first terminal, forcibly terminate the ssh session by
       typing, on a new prompt: ~. (tilde, dot). This triggers the
       buggy routine to issue SIGHUP to all of ksh's background jobs.
    6. In the second terminal, the bug is reproduced if cpid has been
       terminated, reporting 'waitpid return 26650, status 0x0001', so
       ksh just killed this process that it had nothing to do with.
       (Note that status 0x0001 refers to being killed by signal 1
       which is SIGHUP.)
    
    cpid.c follows (written by George Lijo, tweaked by me):
    
     #include <stdio.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <signal.h>
     #include <sys/wait.h>
    
     int main(int argc, char *argv[])
     {
            pid_t   pid, rpid, opid;
            int     i, status, npid;
            if (argc != 2)
            {
                    fprintf(stderr, "Usage: cpid <PID to re-use>\n");
                    exit(1);
            }
            rpid = atoi(argv[1]);
            opid = getpid();
            for (;;)
            {
                    if ((pid = fork()) == 0)
                    {
                            setpgrp();
                            pause();
                            _exit(0);
                    }
                    if (pid == rpid)
                            break;
                    kill(pid, SIGKILL);
                    waitpid(pid, NULL, 0);
                    if (opid < rpid && pid > rpid)
                            printf("Cannot create PID %d\n", rpid);
                    opid = pid;
            }
            printf("PID %d is ready\n", pid);
            i = waitpid(pid, &status, 0);
            printf("waitpid return %d, status 0x%4.4x\n", i, status);
            return status;
     }

commit c9d7310500a187075f281aaccbf662b82f8ba34e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 25 10:13:06 2021 +0100

    Reset sh.arithrecursion in sh_exit() instead (re: d50d3d7c)
    
    Since the arithmetic recursion level only becomes incorrect when
    an error interrupts the arithmetic subsystem, and all such error
    messages call sh_exit(), it should be good enough to reset it
    there, so we don't need to do that for nearly every sh_exec() run.

commit 802e8db75206d79ce82a376a9edd6274a556cb23
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 25 04:10:51 2021 +0100

    Fix parentheses in sh_{push,pop}context macros
    
    The lack of parentheses around the shp parameter expansion made
    it impossible to pass something like &sh as the first parameter.

commit 91de8c225bc7154ff36ac7edd9a438be7a57f700
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Nov 24 18:45:21 2021 -0800

    Backport the ksh93v- rm builtin to fix 'rm -d' (#348)
    
    The -d flag implemented in the rm builtin is completely broken. No
    matter what you do it refuses to remove directories, even if -r is
    also passed. Reproducer:
    
      $ mkdir /tmp/empty
      $ PATH=/opt/ast/bin rm -d /tmp/empty
      rm: /tmp/empty: directory
      $ PATH=/opt/ast/bin rm -dr /tmp/empty
      rm: /tmp/empty: directory not removed [Is a directory]
    
    Additionally, the description of 'rm -d' in the man page contradicts
    how it's specified in <https://www.austingroupbugs.net/view.php?id=802>.
    
    The ksh93v- rm builtin fixed nearly all of these issues, so I've
    backported it to 93u+m and applied one additional fix for 'rm -rd'.
    
    src/lib/libcmd/rm.c:
    - Backported the fixes from the ksh93v- rm builtin's -d flag when
      used on empty directories.
    - Backported the man page update for rm(1) from ksh93v-.
    - The ksh93v- rm builtin had one additional bug that caused the -r
      option to fail when combined with -d. This was fixed by
      overriding -d if -r is also passed.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for the rm builtin's -d option.

commit 868ba8b2280f2ecbae08b792cde63671a4c5f324
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 25 03:02:34 2021 +0100

    arith.c: scope(): de-obfuscate some code
    
    This function adds the NV_ADD flag to its 'flags' variable for
    nv_serach() calls subject to some checks. However, every call that
    uses that variable explicitly turns off the NV_ADD bit again.
    
    A search in the ast-open-history repo reveals that this check
    briefly made a difference between versions 2010-06-25 and
    2010-08-11, but it's been a complete no-op ever since.
    
    src/cmd/ksh93/sh/arith.c: scope():
    - Remove no-op code.
    - Resolve the constant expressions involving the 'flags' variable,
      get rid of the variable, and just indicate the flag bitmasks
      directly in the nv_search() calls.
    - Detangle and split up the excessively long 'if' construct.
    
    No change in behaviour.
    
    Previously noticed by Kurtis Rader for ksh2020:
    https://github.com/att/ast/commit/d5ce3b05

commit ef00712f1f5319e77c5a76a5de2e7a2560689f2d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 24 09:10:25 2021 +0100

    '.': disable ksh function lookup in POSIX mode
    
    POSIXly, '.' loads only files, not functions.
    
    This only applies to '.', not 'source' (which is not in POSIX).
    
    src/cmd/ksh93/bltins/misc.c: b_source():
    - For ksh function lookup, add an additional check that we're not
      in POSIX mode and running the '.' (SYSDOT) builtin.

commit 8306785cad5dc81921299e1a55feb3b7d55e62e0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 24 01:11:55 2021 +0100

    nv_associative(): finally use proper check for enum (re: b98e32fc)
    
    As of the previous commit, I finally know how to properly check for
    a variable of a type created by 'enum'. We need to check for both
    the NV_UINT16 attribute and the ENUM_disc discipline.
    
    Also:
    - regression test tweaks
    - add missing tests for previous commit (f600a5ea)

commit f600a5ead1e649e7f3c5a1e7183a7ce4591eaefb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 23 21:35:30 2021 +0100

    arith: implement range checking for enum types
    
    Within arithmetic expressions, enumeration values of variables of a
    type created with the 'enum' command translate to index numbers
    from 0 to the number of elements minus 1. However, there was no
    range checking on this in the arithmetic subsystem, allowing the
    assignment of out-of-range values that did not correspond to any
    enumeration value.
    
    Variables of an enum type are internally unsigned short integers
    (NV_UINT16), like those created with 'integer -su', except with an
    additional discipline function (ENUM_disc).
    
    src/cmd/ksh93/bltins/enum.c,
    src/cmd/ksh93/include/builtins.h:
    - To implement range checking, the arithmetic system needs access
      to the 'nelem' (number of elements) member of 'struct Enum'. This
      is only defined locally in enum.c. We could move that to name.h
      so arith.c can access it, but enum.c has code that supports
      compiling as standalone. So, instead, define a quick extern
      function, b_enum_elem(), that does the necessary type conversion
      and returns a type's number of elements.
    - Add --man documentation for the arithmetic subsystem behaviour
      for enum types. Tell the enuminfo() function, which dynamically
      inserts values into the documentation, how to process new \f tags
      'lastv' (the last-defined value) and 'lastn' (the number of the
      last element).
    
    src/cmd/ksh93/sh/arith.c: arith():
    - For NV_UINT16 variables with an ENUM_disc discipline, check the
      range using b_enum_elem() and error out if necessary.
    
    Resolves: https://github.com/ksh93/ksh/issues/335

commit 311256b07ef40b4c527ccda02396df8cbeec2be6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Nov 22 16:15:24 2021 -0800

    Add support for 'stty size' to the libcmd 'stty' builtin (#342)
    
    This commit adds support for 'stty size' to the stty builtin, as
    defined in <https://austingroupbugs.net/view.php?id=1053>. The size
    mode is used to display the terminal's number of rows and columns.
    Note that stty isn't included in the default list of builtin
    commands; testing this addition requires adding CMDLIST(stty) to
    the table of builtins in src/cmd/ksh93/data/builtins.c.
    
    src/lib/libcmd/stty.c:
    - Add support for the size mode to the stty builtin. This mode is
      only used to display the terminal's number of rows and columns,
      so error out if any arguments are given that attempt to set the
      terminal size.

commit d8bc7062a415644c72b7f84477dab117dd383b97
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 22 16:54:51 2021 +0100

    shtests: unignore SIGCONT
    
    For some reason, Void Linux (with musl libc) sets SIGCONT to
    ignored on the Linux console, causing the 'sleep -s' test in
    builtins.sh to fail spuriously as it relies on SIGCONT to work.
    
    src/cmd/ksh93/tests/shtests:
    - Reset SIGCONT using the unadvertised 'trap + SIGCONT' feature.
    
    Resolves: https://github.com/ksh93/ksh/issues/301

commit a804fca0d17d5a3e7558e5fbfee70bd0ca7fa33e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 22 06:13:25 2021 +0100

    test/[: Improve error status > 1 (re: 7003aba4, cd2cf236, 9aa88cd1)
    
    As I got to know the code better, it now seems painfully obvious
    that getting test/[ to issue an exit status >= 2 on error only
    requires a simple check in sh_exit() in fault.c, which is called
    whenever the shell issues an error message.

commit 1dc183461a76fe585e8e230731bebf7b03af9376
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 21 07:12:27 2021 +0100

    Fix enum type definition pre-parsing for shcomp and dot/source
    
    Parser limitations prevent shcomp or source from handling enum
    types correctly:
    
        $ cat /tmp/colors.sh
        enum Color_t=(red green blue orange yellow)
        Color_t -A Colors=([foo]=red)
    
        $ shcomp /tmp/colors.sh > /dev/null
        /tmp/colors.sh: syntax error at line 2: `(' unexpected
        $ source /tmp/colors.sh
        /bin/ksh: source: syntax error: `(' unexpected
    
    Yet, for types created using 'typeset -T', this works. This is done
    via a check_typedef() function that preliminarily adds the special
    declaration builtin at parse time, with details to be filled in
    later at execution time.
    
    This hack will produce ugly undefined behaviour if the definition
    command creating that type built-in is then not actually run at
    execution time before the type built-in is accessed.
    
    But the hack is necessary because we're dealing with a fundamental
    design flaw in the ksh language. Dynamically addable built-ins that
    change the syntactic parsing of the shell language on the fly are
    an absurdity that violates the separation between parsing and
    execution, which muddies the waters and creates the need for some
    kind of ugly hack to keep things like shcomp more or less working.
    
    This commit extends that hack to support enum.
    
    src/cmd/ksh93/sh/parse.c:
    - check_typedef():
      - Add 'intypeset' parameter that should be set to 1 for typeset
        and friends, 2 for enum.
      - When processing enum arguments, use AST getopt(3) to skip over
        enum's options to find the name of the type to be defined.
        (getopt failed if we were running a -c script; deal with this
        by zeroing opt_info.index first.)
    - item(): Update check_typedef() call, passing lexp->intypeset.
    - simple(): Set lexp->intypeset to 2 when processing enum.
    
    The rest of the changes are all to support the above and should be
    fairly obvious, except:
    
    src/cmd/ksh93/bltins/enum.c:
    - enuminfo(): Return on null pointer, avoiding a crash upon
      executing 'Type_t --man' if Type_t has not been fully defined due
      to the definition being pre-added at parse time but not executed.
      It's all still wrong, but a crash is worse.
    
    Resolves: https://github.com/ksh93/ksh/issues/256

commit dd7dbb8e1562b46a301459ff54cad403110765f5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 21 01:13:43 2021 +0100

    builtins.h: rm broken check for removed SYSDECLARE (re: 921bbcae)

commit b98e32fc6120e47cb64af8780f78d67c5d7238b3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 20 05:57:07 2021 +0100

    nv_associative(): clarify value indicating enum (re: 6b9703ff)

commit ac23167d0ab3412e5fa15fac7cd91a0f05c9e775
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 20 04:53:09 2021 +0100

    shell.3: fix formatting for sh_{g,s}etscope

commit 0ec5b47a57a91f99df1a7f5cf78f965aba900239
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 20 03:03:00 2021 +0100

    tests/signal.sh: fix AT&T's err_exit bogosity (re: 712261c8)

commit 47c3ad5c3e0704ab603a25ff8676939fcbdff5a4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Nov 19 19:03:38 2021 +0100

    tests/leaks.sh: tweak Linux tolerance again (re: 31fe1c28)
    
    The referenced commit did not fix the symptoms on the 1.0 branch
    (no vmalloc) on the GitHub CI runners.
    
    The failures are intermittent and are not reproduced with vmalloc
    or on other operating systems.
    
    Though the failures occur on a different test each time, the total
    amount of "leaked" bytes is always 36864, e.g.:
    
        leaks.sh[388]: run command with preceding PATH assignment in
        main shell (leaked approx 36864 bytes after 4096 iterations)
    
    36864/4096 equals exactly 9. An odd number, literally and
    figuratively, but I suppose that's the tolerance Linux needs.
    
    src/cmd/ksh93/tests/leaks.sh
    - Increase tolerance of bytes per iteration from 8 to 9.

commit ec66c205868db47e3c88b92d7523946b6a235416
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Nov 20 00:41:49 2021 -0800

    `typeset -T` shouldn't list types created with `enum` (#340)
    
    Listing types with 'typeset -T' will list not only types created with
    typeset, but also types created with enum. However, the types created
    by enum are not displayed correctly in the resulting output:
    
    $ enum Foo_t=(foo bar)
    $ typeset -T
    typeset -T Foo_t
    typeset -T Foo_t=fo)
    
    The fix for this bug was backported from ksh93v- 2013-10-08.
    
    src/cmd/ksh93/sh/nvtype.c:
    - sh_outtype(): Skip over enums when listing types with 'typeset -T'.

commit 3e58851f4abd01706acec288ea310fe55b811e65
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Nov 18 23:17:25 2021 -0800

    Fix a few issues with $RANDOM seeding in subshells (#339)
    
    This commit fixes an issue I found in the subshell $RANDOM
    reseeding code.
    
    The main issue is a performance regression in the shbench fibonacci
    benchmark, introduced in commit af6a32d1. Performance dropped in
    this benchmark because $RANDOM is always reseeded and restored,
    even when it's never used in a subshell. Performance results from
    before and after this performance fix (results are on Linux with
    CC=gcc and CCFLAGS='-O2 -D_std_malloc'):
    
      $ ./shbench -b bench/fibonacci.ksh -l 100 ./ksh-0f06a2e ./ksh-af6a32d ./ksh-f31e368 ./ksh-randfix
    
      benchmarking ./ksh-0f06a2e, ./ksh-af6a32d, ./ksh-f31e368, ./ksh-randfix ...
      *** fibonacci.ksh ***
      # ./ksh-0f06a2e  # Recent version of ksh93u+m
      # ./ksh-af6a32d  # Commit that introduced the regression
      # ./ksh-f31e368  # Commit without the regression
      # ./ksh-randfix  # Ksh93u+m with this patch applied
    
      -------------------------------------------------------------------------------------------------
      name           ./ksh-0f06a2e        ./ksh-af6a32d        ./ksh-f31e368        ./ksh-randfix
      -------------------------------------------------------------------------------------------------
      fibonacci.ksh  0.481 [0.459-0.515]  0.472 [0.455-0.504]  0.396 [0.380-0.442]  0.407 [0.385-0.439]
      -------------------------------------------------------------------------------------------------
    
    src/cmd/ksh93/include/variables.h,
    src/cmd/ksh93/sh/{init,subshell}.c:
    - Rather than reseed $RANDOM every time a subshell is created, add
      a sh_save_rand_seed() function that does this only when the
      $RANDOM variable is used in a subshell. This function is called
      by the $RANDOM discipline functions nget_rand() and put_rand().
      As a minor optimization, sh_save_rand_seed doesn't reseed if it's
      called from put_rand().
    - Because $RANDOM may have a seed of zero (i.e., RANDOM=0),
      sp->rand_seed isn't enough to tell if $RANDOM has been reseeded.
      Add sp->rand_state for this purpose.
    - sh_subshell(): Only restore the former $RANDOM seed and state if
      it is necessary to prevent a subshell leak.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add two regression tests for bugs I ran into while making this
      patch.

commit 48896e3c232299447a3aad1ba8841a32eae7b937
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Nov 19 05:21:20 2021 +0100

    sh.1: Add missing printf -v doc (re: eb760a62); more tweaks
    
    Also add a missing 'Shell Variables' heading that is referred to
    elsewhere, and capitalise the ASCII acronym.

commit 3701452293f29efbb6e27806af7b22fb6835bfdb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Nov 19 02:49:28 2021 +0100

    manual: use consistent terminology
    
    The ksh manual page is one of the few places that calls globbing
    "file name generation". The mksh and zsh manuals use the same term.
    But every other shell's manual calls it "pathname expansion": bash,
    dash, yash, FreeBSD sh. So does ksh's built-in documentation (alias
    --man, export --man, readonly --man, set --man, typeset --man).
    What's more, the authoritative ksh reference, Bolsky & Korn's 1995
    "The New Kornshell" book, also calls it "pathname expansion", and
    so does the POSIX standard.
    
    Similarly, "arithmetic substitution" should be called "arithmetic
    expansion" per Bolsky & Korn as well as POSIX.
    
    This commit has several other miscellaneous documentation tweaks as
    well.

commit eb760a627b62dee5f650172df114d33cc7a5f5f6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 18 23:36:28 2021 +0100

    Backport 'printf -v' from ksh 93v-
    
    'printf' on bash and zsh has a popular -v option that allows
    assigning formatted output directly to variables without using a
    command substitution. This is much faster and avoids snags with
    stripping final linefeeds. AT&T had replicated this feature in the
    abandoned 93v- beta version. This backports it with a few tweaks
    and one user-visible improvement.
    
    The 93v- version prohibited specifying a variable name with an
    array subscript, such as printf -v var\[3\] foo. This works fine on
    bash and zsh, so I see no reason why this should not work on ksh,
    as nv_putval() deals with array subscripts just fine.
    
    src/cmd/ksh93/bltins/print.c: b_print():
    - While processing the -v option when called as printf, get a
      pointer to the variable, creating it if necessary. Pass only the
      NV_VARNAME flag to enforce a valid variable name, and not (as
      93v- does) the NV_NOARRAY flag to prohibit array subscripts.
    - If a variable was given, set the output file to an internal
      string buffer and jump straight to processing the format.
    - After processing the format, assign the contents to the string
      buffer to the variable.
    
    src/cmd/ksh93/data/builtins.c:
    - Document the new option, adding a warning that unquoted square
      brackets may trigger pathname expansion.

commit d3c1e0779090fbe2c48ee9890f0c255fd8149f0f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 18 19:05:31 2021 +0100

    printf: fix %(pattern)q documentation in 'printf --man'
    
    %(pattern)q is equivalent to %P. It's also equivalent to %#P, but
    since the alternative format specifier '#' does nothing for %P,
    %P and %#P are the same and documenting #%P is just confusing.
    
    Thanks to @stephane-chazelas for the report.
    
    src/cmd/ksh93/bltins/print.c:
    - In the printmap struct, document %P as equivalent of %(pattern)q.
    - Sort it alphabetically.
    - Do not pointlessly repeat the string "Equivalent to". Instead,
      let the discipline function infof() insert it for each entry.
      (This is the function used to dynamically insert the equivalents
      documentation into the --man output at the \fextra\f tag in
      sh_optprintf[] in data/builtins.c.)
    
    Resolves: https://github.com/ksh93/ksh/issues/338

commit e30bcb8a881c3c59a89adaa81b0836276ca41b8d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 18 04:27:48 2021 +0100

    bltins/misc.c: exec: finish cleanup (re: d8eba9d1)
    
    An obsolete struct was left that passed some variables on between
    b_exec() and the deleted B_login(). We can simply make those local
    variables now. Let's get rid of the redundant sh pointer, too.

commit 0f06a2e91b9918d3347a5bed1d8541bfda84d020
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 17 23:00:46 2021 +0100

    tests/pty.sh: fix two failures due to typeahead on Debian Bullseye
    
    As the (original AT&T) comment at the top says, "the trickiest part
    of the tests is avoiding typeahead in the pty dialogue".
    
    Two tests failed to [p]eek at the prompt before they started
    'typing'. This causes unpredictable results. On Debian Bullseye
    this triggers typeahead, which produces unwanted echo to the
    terminal, killing the tests.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add missing 'p' commands for the first prompt to the tests
      'nobackslashctrl in emacs' and 'emacs backslash escaping'.
    
    Resolves: https://github.com/ksh93/ksh/issues/332

commit 7109e17390a6e2e9d2b1a3c26641fa622795b0fa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 17 06:07:45 2021 +0100

    package: fix Bourne compat (re: 48e6dd98)
    
    Tried to compile on Solaris 10.1 for the first time in a while.
    Turns out the obsolete Bourne /bin/sh does not support 'test -e'.
    
    bin/package, src/cmd/INIT/package.sh:
    - Use 'test -f' instead.

commit 5da8eb31b32ced429017db534e5f6961c4cf7b7b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 17 03:24:18 2021 +0000

    arithmetic: Fix the octal leading zero mess (#337)
    
    In C/POSIX arithmetic, a leading 0 denotes an octal number, e.g.
    010 == 8. But this is not a desirable feature as it can cause
    problems with processing things like dates with a leading zero.
    In ksh, you should use 8#10 instead ("10" with base 8).
    
    It would be tolerable if ksh at least implemented it consistently.
    But AT&T made an incredible mess of it. For anyone who is not
    intimately familiar with ksh internals, it is inscrutable where
    arithmetic evaluation special-cases a leading 0 and where it
    doesn't. Here are just some of the surprises/inconsistencies:
    
    1. The AT&T maintainers tried to honour a leading 0 inside of
       ((...)) and $((...)) and not for arithmetic contexts outside it,
       but even that inconsistency was never quite consistent.
    
    2. Since 2010-12-12, $((x)) and $(($x)) are different:
          $ /bin/ksh -c 'x=010; echo $((x)) $(($x))'
          10 8
       That's a clear violation of both POSIX and the principle of
       least astonishment. $((x)) and $(($x)) should be the same in
       all cases.
    
    3. 'let' with '-o letoctal' acts in this bizarre way:
          $ set -o letoctal; x=010; let "y1=$x" "y2=010"; echo $y1 $y2
          10 8
       That's right, 'let y=$x' is different from 'let y=010' even
       when $x contains the same string value '010'! This violates
       established shell grammar on the most basic level.
    
    This commit introduces consistency. By default, ksh now acts like
    mksh and zsh: the octal leading zero is disabled in all arithmetic
    contexts equally. In POSIX mode, it is enabled equally.
    
    The one exception is the 'let' built-in, where this can still be
    controlled independently with the letoctal option as before (but,
    because letoctal is synched with posix when switching that on/off,
    it's consistent by default).
    
    We're also removing the hackery that causes variable expansions for
    the 'let' builtin to be quietly altered, so that 'x=010; let y=$x'
    now does the same as 'let y=010' even with letoctal on.
    
    Various files:
    - Get rid of now-redundant sh.inarith (shp->inarith) flag, as we're
      no longer distinguishing between being inside or outside ((...)).
    
    src/cmd/ksh93/sh/arith.c:
    - arith(): Let disabling POSIX octal constants by skipping leading
      zeros depend on either the letoctal option being off (if we're
      running the "let" built-in") or the posix option being off.
    - sh_strnum(): Preset a base of 10 for strtonll(3) depending on the
      posix or letoctal option being off, not on the sh.inarith flag.
    
    src/cmd/ksh93/include/argnod.h,
    src/cmd/ksh93/sh/args.c,
    src/cmd/ksh93/sh/macro.c:
    - Remove astonishing hackery that violated shell grammar for 'let'.
    
    src/cmd/ksh93/sh/name.c (nv_getnum()),
    src/cmd/ksh93/sh/nvdisc.c (nv_getn()):
    - Remove loops for skipping leading zeroes that included a broken
      check for justify/zerofill attributes, thereby fixing this bug:
            $ typeset -Z x=0x15; echo $((x))
            -ksh: x15: parameter not set
      Even if this code wasn't redundant before, it is now: sh_arith()
      is called immediately after the removed code and it ignores
      leading zeroes via sh_strnum() and strtonll(3).
    
    Resolves: https://github.com/ksh93/ksh/issues/334

commit 6be6da7100cdf34d4714a6ed3296c87fc45b6239
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 17 04:00:13 2021 +0100

    edit.c: don't trace tput command on init (re: ef8b80cf)
    
    When starting a new interactive ksh with the -v or -x option, an
    annoying symptom occurs: the 'tput' command that ed_setup() issues
    to get the escape sequence for cursor-up is xtraced or echoed,
    corrupting prompt display, for example ('▂' is the cursor):
            $ ksh -x
            $ + /usr/bin/tput cuu1
            + 2> /dev/null
            + .sh.subscript=$'\E[A'
            ▂
    or
            $ ksh -v
            $ .sh.subscript=$(/usr/bin/tput cuu1 2>/dev/null)▂
    
    src/cmd/ksh93/edit/edit.c: ed_setup():
    - Turn off xtrace and verbose while sh_trap()ing tput.

commit 141fa68ef193417b19c19c82972eb92220ff70a4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 16 23:29:44 2021 +0100

    shcomp: refuse to write binary data to terminal
    
    So, shcomp has messed up my terminal once too often by writing
    compiled binary data to it. While fixing that I've done some other
    tweaks as well.
    
    src/cmd/ksh93/sh/shcomp.c: main():
    - Fix error/warning message id (the "name:" prefix before messages)
      so it makes sense to the user. Save shcomp's argv[0] id for error
      messages that are directly from shcomp's main(), and use the
      argv[1] script id (set by sh_init()) for warnings produced by the
      compilation process. If there is no script id because we're
      reading from stdin, set it to "(stdin)".
    - If no arguments are given, refuse to read from standard input if
      it's on a tty. Instead, write a brief usage message (with pointer
      to --help and --man, see e21a053e) and exit. This is far more
      helpful; people will rarely want to compile a script by manually
      typing it in. If you really want to do that, use /dev/stdin as
      the input filename. :)
    - Error out if we're about to write binary data to a tty (even if
      /dev/stdout was given as the output filename).
    - Turn off SH_MULTILINE to avoid some pointless editor init in case
      we're reading from stdin on a terminal.
    - Do not attempt to copy remaining data if we're already at EOF.
      This fixes a bug that required the user to press Ctrl+D twice
      when manually entering a script on the terminal. Pressing Ctrl+D
      once and then entering more data would corrupt the bytecode.

commit e3f02cc36755c08a2c347b23e4959c0d604256a1
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Nov 15 16:46:47 2021 -0800

    Fix file descriptor leaks in the `hist` builtin (#336)
    
    This commit fixes two file descriptor leaks in the hist built-in.
    The bugfix for the first file descriptor leak was backported from
    ksh2020. See:
    https://github.com/att/ast/issues/872
    https://github.com/att/ast/commit/73bd61b5
    
    Reproducer:
      $ echo no
      $ hist -s no=yes
    
    The second file descriptor leak occurs after a substitution error
    in the hist built-in (this leak wasn't fixed in ksh2020).
    Reproducer:
      $ echo no
      $ ls /proc/$$/fd
      $ hist -s no=yes
      $ hist -s no=yes
      $ ls /proc/$$/fd
    
    src/cmd/ksh93/bltins/hist.c:
    - Close leftover file descriptors when an error occurs and after
      'hist -s' runs a command.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add two regression tests for both of the file descriptor leaks.

commit 1732c0597fb066986f1569b0c5af8d1e278834ef
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 19:07:19 2021 +0100

    tests: fix intermittent $RANDOM reseeding fails (re: af6a32d1)
    
    When testing whether subshell $RANDOM reseeding worked, checking
    for non-identical numbers is not sufficient. There is no check for
    randomly occurring duplicate numbers, nor can there be, because
    subshells cannot (or, in the case of virtual subshells, should not)
    influence each other or the parent shell.
    
    src/cmd/ksh93/tests/variables.sh:
    - Try up to three times, tolerating identical numbers twice.

commit 0979cb667d20cb8af158f2724c3148e3b890deb4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 18:49:19 2021 +0100

    arith: Fix variables 'nan' and 'inf' in arithmetic for POSIX mode
    
    The --posix compliance option now disables the case-insensitive
    special floating point constants Inf and NaN so that all case
    variants of $((inf)) and $((nan)) refer to the variables by those
    names as the standard requires. (BUG_ARITHNAN)
    
    src/cmd/ksh93/sh/arith.c: arith():
    - Only do case-insensitive checks for "Inf" and "NaN" if the POSIX
      option is off.

commit 7078f89e96c9246acd33b0475297b7daa661e805
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 09:40:45 2021 +0100

    Remove duplicate error message
    
    e_badnum from streval.h and e_number from shell.h are both defined
    as "%s: bad number". We only need one. Remove the one that is used
    only once: e_badnum.

commit 9aa88cd1c9952a1c0ea58bed6ef8196790b94414
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 06:53:45 2021 +0100

    test/[: rm SH_INTESTCMD; test for 'test' directly (re: cd2cf236)
    
    Turns out there is a way to check what built-in we're running at
    any time. It is done for 'let' in arith.c:
        sh.bltindata.bnode==SYSLET
    For test/[, that would be (see include/builtins.h):
        sh.bltindata.bnode==SYSTEST || sh.bltindata.bnode==SYSBRACKET

commit 1bf1d2f81d6a312c04b00333a3529cc60f51bc5f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 03:18:18 2021 +0100

    Fix crash on unsetting .sh.match
    
    ksh crashed after unsetting .sh.match and then matching a pattern:
    
    $ unset .sh.match
    $ [[ bar == ba* ]]
    Memory fault
    
    src/cmd/ksh93/sh/init.c: sh_setmatch():
    - Do nothing if we cannot get an array pointer to SH_MATCHNOD.

commit 07b474c6fe0132d7d82159f2e7fcc2f4a777e8b3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Nov 15 03:00:40 2021 +0100

    tests/leaks.sh: increase iterations on Linux
    
    There are one or two leaks that show up intermittently on the
    Github runners for the 1.0 branch (which is compiled as a release,
    i.e. no vmalloc). If they're intermittent, they must be false
    positives due to malloc artefacts. Let's double the number of
    iterations for the /proc/$$/stat method and see what happens.

commit 9879b2b85f9f8d2ceb5bbc31caead8d7b1d8d063
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 14 18:27:05 2021 +0100

    Fix [ \( str -a str \) ], [ \( str -o str \) ]
    
    Symptoms:
    
    $ test \( string1 -a string2 \)
    /usr/local/bin/ksh: test: argument expected
    $ test \( string1 -o string2 \)
    /usr/local/bin/ksh: test: argument expected
    
    The parentheses should be irrelevant and this should be a test for
    the non-emptiness of string1 and/or string2.
    
    src/cmd/ksh93/bltins/test.c:
    
    - b_test(): There is a block where the case of 'test' with five or
      less arguments, the first and last one being parentheses, is
      special-cased. The parentheses are removed as a workaround: argv
      is increased to skip the opening parenthesis and argc is
      decreased by 2. However, there is no corresponding increase of
      tdata.av which is a copy of this function's argv. This renders
      the workaround ineffective. The fix is to add that increase.
    
    - e3(): Do not handle '!' as a negator if not followed by an
      argument. This allows a right-hand expression that is equal to
      '!' (i.e. a test for the non-emptiness of the string '!').

commit b0f424960417fb913ec0c4150b7f7605d23ce9bc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 14 12:30:22 2021 +0100

    Fix goof in regression test (re: 49b38ee1)

commit 49b38ee14e2d389758111d98c09e04d3fd94c8c2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 13 23:57:15 2021 +0100

    test/[: binary operators: fix '<' and add '=~'; some more cleanups
    
    In ksh88, the test/[ built-in supported both the '<' and '>'
    lexical sorting comparison operators, same as in [[. However, in
    every version of ksh93, '<' does not work though '>' still does!
    
    Still, the code for both is present in test_binop():
    
    src/cmd/ksh93/bltins/test.c
    548:            case TEST_SGT:
    549:                    return(strcoll(left, right)>0);
    550:            case TEST_SLT:
    551:                    return(strcoll(left, right)<0);
    
    Analysis: The binary operators are looked up in shtab_testops[] in
    data/testops.c using a macro called sh_lookup, which expands to a
    sh_locate() call. If we examine that function in sh/string.c, it's
    easy to see that on systems using ASCII (i.e. all except IBM
    mainframes), it assumes the table is sorted in ASCII order.
    
    src/cmd/ksh93/sh/string.c
    64:     while((c= *tp->sh_name) && (CC_NATIVE!=CC_ASCII || c <= first))
    
    The problem was that the '<' operator was not correctly sorted in
    shtab_testops[]; it was sorted immediately before '>', but after
    '='. The ASCII order is: < (60), = (61), > (62). This caused '<' to
    never be found in the table.
    
    The test_binop() function is also used by [[, yet '<' always worked
    in that. This is because the parser has code that directly checks
    for '<' and '>' within [[ (in sh/parse.c, lines 1949-1952).
    
    This commit also adds '=~' to 'test', which took three lines of
    code and allowed eliminating error handling in test_binop() as
    test/[ and [[ now support the same binary ops. (re: fc2d5a60)
    
    src/cmd/ksh93/*/*.[ch]:
    - Rename a couple of very misleadingly named macros in test.h:
      . For == and !=, the TEST_PATTERN bit is off for pattern compares
        and on for literal string compares! Rename to TEST_STRCMP.
      . The TEST_BINOP bit does not denote all binary operators, but
        only the logical -a/-o ops in test/[. Rename to TEST_ANDOR.
    
    src/cmd/ksh93/bltins/test.c: test_binop():
    - Add support for =~. This is only used by test/[. The method is
      implemented in two lines that convert the ERE to a shell pattern
      by prefixing it with ~(E), then call test_strmatch with that
      temporary string to match the ERE and update ${.sh.match}.
    - Since all binary ops from shtab_testops[] are now accounted for,
      remove unknown op error handling from this function.
    
    src/cmd/ksh93/data/testops.c:
    - shtab_testops[]:
      . Correctly sort the '<' (TEST_SLT) entry.
      . Remove ']]' (TEST_END). It's not an op and doesn't belong here.
    - Update sh_opttest[] documentation with =~, \<, \>.
    - Remove now-unused e_unsupported_op[] error message.
    
    src/cmd/ksh93/sh/lex.c: sh_lex():
    - Check for ']]' directly instead of relying on the removed
      TEST_END entry from shtab_testops[].
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add relevant tests.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Fix an old test that globally deleted the 'test' builtin. Delete
      it within the command substitution subshell only.
    - Remove the test for non-support of =~ in test/[.
    - Update the test for invalid test/[ op to use test directly.

commit 9b259c944e2b4ffb2db7cdbfb84d0fb0645949db
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 13 03:17:54 2021 +0100

    test/[: Fix binary -a/-o operators in POSIX mode
    
    POSIX requires
            test "$a" -a "$b"
    to return true if both $a and $b are non-empty, and
            test "$a" -o "$b"
    to return true if either $a or $b is non-empty.
    
    In ksh, this fails if "$a" is '!' or '(' as this causes ksh to
    interpret the -a and -o as unary operators (-a being a file
    existence test like -e, and -o being a shell option test).
    
    $ test ! -a ""; echo "$?"
    0               (expected: 1/false)
    $ set -o trackall; test ! -o trackall; echo "$?"
    1               (expected: 0/true)
    $ test \( -a \); echo "$?"
    ksh: test: argument expected
    2               (expected: 0/true)
    $ test \( -o \)
    ksh: test: argument expected
    2               (expected: 0/true)
    
    Unfortunately this problem cannot be fixed without risking breakage
    in legacy scripts. For instance, a script may well use
            test ! -a filename
    to check that a filename is nonexistent. POSIX specifies that this
    always return true as it is a test for the non-emptiness of both
    strings '!' and 'filename'.
    
    So this commit fixes it for POSIX mode only.
    
    src/cmd/ksh93/bltins/test.c: e3():
    - If the posix option is active, specially handle the case of
      having at least three arguments with the second being -a or -o,
      overriding their handling as unary operators.
    
    src/cmd/ksh93/data/testops.c:
    - Update 'test --man --' date and say that unary -a is deprecated.
    
    src/cmd/ksh93/sh.1:
    - Document the fix under the -o posix option.
    - For test/[, explain that binary -a/-o are deprecated.
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add tests based on reproducers in bug report.
    
    Resolves: https://github.com/ksh93/ksh/issues/330

commit 755cdeb631dd1e34c8f2a2cc131d3221ab571e7e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Nov 13 00:49:01 2021 +0100

    Better fix for BUG_IFSISSET (re: 95294419)
    
    With a better understanding of the code 1.5 years later, the
    special-casing for IFS introduced in that commit seems like a hack.
    
    The problem was not that the IFS node always exists but that it is
    always considered to have a 'get' discipline function. Variables
    with a 'get' discipline are considered set. This makes sense for
    all variables except IFS.
    
    The nv_isnull() macro is used to check if a variable is set. It
    calls nv_hasget() to determine if the variable has a 'get'
    discipline. So a better fix is for nv_hasget() always to return
    false for IFS.
    
    src/cmd/ksh93/bltins/test.c, src/cmd/ksh93/sh/macro.c:
    - Remove special-casing for IFS.
    
    src/cmd/ksh93/sh/nvdisc.c: nv_hasget():
    - Always return false for IFS, taking local scope into account.

commit d160abc5be59bc196cc4eeeb8e6f1a52f21a3447
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Nov 12 04:20:31 2021 +0100

    sh_type(): Do not set POSIX mode when invoked as su
    
    On Linux, the 'su' program sets $0 to '-su' when doing 'su -' or
    'su - username'. When ksh is the target account's default shell,
    this caused ksh to consider itself to be launched as a standard
    POSIX sh, which (among other things) disables the default aliases
    on interactive shells. This caused confusion for at least one user
    as they lost their 'history' alias after 'su -':
    
    https://www.linuxquestions.org/questions/slackware-14/in-current-with-downgrade-to-ksh93-lost-the-alias-history-4175703408/
    
    bash does not consider itself to be sh when invoked as su, so ksh
    probably shouldn't, either. The behaviour was also undocumented,
    making it even more surprising.
    
    src/cmd/ksh93/sh/init.c: sh_type():
    - Only set the SH_TYPE_POSIX bit if we're invoked as 'sh' (or, on
      windows, as 'sh.exe').

commit 4e151e3ad3861443f094bab61236243846ce040e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Nov 10 16:58:32 2021 -0800

    Shorten command name used to test ENAMETOOLONG exit status (#333)
    
    A change in FreeBSD 13 now causes extremely long command names to
    exit with errno set to E2BIG if the name can't fit in the list of
    arguments. This was causing the regression tests for ENAMETOOLONG
    to fail on FreeBSD 13 because the exit status for these errors
    differ (ENAMETOOLONG uses status 127 while E2BIG uses status 126).
    
    src/cmd/ksh93/tests/path.sh:
    - To fix the failing regression tests, the command name has been
      shortened to twice the length of NAME_MAX. This length is still
      long enough to trigger an ENAMETOOLONG error without causing an
      E2BIG failure on FreeBSD 13.
    
    Fixes https://github.com/ksh93/ksh/issues/331

commit 402013309f5ecb44465b234d01ca596148bc986d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Nov 10 11:24:25 2021 +0000

    Revert "Fork upon redirect/exec of closed FD in virtual subshell"
    
    This reverts commit 57b46d7b4486d0fc823ba6665a5787bdac371396.
    
    The fix is evidently not correct:
    - It does not work for file descriptor 3 (and 3 only).
    - On OpenBSD, after this commit, `bin/shtests` does not find
      the shell to test in the `arch` directory.
    
    Reopens: https://github.com/ksh93/ksh/issues/161

commit 57b46d7b4486d0fc823ba6665a5787bdac371396
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 9 22:32:37 2021 +0000

    Fork upon redirect/exec of closed FD in virtual subshell
    
    93u, 93u+m, and ksh2020 have this issue:
    
            $ redirect 9>&1
            $ ( { redirect 9>&1; } 9>&- )
            $ echo "test" >&9
            ksh: 9: cannot open [Bad file descriptor]
    
    The subshell should not have influenced the state of file
    descriptor 9 in the parent environment.
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - Before redirecting a file descriptor in a subshell that is closed
      in the parent environment, fork. This is a workaround, but it
      works. The use case is rare enough that a fork should not give a
      significant performance penalty.
    
    Thanks to Koichi Nakashima @ko1nksm for the report and the
    reproducers.
    
    Resolves: https://github.com/ksh93/ksh/issues/161

commit b09a1079125dad24923cdf4964c4f3b615e14968
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 9 13:51:31 2021 +0000

    fix 3 typos: staring -> starting

commit 969e3499ec24bd8a1556b9f45c041d6a68626a86
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Nov 9 12:07:00 2021 +0000

    libcmd: fix Mamfile goof (re: b6d98ea9)
    
    Files including <fts.h> should of course depend on the fts.h
    from libast, not on a nonexistent fts.h in the current directory.

commit 35583450157353d7887e5170e4feda0b0483ea5c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 7 22:27:02 2021 +0000

    xtrace: fix restore of standard error stream state
    
    The sh_trace() function, which prints an xtrace line to standard
    error, clears the SF_SHARE and SF_PUBLIC flags from the sfstderr
    stream during the xtrace in order to guarantee an atomic trace
    write. But it only restored those flags if the passed argv pointer
    is non-NULL. Redirections are traced with a NULL argv parameter, so
    the stderr state was not restored for them.
    
    This somehow caused unpredictable behaviour, including (on some
    systems) a crash in sfwrite(3) when running the heredoc.sh tests
    with xtrace on.
    
    src/cmd/ksh93/sh/xec.c: sh_xtrace():
    - Move the sfset() invocation that restores the SF_SHARE|SF_PUBLIC
      flags to sfstderr out of the if(argv) block.
    - Since we're here, don't bother wasting cycles initialising local
      variable values if xtrace is not on. Move that inside the
      if(sh_isoption(SH_XTRACE)) block.
    
    Resolves: https://github.com/ksh93/ksh/issues/306

commit b6d98ea9d28c78110c643e62f4ff088b8e58d872
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 7 21:18:14 2021 +0000

    libcmd: rm old fts_fix workaround
    
    This was:
    /*
     * -lcmd specific workaround to handle
     *      fts_namelen
     *      fts_pathlen
     *      fts_level
     * changing from [unsigned] short bit to [s]size_t
     *
     * ksh (or any other main application) that pulls in -lcmd
     * at runtime may result in old -last running with new -lcmd
     * which is not a good situation (tm)
     *
     * probably safe to drop after 20150101
     */
    According to the version check in fts_fix.c, this change occurred
    in the libast API version 2010-01-02, which is also the API version
    of the bundled libast (see src/lib/libast/misc/state.c).
    
    src/lib/libcmd/fts_fix.{c,h}:
    - Removed.
    
    src/lib/libcmd/{chgrp,chmod,cksum,cp,rm}.c:
    - Change uses of fts_fix.h to fts.h from libast.
    
    src/lib/libcmd/Mamfile:
    - Update accordingly.

commit a67c97324f171d30aaedf010efba786a0a465c6d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Nov 7 10:14:54 2021 +0000

    Fix bug on closed stdout; improve BUG_PUTIOERR fix (re: 93e15a30)
    
    Stéphane Chazelas reported:
    
    > As noted in this austin-group-l discussion[*] (relevant to this
    > issue):
    >
    >   $ ksh93u+m -c 'pwd; echo "$?" >&2; echo test; echo "$?" >&2' >&-
    >   0
    >   1
    >   /home/chazelas
    >
    > when stdout is closed, pwd does claim it succeeds (by returning a
    > 0 exit status), while echo doesn't (not really relevant to the
    > problem here, only to show it doesn't affect all builtins), and
    > the output that pwd failed to write earlier ends up being written
    > on stderr here instead of stdout upon exit (presumably) because
    > of that >&2 redirection.
    >
    > strace shows ksh93 attempting write(1, "/home/chazelas\n", 15) 6
    > times (1, the last one, successful).
    >
    > It gets even weirder when redirecting to a file:
    >
    >   $ ksh93u+m -c 'pwd; echo "$?" >&2; echo test; echo "$?" > file' >&-
    >   0
    >   $ cat file
    >   1
    >   1
    >   ome/chazelas
    
    In my testing, the problem does not occur when closing stdout at
    the start of the -c script itself (using redirect >&- or exec >&-);
    it only occurs if stdout was closed before initialising the shell.
    
    That made me suspect that the problem had to do with an
    inconsistent file descriptor state in the shell. ksh uses internal
    sh_open() and sh_close() functions, among others, to maintain that
    state.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - If the shell is initialised with stdin, stdout or stderr closed,
      then make the shell's file descriptor state tables reflect that
      fact by calling sh_close() for the closed file descriptors.
    
    This commit also improves the BUG_PUTIOERR fix from 93e15a30. Error
    checking after sfsync() is not sufficient. For instance, on
    FreeBSD, the following did not produce a non-zero exit status:
      ksh -c 'echo hi' >/dev/full
    even though this did:
      ksh -c 'echo hi >/dev/full'
    Reliable error checking requires not only checking the result of
    every SFIO command that writes output, but also synching the buffer
    at the end of the operation and checking the result of that.
    
    src/cmd/ksh93/bltins/print.c:
    - Make exitval variable global to allow functions called by
      b_print() to set a nonzero exit status.
    - Check the result of all SFIO output commands that write output.
    - b_print(): Always sfsync() at the end, except if the s (history)
      flag was given. This allows getting rid of the sfsync() call that
      required the workaround introduced in 846ad932.
    
    [*] https://www.mail-archive.com/austin-group-l@opengroup.org/msg08056.html
    
    Resolves: https://github.com/ksh93/ksh/issues/314

commit 77827c53e2dc675020e27fd6e9c857f692ee6704
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Nov 5 03:01:28 2021 +0000

    libcmd: update unit suffix doc in head(1) & tail(1)
    
    The documentation for the supported unit suffixes for options
    accepting numeric arguments was woefully outdated in 'head --man'
    and 'tail --man'.
    
    A quick look at the very short head(1) code shows that it does not
    know or care about unit suffixes at all – it leaves that to libast
    optget(3) which in turn calls strtoll() which is implemented in
    strtoi.h where the multiplier suffixes are handled.
    
    Note that on GNU head/tail, single-letter suffixes use power-of-2
    units, e.g. k == KiB, etc. Libast used to do the same but this is
    not standards compliant and AT&T changed/fixed this in 2011. From
    libast/RELEASE:
    10-04-11 string/strtoi.h: k (1000) and ki (1024) now differentiated
    (They didn't mention the same change applies to all handled units.)
    
    Note that the tail(1) builtin is currently not compiled in by
    default. This can be changed in src/cmd/ksh93/data/builtins.c.
    
    src/lib/libcmd/head.c, src/lib/libcmd/tail.c:
    - Update the internal head/tail man pages to reflect what is
      handled in strtoi.h.
    
    Resolves: https://github.com/ksh93/ksh/issues/319

commit 99667a4f5e2dc695e4051a2e35027840c72083ee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 4 15:43:50 2021 +0000

    Comments: document job control flags (re: 41ebb55a)
    
    The functions of the three flags controlling job control are
    crucial to understand in order to maintain the code, so they should
    be documented in the comments and not just in the git log.
    
    This commit does not change any code.

commit 3f177bfd04c5fc2fe76354ca6f59d01d5eee3fe6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 13 04:23:50 2021 +0200

    Fix octal number arguments in printf integer arithmetic
    
    Bug 1: POSIX requires numbers used as arguments for all the %d,
    %u... in printf to be interpreted as in the C language, so
            printf '%d\n' 010
    should output 8 when the posix option is on. However, it outputs 10.
    
    This bug was introduced as a side effect of a change introduced in
    the 2012-02-07 version of ksh 93u+m, which caused the recognition
    of leading-zero numbers as octal in arithmetic expressions to be
    disabled outside ((...)) and $((...)). However, POSIX requires
    leading-zero octal numbers to be recognised for printf, too.
    
    The change in question introduced a sh.arith flag that is set while
    we're processing a POSIX arithmetic expression, i.e., one that
    recognises leading-zero octal numbers.
    Bug 2: Said flag is not reset in a command substitution used within
    an arithmetic expression. A command substitution should be a
    completely new context, so the following should both output 10:
    
    $ ksh -c 'integer x; x=010; echo $x'
    10            # ok; it's outside ((…)) so octals are not recognised
    $ ksh -c 'echo $(( $(integer x; x=010; echo $x) ))'
    8             # bad; $(comsub) should create new non-((…)) context
    
    src/cmd/ksh93/bltins/print.c: extend():
    - For the u, d, i, o, x, and X conversion modifiers, set the POSIX
      arithmetic context flag before calling sh_strnum() to convert the
      argument. This fixes bug 1.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - When invoking a command substitution, save and unset the POSIX
      arithmetic context flag. Restore it at the end. This fixes bug 2.
    
    Reported-by: @stephane-chazelas
    Resolves: https://github.com/ksh93/ksh/issues/326

commit 2dc13359aa4fe074e5c101c37c3c6898d188f290
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 13 00:35:01 2021 +0200

    arith.c: harmonise source code formatting (re: 593a5a8b)

commit fba11758d724b42a136cc8d747845ef83227975f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 12 05:16:51 2021 +0200

    Fix 'ps' output for hashbangless scripts on Linux/macOS
    
    When invoking a script without an interpreter (#!hashbang) path,
    ksh forks, but there is no exec syscall in the child. The existing
    command line is overwritten in fixargs() with the name of the new
    script and associated arguments. In the generic/fallback version of
    fixargs() which is used on Linux and macOS, if the new command line
    is longer than the existing one, it is truncated. This works well
    when calling a script with a shorter name.
    
    However, it generates a misleading name in the common scenario
    where a script is invoked from an interactive shell, which
    typically has a short command line. For instance, if "/tmp/script"
    is invoked, "ksh" gets replaced with "/tm" in "ps" output.
    
    A solution is found in the fact that, on these systems, the
    environment is stored immediately after the command line arguments.
    This space can be made available for use by a longer command line
    by moving the environment strings out of the way.
    
    src/cmd/ksh93/sh/main.c: fixargs():
    - Refactor BSD setproctitle(3) version to be more self-contained.
    - In the generic (Linux/macOS) version, on init (i.e. mode==0), if
      the command line is smaller than 128 bytes and the environment
      strings have not yet been moved (i.e. if they still immediately
      follow the command line arguments in memory), then strdup the
      environment strings, pointing the *environment[] members to the
      new strings and adding the length of the strings to the maximum
      command line buffer size.
    
    Reported-by: @gkamat
    Resolves: https://github.com/ksh93/ksh/pull/300

commit b4864699d79be73e6d6b327c2b929dcb8736b844
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sun Sep 12 02:30:16 2021 +0530

    Remove pfexec(1) reference in the man page (re: ac8e702e) (#322)
    
    This is to remove a residual reference to pfexec(1) from the man page.

commit d8ea8a170f09df11c713112c80f0871511b4e213
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sun Aug 29 21:27:38 2021 +0530

    Add tags to .gitignore (#321)
    
    It's an index file created by ctags, commonly used for source code
    cross reference.

commit 42becab63cae760addae6e88008665be352bdbbd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 13 08:01:46 2021 +0200

    Fix `backtick` comsubs by making them act like $(modern) ones
    
    ksh93 currently has three command substitution mechanisms:
    - type 1: old-style backtick comsubs that use a pipe;
    - type 3: $(modern) comsubs that use a temp file, currently with
      fallback to a pipe if a temp file cannot be created;
    - type 2: ${ shared-state; } comsubs; same as type 3, but shares
      state with parent environment.
    
    Type 1 is buggy. There are at least two reproducers that make it
    hang. The Red Hat patch applied in 4ce486a7 fixed a hang in
    backtick comsubs but reintroduced another hang that was fixed in
    ksh 93v-. So far, no one has succeeded in making pipe-based comsubs
    work properly.
    
    But, modern (type 3) comsubs use temp files. How does it make any
    sense to have two different command substitution mechanisms at the
    execution level? The specified functionality between backtick and
    modern command substitutions is exactly the same; the difference
    *should* be purely syntactic.
    
    So this commit removes the type 1 comsub code at the execution
    level, treating them all like type 3 (or 2). As a result, the
    related bugs vanish while the regression tests all pass.
    
    The only side effect that I can find is that the behaviour of bug
    https://github.com/ksh93/ksh/issues/124 changes for backtick
    comsubs. But it's broken either way, so that's neutral.
    
    So this commit can now be added to my growing list of ksh93 issues
    fixed by simply removing code.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove special code for type 1 comsubs from iousepipe(),
      sh_iounpipe(), sh_exec() and _sh_fork().
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/subshell.c:
    - Remove pipe support from sh_subtmpfile(). This also removes the
      use of a pipe as a fallback for $(modern) comsubs. Instead, panic
      and error out if temp file creation fails. If the shell cannot
      create a temporary file, there are fatal system problems anyway
      and a script should not continue.
    - No longer pass comsub type to sh_subtmpfile().
    
    All other changes:
    - Update sh_subtmpfile() calls.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add two regression tests based on reproducers from bug reports.
    
    Resolves: https://github.com/ksh93/ksh/issues/305
    Resolves: https://github.com/ksh93/ksh/issues/316

commit 7c7f3bdd5e447e8a29e9e9ea887bcd466cf90fd9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 11 02:48:36 2021 +0200

    Upstream an Apple patch to array.c
    
    This upstreams the patch 'src__cmd__ksh93__sh__array.c.diff' from
    Apple's ksh 93u+ distribution in ksh-28.tar.gz:
    https://opensource.apple.com/tarballs/ksh/
    
    src/cmd/ksh93/sh/array.c: array_putval(), nv_associative():
    - Zero two table pointers after closing/freeing the tables with
      libast's dtclose(). No information is available from Apple as to
      what specific problems this fixes, but at worst this is harmless.

commit 4442fa87d4462af9bc8b3b2bc545c71bc77041b1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 11 01:42:15 2021 +0200

    Build tweaks for ancient Macs
    
    I don't expect anyone else to actually use ksh93 on a museum-grade
    Power Mac G5 running Mac OS X 10.3.7, but ancient platforms are
    great bug and compatibility testing tools. These tweaks restore the
    ability to build on that platform.
    
    Also, to avoid a strange path search bug on that platform and
    possibly other ancient ones, set SHOPT_DYNAMIC to 0 in SHOPT.sh.

commit e939860a86e1c9f1e7eb0a971d4bc2c5336efc9d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 3 15:47:25 2021 +0200

    [[ ... ]]: fix '!' to negate another '!'
    
    Bug: [[ ! ! 1 -eq 1 ]] returns false, but should return true.
    
    This bug was reported for bash, but ksh has it too:
    https://lists.gnu.org/archive/html/bug-bash/2021-06/msg00006.html
    
    Op 24-05-21 om 17:47 schreef Chet Ramey:
    > On 5/22/21 2:45 PM, Vincent Menegaux wrote:
    >> Previously, these commands:
    >>
    >>    [[ ! 1 -eq 1 ]]; echo $?
    >>    [[ ! ! 1 -eq 1 ]]; echo $?
    >>
    >> would both result in `1', since parsing `!' set CMD_INVERT_RETURN
    >> instead of toggling it.
    >
    > Interestingly, ksh93 produces the same result as bash. I agree
    > that it's more intuitive to toggle it.
    
    Also interesting is that '!' as an argument to the simple
    'test'/'[' command does work as expected (on both bash and ksh93):
    'test ! ! 1 -eq 1' and '[ ! ! 1 -eq 1 ]' return 0/true.
    
    Even the man page for [[ is identical for bash and ksh93:
    
    |               ! expression
    |                      True if expression is false.
    
    This suggests it's supposed to be a logical negation operator, i.e.
    '!' is implicitly documented to negate another '!'. Bolsky & Korn's
    1995 ksh book, p. 167, is slightly more explicit about it:
    "! test-expression. Logical negation of test-expression."
    
    I also note that multiple '!' negators in '[[' work as expected on
    mksh, yash and zsh.
    
    src/cmd/ksh93/sh/parse.c: test_primary():
    - Fix bitwise logic for '!': xor the TNEGATE bit into tretyp
      instead of or'ing it, which has the effect of toggling it.

commit 669d5467b92a40853f0ef919f9590de8672ccd70
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu May 20 16:51:54 2021 -0700

    Enable some memory leak tests for standard malloc (re: 05683ec7) (#311)
    
    The memory leak regression tests added in commit 05683ec7 only leak memory
    in the C.UTF-8 locale if ksh is compiled with vmalloc. I've ran these
    regression tests against ksh93v- and neither fail in that version of
    ksh, which indicates the bug causing these tests to fail may be similar to
    the one that causes <https://github.com/ksh93/ksh/issues/95>.
    Since the memory leak tests work with -D_std_malloc, only set $LANG to
    'C' if ksh is compiled with vmalloc enabled.

commit 3a94d040463a16ecfdb807fe856a471baf38cc90
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 19 06:53:56 2021 +0200

    Fix shell exit on function call redirection error (re: 23f2e23)
    
    This regression also exists on ksh 93v- and ksh2020, from which it
    was backported.
    
    Reproducer:
    
    $ (fn() { true; }; fn >/dev/null/ne; true) 2>/dev/null; echo $?
    1
    
    Expected output: 0 (as on ksh 93u+).
    
    FreeBSD sh and NetBSD sh are the only other known shells that share
    this behaviour. POSIX currently allows both behaviours, but may
    require the ksh 93u+ behaviour in future. In any case, this causes
    an incompatibility with established ksh behaviour that could easily
    break existing ksh scripts.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Commit 23f2e23 introduced a check for jmpval > SH_JMPIO (5).
      When a function call pushes context for a redirection, this is
      done with the jmpval exit value of SH_JMPCMD (6). Change that to
      SH_JMPIO to avoid triggering that check.
    
    src/cmd/ksh93/tests/exit.sh:
    - Add regression tests for exit behaviour on various kinds of
      shell errors as listed in the POSIX standard, including an error
      in a redirection of a function call.
    
    Fixes: https://github.com/ksh93/ksh/issues/310

commit b0ca8a499ed7d1a96d278bc2e646b994e2f9dbdb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 19 06:13:16 2021 +0200

    Add regression test (re: fa0f9796)

commit fa0f97968d29c848bf404f570de54a7610cbe86b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 19 00:02:49 2021 +0200

    Decrease SHLVL before doing 'exec' from main shell
    
    Problem:
    
    $ exec ksh
    $ echo $SHLVL
    2
    $ exec ksh
    $ echo $SHLVL
    3
    $ exec ksh
    $ echo $SHLVL
    4
    
    ...etc. SHLVL is supposed to acount the number of shell processes
    that you need to exit before you get logged out. Since ksh was
    replacing itself with a new shell in the same process using 'exec',
    SHLVL should not increase.
    
    src/cmd/ksh93/bltins/misc.c: b_exec():
    - When about to replace the shell and we're not in a subshell,
      decrease SHLVL to cancel out a subsequent increase by the
      replacing shell. Bash and zsh also do this.

commit b8db92d1e8015054a634325072dacbc6f1c0afb6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 18 12:39:24 2021 +0200

    Fix typeset -u/-l on NetBSD
    
    On NetBSD, for some reason, the wctrans(3) and towctrans(3) C
    library functions exist, but have no effect; the "toupper" and
    "tolower" maps don't even translate case for ASCII, never mind wide
    characters. This kills 'typeset -u' and 'typeset -l' on ksh, which
    was the cause of most of the regression test failures on NetBSD.
    Fallback versions for these functions are provided in init.c, but
    were not being used on NetBSD because the feature test detected the
    presence of these functions in the C library.
    
    src/cmd/ksh93/features/locale:
    - Replace the simple test for the presence of wctrans(3),
      towctrans(3), and the wctrans_t type by an actual feature test
      that checks that these functions not only compile, but are also
      capable of changing an ASCII 'q' to upper case and back again.
    
    src/cmd/ksh93/sh/init.c: towctrans():
    - Add wide character support to the fallback function, for whatever
      good that may do; on NetBSD, the wide-character towupper(3) and
      towlower(3) functions only change case for ASCII.

commit 1fc28dc2bb3edc967daaa99890529aad2cb032f6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 16 06:28:47 2021 +0200

    tests/leaks.sh: increase Linux tolerance again (re: efd4858b)
    
    After the last increase from 4 to 6 bytes, there are still
    intermittent false leaks.sh failures (different ones on each run)
    on the GitHub CI runner on the 1.0 branch, which is compiled with
    the OS's malloc (as opposed to ast vmalloc). Increase the byte
    tolerance for the leaks test from 6 to 8 bytes on Linux when
    compiling with standard malloc.

commit 536b32d565f35835e6b062c1a3a009e57a052b29
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 16 04:27:57 2021 +0200

    Hopefully good fix for va_listval build fails (re: 7ad2c7ef, etc.)
    
    The last commit still failed to build on macOS M1. That va_listval
    macro keeps causing trouble. It's an AST thing that is defined in
    src/lib/libast/features/common. That looks like some incredibly
    opaque attempt to make it compatible with everything, and clearly
    it no longer works properly on all systems. I don't dare touch it,
    though. That code looks like any minimal change will probably break
    the build on some system or other.
    
    src/lib/libast/features/hack:
    - Add feature test to check if that macro needs (0) no workaround,
      or (1) the workaround from the 93v- beta, or (2) the FreeBSD one.
      Whichever version compiles first, it will use. If none does, this
      test will not output a value, which will be treated as 0.
    
    src/lib/libast/hash/hashalloc.c,
    src/lib/libast/string/tokscan.c:
    - Update to use the result of the hack feature test.
    
    src/lib/libast/Mamfile:
    - Update for new #include dependencies.

commit 7ad2c7eff4d93c42257b61f88f99806bef79b36e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 15 02:46:35 2021 +0200

    fix the @#$%@#$ build on macOS M1, again (re: 841c6800, c0fdc4a3)
    
    This commit excludes all Apple systems from the workaround.

commit 0982dc1bd050fc4164658b25f3d27d23bcd5ae9b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 14 19:38:20 2021 +0200

    Fix xtrace (shtests -x) for the regression tests
    
    src/cmd/ksh93/tests/{shtests,_common}:
    - When xtrace is active, set SECONDS to the float type so that
      the $SECONDS expansion in $PS4 shows fractional seconds.
    
    src/cmd/ksh93/tests/*.sh:
    - Various fixes to avoid command substitutions incorporating xtrace
      output into their results. Sometimes this is done by avoiding a
      preceding assignment on a command that redirects 2>&1 (as that
      will also redirect the preceding assignment and its xtrace,
      causing the command substitution to capture the xtrace); other
      times it was easiest to just turn off xtrace outright within the
      command substitution.
    
    src/cmd/ksh93/tests/math.sh:
    - Remove an obsolete 'fixme' note.

commit efd4858bfc8be8b9476079ca4f4010855b2e19a8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 14 16:45:26 2021 +0200

    tests/leaks.sh: increase Linux (standard malloc) tolerance
    
    There are intermittent false failures on the GitHub CI runners on
    the 1.0 branch, which is compiled with the OS's malloc (as opposed
    to ast vmalloc). Increase the byte tolerance for the leaks test
    from 4 to 6 bytes on Linux when compiling with standard malloc.

commit 841c6800bd049d45ec915293bdff2c79f97df595
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 14 16:31:19 2021 +0200

    Fix build on Ubuntu 18.04 ARMv7 (re: c0fdc4a3)
    
    hyenias writes, re the referenced commit:
    > This has caused my Ubuntu 18.04 ARMv7 to fail to compile.
    >
    > /dev/shm/ksh/src/lib/libast/hash/hashalloc.c: In function 'hashalloc':
    > /dev/shm/ksh/src/lib/libast/hash/hashalloc.c:156:11: error:
    > incompatible types when assigning to type 'va_list * {aka
    > __va_list *}' from type 'va_list {aka __va_list}'
    >     tmpval = va_listval(va_arg(ap, va_listarg));
    >            ^
    > In file included from ./ast_common.h:192:0,
    >                  from /dev/shm/ksh/src/lib/libast/include/ast_std.h:37,
    >                  from /dev/shm/ksh/src/lib/libast/include/ast.h:36,
    >                  from /dev/shm/ksh/src/lib/libast/hash/hashlib.h:34,
    >                  from /dev/shm/ksh/src/lib/libast/hash/hashalloc.c:33:
    > /dev/shm/ksh/src/lib/libast/hash/hashalloc.c:157:16: error:
    > incompatible type for argument 2 of '__builtin_va_copy'
    >     va_copy(ap, tmpval);
    >                 ^
    > /dev/shm/ksh/src/lib/libast/hash/hashalloc.c:157:16: note: expected
    > '__va_list' but argument is of type 'va_list * {aka __va_list *}'
    > mamake [lib/libast]: *** exit code 1 making hashalloc.o
    > mamake: *** exit code 1 making lib/libast
    > mamake: *** exit code 1 making all
    > package: make done  at Fri May 14 06:10:16 EDT 2021 in
    > /dev/shm/ksh/arch/linux.arm
    
    src/lib/libast/hash/hashalloc.c,
    src/lib/libast/string/tokscan.c:
    - Revert the FreeBSD fix.
    - Backport a conditional workaround for clang from ksh 93v- beta.

commit c0fdc4a380e257ed5d445e1366d4fb30c49b319c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 14 04:36:39 2021 +0200

    Fix build on macOS M1, FreeBSD powerpc64*, et al (?)
    
    On some systems, the following won't compile because of the way the
    macros are defined in the system headers:
    
            va_copy(ap, va_listval(va_arg(ap, va_listarg)));
    
    The error from clang is something like:
    
      .../hashalloc.c:155:16: error: non-const lvalue reference to type
      '__builtin_va_list' cannot bind to a temporary of type 'va_list'
      (aka 'char *')
         va_copy(ap, va_listval(va_arg(ap, va_listarg)));
         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      ./ast_common.h:200:23: note: expanded from macro 'va_listval'
      #define va_listval(p) (p)
                            ^
      .../include/stdarg.h:27:53: note: expanded from macro 'va_copy'
      #define va_copy(dest, src)  __builtin_va_copy(dest, src)
                                                          ^~~
      1 error generated.
      mamake [lib/libast]: *** exit code 1 making hashalloc.o
    
    This commit backports a FreeBSD build fix from:
    https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=255308
    
    Thanks to Chase <nicetrynsa@protonmail.ch> for the bug report.
    
    src/lib/libast/hash/hashalloc.c,
    src/lib/libast/string/tokscan.c:
    - Store va_listval() result in variable and pass that to va_copy().

commit 16e11fa6a7b099789a2a4ba0bec26bff974e300c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 13 09:30:28 2021 +0200

    Re-fix 'test -t 1' in command substitutions (re: 090b65e7)
    
    Since a command substitution no longer forks on non-permanently
    redirecting standard output within it for a specific command,
    test -t 1, [ -t 1 ], and [[ -t 1 ]] broke as follows:
    v=$(test -t 1 >/dev/tty && echo ok) did not assign 'ok' to v.
    This is because the assumption in tty_check() that standard output
    is never on a terminal in a non-forked command substitution, added
    in 55f0f8ce, was made invalid by 090b65e7.
    
    src/cmd/ksh93/edit/edit.c: tty_check():
    - Implement a new method. Return false if the file descriptor
      stream is of type SF_STRING, which is the case for non-forked
      command substitutions -- it means the sfio stream writes directly
      into a memory area. This can be checked with the sfset(3)
      function (see src/lib/libast/man/sfio.3). To avoid a segfault
      when accessing sh.sftable, we need to validate the FD first.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add the above reproducer.

commit 34a3de5167ab0437b486567392c60cc1c9d21be0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 13 02:20:50 2021 +0200

    Improve fix for not exporting readonly attribute (re: 7954855f)
    
    The bitmask of attributes to export was repeatedly defined in three
    different places, and that fix changed only one of them.
    
    src/cmd/ksh93/sh/name.c:
    - Single point of truth: define ATTR_TO_EXPORT macro with the
      bitmask of all the attributes to export (excluding NV_RDONLY).
    - attstore(), pushnam(), sh_envgen(): Use the ATTR_TO_EXPORT macro,
      removing superflous NV_RDONLY handling from the former two.

commit 8a953e82d686ed7021df1aac8c787926fd91f3ad
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue May 11 23:49:42 2021 -0700

    Fix math feature tests when compiling with tcc (re: 92f7ca54) (#303)
    
    Commit 92f7ca54 broke compilation with tcc on Linux. The following
    error would occur while compiling ksh with tcc:
    
      In file included from /home/johno/GitRepos/KornShell/ksh/src/cmd/ksh93/data/strdata.c:105:
      ./FEATURE/math:91: error: too many basic types
      mamake [cmd/ksh93]: *** exit code 1 making strdata.o
    
    The build failure is fixed by backporting the relevant bugfix from
    the 93v- version of iffe.
    
    src/cmd/INIT/iffe.sh:
    - Backport the 2013 iffe bugfix for the intrinsic function test to
      rule out type names (dated 2013-08-11 in the 93v- changelog).

commit a5768143406c60274599512fabb48b2c68e4159b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 12 04:39:44 2021 +0200

    Restore Solaris build after introducing 'noreturn' (re: c4f980eb)
    
    The build started failing on Solaris Studio cc when 'noreturn' was
    introduced, because the wrappers pass the -xc99 flag which sets the
    compiler to C99 mode. 'noreturn' is a C11 feature. The
    stdnoreturn.h header was correctly included but the compiler still
    threw a syntax error (long path abbreviated below):
    
    ".../stk.c", line 124: warning: _Noreturn is a keyword in ISO C11
    ".../stk.c", line 124: warning: old-style declaration or incorrect
                                                    type for: _Noreturn
    ".../stk.c", line 124: syntax error before or at: static
    
    src/cmd/INIT/cc.sol11.*:
    - Pass -std=c11 to cc instead of -xc99. At least on i386-64, this
      is sufficient to fix the build.
    
    README.md, src/cmd/ksh93/README.md:
    - Remove -xc99 from the Solaris build flags example as that is
      incompatible with -std=c11 (and was already redundant with the
      -xc99 in the wrappers).
    
    src/cmd/ksh93/tests/basic.sh:
    - Don't run a newly backported 93v- regression test on Solaris
      because it uses the 'join' command with process subsitutions;
      Solaris 11.4's join(1) hangs when trying to read from /dev/fd.
      This is not ksh's fault. (re: 59bacfd4)

commit 3545d171b9c0dd7a6281a4b5ebd557932dba48b5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 11 18:59:38 2021 +0200

    tests/locale.sh: skip SJIS test on non-SJIS locale (re: c2cb0eae)
    
    On Fedora, this regression test failure occurs:
    
            locale.sh[84]: 'read' doesn't skip multibyte input
                                    correctly (ja_JP.ujis, \x95\x5c)
    
    This is a problem with the test; this Shift-JIS specific test
    should not be run in a non-Shift-JIS locale. So this commit skips
    it unless the locale string ends in '.SJIS' (case insensitive).
    
    It also adds cleanup for the 'chr' variable's special attributes
    in case that name is ever going to be used in another test.

commit 954dc44630ff2cc02ee4cae1f561827051c3834b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 11 01:45:39 2021 +0200

    build system: do not look for nmake in $PATH
    
    nmake was removed long ago (2940b3f5) and so were the outdated
    Makefiles (6cc2f6a0). However, the build system still looked for an
    AT&T nmake in $PATH. If a user had it installed, the build would
    fail as the system tried to use it.
    
    https://groups.google.com/g/korn-shell/c/2VK8kS0_VhA/m/-Rlnv7PRAgAJ
    
    bin/package, src/cmd/INIT/package.sh:
    - Remove all the code supporting nmake.
    - Make 'bin/package test' work by simply exec'ing bin/shtests.
    
    src/cmd/INIT/Mamfile:
    - Do not install *.mk nmake support files.
    
    lib/package/*.mk, src/cmd/INIT/*.mk:
    - nmake support files removed.

commit 2b1b96393ef81c0b069cbda2f553138f8c03d7c2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 11 01:39:19 2021 +0200

    manual page: misc tweaks
    
    src/cmd/ksh93/sh.1:
    - The POSIX option description still said that attributes "such as
      integer and readonly" aren't imported from the environment. But
      as of 7954855f, the readonly attribute is never imported or
      exported. So change that to another example (left/right justify).
    - Tweak idiosyncratic use of hyphens.
    - be inputted => be input.

commit a5d2bd3384eeef70027566012edf2b77ed0babd4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 11 01:37:29 2021 +0200

    include/version.h: 1.1.0-alpha version bump for master branch

commit 246062ff0bc58a98332c3a2fb342766209dcc852
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 10 18:40:44 2021 +0200

    Release 1.0.0-beta.1
    
    In May 2020, when every KornShell (ksh93) development project was
    abandoned, development was rebooted in a new fork based on the last
    stable AT&T version: ksh 93u+. Now, one year and hundreds of bug
    fixes later, the first beta version is ready, and KornShell lives
    again. This new fork is called ksh 93u+m as a permanent nod to its
    origin; a standard semantic version number is added starting at
    1.0.0-beta.1. Please test the beta and report any bugs you find,
    or help us fix known bugs.

commit 92f7ca54237aca31647ff446607099cdeab5b8a7
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Fri May 7 23:43:37 2021 -0400

    Back port ksh93v- float, int, and exp10 changes from math.tab (#299)
    
    src/cmd/ksh93/data/math.tab:
    - Added exp10().
    - Remove int() as being an alias to floor().
    - Created entries for local float() and local int() which are
      defined in features/math.sh.
    
    src/cmd/ksh93/features/math.sh:
    - Backport floor() and int() related code from ksh93v-.
    
    src/cmd/ksh93/sh.1:
    - Sync man page to math.tab's potential functions.

commit 6b3805724dc80fa34c6ab4bb9c822386f866ca63
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 7 14:43:19 2021 +0100

    Re-obtain PID when optimising ( simple_command & ) (re: af6a32d1)
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): TCOM:
    - In the referenced commit I'd accidentally deleted this line:
        shgd->current_pid = getpid();
      from the routine to optimise the ( simple_command & ) case.
      This resulted in the following regression test failure on
      ARM boxes:
        variables.sh[71]: Test 4: $RANDOM seed in ( simple_command & )
      The cause was that the current PID shgd->current_pid, which is
      factored into the seed, was not updated before reseeding.
      Apparently the system clock on ARM systems is not fine-grained
      enough to compensate.

commit 2758e5db1960439e13732718808d1ed3ab34ed35
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 7 06:36:14 2021 +0100

    Update #pragmas to make clang be quiet about historic practice
    
    This adds a #pragma to disable -Wdeprecated-register* on newer
    versions of clang. We could remove all use of the register keyword
    instead, as modern compilers ignore it. But it's not harmful, and
    for the time being I prefer not to do doing any reformatting or
    changing the historic character of this code base.
    
    The #pragmas are removed from src/lib/libast/include/ast.h, because
    they're better placed in src/lib/libast/features/common which
    generates ast_common.h which is included by everything.
    
    * https://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-register

commit 38654f09462091cd759e5b686cca61004cb38a63
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 5 03:51:40 2021 +0100

    tests/builtins.sh: fix disabled 'read -s' test
    
    src/cmd/ksh93/tests/builtins.sh:
    - An original AT&T test for 'read -s' was disabled and marked
      FIXME. Fix the invalid invocation and check that 'read -s'
      actually writes to the history file.
    - Remove a temporary 'command -p ls' debug test that I accidentally
      committed (re: a197b042).

commit 655c4be1c1c4279b96a4af32c7ca704b06c21c74
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Tue May 4 22:29:19 2021 -0400

    Correct regression for compound arithmetic expressions (re: 642a1053) (#297)
    
    I did not realize that lvalue->nosub and lvalue->sub variables are
    not reset when another assignment occurs later down the line.
    Example: (( arr[0][1]+=1, arr[2]=7 ))
    
    src/cmd/ksh93/sh/arith.c: arith():
    - For assignment operations, reset lvalue's nosub and sub variables
      so the target for the next assignment is not redirected.
    
    src/cmd/ksh93/tests/arrays2.sh:
    - Add in a few regression tests that utilize compound arithmetic
      expressions having at least an assignment operation (+=) followed
      by a normal assignment (=).

commit a197b0427afbc29a0a3637342f03dba6b7a7a35a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 5 02:42:45 2021 +0100

    Fix two more 'command' bugs
    
    BUG 1: Though 'command' is specified/documented as a regular
    builtin, preceding assignments survive the invocation (as with
    special or declaration builtins) if 'command' has no command
    arguments in these cases:
    
    $ foo=wrong1 command; echo $foo
    wrong1
    $ foo=wrong2 command -p; echo $foo
    wrong2
    $ foo=wrong3 command -x; echo $foo
    wrong3
    
    Analysis: sh_exec(), case TCOM (simple command), contains the
    following loop that skips over 'command' prefixes, preparsing any
    options and remembering the offset in the 'command' variable:
    
    src/cmd/ksh93/sh/xec.c
    1059 while(np==SYSCOMMAND || !np && com0
         && nv_search(com0,shp->fun_tree,0)==SYSCOMMAND)
    1060 {
    1061         register int n = b_command(0,com,&shp->bltindata);
    1062         if(n==0)
    1063                 break;
    1064         command += n;
    1065         np = 0;
    1066         if(!(com0= *(com+=n)))
    1067                 break;
    1068         np = nv_bfsearch(com0, shp->bltin_tree, &nq, &cp);
    1069 }
    
    This skipping is not done if the preliminary b_command() call on
    line 1061 (with argc==0) returns zero. This is currently the case
    for command -v/-V, so that 'command' is treated as a plain and
    regular builtin for those options.
    
    The cause of the bug is that this skipping is even done if
    'command' has no arguments. So something like 'foo=bar command' is
    treated as simply 'foo=bar', which of course survives.
    
    So the fix is for b_command() to return zero if there are no
    arguments. Then b_command() itself needs changing to not error out
    on the second/main b_command() call if there are no arguments.
    
    src/cmd/ksh93/bltins/whence.c: b_command():
    - When called with argc==0, return a zero offset not just for -v
      (X_FLAG) or -V (V_FLAG), but also if there are no arguments left
      (!*argv) after parsing options.
    - When called with argc>0, do not issue a usage error if there are
      no arguments, but instead return status 0 (or, if -v/-V was given,
      status 2 which was the status of the previous usage message).
      This way, 'command -v $emptyvar' now also works as you'd expect.
    
    BUG 2: 'command -p' sometimes failed after executing certain loops.
    
    src/cmd/ksh93/sh/path.c: defpath_init():
    - astconf() returns a pointer to memory that may be overwritten
      later, so duplicate the string returned. Backported from ksh2020.
      (re: f485fe0f, aa4669ad, <https://github.com/att/ast/issues/959>)
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update the test for BUG_CMDSPASGN to check every variant of
      'command' (all options and none; invoking/querying all kinds of
      command and none) with a preceding assignment. (re: fae8862c)
      This also covers bug 2 as 'command -p' was failing on macOS prior
      to the fix due to a loop executed earlier in another test.

commit 143ff27a9125d2807e0575a722b07795ce777f62
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 4 05:10:32 2021 +0100

    emacs: fix keys w/ repeat parameters repeating extra (re: 29b11bba)
    
    @JohnoKing writes:
    > In emacs mode, using Alt+D or Alt+H with a repeat parameter
    > results in the deletion of extra characters. Reproducer:
    >
    > $ set -o emacs
    > $ foo bar delete add   # <Ctrl+A> <ESC+3+Alt+D>
    > $ d  # Should be ' add'
    >
    > $ foo bar delete add   # <ESC+3+Alt+H>
    > $ f  # Should be 'foo '
    >
    > [...] this bug also affects the Delete and Arrow keys [...].
    > Reproducer:
    >
    > $ test_string <Ctrl+A> <ESC+3+Delete>
    >       # This will delete all of 'test', which is four characters
    > $ test_string <Ctrl+A> <ESC+4+Right Arrow>
    >       # This should move the cursor to '_', not 's'
    
    src/cmd/ksh93/edit/emacs.c: ed_emacsread():
    - Revert part of 29b11bba: once again set 'count' to
      'vt220_save_repeat' instead of adding the value.
    - do_escape: If the escape() function (which handles both ESC
      repeat counts and commands like ESC d and ESC h) returns a repeat
      count, do not use the saved repeat count for v220 sequences.
    
    src/cmd/ksh93/tests/pty.sh:
    - Test the four reproducers above.
    
    Fixes: https://github.com/ksh93/ksh/issues/292

commit da4bf85f27744d2ab90fc13602ad8e6bba63e16e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 4 02:37:49 2021 +0100

    COMPATIBILITY: update to 93u+ entry re: 5ed9ffd6, 9f2066f1

commit 642a1053518a1161f9dec1c86759d52efeb563da
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Mon May 3 22:13:14 2021 -0400

    Fix arithmetic assignment operations for multidimensional indexed arrays (#296)
    
    This PR corrects #168 for indexed arrays having more than one
    level. Turns out ksh was only keeping track of the subscript number
    for assignment in lvalue's nosub variable. By saving the actual
    subscript reference, the result can be assigned to its proper
    destination instead of putting the result into the last looked
    value or subscript location.
    
    src/cmd/ksh93/include/streval.h: struct lval:
    - Create a new pointer named sub to hold the reference that nosub
      describes.
    
    src/cmd/ksh93/sh/arith.c: arith():
    - Adjust LOOKUP: for lvalue ARITH_ASSIGNOP operations on indexed
      arrays to save the np of the destination subscript for later use.
    - Adjust ASSIGN: to act when lvalue's nosub > 0 which happens as
      the last step in the arithmetic parsing loop for assignment
      operations. Only indexed arrays will have a nosub value > 0. All
      others have a nosub of 0 unless they are involved in a unary
      operation (++, --) which sets nosub to -1. All said in the
      context of assignment operations like (( arr[0][1] += 1 )).
    
    src/cmd/ksh93/sh/streval.c:
    - Initialize the new sub pointer to 0.
    
    src/cmd/ksh93/tests/arrays2.sh:
    - Created a few multidimensional indexed array tests for assignment
      operations like += as an example.
    
    Resolves: https://github.com/ksh93/ksh/issues/168

commit d309d604e7533df2ecd25db661b3c57d2349eefe
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 4 00:34:06 2021 +0100

    POSIX: 'command': don't disable declaration proprts (re: b9d10c5a)
    
    Following the resolution of Austin Group bug 1393[*] that is set to
    be included in the next version of the POSIX standard, the
    'command' prefix in POSIX mode (set -o posix) no longer disables
    the declaration properties of declaration built-ins.
    [*] https://austingroupbugs.net/view.php?id=1393
    
    src/cmd/ksh93/sh/parse.c: lex():
    - Skip the 'command' prefix even in POSIX mode so that any
      declaration commands prefixed by it are treated as such in xec.c
      (sh_exec()).
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - The foregoing change reintroduced a variant of BUG_CMDSPEXIT: the
      shell exits on something like 'command export readonlyvar=foo'.
      This now fixes that bug for both POSIX and non-POSIX mode. When
      calling nv_setlist() to process true shell assignments, and there
      is a 'command' prefix, push a shell context and use sigsetjmp to
      intercept any errors in assignments and stop the shell exiting.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Borrow the BUG_CMDSPEXIT regression test from modernish and adapt
      it for ksh. (I'm the author so yes, I can do this.) Original:
      https://github.com/modernish/modernish/blob/ae8fe9c3/lib/modernish/tst/builtin.t#L80-L109

commit 1a1e3709c2da21f8c8b19433ceb452aaf5e9bcee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 21:51:03 2021 +0100

    tests/subshell.sh: replace use of unportable seq command

commit 7a2d3564b68be537d3f68188e3f0c5df2b45dd13
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 18:27:44 2021 +0100

    emacs/vi: Fix <Tab> behaviour after command substitution
    
    Tab completion in emacs and vi wrongly parses and executes command
    substitutions. Example reproducers:
    
      $ $(~)<Tab>           # Result:
      $ $(~)ksh[1]: /home/johno: cannot execute [Is a directory]
    
      $ $(~ksh)<Tab>        # Result:
      $ $(~ksh)ksh: /home/johno/GitRepos/KornShell/ksh: cannot execute [Is a directory]
    
      $ $(echo true)<Tab>   # Result:
      $ /usr/bin/true       # or just 'true' -- it's unpredictable
    
    In addition, backtick command substitutions had the following bug:
    
      $ `echo hi`<Tab>      # Result:
      $ `echo hi`ksh: line 1: BUG_BRACQUOT_test.sh: not found
    
    (where BUG_BRACQUOT_test.sh happens to be lexically the
    first-listed file in my ksh development working directory).
    
    There's also a crash associated with this due to an access beyond
    buffer boundaries, which is only triggered on some systems (macOS
    included).
    
    src/cmd/ksh93/edit/completion.c:
    - find_begin():
      * When finding the beginning of a command substitution and the
        last character is ')', do not increase the character pointer
        cp. Increasing it caused the condition 'if(c && c==endchar)' in
        the 'default:' block to be true, causing 'return(xp);' to be
        executed, which returns a pointer the beginning of the command
        substitution to ed_expand() on line 290, so that ed_expand()
        eventually executes the command substitution with the
        sh_argbuild() call on line 349. After deleting this 'else
        cp++', that statement 'if(c && c==endchar) return(xp);' is not
        executed and `find_begin()` returns the null pointer, which
        avoids anything being executed. Thanks to @JohnoKing:
        https://github.com/ksh93/ksh/issues/268#issuecomment-817249164
      * Add code for properly skipping over backtick-style command
        substitutions, based on the $( ) code.
    - ed_expand(): Avoid out[-1] reading one byte to the left of
      outbuff by first checking that out>outbuff. Thanks to @JohnoKing
      for using ASan to find the location of the crash:
      https://github.com/ksh93/ksh/issues/268#issuecomment-825574885
    
    src/cmd/ksh93/tests/pty.sh:
    - Test for the bugs detailed above.
    
    Resolves: https://github.com/ksh93/ksh/issues/268

commit 33269cae615c913592e776276b480bf1d722ff07
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 18:12:39 2021 +0100

    tests/variables.sh: fix ( echo $RANDOM & ) test (re: af6a32d1)
    
    On slower systems it could fail with an arithmetic syntax error
    because the output was verified before it had been written.
    
    Also make another test xtrace-proof.

commit 6d54faf9f5fa2e0712a4a59d9081b50ea44e2431
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 16:55:42 2021 +0100

    tests/leaks.sh: fix intermittent fails on Gentoo (re: 005d38f41)
    
    This applies when ksh is compiled with standard malloc.
    
    Apparently, 1024 iterations is not enough on Gentoo Linux i386, at
    least not when running the full test suite. The leak tests fail
    intermittently and different tests fail each time, but always with
    a leak of exactly 36864 bytes for each failing test. So those
    failures are clearly spurious. Doubling the number of iterations
    seems to make them go away.

commit dd5455ac5f76474d4fca8ab042f5d1a4d7e63950
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 16:36:39 2021 +0100

    tests/io.sh: fix spurious failure on Gentoo i386 (re: c4f980eb)

commit d5b94a3ff8c47c746d9710d7eb4b96654ff95678
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun May 2 22:52:27 2021 -0700

    Fix some bugs in the regression tests and add more regression tests (#295)
    
    src/cmd/ksh93/tests/{basic.sh,builtins.sh,shtests}:
    - Redirect error output from the ulimit builtin to silence irrelevant
      errors in the regression tests (these errors may occur when a
      command such as 'ulimit -t 4' is run before the regression tests).
    - Shellquote the error messages from the getconf regression tests.
    
    src/cmd/ksh93/tests/{arrays,io,variables}.sh:
    - Backport the ksh2020 regression tests for the following bugs:
      https://github.com/att/ast/issues/23
      https://github.com/att/ast/issues/203
      https://github.com/att/ast/issues/472
      https://github.com/att/ast/issues/492
    - Minor fix to POSIX mode regression tests in ksh93v-. In ksh93v-,
      [[ -o ?posix ]] doesn't return an error (because it's implemented
      in the bash mode). However, 'set -o posix' will fail in ksh93v-
      if it's not in bash compatibility mode, which causes this test
      script to exit prematurely.
    
    src/cmd/ksh93/tests/{basic,pty}.sh:
    - Add test for https://github.com/att/ast/issues/1461
    - The ksh2020 fix for [ -t 1 ] in non-forking command substitutions
      caused the following bug in interactive shells:
        $ ( [ -t 1 ]; echo $? )
        1  # Always fails
      To avoid introducing this bug, this commit adds a regression
      test for it.
    
    src/cmd/ksh93/tests/functions.sh:
    - Add test for https://github.com/att/ast/issues/1160
      Put the test to the start of functions.sh (if it's at the end
      of the script, it refuses to fail under ksh2020). Output from
      this regression test when run against ksh2020:
        functions.sh[46]: eval'ing function dumps function body to
        stdout (got $' { eval "bar() { FAILURE; }"; }\n { FAILURE; }')

commit 5ed4c71fca25b3b035561c3cefeb8109839c35e9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 05:55:47 2021 +0100

    Fix regression caused by ${var:-'{}'} fix (re: f31e3687)
    
    The regression is:
    
      quoting.sh[189]: expansion of "{q:+'}" not correct when q unset
    
    The failure was that, for unset q, "${q:+'}q${q:+'}" yielded empty
    and not 'q'. This is because the single quotes within the double
    quotes were erroneously parsed as meaningful.
    
    The originally used ST_QUOTE state table (see data/lexstates.c),
    where no quote character has any special meaning, was for avoiding
    this problem.
    
    The newly introduced ST_MOD1 state table is a copy of ST_QUOTE
    except the ' has been given its special meaning back. We need this
    to fix #290, but only for unquoted expansions.
    
    So we need to go back to using ST_QUOTE if the string is quoted
    (mp->quote) and we're not parsing a substitution that uses patterns
    where quotes are significant (newops, ST_MOD2), i.e., only for
    old-style ST_MOD1 operators.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - When the ${var<OP>string} expansion is quoted, and of an old
      (S_MOD1) type, then use the ST_QUOTE state table to skip over it
      instead of the new ST_MOD1 one.

commit af6a32d14f3a9c732bf494bd411f205c5142f634
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 04:03:46 2021 +0100

    Fix $RANDOM to act consistently in subshells (#294)
    
    This fixes the following:
    1. Using $RANDOM in a virtual/non-forked subshell no longer
       influences the reproducible $RANDOM sequence in the parent
       environment.
    2. When invoking a subshell $RANDOM is now re-seeded (as mksh and
       bash do) so that invocations in repeated subshells (including
       forked subshells) longer produce identical sequences by default.
    3. Program flow corruption that occurred in scripts on executing
       ( ( simple_command & ) ).
    
    src/cmd/ksh93/include/variables.h:
    - Move 'struct rand' here as it will be needed in subshell.c. Add
      rand_seed member to save the pseudorandom generator seed. Remove
      the pointer to the shell state as it's redundant.
    
    src/cmd/ksh93/sh/init.c:
    - put_rand(): Store given seed in rand_seed while calling srand().
      No longer pointlessly limit the number of possible seeds with the
      RANDMASK bitmask (that mask is to limit the values to 0-32767,
      it should not limit the number of possible sequences to 32768).
    - nget_rand(): Instead of using rand(), use rand_r() to update the
      random_seed value. This makes it possible to save/restore the
      current seed of the pseudorandom generator.
    - Add sh_reseed_rand() function that reseeds the pseudorandom
      generator by calling srand() with a bitwise-xor combination of
      the current PID, the current time with a granularity of 1/10000
      seconds, and a sequence number that is increased on each
      invocation.
    - nv_init(): Set the initial seed using sh_reseed_rand() here
      instead of in sh_main(), as this is where the other struct rand
      members are initialised.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Remove the srand() call that was replaced by the sh_reseed_rand()
      call in init.c.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Upon entering a virtual subshell, save the current $RANDOM seed
      and state, then reseed $RANDOM for the subshell.
    - Upon exiting a virtual subshell, restore $RANDOM seed and state
      and reseed the generator using srand() with the restored seed.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - When optimizing out a subshell that is the last command, still
      act like a subshell: reseed $RANDOM and increase ${.sh.subshell}.
    - Fix a separate bug discovered while implementing this. Do not
      optimize '( simple_command & )' when in a virtual subshell; doing
      this causes program flow corruption.
    - When optimizing '( simple_command & )', also reseed $RANDOM and
      increment ${.sh.subshell}.
    
    src/cmd/ksh93/tests/subshell.sh,
    src/cmd/ksh93/tests/variables.sh:
    - Add various tests for all of the above.
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Resolves: https://github.com/ksh93/ksh/issues/285

commit f31e3687952a1110f0f1fb3b429b68a30d1ef9b4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon May 3 02:59:09 2021 +0100

    Fix remaining bug in ${var:-'{}'} (re: d087b031)
    
    The following problems remained:
    
    $ var=x; echo ${var:-'{}'}
    x}
    $ var=; echo ${var:+'{}'}
    }
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Use the new ST_MOD1 state table to skip over ${var-'foo'}, etc.
      instead of ST_QUOTE. In ST_MOD1 the ' is categorised as S_LIT
      which causes the single quotes to be skipped over correctly.
      See d087b031 for more info.
    
    src/cmd/ksh93/tests/quoting2.sh:
    - Add tests for this remaining bug.
    - Make the new test xtrace-proof.
    
    Resolves: https://github.com/ksh93/ksh/issues/290 (again)

commit 1aec9b06dd0de6c6796702cd128fd796ec7b1c09
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat May 1 20:06:30 2021 -0700

    Fix more bugs that occur when enabling ASan (#293)
    
    src/cmd/ksh93/{bltins/typeset,sh/name,sh/nvtree,sh/nvtype}.c:
    - Replace more instances of memcmp with strncmp to fix
      heap-buffer-overflow errors when running the regression tests
      with ASan enabled.
    
    src/cmd/ksh93/edit/vi.c:
    - Fix an invalid dereference of the 'p' pointer to fix a crash in
      vi mode when entering a comment in the command history. This
      bugfix was backported from ksh2020:
      https://github.com/att/ast/issues/798
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for the vi mode crash.

commit 88a1f3d661f35282a1552abe74ea70ee24cd4aa9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 1 00:47:39 2021 +0100

    Fork before entering shared-state command substitution
    
    The code contains various checks to see if a subshell needs to
    fork, like this one in the ulimit builtin:
    
            if(shp->subshell && !shp->subshare)
                    sh_subfork();
    
    All checks of this form are fatally broken, as each one of them
    causes shared-state command substitutions to ignore parent virtual
    subshells.
    
    Currently the only feasible way to fix this is to fork a virtual
    subshell before executing a shared-state command substitution in
    it. In the long term I think shared-state command substitutions
    should probably be redesigned to disassociate them completely from
    the virtual subshell mechanism.
    
    src/cmd/ksh93/sh/macro.c: comsubst():
    - If we're in a non-subshare virtual subshell, fork it before
      entering a type 2 (subshare) command substitution.
    
    src/cmd/ksh93/sh/subshell.c:
    - sh_assignok(): Remove subshare fix from 911d6b06 as it's
      redundant now that the parent of a subshare is never a virtual
      subshell. Go back to not doing anything if the current "subshell"
      is a subshare.
    - sh_subtracktree(), sh_subfuntree(): Similarly, remove the
      now-redundant subshare fixes from 13c57e4b.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Fix a separate bug: only fork a virtual subshell before running a
      background job if that "subshell" is not a subshare.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add test for bug fixed in xec.c.
    - Add tests for 'ulimit', 'builtin' and 'exec' run in subshare
      within subshell -- all commands that use checks of the form
      'if(sh.subshell && !sh.subshare) sh_subfork();'.
    
    Resolves: https://github.com/ksh93/ksh/issues/289

commit 72fe631b2f6c10c7cb87c5f1f4b70635c477b455
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 1 00:43:12 2021 +0100

    typeset: only run sh_assignok() for variables (re: a2f13c19)
    
    src/cmd/ksh93/bltins/typeset.c:
    - setall(): Only run sh_assignok() if troot points to the variable
      tree. For instance, it's pointless to run it for an alias.
    - Remove vestigial SHOPT_BSH code. The ast-open-history repo shows
      that earlier SHOPT_BSH code was removed on 2008-06-02 and
      2005-05-22. This may have been experimental code for increased
      compatibility with the ancient Bourne shell. There was never any
      documentation.

commit 7439e3dffeb6a4e9f29df7204b5cc215b4962c95
Author: Govind Kamat <govind_kamat@yahoo.com>
Date:   Fri Apr 30 11:45:50 2021 -0700

    Parse quotes when extracting words from command history (#291)
    
    This avoids splitting on quoted whitespace when extracting words
    from the command history using the emacs M-. or vi _ command.
    
    Example: if the prior command is
    
    $ ls Stairway\ To\ Heaven.mp3
    
    then, M-. in Emacs editing mode (and _ in vi mode) now inserts
    Stairway\ To\ Heaven.mp3 instead of Heaven.mp3. The behavior is
    similar for 'Stairway To Heaven.mp3' and "Stairway To Heaven.mp3".
    
    src/cmd/ksh93/edit/history.c: hist_word():
    - Skip over single-quoted and double-quoted strings and
      backslash-escaped characters.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add regression test for this feature in vi mode. Since emacs and
      vi both use the same code for this, that should be good enough.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit d087b031f02ecf9104cce043017ede4e37e9e655
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 30 05:10:04 2021 +0100

    Fix single quotes in expansion operator string (re: 5ed9ffd6)
    
    The referenced commit introduced the following bug:
    
    > The closing quote does not appear to be registering during the
    > parse of the following:
    >
    >       echo ${var:+'{}'}
    >
    > Within a script, this will result in:
    >
    >       syntax error at line 1: `'' unmatched
    
    src/cmd/ksh93/data/lexstates.c,
    src/cmd/ksh93/include/lexstates.h:
    - Add new ST_MOD1 state table that is a copy of ST_QUOTE, but adds
      a special meaning (ST_LIT) for the single quote (position 39).
    
    src/cmd/ksh93/sh/lex.c: sh_lex():
    - For parameter expansion operators with old-style quoting
      (S_MOD1), use the new ST_MOD1 state table instead of ST_QUOTE.
      This causes single quotes within them to be processed properly.
    
    src/cmd/ksh93/tests/quoting2.sh:
    - Add tests.
    
    Thanks to @gkamat for the bug report.
    Resolves: https://github.com/ksh93/ksh/issues/290

commit 090b65e79bd9e54edd2a6bfc67e3706850a5b5f9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Apr 26 18:09:36 2021 +0100

    Fix fork after redirecting stdout in subshare (re: 500757d7)
    
    Previously, command substitutions executed as virtual subshells
    were always forked if any command was run within them that
    redireceted standard output, even if the redirection was local to
    that command.
    
    Commit 500757d7 removed the check for a shared-state command
    substitution (subshare), so introduced a bug where even that would
    fork, causing it to stop sharing its state.
    
    We can further improve on that fix by only forking if the
    redirection is permanent as with `exec` or `redirect`. There should
    be no need to do that if the redirection is local to a command run
    within the command substitution, as the file descriptor is restored
    when that command finishes, which is still within the command
    substitution.
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - Only fork upon redirecting stdout if the virtual subshell is a
      command substitution, and if the redirection is permanent
      (flag==1 or flag==2).

commit 2aad3cab06dbc28645bb2df4bcea4bfd4d8bfec4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Apr 25 23:52:40 2021 +0100

    Add ksh 93u+m contributors notice to 964 copyright headers

commit 1d9093e6032136db90de0ee0ba53ed68282e79e6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Apr 25 16:12:29 2021 -0700

    Add support for process substitutions to the deparser (#288)
    
    Like tdump() and trestore() before commit 32d1abb1, sh_deparse() fails
    to handle process substitutions correctly. This limitation of the shell
    deparser is rather minor since it's unused. However, seeing as the
    deparser was left in the code base intentionally it should at least
    function properly.
    
    src/cmd/ksh93/sh/deparse.c:
    - Add a PROCSUBST flag for handling process substitutions in
      sh_deparse().
    - If we're handling a process substitution, add an ending ')'
      without an extra newline.
    - Avoid adding an extra ' &' to commands inside of a process
      substitution. An extra ' &' is only added if the FAMP and FINT
      flags are set, which indicates the command was spawned as a separate
      job with '&'.
    - Add process substitution handling to 'p_redirect' by calling p_tree()
      when encountering a process substitution.

commit 295cce2c6d1ab41c5388b07fb545a0d5060dc73f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 24 16:27:29 2021 +0100

    Improve fix for 'unset -f' in sub-subshell (re: 07faf384, 13c57e4b)
    
    src/cmd/ksh93/bltins/typeset.c:
    - Removing the nv_search() call altogether was actually not
      neccessary, I was just searching the wrong tree: instead of
      sh.fun_base, simply search the current sh.fun_tree which has a
      view to all the layered parent subshell copes. It is not going to
      find it in the current subshell tree but will find it in one of
      the parent trees if it exists. The cost of an unnecessary dummy
      is negligible, but so is the cost of this search, and doing it is
      more correct.

commit 24b7fcb7718dde909fb7fc62d1fd7d39a936fe0a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Apr 24 13:25:45 2021 -0700

    Don't detect unset functions with whence (re: 13c57e4b) (#287)
    
    src/cmd/ksh93/bltins/whence.c:
    - The previous commit that fixed 'unset -f' in virtual subshells left
      one bug. The type builtin (or 'whence -v') could still find the unset
      function in virtual subshells:
        $ foo() { echo foo; }
        $ (unset -f foo; type foo)
        foo is an undefined function
      To fix this bug, avoid detecting functions in the whence builtin
      unless they have the NV_FUNCTION flag.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add a regression test for using 'type' on a function unset inside of
      a virtual subshell.

commit 07faf38425069f6ed05bdbc8f94bcfda6132e371
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 24 12:41:40 2021 +0100

    Fix 'unset -f' in sub-subshell (re: 13c57e4b)
    
    A bug introduced in the previous commit caused 'unset -f' in a
    subshell of a subshell to fail to unset a function created in a
    parent subshell. Reproducer:
    
    $ ( f2() { echo WRONG; }; ( unset -f f2; f2 ) )
    WRONG
    
    src/cmd/ksh93/bltins/typeset.c: unall():
    - Do not nv_search() in sh.fun_base before setting the dummy node
      that marks the function as unset in this subshell. That search
      only reaches the base tree and not any of its subtrees. Setting
      the dummy unconditionally is not harmful; the cost is negligible.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add test for the bug.

commit 13c57e4b58fe38e3d5abb8219e79a1b13b78476e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 24 05:54:49 2021 +0100

    Fix 'unset -f' to work in subshells without forking (re: 047cb330)
    
    This commit implements unsetting functions in virtual subshells,
    removing the need for the forking workaround. This is done by
    either invalidating the function found in the current subshell
    function tree by unsetting its NV_FUNCTION attribute bits (which
    will cause sh_exec() to skip it) or, if the function exists in a
    parent shell, by creating an empty dummy subshell node in the
    current function tree without that attribute.
    
    As a beneficial side effect, it seems that bug 228 (unset -f fails
    in forked subshells if a function is defined before forking) is now
    also fixed.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/init.c:
    - Add sh.fun_base for a saved pointer to the main shell's function
      tree for checking when in a subshell, analogous to sh.var_base.
    
    src/cmd/ksh93/bltins/typeset.c: unall():
    - Remove the fork workaround.
    - When unsetting a function found in the current function tree
      (troot) and that tree is not sh.var_base (which checks if we're
      in a virtual subshell in a way that handles shared-state command
      substitutions correctly), then do not delete the function but
      invalidate it by unsetting its NV_FUNCTION attribute bits.
    - When unsetting a function not found in the current function tree,
      search for it in sh.fun_base and if found, add an empty dummy
      node to mask the parent shell environment's function. The dummy
      node will not have NV_FUNCTION set, so sh_exec() will skip it.
    
    src/cmd/ksh93/sh/subshell.c:
    - sh_subfuntree(): For 'unset -f' to work correctly with
      shared-state command substitutions (subshares), this function
      needs a fix similar to the one applied to sh_assignok() for
      variables in commit 911d6b06. Walk up on the subshells tree until
      we find a non-subshare.
    - sh_subtracktree(): Apply the same fix for the hash table.
    - Remove table_unset() and incorporate an updated version of its
      code in sh_subshell(). As of ec888867, this function was only
      used to clean up the subshell function table as the alias table
      no longer exists.
    - sh_subshell():
      * Simplify the loop to free the subshell hash table.
      * Add table_unset() code, slightly refactored for readability.
        Treat dummy nodes now created by unall() separately to avoid a
        memory leak; they must be nv_delete()d without passing the
        NV_FUNCTION bits. For non-dummy nodes, turn on the NV_FUNCTION
        attribute in case they were invalidated by unall(); this is
        needed for _nv_unset() to free the function definition.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Update the test for multiple levels of subshell functions to test
      a subshare as well. While we're add it, add a very similar test
      for multiple levels of subshell variables that was missing.
    - Add @JohnoKing's reproducer from #228.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add leak tests for unsetting functions in a virtual subshell.
      Test both the simple unset case (unall() creates a dummy node)
      and the define/unset case (unall() invalidates existing node).
    
    Resolves: https://github.com/ksh93/ksh/issues/228

commit 086d504393f3edc528013ab117376168498f926a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Apr 23 14:02:30 2021 -0700

    Lots of man page fixes and some other minor fixes (#284)
    
    Noteworthy changes:
    - The man pages have been updated to fix a ton of instances of
      runaway underlining (this was done with `sed -i 's/\\f5/\\f3/g'`
      commands). This commit dramatically increased in size because
      of this change.
    - The documentation for spawnveg(3) has been extended with
      information about its usage of posix_spawn(3) and vfork(2).
    - The documentation for tmfmt(3) has been updated with the changes
      previously made to the man pages for the printf and date builtins
      (though the latter builtin is disabled by default).
    - The shell's tracked alias tree (hash table) is now documented in
      the shell(3) man page.
    - Removed the commented out regression test for an ERRNO variable
      as the COMPATIBILITY file states it was removed in ksh93.

commit 2c22ace1e6200e341c6dc018c92a2021bcb06ec2
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 22 11:16:25 2021 -0700

    Fix LINENO after unsetting it a virtual subshell (#283)
    
    There is a TODO note in variables.sh that notes the value of LINENO
    is wrong after a virtual subshell. The following script should
    print '6', but the bug causes it to print '1' instead:
      $ cat /tmp/lineno
      #!/bin/ksh
      (
          unset LINENO
          :
      )
      echo $LINENO
    
    This bug started to occur after the bugfix applied in 7b994b6a.
    However, that commit is not where the cause of bug was (when that
    bugfix is applied to ksh versions 2008-07-25 through 2012-01-01,
    $LINENO works fine). Rather, the cause of this bug was introduced
    in 93u+ 2012-02-29. In that version, the mp->nvfun pointer was only
    copied from np->nvfun if the variable can be freed from memory.
    This is what caused 7b994b6a to break $LINENO in subshells, so to
    fix this bug the mp->nvfun and np->nvfun must point to the same
    object, even when the variable isn't freed from memory.
    
    src/cmd/ksh93/sh/subshell.c: nv_restore():
    - Always copy the np->nvfun pointer to mp->nvfun. To prevent
      crashes, the value of np->nvfun->nofree is set to the value given
      by the nofree variable, which is set before _nv_unset. See also
      commit 7e7f1372, which fixed a crash that happened because
      _nv_unset discards the NV_NOFREE flag.
    
    src/cmd/ksh93/tests/variables.sh:
    - Remove the workaround for LINENO after a virtual subshell.
    - Add a regression test for the value of LINENO when unset in a
      virtual subshell, then used after the subshell. Note that before
      commit 997ad43b LINENO's value was corrupted after being unset in
      a subshell, so the test checks for corruption of the LINENO
      variable (in prior commits LINENO was set to '49' because of the
      previous bug).

commit 01c01fe8f604b951a2010e4b053c340e208615a1
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 22 10:13:12 2021 -0700

    Fix buffer overflows and memory leaks caught by ASAN (#282)
    
    The changes in this commit allow ksh to be built and run with
    ASan[*], although for now it only works under vmalloc. Example
    command to build ksh with ASan:
    $ bin/package make CCFLAGS='-O0 -g -fsanitize=address'
    
    [*] https://en.wikipedia.org/wiki/AddressSanitizer
    
    src/cmd/INIT/mamake.c:
    - Fix a few memory leaks in mamake. This doesn't fix all of the
      memory leaks ASan complains about (there is one remaining in the
      view() function), but it's enough to get ksh to build under ASan.
    
    src/lib/libast/features/map.c,
    src/lib/libast/misc/glob.c:
    - Rename the ast globbing functions to _ast_glob() and
      _ast_globfree(). Without this change the globbing tests fail
      under ASan. See: https://github.com/att/ast/commit/2c49eb6e
    
    src/cmd/ksh93/sh/{init,io,nvtree,subshell}.c:
    - Fix buffer overflows by using strncmp(3) instead of memcmp(3).
    
    src/cmd/ksh93/sh/name.c:
    - Fix another invalid usage of memcmp by using strncmp instead.
      This change is also in one of Red Hat's patches:
      https://git.centos.org/rpms/ksh/blob/c8s/f/SOURCES/ksh-20120801-nv_open-memcmp.patch
    
    Resolves: https://github.com/ksh93/ksh/issues/230

commit 9530f09b088fb0b37c97ef8ccb078c557da8e093
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 22 17:27:34 2021 +0100

    Disable SHOPT_EDPREDICT compile-time option by default
    
    It's experimental, undocumented, at least somewhat broken, and gets
    in the way if you type a comment. Should not be enabled by default,
    at least not until someone steps up to fix it properly.
    
    This commit also updates the descriptions of the option to clarify
    that this provides a pattern-based history search menu. "Predictive
    editing" is a misnomer as this does not predict anything.
    
    Note that Solaris already disables it by default:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/165-CR7186440_ksh93_disable_predictive_editing.patch
    
    Discussion: https://github.com/ksh93/ksh/issues/233

commit 32d1abb1baecb88e9cbb61a95220ff3c866583a5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 22 03:25:24 2021 +0100

    shcomp: fix redirection with process substitution
    
    The commands within a process substitution used as an argument to a
    redirection (e.g. < <(...) or > >(...)) are simply not included in
    parse trees dumped by shcomp. This can be verified with a command
    like hexdump -C. As a result, these process substitutions do not
    work when running a bytecode-compiled shell script.
    
    The fix is surprisingly simple. A process substitution is encoded
    as a complete parse tree. When used with a redirection, that parse
    tree is used as the file name for the redirection. All we need to
    do is treat the "file name" as a parse tree instead of a string if
    flags indicate a process substitution.
    
    A process substitution is detected by the struct ionod field
    'iofile'. Checking the IOPROCSUB bit flag is not enough. We also
    need to exclude the IOLSEEK flag as that form of redirection may
    use the IOARITH flag which has the same bit value as IOPROCSUB (see
    include/shnodes.h).
    
    src/cmd/ksh93/sh/tdump.c: p_redirect():
    - Call p_tree() instead of p_string() for a process substitution.
    
    src/cmd/ksh93/sh/trestore.c: r_redirect():
    - Call r_tree() instead of r_string() for a process substitution.
    
    src/cmd/ksh93/include/version.h:
    - Bump the shcomp binary header version as this change is not
      backwards compatible; previous trestore.c versions don't know how
      to read the newly compiled process substitutions and would crash.
    
    src/cmd/ksh93/tests/io.sh:
    - Add test.
    
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/options.sh:
    - Revert shcomp workarounds. (re: 6701bb30)
    
    Resolves: https://github.com/ksh93/ksh/issues/165

commit b7dde4e747f3a50b2f1b10aa3778ad43b44a70b4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 21 19:28:46 2021 +0100

    Fix ksh exit on syntax error in profile (re: cb67a01b, ceb77b13)
    
    Johnothan King writes:
    > There are two regressions related to how ksh handles syntax
    > errors in the .kshrc file. If ~/.kshrc or the file pointed to by
    > $ENV have a syntax error, ksh exits during startup. Additionally,
    > the error message printed is incorrect:
    >
    > $ cat /tmp/synerror
    > ((
    > echo foo
    >
    > # ksh93u+m
    > $ ENV=/tmp/synerror arch/*/bin/ksh -ic 'echo ${.sh.version}'
    > /tmp/synerror: syntax error: `/t/tmp/synerror' unmatched
    >
    > # ksh93u+
    > $ ENV=/tmp/synerror ksh93u -ic 'echo ${.sh.version}'
    > /tmp/synerror: syntax error: `(' unmatched
    > Version AJM 93u+ 2012-08-01
    >
    > The regression that causes the incorrect error message was
    > introduced by commit cb67a01. The other bug that causes ksh to
    > exit on startup was introduced by commit ceb77b1.
    
    src/cmd/ksh93/sh/lex.c: fmttoken():
    - Call stakfreeze(0) to terminate a possible unterminated previous
      stack item before writing the token string onto the stack. This
      fixes the bug with garbage in a syntax error message.
    
    src/cmd/ksh93/sh/main.c: exfile():
    - Revert Red Hat's ksh-20140801-diskfull.patch applied in ceb77b13.
      This fixes the bug with interactive ksh exiting on syntax error
      in a profile script. Testing by @JohnoKing showed the patch is no
      longer necessary to fix a login crash on disk full, as commit
      970069a6 (which applied Red Hat patches ksh-20120801-macro.patch
      and ksh-20120801-fd2lost.patch) also fixes that crash.
    
    src/cmd/ksh93/README:
    - Fix typos. (re: fdc08b23)
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Resolves: https://github.com/ksh93/ksh/issues/281

commit fdc08b239b2dcb82ce6a8fecbb1e4f379cf1f5bc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 21 04:22:50 2021 +0100

    ksh93/README updates
    
    src/cmd/ksh93/README:
    - Update compile-time options docuemntation.
    - Update build instructions.
    - Remove obsolete stuff.
    
    src/cmd/ksh93/SHOPT.sh:
    - Remove unused SHOPT_SEVENBIT option. A search in ast-open-history
      shows it was removed from include/edit.h on 2001-10-31. You can
      still get its effect by changing STRIP from 0377 to 0177 there.

commit 7954855f21145112599e4a66ae199693e4313453
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 21 03:56:03 2021 +0100

    Don't import/export readonly attribute via magic A__z env var
    
    While automagically importing/exporting ksh variable attributes via
    the environment is probably a misfeature in general (now disabled
    for POSIX standard mode), doing so with the readonly attribute is
    particularly problematic. Scripts can take into account the
    possibility of importing unwanted attributes by unsetting or
    typesetting variables before using them. But there is no way for a
    script to get rid of an unwanted imported readonly variable. This
    is a possible attack vector with no possible mitigation.
    
    This commit blocks both the import and the export of the readonly
    attribute through the environment. I consider it a security fix.
    
    src/cmd/ksh93/sh/init.c: env_import_attributes():
    - Clear NV_RDONLY from imported attributes before applying them.
    
    src/cmd/ksh93/sh/name.c: sh_envgen():
    - Remove NV_RDONLY from bitmask defining attributes to export.

commit f28bce61a77eaf3fd61bdfd2f8e240ead7c50b83
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Apr 20 19:34:54 2021 -0700

    Fix multiple problems with the getconf builtin (#280)
    
    This commit fixes three problems with getconf pathbound builtin:
    1. The -l/--lowercase option did not change all variable names to
       lower case.
    2. The -q/--quote option now quotes all string values. Previously,
       it only quoted string values that had a space or other
       non-shellsafe character.
    3. The -c/--call, -n/--name and -s/--standard options matched all
       variable names provided by 'getconf -a', even if none were
       actual matches.
    
    Additionally, references to the confstr and sysconf functions have
    been updated to reference section 3 of the man pages instead of
    section 2.
    
    src/lib/libast/port/astconf.c:
    - Previously, only values that had spaces in them were quoted. Change
      that behavior to quote all string values by using the FMT_ALWAYS
      flag. Bug report: https://github.com/att/ast/issues/1173
    - Not all variable names were printed in lowercase by 'getconf -l'.
      Fix it by adding a few missing instances of fmtlower.
      Bug report: https://github.com/att/ast/issues/1171
    - Add the missing code to the '#if _pth_getconf_a' block to handle
      -c/-n/-s while parsing the OS's native 'getconf -a' output. This
      approach reuses code for name matching from other parts of
      astconflist(). Resolves: https://github.com/ksh93/ksh/issues/279
    
    src/lib/libcmd/getconf.c:
    - Update the documentation to note the -q flag only quotes strings.
    
    src/cmd/ksh93/tests/bulitins.sh:
    - Add regression tests for the getconf bugs fixed in this commit.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 61e0f90460ed4518837434d5901319766ff5df3c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Apr 20 05:39:10 2021 +0100

    Yet more fixes for subshell directory handling (re: feaf718f)
    
    There were still problems left after the previous commit. On at
    least one system (QNX i386), the following regression test crashed:
    
    src/cmd/ksh93/test/subshell.c
    900     got=$( { "$SHELL" -c '(cd /; (cd /)); print -r -- "PWD=$PWD"'; } 2>&1 )
    
    A backtrace done on the core dunp pointed to the free() call here:
    
    src/cmd/ksh93/bltins/cd_pwd.c
    90      if(oldpwd && oldpwd!=shp->pwd && oldpwd!=e_dot)
    91              free(oldpwd);
    
    Analysis: The interaction between $PWD, sh.pwd aka shp->pwd, and
    the path_pwd() function is a mess. path_pwd() usually returns a
    freeable value, but not always. sh.pwd is sometimes a pointer to
    the value of $PWD, but not always (e.g. when you unset PWD or
    assign to it). Instead of debugging the exact cause of the crash, I
    think it is better to make this work in a more consistent way.
    
    As of this commit:
    1. sh.pwd keeps its own copy of the PWD, independently of the PWD
       variable. The old value must always be freed immediately before
       assigning a new one. This is simple and consistent, reducing the
       chance of bugs at negligible cost.
    2. The PWD variable is no longer given the NV_NOFREE attribute
       because its value no longer points to sh.pwd. It is now a
       variable like any other.
    
    src/cmd/ksh93/sh/path.c: path_pwd():
    - Do not give PWDNOD the NV_NOFREE attribute.
    - Give sh.pwd its own copy of the PWD by strdup'ing PWDNOD's value.
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - Since sh.pwd is now consistently freed before giving it a new
      value and at no other time, oldpwd must not be freed any longer
      and can become a regular non-static variable.
    - If the PWD needs reinitialising, call path_pwd() to do it.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Systems with fchdir(2): Always restore the PWD upon exiting a
      non-subshare subshell. The check to decide whether or not to
      restore it was unsafe: it was not restored if the current PWD
      pointer and value was identical to the saved one, but a directory
      can be deleted and recreated under the same name.
    - Systems without fchdir(2) (if any exist):
      . Entry: Fork if the PWD is nonexistent or has no x permission.
      . Restore: Only chdir back if the subshell PWD was changed.
      That's probably the best we can do. It remains inherently unsafe.
      We should probably just require fchdir(2) at some point.

commit feaf718f16725efbd1bc102c9b92c29d476943ba
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Apr 18 23:28:50 2021 +0100

    More fixes for subshell directory handling (re: 7bab9508, 5ee290c7)
    
    This commit fixes what are hopefully the two final aspects of #153:
    
    1. If the present working directory does not exist (was moved or
       deleted) upon entering a virtual subshell, no PWD directory path
       is saved. Since restoring the state after exiting a virtual
       subshell is contingent on a previous PWD path existing, this
       resulted in entire aspects of the virtual subshell, such as the
       subshell function tree, not being cleaned up.
    2. A separate problem is that 'cd ..' does not update PWD or OLDPWD
       when run from a nonexistent directory.
    
    A reproducer exposing both problems is:
    
    $ mkdir test
    $ cd test
    $ ksh -c '(subfn() { BAD; }; cd ..; echo subPWD==$PWD);
                            typeset -f subfn; echo mainPWD==$PWD'
    subPWD==/usr/local/src/ksh93/ksh/test
    subfn() { BAD; };mainPWD==/usr/local/src/ksh93/ksh/test
    
    Expected output:
    subPWD==/usr/local/src/ksh93/ksh
    mainPWD==/usr/local/src/ksh93/ksh/test
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - If path_pwd() fails to get the PWD (usually it no longer exists),
      don't set $OLDPWD to '.' as that is pointless; use $PWD instead.
      After cd'ing from a nonexistent directory, 'cd -' *should* fail
      and should not be equivalent to 'cd .'.
    - Remove a redundant check for (!oldpwd) where it is always set.
    - Do not prematurely return without setting PWD or OLDPWD if
      pathcanon() fails to canonicalise a nonexistent directory.
      Instead, fall back to setting PWD to the result of getcwd(3).
    
    src/cmd/ksh93/sh/subshell.c:
    - Minor stylistic adjustment. Some NULL macros sneaked in. This
      historic code base does not use them (yet); change to NIL(type*).
    - sh_subshell(): Fix logic for determining whether to save/restore
      subshell state.
      1. When saving, 'if(!comsub || !shp->subshare)' is redundant;
         'if(!shp->subshare)' should be enough. If we're not in a
         subshare, state should be saved.
      2. When restoring, 'if(sp->shpwd)' is just nonsense as there is
         no guarantee that the PWD exists upon entering a subshell.
         Simply use the same 'if(!shp->subshare)'. Add an extra check
         for sp->pwd to avoid a possible segfault. Always restore the
         PWD on subshell exit and not only if shp->pwd is set.
    - sh_subshell(): Issue fatal errors in libast's "panic" format.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Adjust a relevant test to run err_exit() outside of the subshell
      so that any error is counted in the main shell.
    - Add test for problem 2 described at the top.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add test for problems 1 and 2 based on reproducer above.
    
    Resolves: https://github.com/ksh93/ksh/issues/153

commit b0a6c1bde5fdf67d65fb31f7739d71486bb60d2b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 17 21:31:38 2021 +0100

    Further fix '<>;' and fix crash on 32-bit systems (re: 6701bb30)
    
    Accessing t->tre.treio for every sh_exec() run is invalid because
    't' is of type Shnode_t, which is a union that can contain many
    different kinds of structs. As all members of a union occupy the
    same address space, only one can be used at a time. Which member is
    valid to access depends on the node type sh_exec() was called with.
    The invalid access triggered a crash on 32-bit systems when
    executing an arithmetic command like ((x=1)).
    
    The t->tre.treio union member should be accessed for a simple
    command (case TCOM in sh_exec()). The fix is also needed for
    redirections attached to blocks (case TSETIO) in which case the
    union member to use is t->fork.forkio.
    
    src/cmd/ksh93/sh/xec.c:
    - Add check_exec_optimization() function that checks for all the
      conditions where the exec optimisation should not be done. For
      redirections we need to loop through the whole list to check for
      an IOREWRITE (<>;) one.
    - sh_exec(): case TCOM (simple command): Only bother to call
      check_exec_optimization() if there are either command arguments
      or redirections (IOW: don't bother for bare variable
      assignments), so move it to within the if(io||argn) block.
    - sh_exec(): case TSETIO: This needs a similar fix. To avoid the
      optimization breaking again if the last command is a subshell
      with a <>; redirection attached, we need to not only set execflg
      to 0 but also clear the SH_NOFORK state bit from the 'flags'
      variable which is passed on to the recursive sh_exec() call.
    
    src/cmd/ksh93/tests/io.sh:
    - Update and expand tests. Add tests for redirections attached to
      simple commands (TCOM) and various kinds of code block (TSETIO).
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Resolves: https://github.com/ksh93/ksh/issues/278

commit ba43436f10a41816d1f4b78e7494879c313d31d6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 16 14:45:01 2021 +0100

    emacs: Fix digits input after completion (re: 16e4824c, e8b3274a)
    
    Immediately after tab-completing the name of a directory, it is
    not possible to type digits after the slash; ksh eats them as it
    parses them as a menu selection for a nonexistent menu.
    
    Reproducer:
    $ mkdir -p emacstest/123abc
    $ cd emacste[tab]123abc
    
    Actual results:
    $ cd emacstest/abc
    
    Expected results:
    $ cd emacstest/123abc
    
    Workarounds are to press a non-numeric key followed by backspace,
    or hit [tab] again to get a list of options.
    
    Originally reported by Arnon Weinberg, 2012-12-23 07:15:19 UTC, at:
    https://bugzilla.redhat.com/889745
    
    The fix had been partially backported from ksh 93v- by AT&T
    (16e4824c), which made things worse, so it was reverted (e8b3274a).
    This commit backports a slightly edited version of the complete
    fix. Thanks to @JohnoKing for finding the correct code. Discussion:
    https://github.com/ksh93/ksh/issues/198#issuecomment-820178514
    
    src/cmd/ksh93/edit/emacs.c: escape():
    - Backport the fix for this bug that was implemented in ksh 93v-
      alpha 2013-10-10. Immediately after a slash, do not stay in "\"
      mode (file name completion) and reset the tab count.
    
    src/cmd/ksh93/tests/pty.sh:
    - Test the fix.
    
    Resolves: https://github.com/ksh93/ksh/issues/198

commit 5fc9e64208b335a1c35fd29ae42fc200d91592fb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 16 02:53:06 2021 +0100

    tests: cd /dev, not /home which not all systems have (re: ca2443b5)

commit 6701bb30decdb9ac984558fe08c7a9df0cd19ab9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 15 10:29:50 2021 -0700

    Fix <>; redirection for final command exec optimization (#277)
    
    The <>; operator doesn't work correctly if it's used as the last
    command of a -c script. Reproducer:
      $ echo test > a; ksh -c 'echo x 1<>; a'; cat a
      x
      st
    This bug is caused by ksh running the last command of -c scripts
    with execve(2) instead of posix_spawn(3) or fork(2). The <>;
    operator is noted by the man page as being incompatible with the
    exec builtin (see also the ksh93u+ man page), so it's not
    surprising this bug occurs when ksh runs a command using execve:
    
    > <>;word cannot be used with the exec and redirect built-ins.
    
    The ksh2020 fix simply removed the code required for ksh to use
    this optimization at all. It's not a performance friendly fix and
    only papers over the bug, so this commit provides a better fix.
    
    This bug was first reported at:
    https://github.com/att/ast/issues/9
    
    In addition, this commit re-enables the execve(2) optimization for
    the last command for scripts loaded from a file. It was enabled in
    in older ksh versions, and was only disabled in interactive shells:
    https://github.com/ksh93/ast-open-history/blob/2011-06-30/src/cmd/ksh93/sh/main.c#L593-L599
    It was changed on 2011-12-24 to only be used for -c scripts:
    https://github.com/ksh93/ast-open-history/blob/2011-12-24/src/cmd/ksh93/sh/main.c#L593-L599
    
    We think there is no good reason why scripts loaded from a file
    should be optimised less than scripts loaded from a -c argument.
    They're both scripts; there's no essential difference between them.
    So this commit reverts that change. If there is a bug left in the
    optimization after this fix, this revert increases the chance of
    exposing it so that it can be fixed.
    
    src/cmd/ksh93/sh/xec.c:
    - The IOREWRITE flag is set when handling the <>; operator, so to
      fix this bug, avoid exec'ing the last command if it uses <>;. See
      also commit 17ebfbf6, which fixed another issue related to the
      execve optimization.
    
    src/cmd/ksh93/tests/io.sh:
    - Enable a regression test that was failing because of this bug.
    - Add the reproducer from https://github.com/att/ast/issues/9 as a
      regression test.
    
    src/cmd/ksh93/sh/main.c:
    - Only avoid the non-forking optimization in interactive shells.
    
    src/cmd/ksh93/tests/signal.sh:
    - Add an extra comment to avoid the non-forking optimization in the
      regression test for rhbz#1469624.
    - If the regression test for rhbz#1469624 fails, show the incorrect
      exit status in the error message.
    
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/options.sh:
    - This bugfix was causing the options regression test to segfault
      when run under shcomp. The cause is the same as
      <https://github.com/ksh93/ksh/issues/165>, so as a workaround,
      avoid parsing process substitutions with shcomp until that is
      fixed. This workaround should also avoid the other problem
      detailed in <https://github.com/ksh93/ksh/issues/274>.
    
    Resolves: https://github.com/ksh93/ksh/issues/274

commit 2fdf394b996caac3f7b85bdbd6d7727af0825cac
Author: Andy Fiddaman <andy@omniosce.org>
Date:   Thu Apr 15 13:41:32 2021 +0000

    nv_disc(NV_LAST) loses trailing shell context from discipline stack (#276)
    
    This is the underlying cause for the issue worked around in
    3654ee73.
    
    The following explanation refers to the current illumos version of
    ksh93 and shows output from illumos' modular debugger:
    https://illumos.org/books/dev/debugging.html
    
    Each environment variable (name/value pair) has a linked list of
    disciplines attached to it, and at the end of that list there is
    optionally a shell context pointer. For example, for the EDITOR
    variable:
    
            > ::bp libshell.so.1`put_ed
            > ::run
            $
            $ EDITOR=vim
            > ::stack ! head -1
            libshell.so.1`put_ed+0x14(e06208, e01c58, 0, dced90)
            > e06208::print Namval_t
            {
                nvname = 0xfffffbffeec40a0e "EDITOR"
                nvfun = 0xdced90
                nvalue = 0
            }
            > e06208::print Namval_t nvfun | ::print Namfun_t
            {
                disc = libshell.so.1`EDITOR_disc
                next = libshell.so.1`sh+0x710
            }
    
    Here, the EDITOR Namval_t has a discipline stack containing
    EDITOR_disc and &Shell_t.nvfun.
    
    The problem arises when a new discipline is pushed onto the stack,
    such as when using typeset -u to add an upper-case translation
    discipline.
    
        $ typeset -u EDITOR
        > e06208::print Namval_t
        {
            nvname = 0xfffffbffeec40a0e "EDITOR"
            nvfun = 0xdced90
            nvalue = 0xe0fdb0 "vim"
        }
        > e06208::print Namval_t nvfun | ::print Namfun_t
        {
            disc = libshell.so.1`EDITOR_disc
            next = 0xdc27a0
        }
        > e06208::print Namval_t nvfun | ::print Namfun_t next | ::print Namfun_t
        {
            disc = libshell.so.1`TRANS_disc
            next = 0
        }
    
    TRANS_disc has been pushed onto the end of the discipline stack,
    but the shell handle has been lost.
    
    With this change, the attributes and variables tests pass (this is
    on illumos where this change originates).

commit 519bb082651390239040005cffbcbed5075d1e4f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 15 04:08:12 2021 +0100

    Allow invoking path-bound built-in commands by direct path or preceding `PATH` assignment (#275)
    
    Path-bound builtins on ksh (such as /opt/ast/bin/cat) break some
    basic assumptions about paths in the shell that should hold true,
    e.g., that a path output by whence -p or command -v should actually
    point to an executable command. This commit should fix the
    following:
    
    1. Path-bound built-ins (such as /opt/ast/bin/cat) can now be
       executed by invoking the canonical path (independently of the
       value of $PATH), so the following will now work as expected:
    
            $ /opt/ast/bin/cat --version
              version         cat (AT&T Research) 2012-05-31
            $ (PATH=/opt/ast/bin:$PATH; "$(whence -p cat)" --version)
              version         cat (AT&T Research) 2012-05-31
    
       In the event an external command by that path exists, the
       path-bound builtin will now override it when invoked using the
       canonical path. To invoke a possible external command at that
       path, you can still use a non-canonical path, e.g.:
       /opt//ast/bin/cat or /opt/ast/./bin/cat
    
    2. Path-bound built-ins will now also be found on a PATH set
       locally using an assignment preceding the command, so something
       like the following will now work as expected:
    
            $ PATH=/opt/ast/bin cat --version
              version         cat (AT&T Research) 2012-05-31
    
       The builtin is not found by sh_exec() because the search for
       builtins happens long before invocation-local preceding
       assignments are processsed. This only happens in sh_ntfork(),
       before forking, or in sh_fork(), after forking. Both sh_ntfork()
       and sh_fork() call path_spawn() to do the actual path search, so
       a check there will cover both cases.
    
       This does mean the builtin will be run in the forked child if
       sh_fork() is used (which is the case on interactive shells with
       job.jobcontrol set, or always after compiling with SHOPT_SPAWN
       disabled). Searching for it before forking would mean
       fundamentally redesigning that function to be basically like
       sh_ntfork(), so this is hard to avoid.
    
    src/cmd/ksh93/sh/path.c: path_spawn():
    - Before doing anything else, check if the passed path appears in
      the builtins tree as a pathbound builtin. If so, run it. Since a
      builtin will only be found if a preceding PATH assignment
      temporarily changed the PATH, and that assignment is currently in
      effect, we can just sh_run() the builtin so a nested sh_exec()
      invocation will find and run it.
    - If 'spawn' is not set (i.e. we must return), set errno to 0 and
      return -2. See the change to sh_ntfork() below.
    
    src/cmd/ksh93/sh/xec.c:
    - sh_exec(): When searching for built-ins and the restricted option
      isn't active, also search bltin_tree for names beginning with a
      slash.
    - sh_ntfork(): Only throw an error if the PID value returned is
      exactly -1. This allows path_spawn() to return -2 after running a
      built-in to tell sh_ntfork() to do the right things to restore
      state.
    
    src/cmd/ksh93/sh/parse.c: simple():
    - When searching for built-ins at parse time, only exclude names
      containing a slash if the restricted option is active. This
      allows finding pointers to built-ins invoked by literal path like
      /opt/ast/bin/cat, as long as that does not result from an
      expansion. This is not actually necessary as sh_exec() will also
      cover this case, but it is an optimisation.
    
    src/lib/libcmd/getconf.c:
    - Replace convoluted deferral to external command by a simple
      invocation of the path to the native getconf command determined
      at compile time (by src/lib/libast/comp/conf.sh). Based on:
      https://github.com/ksh93/ksh/issues/138#issuecomment-816384871
      If there is ever a system that has /opt/ast/bin/getconf as its
      default native external 'getconf', then there would still be an
      infinite recursion crash, but this seems extremely unlikely.
    
    Resolves: https://github.com/ksh93/ksh/issues/138

commit 2c38fb93fd480b7514d21de89bba99332b8dc6d8
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Apr 14 19:37:57 2021 -0700

    Fix the exit status returned when a command isn't executable (#273)
    
    Previous discussion: https://github.com/att/ast/issues/485
    
    If ksh attempts to execute a non-executable command found in the
    PATH, in some instances the error message and return status are
    incorrect. In the example below, ksh returns with exit status 126
    when using the -c execve(2) optimization or when using fork(2) in
    an interactive shell. However, using posix_spawn(3) causes the exit
    status to change:
      $ echo 'print cannot execute' > /tmp/x
      # Runs command with spawnveg (i.e., posix_spawn or vfork)
      $ ksh -c 'PATH=/tmp; x; echo $?'
      ksh: x: not found
      127
      # Runs command with execve
      $ ksh -c 'PATH=/tmp; x'; echo $?
      ksh: x: cannot execute [Permission denied]
      126
      # Runs command with fork
      $ ksh -ic 'PATH=/tmp; x; echo $?'
      ksh: x: cannot execute [Permission denied]
      126
    
    Since 'x' is in the PATH but can't be executed, the correct exit
    status is 126, not 127. It's worth noting this bug doesn't cause
    the regression tests to fail with ksh93u+m, but it does cause one
    test to fail when run under dtksh:
    
        path.sh[706]: Long nonexistent command name: got status 126, ''
    
    This commit backports various fixes for this bug from ksh2020, with
    additional fixes applied (since there were still some additional
    issues the ksh2020 patch didn't fix). The lacking regression test
    for exit status 126 in path.sh has been rewritten to test for more
    scenarios where ksh failed to return the correct error message
    and/or exit status. I can also confirm with this patch applied the
    path.sh regression tests now pass when run under dtksh.
    
    src/cmd/ksh93/sh/path.c:
    - Add a comment to path_absolute() describing 'oldpp' is the
      current pointer in the while loop and 'pp' is the next pointer.
      Backported from:
      https://github.com/att/ast/commit/a6cad450
    
    - The patch from ksh2020 didn't fix this bug in the SHOPT_SPAWN
      code (because ksh2020 prefers fork(2)), so issues with the exit
      status could still occur when using spawnveg. To fix this, always
      set 'noexec' to the value of errno if can_execute fails. Before
      this fix, errno was discarded if 'pp' was a null pointer and
      can_execute failed.
    
    - If a command couldn't be executed and the error wasn't ENOENT,
      save errno in a 'not_executable' variable. If an executable
      command couldn't be found in the PATH, exit with status 126 and
      set errno to the saved value. This was based on a ksh2020 bugfix,
      but it has been reworked a little bit to fix a bug that caused a
      mismatch between the error message shown and errno. Example with
      a non-executable file in PATH:
      $ nonexec
      ksh2020: nonexec: cannot execute [No such file or directory]
      The ksh2020 patch: <https://github.com/att/ast/pull/493>
    
    - Backport a ksh2020 bugfix for directories in the PATH when
      running one of the added regression tests on OpenBSD:
      https://github.com/att/ast/pull/767
    
    src/cmd/ksh93/data/msg.c,
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/{path,xec}.c:
    - If a command name is too long (ENAMETOOLONG), then it wasn't
      found in the PATH. For that case return exit status 127, like
      for ENOENT.
    
    src/cmd/ksh93/tests/path.sh:
    - Replace the old test with a new set of more extensive tests.
      These tests check the error message and exit status when ksh
      attempts to run a command using any of the following:
       - execve(2), used with the last command run with -c       (*A tests).
       - posix_spawn(3)/vfork(2), used in noninteractive scripts (*B tests).
       - fork(2), used in interactive shells with job control    (*C tests).
       - command -x                                              (*D tests).
       - exec(1)                                                 (*E tests).
    - Add a regression test from ksh2020 for attempting to execute a
      directory:
      https://github.com/att/ast/pull/758
    
    src/lib/libast/include/ast.h,
    src/lib/libast/include/wait.h:
    - Avoid bitshifts in macros for static error codes. The return
      values of command not found and exec related errors are static
      values and should not require any macro magic for calculation.
      Backported from: https://github.com/att/ast/commit/c073b102
    - Simplify EXIT_* and W* macros to use 8 bits.

commit df47731d7dc43b365ce22aa2e0ae9526ba7689d9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Apr 14 16:10:12 2021 -0700

    tests/builtins.sh: Fix dtksh regression test failures (re: ef4fe41) (#272)
    
    The usage options test wasn't properly excluding all dtksh builtins,
    which was causing the regression tests to fail under dtksh. This commit
    adds exclusions for the builtins missed in commit ef4fe41.

commit d6ddd89053299a564c683154cdc0d75874162ea0
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Mon Apr 12 22:15:34 2021 -0400

    Correct memory fault when removing default nameref KSH_VERSION (#271)
    
    This commit fixes a segmentation fault when an attempt was made to
    unset the default KSH_VERSION variable prior any other nameref
    activity such as creating another nameref or even reassigning the
    nameref KSH_VERSION to something else.
    
    (new shell without prior nameref activity)
    $ nameref
    KSH_VERSION=.sh.version
    $ unset -n KSH_VERSION
    Memory fault
    
    src/cmd/ksh93/sh/name.c: _nv_unset():
    - Add a 'Refdict' check before attempting to remove a value from it
      as apparently one does not exist until some sort of nameref
      activity occurs after shell startup as the default nameref of
      'KSH_VERSION=.sh.version' does not create one.

commit 75796a9c75cacdc4001b686ef245c23ee68ae063
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Apr 11 17:24:33 2021 -0700

    Fix += operator regressions (re: fae8862c) (#270)
    
    The bugfix for BUG_CMDSPASGN backported in commit fae8862c caused
    two regressions with the += operator:
    
    1. The += operator did not append to variables. Reproducer:
         $ integer foo=3
         $ foo+=2 command eval 'echo $foo'
         2
    
    2. The += operator ignored the readonly attribute, modifying readonly
       variables in the same manner as above. Reproducer
         $ readonly bar=str
         $ bar+=ing command eval 'echo $bar'
         ing
    
    Both of the regressions above were caused by nv_putval() failing to
    clone the variable from the previous scope into the invocation-local
    scope. As a result, 'foo+=2' was effectively 0 + 2 (since ksh didn't
    clone 3). The first regression was noticed during the development of
    ksh93v-, so to fix both bugs I've backported the bugfix for the
    regression from the ksh93v- 2013-10-10 alpha version:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg00369.html
    
    src/cmd/ksh93/sh/name.c:
    - To fix both of the bugs above, find the variable to modify with
      nv_search(), then clone it into the invocation local scope. To
      fix the readonly bug as well, this is done before the NV_RDONLY
      check (otherwise np will be missing that attribute and be
      incorrectly modified in the invocation-local scope).
    - Update a nearby comment describing what sh_assignok() does (per this
      comment: https://github.com/ksh93/ksh/pull/249#issuecomment-811381759)
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for both of the now fixed regressions,
      loosely based on the regression tests in ksh93v-.

commit 6629c22308e03b94574f09b07d3bfbcf809d1d2a
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sun Apr 11 14:57:40 2021 -0400

    Adjust readonly regression tests for freezes (#267)
    
    src/cmd/ksh93/tests/readonly.sh:
    - Use a 'ulimit --cpu' as a workaround to close down hung processes
      that might be caused due to a couple of known bugs (recursion and
      type variable function)
      Discussion: https://github.com/ksh93/ksh/issues/264
    - Adjust tests so xtrace can be used
    - Use integer n within for loop

commit d50d3d7c4c408448ae1146e1e3d71409e4a326c7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Apr 11 00:08:26 2021 +0100

    Reset arithmetic recursion level on all errors (re: 264ba48b)
    
    The recursion level for arithmetic expressions is kept track of in
    a static 'level' variable in streval.c. It is reset when arithmetic
    expressions throw an error.
    
    But an error for an arithmetic expression may also occur elsewhere
    -- at least in one case: when an arithmetic expression attempts to
    change a read-only variable. In that case, the recursion level is
    never reset because that code does not have access to the static
    'level' variable.
    
    If many such conditions occur (as in the new readonly.sh regression
    tests), an arithmetic command like 'i++' may eventually fail with a
    'recursion too deep' error.
    
    To mitigate the problem, MAXLEVEL in streval.c was changed from 9
    to 1024 in 264ba48b (as in the ksh 93v- beta). This commit leaves
    that increase, but adds a proper fix.
    
    src/cmd/ksh93/include/defs.h:
    - Add global sh.arithrecursion (a.k.a. shp->arithrecursion)
      variable to keep track of the arithmetic recursion level,
      replacing the static 'level' variable in streval.c.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Reset sh.arithrecursion before starting a new simple command
      (TCOM), a new subshell with parentheses (TPAR), a new pipe
      (TFIL), or a new [[ ... ]] command (TTST). These are the same
      places where 'echeck' is set to 1 for --errexit and ERR trap
      checks, so it should cover everything.
    
    src/cmd/ksh93/sh/streval.c:
    - Change all uses of 'level' to sh.arithrecursion.
    - _seterror, aritherror(): No longer bother to reset the level
      to zero here; xec.c should have this covered for all cases now.
    
    src/cmd/ksh93/tests/arith.sh:
    - Add tests for main shell and subshell.

commit f6bc5c03ca0160da24f39954df80e4430815890a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 10 23:12:18 2021 +0100

    nv_setlist(): add check for readonly (re: 264ba48b)
    
    One area where readonly is still ineffective is the local
    environment list for a command (preceding assignments) if that
    command is not executed using exec(3) after fork(2). Builtin
    commands are one example. The following succeeds but should fail:
    
            (readonly v=1; v=2 true)  # succeeds, but should fail
    
    If the shell is compiled with SHOPT_SPAWN (the default) then this
    also applies to external commands invoked with sh_ntfork():
    
            (readonly v=1; v=2 env)   # succeeds if SHOPT_SPAWN
    
    This presents to the user as inconsitent behaviour because external
    commands may be fork()ed under certain circumstances but not
    others, depending on complex optimisations. One example is:
    
            $ ksh -c 'readonly v=1; v=2 env'
            ksh: v: is read only
            $ ksh -c 'readonly v=1; v=2 env; :'
            (bad: environment list is output, including 'v=2')
    
    In the first command above, where 'v2=env' is the last command in
    the -c script, the optimisation skips creating a scope and assigns
    the environment list in the current scope.
    
    src/cmd/ksh93/sh/name.c: nv_setlist():
    - Add check for readonly. This requires searching for the variable
      in the main tree using nv_search() before a locally scoped one is
      added using nv_open(). Since nv_search() only works with plain
      variable names, temporarily end the string at '='.
    
    src/cmd/ksh93/tests/readonly.sh:
    - Add version check and fork the test command substitution subshell
      on older versions that would otherwise abort the tests due to the
      combination of an excessively low arithmetic recursion tolerance
      and a bug that sometimes fails to restore the shell's arithmetic
      recursion level.

commit 66c37202fde05424433f25d758e15ab9fcd5158c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Apr 10 17:56:11 2021 +0100

    SHOPT_SPAWN: rm unused job control code (re: f207cd57, 41ebb55a)
    
    Since f207cd57, sh_ntfork() is never called if job.jobcontrol is
    set (i.e. if job control is active on an interactive shell), so the
    code that is only run if job.jobcontrol is set should be removed.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove spawnveg() define that is unused as of 7b0e0776.
    - sh_exec(): Simplify SHOPT_SPAWN preprocessor logic. As sh_fork()
      never returns a negative value, only run the parent<0 check after
      running sh_ntfork() -- that check already didn't happen when
      compiling ksh with SHOPT_SPAWN disabled.
    - sh_ntfork(): Remove signal and terminal handling (with race
      condition) that was only run with job.jobcontrol set.

commit 23964f89c61952b59b744965f07ef163e9cffb93
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Apr 10 06:17:12 2021 -0700

    sh.1: Backport login shell addition from ksh93v- (#266)
    
    This small addition to the man page adds a description for the
    -l (login shell) option. It was mentioned on the old mailing list:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg00299.html

commit 5461f11968fb42713dd247ea66764624eacb0367
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Apr 9 15:26:07 2021 -0700

    Fix handling of '--posix' and '--default' (#265)
    
    src/cmd/ksh93/sh/args.c: sh_argopts():
    - Remove special-casing for --posix (see also data/builtins.c) and
      move the case -5: to the case ':' instead, so this option is
      handled like all other long options. This change fixes two bugs:
      1. 'set --posix' had no effect on the letoctal or braceexpand
         options. Reproducer:
           $ set --posix
           $ [[ -o braceexpand ]]; echo $?
           0
           $ [[ -o letoctal ]]; echo $?
           1
      2. 'ksh --posix' could not run scripts correctly because it
         wrongly enabled '-c'. Reproducer:
           $ ksh --posix < <(echo 'exit 0')
           ksh: -c requires argument
           Usage: ksh [--posix] [arg ...]
           Help: ksh [ --help | --man ] 2>&1
    - Don't allow 'set --default' to unset the restricted option.
    
    src/cmd/ksh93/tests/options.sh:
    - Add regression tests for the bugs described above, using -o posix
      and --posix.
    
    src/cmd/ksh93/tests/restricted.sh:
    - Add a regression test for 'set --default' in rksh.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit cb67a01b451f895564c6ad6d7bd16750abfc8555
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 9 17:27:36 2021 +0100

    lex.c: simplify fmttoken() by using the stack (re: 3255aed2)
    
    Using the stack makes it impossible for future buffer overflows to
    occur. It also simplifies fmttoken() by eliminating the need to
    declare a local buffer and pass a pointer to that as an argument.
    
    For info: man src/lib/libast/man/stak.3

commit 0538719e071db4527b791e7e65390718522121e4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 9 04:06:54 2021 +0100

    tests/basic.sh: fix embarrassing typo (re: 4a846a9d)

commit 504cbda269081d4cbd82df1c44b151ee217d11e4
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 8 19:49:48 2021 -0700

    Fix 'printf %T' ignoring the current locale in LC_TIME (#263)
    
    src/lib/libast/tm/tmlocale.c:
    - Load the locale set by LC_TIME or LC_ALL if it hasn't been loaded
      before or if it was loaded previously but isn't the current locale.
    
    src/cmd/ksh93/tests/locale.sh:
    - Add a regression test using the nl_NL.UTF-8 and ja_JP.UTF-8 locales.
    
    Fixes: https://github.com/ksh93/ksh/issues/261

commit 4a846a9d19962691142b0cef01fd043a4346842b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Apr 9 03:28:05 2021 +0100

    tests/basic.sh: ensure use of correct tmp directory

commit 3255aed2c4b596b5b9adfd96bb3b8672a89b6f71
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Thu Apr 8 21:47:21 2021 -0400

    lex.c: Fix buffer overflow in debug sh_lex and sh_syntax (#262)
    
    fmttoken() needs a minimal char[4] token buffer passed to it.
    
    Originally reported by: Jakub Wilk <jwilk@jwilk.net>
    Original bug report: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=879464
    
    The following code lines from fmttoken() yield a n=3 for SYMSEMI as
    n=1 from the start, e.g. 'for <>;'.
    
            case SYMSEMI:
                    if(tok[0]=='<')
                            tok[n++] = '>';
                    sym = ';';
                    break;
            default:
                    sym = 0;
            }
            tok[n++] = sym;
    }
    tok[n] = 0;
    
    n[0]='<'
    n[1]='>'
    n[2]=';'
    n[3]=0 # <-- BUFFER overflow as the passed character buffers have a size of 3
    
    src/cmd/ksh93/sh/lex.c:
    - DBUG: sh_lex(): Adjust char tokstr[3] to char tokstr[4]
    - sh_syntax(): Adjust char tokbuf[3] to char tokbuf[4]

commit a065558291a112989035b47a88cfccfc380d38bc
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 8 11:58:07 2021 -0700

    Fix more compiler warnings, typos and other minor issues (#260)
    
    Many of these changes are minor typo fixes. The other changes
    (which are mostly compiler warning fixes) are:
    
    NEWS:
    - The --globcasedetect shell option works on older Linux kernels
      when used with FAT32/VFAT file systems, so remove the note about
      it only working with 5.2+ kernels.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Update the documentation on function scoping with an addition
      from ksh93v- (this does apply to ksh93u+).
    
    src/cmd/ksh93/edit/emacs.c:
    - Check for '_AST_ksh_release', not 'AST_ksh_release'.
    
    src/cmd/INIT/mamake.c,
    src/cmd/INIT/ratz.c,
    src/cmd/INIT/release.c,
    src/cmd/builtin/pty.c:
    - Add more uses of UNREACHABLE() and noreturn, this time for the
      build system and pty.
    
    src/cmd/builtin/pty.c,
    src/cmd/builtin/array.c,
    src/cmd/ksh93/sh/name.c,
    src/cmd/ksh93/sh/nvtype.c,
    src/cmd/ksh93/sh/suid_exec.c:
    - Fix six -Wunused-variable warnings (the name.c nv_arrayptr()
      fixes are also in ksh93v-).
    - Remove the unused 'tableval' function to fix a -Wunused-function
      warning.
    
    src/cmd/ksh93/sh/lex.c:
    - Remove unused 'SHOPT_DOS' code, which isn't enabled anywhere.
      https://github.com/att/ast/issues/272#issuecomment-354363112
    
    src/cmd/ksh93/bltins/misc.c,
    src/cmd/ksh93/bltins/trap.c,
    src/cmd/ksh93/bltins/typeset.c:
    - Add dictionary generator function declarations for former
      aliases that are now builtins (re: 1fbbeaa1, ef1621c1, 3ba4900e).
    - For consistency with the rest of the codebase, use '(void)'
      instead of '()' for print_cpu_times.
    
    src/cmd/ksh93/sh/init.c,
    src/lib/libast/path/pathshell.c:
    - Move the otherwise unused EXE macro to pathshell() and only
      search for 'sh.exe' on Windows.
    
    src/cmd/ksh93/sh/xec.c,
    src/lib/libast/include/ast.h:
    - Add an empty definition for inline when compiling with C89.
      This allows the timeval_to_double() function to be inlined.
    
    src/cmd/ksh93/include/shlex.h:
    - Remove the unused 'PIPESYM2' macro.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add '# err_exit #' to count the regression test added in
      commit 113a9392.
    
    src/lib/libast/disc/sfdcdio.c:
    - Move diordwr, dioread, diowrite and dioexcept behind
      '#ifdef F_DIOINFO' to fix one -Wunused-variable warning and
      multiple -Wunused-function warnings (sfdcdio() only uses these
      functions when F_DIOINFO is defined).
    
    src/lib/libast/string/fmtdev.c:
    - Fix two -Wimplicit-function-declaration warnings on Linux by
      including sys/sysmacros.h in fmtdev().

commit ecf260c28262412ce1c999dca8719fcf26026f48
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 16:46:47 2021 +0100

    SHOPT_SPAWN: Fix 'not found' error message inconsistency
    
    There's an annoying inconsistency in error messages if ksh is
    compiled with SHOPT_SPAWN. One way to trigger it:
    
    $ /usr/local/bin/ksh -c '/tmp/nonexistent'
    /usr/local/bin/ksh: /tmp/nonexistent: not found
    $ /usr/local/bin/ksh -c '/tmp/nonexistent; :'
    /usr/local/bin/ksh: /tmp/nonexistent: not found [No such file or directory]
    
    In the first variant, as an optimisation, ksh went straight to
    exec'ing the command without forking first. In the second variant,
    sh_ntfork() was used.
    
    The first variant is done in path_exec(), path.c, line 1049:
            errormsg(SH_DICT,ERROR_exit(ERROR_NOENT),e_found,arg0);
    
    The second one is in sh_ntfork(), xec.c, line 3654:
            errormsg(SH_DICT,ERROR_system(ERROR_NOENT),e_found+4);
    
    In both cases, the e_found message is only used if errno==ENOENT,
    so the extra '[No such file or directory]' message generated by
    ERROR_system() is pointless as that will never change for that
    message.
    
    src/cmd/ksh93/sh/xec.c: sh_ntfork():
    - Use ERROR_exit() instead of ERROR_system() for the e_found
      message to avoid the superfluous addition.

commit 2e5b62591577b390dfde7784c457bbdf44d4dd07
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 14:39:30 2021 +0100

    Allow path-bound builtins on restricted shells
    
    If a system administrator prefixes /opt/ast/bin to the path and
    then invokes the shell in restricted mode, they clearly intend for
    the user to run those AST utilities.
    
    Similarly, if a system administrator sets a PATH for a restricted
    shell that includes libraries listed in the .paths file, they must
    have intended for the user to use those loadable built-ins, as they
    will be associated with the pathnames of their respective
    libraries. Since the user cannot change PATH or use the builtin
    command, they still cannot load just any built-in they choose.
    
    src/cmd/ksh93/sh/path.c:
    - Remove SH_RESTRICTED check when handling path-bound builtins
      or dynamic libaries containining builtins in $PATH.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add test verifying a restricted user can use /opt/ast/bin/cat
      via a PATH search.
    
    Progresses: https://github.com/ksh93/ksh/issues/138

commit 0cd86463619ef45569c5d9b6faf5cd9caff9ab00
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 8 05:24:17 2021 -0700

    Backport bugfix for BUG_CSUBSTDO from ksh93v- 2012-08-24 (#259)
    
    This commit fixes BUG_CSUBSTDO, which could break stdout inside of
    non-forking command substitutions. The breakage only occurred when
    stdout was closed outside of the command substitution and a file
    descriptor other than stdout was redirected in the command substitution
    (such as stderr). Thanks to the ast-open-history repo, I was able to
    identify and backport the bugfix from ksh93v- 2012-08-24.
    
    This backport may fix other bugs as well. On 93v- 2012-08-24 it
    fixed the regression below, though it was not triggered on 93u+(m).
      src/cmd/ksh93/tests/heredoc.sh
      487 print foo > $tmp/foofile
      488 x=$( $SHELL 2> /dev/null 'read <<< $(<'"$tmp"'/foofile) 2> /dev/null;print -r "$REPLY"')
      489 [[ $x == foo ]] || err_exit '<<< $(<file) not working'
    
    src/cmd/ksh93/sh/io.c: sh_open():
    - If the just-opened file descriptor exists in sftable and is
      flagged with SF_STRING (as in non-forking command substitutions,
      among other situations), then move the file descriptor to a
      number >= 10.
    
    src/cmd/ksh93/tests/io.sh:
    - Add a regression test for BUG_CSUBSTDO, adapted from the one in
      modernish.

commit b2a7ec032f543a60be211ad79c937f918d5895f0
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 8 05:06:22 2021 -0700

    Add LC_TIME to the supported locale variables (#257)
    
    The current version of 93u+m does not have proper support for the
    LC_TIME variable. Setting LC_TIME has no effect on printf %T, and
    if the locale is invalid no error message is shown:
        $ LC_TIME=ja_JP.UTF-8
        $ printf '%T\n' now
        Wed Apr  7 15:18:13 PDT 2021
        $ LC_TIME=invalid.locale
        $ # No error message
    
    src/cmd/ksh93/data/variables.c,
    src/cmd/ksh93/include/variables.h,
    src/cmd/ksh93/sh/init.c:
    - Add support for the $LC_TIME variable. ksh93v- attempted to add
      support for LC_TIME, but the patch from that version was extended
      because the variable still didn't function correctly.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add LC_TIME to the regression tests for LC_* variables.

commit 3667aa4f71ff1d585c7f9144054ce6499ffeebd1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 06:30:22 2021 +0100

    Make readonly variables exportable again (re: 264ba48b)
    
    $ /usr/local/bin/ksh -c 'readonly v=1; export v'
    /usr/local/bin/ksh: export: v: is read only
    
    Every POSIX shell (even zsh, as of 5.8) allows this. So did ksh,
    until the referenced commit.
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - Allow setting attributes on a readonly variable if any of
      NV_ASSIGN (== NV_NOFREE), NV_EXPORT or NV_RDONLY are the only
      flag bits that are set. This allows readonly, export, typeset -r,
      typeset -x, and typeset -rx on variable arguments without an
      assignment. Note that NV_ASSIGN is set for the first variable
      argument even though it is not an assignment, so we must allow
      it. The logic (or lack thereof) of that is yet to be worked out.
    
    src/cmd/ksh93/tests/readonly.sh:
    - Tests.
    
    Resolves: https://github.com/ksh93/ksh/issues/258

commit d0a5cab1aba58cd6908772727797f40b1506441a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 04:41:53 2021 +0100

    cleanup: remove another old and unused experiment
    
    This experiment, the initialisation of which was disabled with '#if
    0', defines a bunch of integer type commands as special builtins.
    Most are boring as they define variables just like normal integers:
    pid_t, size_t, etc.
    
    One is interesting: mode_t is a type that automatically converts
    from a octal permission bits (e.g. 755) to a mode string like
    u+rwx,g+rw,o+rw. That's not a compelling enough use case to
    permanently define a special and immutable builtin though.
    
    stat_t is odd: it takes a file name as an argument and fills the
    variable with stat information, but it is base64 encoded binary
    data and there doesn't seem to be anything that can parse it.
    
    Anyway, none of this is going to be enabled, so we should get rid.

commit a28507e0b117c76cddfddd7cdab636882d02db8a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Apr 7 21:26:16 2021 -0700

    Apply new CentOS fix for strdup null-test bug (re: 7afb30e) (#255)
    
    This is an update to one of Red Hat's patches. The strdup change is
    from CentOS:
    https://git.centos.org/rpms/ksh/blob/c8s/f/SOURCES/ksh-20120801-annocheck.patch
    
    The reason why gcc (and also clang) optimize out the null check is
    because the glibc string.h header gives 's' a nonnull attribute (in
    other words, this is a glibc compatibility bug, not a compiler bug).
    Clang gives the following informative warning when compiling strdup:
    
    > /home/johno/GitRepos/KornShell/ksh/src/lib/libast/string/strdup.c:66:10: warning: nonnull parameter 's' will evaluate to 'true' on
    >         return (s && (t = oldof(0, char, n = strlen(s) + 1, 0))) ? (char*)memcpy(t, s, n) : (char*)0;
    >                 ^ ~~
    > /usr/include/string.h:172:35: note: declared 'nonnull' here
    >      __THROW __attribute_malloc__ __nonnull ((1));
    >                                   ^
    > /usr/include/sys/cdefs.h:303:44: note: expanded from macro '__nonnull'
    > # define __nonnull(params) __attribute__ ((__nonnull__ params))
    
    The proper fix is to rename the function in strdup.c to
    '_ast_strdup'. This avoids the string.h conflict and fixes the Red
    Hat bug. I've also made a similar change to getopt.c, since clang
    was throwing a nonnull warning there as well.
    
    src/lib/libast/features/map.c (which generates FEATURE/map which is
    indirectly included by everything) is updated to always map getopt
    to _ast_getopt and strdup to _ast_strdup.

commit 0e41899b3d8a03df2376b77f940ee2005b21b428
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 03:51:55 2021 +0100

    INIT: add generic cc.linux wrapper
    
    Renamed: src/cmd/INIT/cc.linux.i386 -> src/cmd/INIT/cc.linux
    
    This ensures that architectures like ARM also use the default Linux
    wrapper. This is needed because they may need -D_LARGEFILE64_SOURCE
    to compile correctly.
    
    On ARM processors, this fixes at least this regression:
    
            io.sh[243]: long seek not working
    
    Resolves: https://github.com/ksh93/ksh/issues/253

commit 997ad43bbf69d50d02b74c626cb4ea2d88df4e3d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Apr 8 00:10:07 2021 +0100

    Properly fix $LINENO crash on ARM (re: 23b7a163) and other bugs
    
    The typecast fix was insufficient, avoiding the crash only when
    compiling with optimisation disabled. The real problem is that
    put_lineno() was passed a misaligned pointer, and that the value
    didn't actually contain a double but a string. The bug occurred
    when restoring the LINENO value upon exiting a virtual subshell.
    
    Thanks to Harald van Dijk for figuring out the fix.
    
    src/cmd/ksh93/sh/subshell.c: nv_restore():
    - When restoring a special variable as defined by nv_cover(),
      do not pass either the np->nvflag bits or NV_NOFREE. Why?
      * The np->nvflag bits are not needed. They are also harmful
        because they may include the NV_INTEGER bit. This is set
        when the value is numeric. However, nv_getval() always
        returns the value in string form, converting it if it is
        numeric. So the NV_INTEGER flag should never be passed
        to nv_putval() when it uses the result of nv_getval().
      * According to nval.3, the NV_NOFREE flag stops nv_putval() from
        creating a copy of the value. But this should be unnecessary
        because the earlier _nv_unset(mp,NV_RDONLY|NV_CLONE) should
        ensure there is no previous value. In addition, the NV_NOFREE
        flag triggered another bug that caused the value of SECONDS to
        be corrupted upon restoring it when exiting a virtual subshell.
    - When restoring a regular variable, copy the entire nvalue union
      and not just the 'cp' member. In practice this worked because
      no current member of the nvalue union is larger than a pointer.
      However, there is no guarantee it will stay that way.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add disabled test for a memory leak that was discovered in the
      course of dealing with this bug. The fix doesn't introduce or
      influence it. It will have to be dealt with later.
    
    src/cmd/ksh93/tests/locale.sh:
    - Add test for restoring locale on leaving virtual subshell.
      https://github.com/ksh93/ksh/issues/253#issuecomment-815290154
    
    src/cmd/ksh93/tests/variables.sh:
    - Test against corruption of SECONDS on leaving virtual subshell.
      https://github.com/ksh93/ksh/issues/253#issuecomment-815191052
    
    Co-authored-by: Harald van Dijk <harald@gigawatt.nl>
    Progresses: https://github.com/ksh93/ksh/issues/253

commit 23b7a163f7b6a0045d826ed106d910edcc41bc12
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 7 15:44:15 2021 +0100

    Fix implicit typecast mess in $LINENO discipline functions
    
    On Ubuntu arm7, two variables.sh regression tests crashed with a
    bus error (SIGBUS) in init.c on line 720 while testing $LINENO:
    
    707 static void put_lineno(Namval_t* np,const char *val,int flags,Namfun_t *fp)
    708 {
    709     register long n;
    710     Shell_t *shp = sh_getinterp();
    711     if(!val)
    712     {
    713             fp = nv_stack(np, NIL(Namfun_t*));
    714             if(fp && !fp->nofree)
    715                     free((void*)fp);
    716             _nv_unset(np,NV_RDONLY);
    717             return;
    718     }
    719     if(flags&NV_INTEGER)
    720             n = *(double*)val;
    721     else
    722             n = sh_arith(shp,val);
    723     shp->st.firstline += nget_lineno(np,fp)+1-n;
    724 }
    
    Apparently, gcc on arm7 doesn't like the implicit typecast from
    double to long.
    
    Those three $LINENO discipline functions are generally a mess of
    implicit typecasts between Sfdouble_t, double, long and int.
    
    Line numbers are internally stored as int. The discipline functions
    need to use Sfdouble_t for API compatibility.
    
    src/cmd/ksh93/sh/init.c: nget_lineno(), put_lineno(), get_lineno():
    - Get rid of unnecessary implicit typecasts by adjusting the types
      of local variables.
    - Make the typecasts that are done explicit.
    
    Progresses: https://github.com/ksh93/ksh/issues/253

commit 6b9a668f981d0bf841f615fcecbc67a3f2ca3d16
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Apr 7 01:28:17 2021 +0100

    package: fix detection of 64-bit architectures
    
    On some systems (such as Ubuntu on ARM), the output of `file`
    contains a build hash, such as:
    
        SomeExecutable: ELF 32-bit LSB shared object, ARM, EABI5
        version 1 (SYSV), dynamically linked, interpreter
        /lib/ld-linux-armhf.so.3, for GNU/Linux 3.2.0,
        BuildID[sha1]=8934dd61657aac875c190535066466849687a56b,
        not stripped
    
    This build hash can contain the string '64', which caused package
    to wrongly detect a 64-bit architecture.
    
    bin/package, src/cmd/INIT/package.sh:
    - Export LC_ALL=C to ensure 'file' output in English.
    - To detect a 64-bit architecture, require the string "64-bit", "64
      bit" or "64bit" in 'file' output. The letters 'i' and 't' cannot
      occur in a hexadecimal hash, so hopefully that is safe enough. It
      is impossible to make this method completely safe, so in the long
      term it should be replaced.
    
    Progresses: https://github.com/ksh93/ksh/issues/253

commit 6b9703ffdd9a71c3fb7418ba7744fd734e39f454
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Apr 6 05:45:46 2021 +0100

    Backport bugfixes for arrays of 'enum' types from ksh 93v- beta
    
    These fixes are applied rather blindly as no one has yet managed to
    understand the almost entirely uncommented arrays and variables
    handling code (arrays.c, name.c, nvdisc.c, nvtree.c, nvtype.c).
    Hopefully we'll figure all that out at some point. In the meantime
    these backported fixes appear to work fine, and these bugs impact
    the usability of 'enum', so I'm just going to have to violate my
    own policy and backport these fixes without understanding them.
    Thanks to @JohnoKing for putting in a lot of work tracing these.
    
    Further discussion at: https://github.com/ksh93/ksh/issues/87
    
    src/cmd/ksh93/sh/array.c:
    - nv_arraysettype():
      * Further simplify the function. After my initial simplification
        of it (re: 5491fe97), I don't believe there's actually a need
        to save a duplicate copy of the value. Use the pointer returned
        by nv_getval() directly to restore the value.
      * Cope with a null value (nv_getval() returning a NULL pointer).
        This is needed for compatibility with the backported fix in
        nvtype.c (below).
    - array_putval(): If the array's value pointer (up->cp) is a
      pointer to the empty string, it is set to NULL before calling
      nv_putv() to prevent an empty string from being deleted. Backport
      a fix from 93v- that restores the pointer to the empty string if
      the NV_NOFREE attribute is set. Removing it somehow causes these
      regressions:
            enum.sh[86]: ${array[@]} doesn't yield all values for
            associative enum arrays (expected 'green blue blue red
            yellow green red orange'; got 'green blue blue  yellow
            green  orange')
            enum.sh[94]: unsetting associative enum array does not work
            (got 'Color_t -A Colors=([foo]=red [rood]=red)')
            enum.sh[116]: assigning first enum element to indexed array
            failed (expected 'red red'; got 'BUG BUG')
    - nv_associative(): Do not increase the 'nelem' (number of
      elements) value of the array's 'header' struct if the array is
      associative and of an enum type. The original 93v- fix only
      checked for the NV_INTEGER attribute, but backporting that caused
      several regressions. Using a debug output command I've determined
      that the exact value of 'type' is somehow consistently set to
      0x26 if the array is associative and of an enum type, which is
      NV_INTEGER | NV_LTOU | NV_RJUST as defined in include/nval.h. I
      cannot find where/how that value is determined. In any case this
      fix, based on but more specific than the 93v- one, appears to
      work fine. Removing it somehow causes this regression:
            enum.sh[94]: unsetting associative enum array does not work
            (got 'Color_t -A Colors=()')
    
    src/cmd/ksh93/sh/nvtype.c: nv_settype():
    - Another fix backported from 93v-. If the variable is an array,
      also set the type of element 0 of that array using a call to
      nv_arraysettype(). The value may be null. Removing this somehow
      causes this regression:
            enum.sh[94]: unsetting associative enum array does not work
            (got 'Color_t -A Colors=()')
    
    src/cmd/ksh93/tests/enum.sh:
    - Add tests for all the bugs fixed here, plus some hypothetical
      bugs (e.g., do the same tests for indexed enum type arrays as for
      associative enum type arrays, even though indexed enum type
      arrays didn't have all the same problems).
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Resolves: https://github.com/ksh93/ksh/issues/87

commit db2b1affdfb01e7d447fd2062872c72a9f8fa693
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Apr 5 22:11:23 2021 +0100

    Fix unsetting array element after expanding array subscript range
    
    Simple reproducer:
    set -A arr a b c d; : ${arr[1..2]}; unset arr[1]; echo ${arr[@]}
    
    Output:
    a
    
    Expected output:
    a c d
    
    The ${arr[1..2]} expansion broke the subsequent 'unset' command
    so that it unsets element 1 and on, instead of only 1.
    
    This regression was introduced in nv_endsubscript() on 2009-07-31:
    https://github.com/ksh93/ast-open-history/commit/c47896b4/src/cmd/ksh93/sh/array.c
    
    That change checks for the ARRAY_SCAN attribute which enables
    processing ranges of array elements instead of single array
    elements, and restores it after. That restore is evidently not
    correct as it causes the subsequent unset command to malfunction.
    
    If we revert that change, the bug disappears and the regression
    tests show no failures. However, I don't know what this was meant
    to accomplish and what other bug we might introduce by reverting
    this. However, no corresponding regression test was added along
    with the 2009-07-31 change, nor is there any corresponding message
    in the changelog. So this looks to be one of those mystery changes
    that we'll never know the reason for.
    
    Since we currently have proof that this change causes breakage and
    no evidence that it fixes anything, I'll go ahead and revert it
    (and add a regression test, of course). If that causes another
    regression, hopefully someone will find it at some point.
    
    src/cmd/ksh93/sh/array.c: nv_endsubscript():
    - Revert the 2009-07-31 change that saves/restores the ARRAY_SCAN
      attribute.
    - Keep the 'ap' pointer as it is now used by newer code. Move the
      declaration up to the beginning of the block, as is customary.
    
    src/cmd/ksh93/sh/init.c:
    - Cosmetic change: remove an unused array_scan() macro that I found
      when grepping the code for ARRAY_SCAN. The macro was introduced
      in version 2001-06-01 but the code that used it was replaced in
      version 2001-07-04, without removing the macro itself.
    
    Resolves: https://github.com/ksh93/ksh/issues/254

commit 56b530c43350cab061f194f93377f28f5388cee6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Apr 5 00:06:53 2021 -0700

    Fix bell character handling when redrawing command line (#250)
    
    To set a window title in bash and zsh, the $PS1 prompt can be set
    with the title placed between $'\E]0;' and $'\a':
    
    set -o emacs    # Or vi mode
    typeset -A fmt=(
            [start_title]=$'\E]0;'
            [end_title]=$'\a'
    )
    PS1="${fmt[start_title]}$(hostname): $(uname)${fmt[end_title]}\$ "
    
    This also works in ksh unless the shell receives SIGWINCH. With a
    $PS1 that sets a window title, the prompt breaks until two
    interrupts are received. This is caused by ed_setup() skipping
    $'\a' (the bell character) when setting up the e_prompt buffer
    which is an edited version of the final line of the PS1 prompt for
    use when redrawing the command line.
    
    One fix would be to avoid cutting out the bell character. But if
    the prompt contains a bell, we only want the terminal to beep when
    a new prompt is printed, and not upon refreshing the command line,
    e.g. when receiving SIGWINCH or pressing Ctrl+L.
    
    To avoid the problem, this commit adds code that cuts out sequences
    of the form ESC ] <number> ; <text> BELL from the prompt redraw
    buffer altogether. They are not needed there because these
    sequences will already have taken effect when the full prompt was
    printed by io_prompt().
    
    This commit also adds a tweak that should improve the recognition
    of other escape sequences to count their length.
    
    src/cmd/ksh93/edit/edit.c: ed_setup():
    - When preparing the e_prompt buffer, cut out dtterm/xterm
      Operating System Commands that set window/icon title, etc.
      See: https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
    - When counting the length of escape sequences in that part of PS1,
      try to recognize some more types of sequences. These changes are
      part of a ksh2020 patch: https://github.com/att/ast/issues/399
    
    src/cmd/ksh93/sh.1:
    - Document that any '!' in escape sequences in the PS1 prompt needs
      to be changed to '!!'. To avoid breaking compatibility, this
      requirement is documented instead of backporting the changes to
      io_prompt() from https://github.com/att/ast/issues/399 which try
      to remove that requirement for specific escape sequences.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit ee34a96b8fd3747b178a6579227a012a5bf1346d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Apr 5 07:42:12 2021 +0100

    tests/pty.sh: try to fix another intermittent GitHub CI fail

commit 264ba48bddc509cae3e6bb35b9502a63f8566bbd
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Mon Apr 5 01:43:19 2021 -0400

    Hardening of readonly variables (#239)
    
    Ksh currently restricts readonly scalar variables from having their
    values directly changed via a value assignment. However, since ksh
    allows variable attributes to be altered, the variable's value can
    be indirectly altered. For instance, if TMOUT=900 (for a 15 minute
    idle timeout) was set to readonly, all that is needed to alter the
    value of TMOUT from 900 to 0 is to issue 'typeset -R1 TMOUT',
    perhaps followed by a 'typeset -i TMOUT' to turn off the shell's
    timeout value.
    
    In addition, there are problems with arrays. The following is
    incorrectly allowed:
    
            typeset -a arr=((a b c) 1)
            readonly arr
            arr[0][1]=d
    
            arr=(alphas=(a b c);name=x)
            readonly arr.alphas
            arr.alphas[1]=([b]=5)
    
            arr=(alphas=(a b c);name=x)
            readonly arr.alphas
            arr.alphas[1]=(b)
    
            typeset -C arr=(typeset -r -a alphas=(a b c);name=x)
            arr.alphas[1]=()
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - Relocate readonly attribute check higher up the code and widen
      its application to issue an error message if the pre-existing
      name-pair has the readonly bit flag set.
    - To avoid compatibility problems, don't check for readonly if
      NV_RDONLY is the only attribute set (ignoring NV_NOFREE). This
      allows 'readonly foo; readonly foo' to keep working.
    
    src/cmd/ksh93/sh/array.c: nv_endsubscript():
    - Apply a readonly flag check when an array subscript or append
      assignment occurs, but allow type variables (typeset -T) as they
      utilize '-r' for 'required' sub-variables.
    
    src/cmd/ksh93/tests/readonly.sh:
    - New file. Create readonly tests that validate the warning message
      and validate that the readonly variable did not change.
    
    src/cmd/ksh93/sh/streval.c:
    - Bump MAXLEVEL from 9 to 1024 as a workaround for arithmetic
      expansion, avoiding a spurious error about too much recursion
      when the readonly.sh tests are run. This change is backported
      from ksh 93v-.
      TODO: debug a spurious increase in arithmetic recursion level
      variable when readonly.sh tests with 'typeset -i' are run.
      That is a different bug for a different commit.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit c4f980eb29da372e0179294e3a3feb2b6b2e8939
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Apr 4 16:28:24 2021 -0700

    Introduce usage of __builtin_unreachable() and noreturn (#248)
    
    This commit adds an UNREACHABLE() macro that expands to either the
    __builtin_unreachable() compiler builtin (for release builds) or
    abort(3) (for development builds). This is used to mark code paths
    that are never to be reached.
    
    It also adds the 'noreturn' attribute to functions that never
    return: path_exec(), sh_done() and sh_syntax(). The UNREACHABLE()
    macro is not added after calling these.
    
    The purpose of these is:
    * to slightly improve GCC/Clang compiler optimizations;
    * to fix a few compiler warnings;
    * to add code clarity.
    
    Changes of note:
    
    src/cmd/ksh93/sh/io.c: outexcept():
    - Avoid using __builtin_unreachable() here since errormsg can
      return despite using ERROR_system(1), as shp->jmplist->mode is
      temporarily set to 0. See: https://github.com/att/ast/issues/1336
    
    src/cmd/ksh93/tests/io.sh:
    - Add a regression test for the ksh2020 bug referenced above.
    
    src/lib/libast/features/common:
    - Detect the existence of either the C11 stdnoreturn.h header or
      the GCC noreturn attribute, preferring the former when available.
    - Test for the existence of __builtin_unreachable(). Use it for
      release builds. On development builds, use abort() instead, which
      crahses reliably for debugging when unreachable code is reached.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 56913f8c2ae26c625c4e02b91912dda4c0ddee24
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Apr 4 14:18:43 2021 -0700

    Fix bugs related to 'uname -d' in the 'uname' builtin (#251)
    
    This commit fixes a bug in the ksh uname builtin's -d option that could
    change the output of -o (I was only able to reproduce this on Linux):
        $ builtin uname
        $ uname -o
        GNU/Linux
        $ uname -d
        (none)
        $ uname -o
        (none)
    I identified this patch from ksh2020 as a fix for this bug:
    <https://github.com/att/ast/pull/1187>
    The linked patch was meant to fix a crash in 'uname -d', although I've
    had no luck reproducing it: <https://github.com/att/ast/issues/1184>
    
    src/lib/libcmd/uname.c:
    - Pass correct buffer to getdomainname() while executing uname -d.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test for the reported 'uname -d' crash.
    - Add a regression test for the output of 'uname -o' after 'uname -d'.
    - To handle potential crashes when running the regression tests in older
      versions of ksh, fork the command substitutions that run 'uname -d'.

commit ca2443b58c35653986a66251b3fdc2dd63ed7864
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Apr 1 17:19:19 2021 -0700

    `cd -` shouldn't ignore `$OLDPWD` when in a new scope (#249)
    
    This bug was first reported at <https://github.com/att/ast/issues/8>.
    The 'cd' command currently takes the value of $OLDPWD from the
    wrong scope. In the following example 'cd -' will change the
    directory to /bin instead of /tmp:
    
        $ OLDPWD=/bin ksh93 -c 'OLDPWD=/tmp cd -'
        /bin
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - Use sh_scoped() to obtain the correct value of $OLDPWD.
    - Fix a use-after-free bug. Make the 'oldpwd' variable a static
      char that points to freeable memory. Each time cd is used, this
      variable is freed if it points to a freeable memory address and
      isn't also a pointer to shp->pwd.
    
    src/cmd/ksh93/sh/path.c: path_pwd():
    - Simplify and add comments.
    - Scope $PWD properly.
    
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/leaks.sh:
    - Backport the ksh2020 regression tests for 'cd -' when $OLDPWD is
      set.
    - Add test for $OLDPWD and $PWD after subshare.
    - Add test for $PWD after 'cd'.
    - Add test for possible memory leak.
    - Add testing for 'unset' on OLDPWD and PWD.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Add compatibility note about changes to $PWD and $OLDPWD.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit ed478ab7e3a8815257519a53341d4faff9ae642d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 30 13:49:20 2021 -0700

    Fix many GCC `-Wimplicit-fallthrough` warnings (#243)
    
    This commit adds '/* FALLTHROUGH */' comments to fix many
    GCC warnings when compiling with -Wimplicit-fallthrough.
    Additionally, the existing fallthrough comments have been
    changed for consistency.

commit f30da495640a733c95aba131d0ccaaaf07e0383b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 28 05:46:00 2021 +0100

    tests/array2.sh: fix broken tests

commit f66a10a8c3b504074a51efa056cbf60316b5a5d0
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 30 06:53:08 2021 -0700

    tests/variables.sh: Fix locale tests (#247)
    
    src/cmd/ksh93/tests/variables.sh: LC_* error tests:
    - Since operating systems validate locale strings differently,
      try a few different bad locale strings to find one that makes
      setlocale(2) fail, fixing test failures on OpenBSD and Debian.
    - Restore warning removed in aed5c6d7, issuing it if none of the
      bad locale strings produce a diagnostic.
    - Reenable test for diagnostic message disabled in aed5c6d7.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 113a9392ff833e71cf12416da46c0f16ae53b9c7
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 30 03:25:20 2021 -0700

    Fix vi mode crashes when going back one word (#246)
    
    This bug was originally reported at <https://github.com/att/ast/issues/1467>.
    A crash can occur when using the 'b' or 'B' vi mode commands to go back
    one word. I was able to reproduce these crashes with 100% consistency on
    an OpenBSD virtual machine when ksh is compiled with -D_std_malloc.
    Reproducer:
        $ set -o vi
        $ asdf <ESC> <b or B>
    
    The fix is based on Matthew DeVore's analysis:
    > I suspect this is caused by this line:
    >> while (vi_isalph(tcur_virt) && tcur_virt >= first_virt) --tcur_virt;
    > which is in the b codepath. It checks vi_isalph(tcur_virt) before checking
    > if tcur_virt is in range. These two clauses should be reversed. Note that
    > line 316 is a similar check for pressing B, and there the tcur_virt value
    > is checked first.
    
    src/cmd/ksh93/edit/vi.c:
    - Check tcur_virt before using isalph() or isblank() to fix both crashes.
      At the start of the backword() while loop this check was performed
      twice, so the redundant check has been removed.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for the b, B, w and W editor commands.

commit f8de1f111dc0d87e0563ca055b639f39e0f66380
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 27 22:30:14 2021 +0000

    Fix compiler warnings and regression test failure (re: fc2d5a60)
    
    src/cmd/ksh93/bltins/test.c:
    - Fix the following compiler warnings from clang:
      test.c:554:11: warning: assigning to 'char *' from 'const char []'
      discards qualifiers
      [-Wincompatible-pointer-types-discards-qualifiers]
                                    e_msg = e_badop;
                                          ^ ~~~~~~~
      test.c:556:11: warning: assigning to 'char *' from 'const char []'
      discards qualifiers
      [-Wincompatible-pointer-types-discards-qualifiers]
                                    e_msg = e_unsupported_op;
                                          ^ ~~~~~~~~~~~~~~~~
      test.c:560:1: warning: control may reach end of non-void function
      [-Wreturn-type]
    
    src/cmd/ksh93/tests/builtins.sh:
    - Fix regression test by updating error message text.

commit fc2d5a601933328f8e444364d69c9048427463a3
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Mar 27 14:51:16 2021 -0700

    `test foo =~ foo` should fail with exit status 2 (#245)
    
    When test is passed the '=~' operator, it will silently fail with
    exit status 1:
        $ test foo =~ foo; echo $?
        1
    This bug is caused by test_binop reaching the 'NOTREACHED' area of
    code. The bugfix was adapted from ksh2020:
    https://github.com/att/ast/issues/1152
    
    src/cmd/ksh93/bltins/test.c: test_binop():
    - Error out with a message suggesting usage of '[[ ... ]]' if '=~'
      is passed to the test builtin.
    - Special-case TEST_END (']]') as that is not really an operator.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 767d23b3fe1519860e933dfb48bd02c81b947108
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Mar 26 12:36:13 2021 -0700

    Fix FreeBSD timezone name determination again (re: 9f43f8d1, d7c94707) (#244)
    
    src/lib/libast/tm/tminit.c:
    - Commit 9f43f8d1, in addition to backporting fixes from ksh93v-, also
      backported this bug:
          $ printf '%(%Z)T' now
          PPT  # Should be PDT
      Reapply the ksh2020 bugfix to fix the %Z time
      format again.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test so this bug (hopefully) isn't backported from
      ksh93v- again).

commit b4dba2ea6252552fe7cc79b74c103c2d247a5d1d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Mar 25 02:42:39 2021 +0000

    tests/sigchld.sh: try to fix intermittent CI fail (re: 712261c8)
    
    Every so often, a commit's GitHub CI run throws the following
    regression test failure:
    
        sigchld.sh[57]: expected '2 background' -- got '3' (DELAY=0.02)
    
    When I re-run the job, the failure usually goes away.
    
    In 712261c8 the DELAY variable was changed from 0.2 to 0.02 to
    speed up the first SIGCHLD test. It's possible the GitHub CI
    runners are just too slow or too heavily loaded for that.
    
    src/cmd/ksh93/tests/sigchld.sh:
    - Restore 0.2 value for 'float DELAY'.

commit 181e87d228cb3712e7a82b89178f9d535046d9a6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Mar 25 01:48:52 2021 +0000

    Update #include-related dependencies in Mamfiles
    
    I grepped for #include changes in all the commits and compared
    that to the changes in the Mamfiles. I found 7 commits that don't
    update the Mamfiles with the appropriate dependencies while
    adding #includes, as I only learned how this works after having
    worked with this code for some time.
    
    This commit adds the missing Mamfile updates for the
    corresponding #include changes in the following commits:
    06e721c3, 65d363fd, 70fc1da7, 79d19458, b1a41311, bb4d6a2e,
    db71b3ad, and this commit.
    
    Additionally:
    
    src/lib/libast/comp/setlocale.c:
    - Change include errno.h to error.h to use EILSEQ fallback if
      needed; remove corresponding #ifdef (re: 4dcf5c50, 71bfe028).
    
    src/cmd/ksh93/Mamfile:
    - Fix a broken dependency on libast FEATURE/float (re: 72968eae).
      We can't use 'prev' for a file that was not mentioned before in
      the same Mamfile, we have to use a 'make'...'done' on the first
      mention. Add subdependencies matching those in libast/Mamfile.

commit 4c7c5803bd035b5a735b57269b89dc0aab5e8f8a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Mar 24 13:14:17 2021 -0700

    Add `NOECHOE` and `TEST_L` to the list of `SHOPT` options (#242)
    
    src/cmd/ksh93/bltins/print.c:
    - Rename the unlisted and misleadingly named SHOPT_ECHOE option
      (which disables, not enables, 'echo -e') to SHOPT_NOECHOE.
    
    src/cmd/ksh93/SHOPT.sh:
    - Add the SHOPT_NOECHOE and SHOPT_TEST_L compile time options to
      the list of SHOPT options. Since there is a probe for TEST_L,
      set it to probe (empty) by default. NOECHE is off by default.
    
    src/cmd/ksh93/features/options:
    - Small bugfix: Allow SHOPT_TEST_L to be manually enabled on
      systems that don't support '$(whence -p test) -l /foo'.
    - Add a comment describing the SHOPT_MULTIBYTE feature test and
      separate it from the SHOPT_DEVFD test.

commit f361d6ed3f179c8f1b8c73a49da20347dc0ed7bc
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Mar 24 01:25:04 2021 -0700

    bltins/enum.c: Fix integer truncation in `put_enum` (#241)
    
    This bugfix comes from <https://github.com/att/ast/pull/711>.
    Eric Scrivner provided the following explanation for the fix:
    
    > Coverity identified an issue with integer truncation in
    > `put_enum`. The function was truncating the return values of
    > `strcasecmp` and `strcmp` from an `int` to an `unsigned short`
    > when assigning them to the local variable `n`. Since either of
    > these methods can return a value that is not in the set `{0, 1,
    > -1}` the later check if `n == 0` could spuriously evaluate to
    > true. For example, in the case where either function returned
    > `-65536`.
    
    > The fix is simply to change `n` from an `unsigned short` to an
    > `int` to avoid the possibility of truncation. Since the only
    > purpose of `n` is the store the return values of these checks,
    > this does not have any side effects.

commit 21d591dbd87cfa6938c7fec87648835998efdec1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 23 19:58:43 2021 +0000

    parse.c: rm overlooked SHOPT_BASH stuff (re: 921bbcae)
    
    That bit of code supported bash's redundant 'function foo()'
    function declaration syntax (with both the 'function' keyword
    and the '()') which is a syntax error on ksh, as it should be.

commit 22e044c33967b0755766bdaf5d8de0eed62cd41c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 23 07:46:58 2021 -0700

    Fix compile when using tcc >0.9.27 (#238)
    
    This allows ksh to be compiled with versions of tcc that define
    __dso_handle in libtcc1.a, i.e., versions as of this commit:
    https://repo.or.cz/tinycc.git/commit/dd60b20c
    
    Older versions of tcc still fail to compile ksh, although now they
    fail after reaching the libdll feature test. I'm not sure if fixing
    that is feasible since even if I hack out the failing libdll
    feature test, ksh fails to link with a '__dso_handle' error.
    
    src/lib/libast/comp/atexit.c,
    src/lib/libast/features/lib,
    src/lib/libast/vmalloc/vmexit.c:
    - From what I've been able to gather the only OSes with support
      for on_exit are Linux and SunOS 4. However, on_exit takes two
      arguments, so the macro that defines it as taking one argument
      is incorrect. Since Solaris (SunOS 5) no longer has this call
      and the macro breaks on Linux, the clean fix is to remove it
      (atexit(3) is used instead).
    
    src/lib/libast/include/ast.h:
    - When compiling with tcc on FreeBSD, pretend to be gcc 2.95.3
      instead of gcc 9.3.0. This stops /usr/include/math.h from
      activating gcc 3.0+ math compiler builtins that don't exist on
      tcc, while still identifying as gcc which is needed to avoid
      other FreeBSD system header breakage.
    
    src/cmd/builtin/Mamfile,
    src/cmd/builtin/features/pty,
    src/lib/libdll/Mamfile,
    src/lib/libdll/features/dll:
    - tcc forbids combining the -c compiler flag with -l* linker flags.
      Use the -lm flag in the iffe feature tests instead of the
      Mamfiles. This avoids iffe combining -lm with the -c flag.
    
    src/lib/libast/vmalloc/malloc.c:
    - Fix failure to compile with -D_std_malloc.
      This patch is from OpenSUSE:
      https://build.opensuse.org/package/view_file/shells/ksh/ksh93-malloc-hook.dif
      As it turns out tcc needs this change to build ksh with
      -D_std_malloc, so it has been applied.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>
    Resolves: https://github.com/ksh93/ksh/issues/232

commit ca3ec2000c999a635546a69b5dbdd44683248cfd
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 23 06:59:02 2021 -0700

    Linux bugfixes for globcasedetect (re: 71934570) (#240)
    
    src/lib/libast/features/lib,
    src/lib/libast/path/pathicase.c:
    - FAT32 file systems on Linux don't support FS_CASEFOLD_FL, which
      caused globbing to break. Reproducer using a UEFI boot partition:
          $ echo /boot/eF*
          /boot/eF*
      This is fixed by checking for FAT attributes with ioctl, then
      checking for FS_CASEFOLD_FL if that fails.
    - The check for FS_CASEFOLD_FL didn't work correctly; I still wasn't
      able to get --globcasedetect to work on a case-insensitive ext4
      folder. Fix that by adding missing parentheses.

commit bd38c8049dc32c78de48847a5dc95b142b5cd059
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 23 03:19:42 2021 +0000

    shtests: make aliases work again for shcomp tests (re: aed5c6d7)
    
    Moving the 'err_exit' and 'warning' alias definitions in the
    regression tests to one _common file introduced a bug: they are no
    longer expanded at compile time when the tests are run with shcomp,
    resulting in a 'command not found' (at best) on trying to execute
    one. shcomp requires that the alias definitions need to be present
    in the file itself. But that means maintaining 50-odd copies again.
    I'd rather add a hack to shtests to avoid this.
    
    src/cmd/ksh93/tests/shtests:
    - Before running a test with shcomp, physically concatenate _common
      and the test script together into a temporary file, minus the '.'
      command that includes _common, and compile that with shcomp.

commit 88d7a62b4dc634adc252e8e5901f981803717b2b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 23 02:39:51 2021 +0000

    cleanup: fix redundant NOT_USED macro redefinition (re: 733f70e9)
    
    The NOT_USED() macro is already defined in ast.h (which is included
    by shell.h) as an alias of NoP(). So it's better to apply the fix
    to NoP() so it takes effect for both verrsions, for libast and ksh.

commit 9ee82b83e0f74b7a24849f5b051958a880363851
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 23 00:33:24 2021 +0000

    globcasedetect: add Cygwin note to COMPATIBILITY (re: 71934570)
    
    Ref.: https://github.com/ksh93/ksh/commit/71934570#commitcomment-48574903

commit af07bb6aa344366f587df0c0f06ea12d9cdc04c2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Mar 22 19:42:08 2021 +0000

    globcasedetect: add 'set --man' self-doc (re: 71934570)

commit 71934570bf5244aa49d029c52507ea1b57b5bc39
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Mar 22 15:01:03 2021 +0000

    Add --globcasedetect shell option for globbing and completion
    
    One of the best-kept secrets of libast/ksh93 is that the code
    includes support for case-insensitive file name generation (a.k.a.
    pathname expansion, a.k.a. globbing) as well as case-insensitive
    file name completion on interactive shells, depending on whether
    the file system is case-insensitive or not. This is transparently
    determined for each directory, so a path pattern that spans
    multiple file systems can be part case-sensitive and part case-
    insensitive. In more precise terms, each slash-separated path name
    component pattern P is treated as ~(i:P) if its parent directory
    exists on a case-insensitive file system. I recently discovered
    this while dealing with <https://github.com/ksh93/ksh/issues/223>.
    
    However, that support is dead code on almost all current systems.
    It depends on pathconf(2) having a _PC_PATH_ATTRIBUTES selector.
    The 'c' attribute is supposedly returned if the given directory is
    on a case insensitive file system. There are other attributes as
    well (at least 'l', see src/lib/libcmd/rm.c). However, I have been
    unable to find any system, current or otherwise, that has
    _PC_PATH_ATTRIBUTES. Google and mailing list searches yield no
    relevant results at all. If anyone knows of such a system, please
    add a comment to this commit on GitHub, or email me.
    
    An exception is Cygwin/Windows, on which the "c" attribute was
    simply hardcoded, so globbing/completion is always case-
    insensitive. As of Windows 10, that is wrong, as it added the
    possibility to mount case-sensitive file systems.
    
    On the other hand, this was never activated on the Mac, even
    though macOS has always used a case-insensitive file like Windows.
    But, being UNIX, it can also mount case-sensitive file systems.
    
    Finally, Linux added the possibility to create individual case-
    insensitive ext4 directories fairly recently, in version 5.2.
    https://www.collabora.com/news-and-blog/blog/2020/08/27/using-the-linux-kernel-case-insensitive-feature-in-ext4/
    
    So, since this functionality latently exists in the code base, and
    three popular OSs now have relevant file system support, we might
    as well make it usable on those systems. It's a nice idea, as it
    intuitively makes sense for globbing and completion behaviour to
    auto-adapt to file system case insensitivity on a per-directory
    basis. No other shell does this, so it's a nice selling point, too.
    
    However, the way it is coded, this is activated unconditionally on
    supported systems. That is not a good idea. It will surprise users.
    Since globbing is used with commands like 'rm', we do not want
    surprises. So this commit makes it conditional upon a new shell
    option called 'globcasedetect'. This option is only compiled into
    ksh on systems where we can actually detect FS case insensitivity.
    
    To implement this, libast needs some public API additions first.
    
    *** libast changes ***
    
    src/lib/libast/features/lib:
    - Add probes for the linux/fs.h and sys/ioctl.h headers.
      Linux needs these to use ioctl(2) in pathicase(3) (see below).
    
    src/lib/libast/path/pathicase.c,
    src/lib/libast/include/ast.h,
    src/lib/libast/man/path.3,
    src/lib/libast/Mamfile:
    - Add new pathicase(3) public API function. This uses whatever
      OS-specific method it can detect at compile time to determine if
      a particular path is on a case-insensitive file system. If no
      method is available, it only sets errno to ENOSYS and returns -1.
      Currently known to work on: macOS, Cygwin, Linux 5.2+, QNX 7.0+.
    - On systems (if any) that have the mysterious _PC_PATH_ATTRIBUTES
      selector for pathconf(2), call astconf(3) and check for the 'c'
      attribute to determine case insensitivity. This should preserve
      compatibility with any such system.
    
    src/lib/libast/port/astconf.c:
    - dynamic[]: As case-insensitive globbing is now optional on all
      systems, do not set the 'c' attribute by default on _WINIX
      (Cygwin/Windows) systems.
    - format(): On systems that do not have _PC_PATH_ATTRIBUTES, call
      pathicase(3) to determine the value for the "c" (case
      insensitive) attribute only. This is for compatibility as it is
      more efficient to call pathicase(3) directly.
    
    src/lib/libast/misc/glob.c,
    src/lib/libast/include/glob.h:
    - Add new GLOB_DCASE public API flag to glob(3). This is like
      GLOB_ICASE (case-insensitive matching) except it only makes the
      match case-insensitive if the file system for the current
      pathname component is determined to be case-insensitive.
    - gl_attr(): For efficiency, call pathicase(3) directly instead of
      via astconf(3).
    - glob_dir(): Only call gl_attr() to determine file system case
      insensitivity if the GLOB_DCASE flag was passed. This makes case
      insensitive globbing optional on all systems.
    - glob(): The options bitmask needs to be widened to fit the new
      GLOB_DCASE option. Define this centrally in a new GLOB_FLAGMASK
      macro so it is easy to change it along with GLOB_MAGIC (which
      uses the remaining bits for a sanity check bit pattern).
    
    src/lib/libast/path/pathexists.c:
    - For efficiency, call pathicase(3) directly instead of via
      astconf(3).
    
    *** ksh changes ***
    
    src/cmd/ksh93/features/options,
    src/cmd/ksh93/SHOPT.sh:
    - Add new SHOPT_GLOBCASEDET compile-time option. Set it to probe
      (empty) by default so that the shell option is compiled in on
      supported systems only, which is determined by new iffe feature
      test that checks if pathicase(3) returns an ENOSYS error.
    
    src/cmd/ksh93/data/options.c,
    src/cmd/ksh93/include/shell.h:
    - Add -o globcasedetect shell option if compiling with
      SHOPT_GLOBCASEDET.
    
    src/cmd/ksh93/sh/expand.c: path_expand():
    - Pass the new GLOB_DCASE flag to glob(3) if the
      globcasedetect/SH_GLOBCASEDET shell option is set.
    
    src/cmd/ksh93/edit/completion.c:
    - While file listing/completion is based on globbing and
      automatically becomes case-insensitive when globbing does, it
      needs some additional handling to make a string comparison
      case-insensitive in corresponding cases. Otherwise, partial
      completions may be deleted from the command line upon pressing
      tab. This code was already in ksh 93u+ and just needs to be
      made conditional upon SHOPT_GLOBCASEDET and globcasedetect.
    - For efficiency, call pathicase(3) directly instead of via
      astconf(3).
    
    src/cmd/ksh93/sh.1:
    - Document the new globcasedetect shell option.

commit 71bfe0283dd932721763a2b5d6559eca0eb1652e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Mar 22 00:48:28 2021 +0000

    libast: consolidate errno ID fallbacks into error.h
    
    In various places in libast and libcmd there are preprocessor
    fallbacks like this, for systems that don't define all the commonly
    used errno value IDs:
    
        #ifndef ENOSYS
        #define ENOSYS      EINVAL
        #endif
    
    and many others. It is better to have these all in one place so
    they are not duplicated and we don't risk inconsistencies when
    adding new code.
    
    src/lib/libast/include/error.h includes the OS's <errno.h>, so it
    is the logical file to move all these fallbacks into.
    
    Quite possibly there is no remotely current system that needs any
    of these, but they won't do any harm either.
    
    Most files already use <error.h> directly or indirectly. Four
    needed new #include <error.h> directives to use the fallbacks if
    needed. The libast Mamfile is updated to make those files depend on
    that header.

commit 814b5c6890b897d0e7b2625a16a6513aa5d2789b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Mar 21 07:39:03 2021 -0700

    Fix various minor problems and update the documentation (#237)
    
    These are minor fixes I've accumulated over time. The following
    changes are somewhat notable:
    
    - Added a missing entry for 'typeset -s' to the man page.
    - Add strftime(3) to the 'see also' section. This and the date(1)
      addition are meant to add onto the documentation for 'printf %T'.
    - Removed the man page the entry for ksh reading $PWD/.profile on
      login. That feature was removed in commit aa7713c2.
    - Added date(1) to the 'see also' section of the man page.
    - Note that the 'hash' command can be used instead of 'alias -t' to
      workaround one of the caveats listed in the man page.
    - Use an 'out of memory' error message rather than 'out of space'
      when memory allocation fails.
    - Replaced backticks with quotes in some places for consistency.
    - Added missing documentation for the %P date format.
    - Added missing documentation for the printf %Q and %p formats
      (backported from ksh2020: https://github.com/att/ast/pull/1032).
    - The comments that show each builtin's options have been updated.

commit 2d7e9a0d6d7d55551072417fde18dcf56d94268a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Mar 21 05:53:19 2021 -0700

    Fix the CI build by removing `_c99_in_the_wild` code (re: 38f2b94f) (#236)
    
    src/lib/libast/sfio/sfcvt.c:
    - The C99 code formerly behind '#if _c99_in_the_wild' broke the CI
      build:
      https://github.com/ksh93/ksh/runs/2158627969 (failing build)
      https://github.com/JohnoKing/ksh/runs/2158860590 (build after revert)
      Since this code wasn't used before that commit, it has been removed
      to fix the CI build.

commit 7b0e0776e238293be967922075ef9a8269396076
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 21 06:33:00 2021 +0000

    cleanup: remove legacy code for systems without fork(2)
    
    In 2021, it seems like it's about time to join the 21st century
    and officially require fork(2). In practice this was already the
    case as the legacy code was unmaintained and didn't compile.

commit 38f2b94f55781e49d48c472fc712d967cd4f91c5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 21 06:04:38 2021 +0000

    Some more #ifdef cleanups
    
    src/cmd/ksh93/edit/edit.c,
    src/cmd/ksh93/edit/history.c,
    src/cmd/ksh93/sh/deparse.c:
    - Remove experimental code protected by '#ifdef future'.
      No one is going to do anything with this, it's just clutter.
    
    src/lib/libast/sfio/sfcvt.c:
    - In 2021, it might be time to actually start using some C99
      features were available. Change two checks for a _c99_in_the_wild
      macro to actual checks for C99, enabling the use of fpclassify().
    
    Resolves: https://github.com/ksh93/ksh/issues/219

commit 0b814b53bd2c6754a7fb283959b98aae896c82e1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 21 04:17:05 2021 +0000

    Remove more legacy libast code (re: f9c127e3, 651bbd56)
    
    This removes #ifdefs checking for the existence of
    SH_PLUGIN_VERSION (version check for dynamically loaded builtins)
    and the SFIO identifiers SF_BUFCONST, SF_CLOSING, SF_APPENDWR,
    SF_ATEXIT, all of which are defined by the bundled libast.

commit c7242de16f4aad5f55523534563e9d510c5274c5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 20 14:21:22 2021 +0000

    tests/pty.sh: fixes for testing with/without SHOPT_ESH/SHOPT_VSH

commit 3abbb0dcb5a527fa22f40d31d0ed5737d4dda101
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sat Mar 20 12:07:30 2021 -0400

    Overlapping buffers in hist_word (#234)
    
    While experimenting with #233, a memory segmentation fault occurred.
    A search of other emacs issues found a potential matching issue as
    described in https://github.com/att/ast/pull/791. Also, a duplicate
    PR of https://github.com/att/ast/pull/1489 was submitted. This
    commit backports that fix.
    
    src/cmd/ksh93/edit/history.c: hist_word():
    - Switch from using strcpy to memmove as the two strings could overlap.

commit c33b75e5bf5cee6e040b02543055fcf5615dc3b3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 19 15:08:23 2021 +0000

    tests/pty.sh: rm 137(C) (re: 715b815a, 6f709122, 43c09c2d, 289f56cd)
    
    This was failing again on FreeBSD. Replicating the test in a real
    session worked as expected.
    
    Apparently, we just cannot rely on external 'vi' utilities playing
    well with pty. This test has caused enough trouble. Removed.

commit 48e6dd989c1ab25f2b090b655a91d219bfae8231
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 19 14:59:32 2021 +0000

    package: check for same compiler flags between build runs
    
    I've had ksh crash one too many times when returning to a previous
    build directory as I forgot to restore the previously-used CCFLAGS.
    
    bin/package, src/cmd/INIT/package.sh:
    - Save each of CC, CCFLAGS, CCLDFLAGS, LDFLAGS, KSH_RELFLAGS on the
      first build run. On subsequent runs, compare and refuse to run if
      they changed, issuing an informative error message.
    - Allow override by exporting FORCE_FLAGS. Don't tell anyone :)

commit 33d0f004de01ca66297148b746f516dbe0bdb074
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 22:34:45 2021 +0000

    File completion: fix incomplete multibyte support
    
    Upon encountering two filenames with multibyte characters starting
    with the same byte, a partial multibyte character was completed.
    
    Reproducer (to run in UTF-8 locale):
    $ touch XXXá XXXë
    $ : XX          <== pres tab
    $ : XXX^?       <== partial multibyte character appears
    
    Note: á is $'\xc3\xa1' and ë is $'\xc3\xab' (same initial byte).
    
    src/cmd/ksh93/edit/completion.c:
    - Add multibyte support to the charcmp() and overlaid() functions.
      Thanks to Harald van Dijk for useful code and suggestions.
    - Add a few missing mbinit() calls. The state of multibyte
      processing must be reset before starting a new loop in case a
      previous processing run was interrupted mid-character.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add test based on Harald's reproducer.
    
    Resolves: https://github.com/ksh93/ksh/issues/223

commit 936a1939a8ddb1aea60317ccf687e2cc4d520229
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 21:07:14 2021 +0000

    Allow proper tilde expansion overrides (#225)
    
    Until now, when performing any tilde expansion like ~/foo or
    ~user/foo, ksh added a placeholder built-in command called
    '.sh.tilde', ostensibly with the intention to allow users to
    override it with a shell function or custom builtin. The multishell
    ksh93 repo <https://github.com/multishell/ksh93/> shows this was
    added sometime between 2002-06-28 and 2004-02-29. However, it has
    never worked and crashed the shell.
    
    This commit replaces that with something that works. Specific tilde
    expansions can now be overridden using .set or .get discipline
    functions associated with the .sh.tilde variable (see manual,
    Discipline Functions).
    
    For example, you can use either of:
    
    .sh.tilde.set()
    {
            case ${.sh.value} in
            '~tmp') .sh.value=${XDG_RUNTIME_DIR:-${TMPDIR:-/tmp}} ;;
            '~doc') .sh.value=~/Documents ;;
            '~ksh') .sh.value=/usr/local/src/ksh93/ksh ;;
            esac
    }
    
    .sh.tilde.get()
    {
            case ${.sh.tilde} in
            '~tmp') .sh.value=${XDG_RUNTIME_DIR:-${TMPDIR:-/tmp}} ;;
            '~doc') .sh.value=~/Documents ;;
            '~ksh') .sh.value=/usr/local/src/ksh93/ksh ;;
            esac
    }
    
    src/cmd/ksh93/include/variables.h,
    src/cmd/ksh93/data/variables.c:
    - Add SH_TILDENOD for a new ${.sh.tilde} predefined variable.
      It is initially unset.
    
    src/cmd/ksh93/sh/macro.c:
    - sh_btilde(): Removed.
    - tilde_expand2(): Rewritten. I started out with the tiny version
      of this function from the 2002-06-28 version of ksh. It uses the
      stack instead of sfio, which is more efficient. A bugfix for
      $HOME == '/' was retrofitted so that ~/foo does not become
      //foo instead of /foo. The rest is entirely new code.
         To implement the override functionality, it now checks if
      ${.sh.tilde} has any discipline function associated with it.
      If it does, it assigns the tilde expression to ${.sh.tilde} using
      nv_putval(), triggering the .set discipline, and then reads it
      back using nv_getval(), triggering the .get discipline. The
      resulting value is used if it is nonempty and does not still
      start with a tilde.
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/tests/builtins.sh:
    - Since ksh no longer adds a dummy '.sh.tilde' builtin, remove the
      ad-hoc hack that suppressed it from the output of 'builtin'.
    
    src/cmd/ksh93/tests/tilde.sh:
    - Add tests verifying everything I can think of, as well as tests
      for bugs found and fixed during this rewrite.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add test verifying that the .sh.tilde.set() discipline does not
      modify the exit status value ($?) when performing tilde expansion
      as part of tab completion.
    
    src/cmd/ksh93/sh.1:
    - Instead of "tilde substitution", call the basic mechanism "tilde
      expansion", which is the term used everywhere else (including the
      1995 Bolsky/Korn ksh book).
    - Document the new override feature.
    
    Resolves: https://github.com/ksh93/ksh/issues/217

commit 595a0a5684d908af171dca13f4a2cfadd7c24b75
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 14:25:34 2021 +0000

    Revert "Backport atomic job locking from ksh 93v- beta" (52067c3d)
    
    That patch broke the build on Cygwin, where gcc apparently doesn't
    have the required atomic addition/subtraction compiler builtins.
    The build fails at link time with those functions not found.
    
    As far as I know, ksh was actually working fine (after @JohnoKing's
    gcc workaround in c258a04f), so I'll just revert this for now. If a
    need for it is demonstrated later, we'll have to add a feature test
    or find some other way to get it working on Cygwin.

commit 82c692233074c70aaf370c245cfd52d4e333d6c0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 10:09:57 2021 +0000

    package: fix SIGINT and SIGHUP handling
    
    The package script was not well behaved with these. When you
    pressed Ctrl+C, on some shells (including ksh) both the SIGINT (2)
    and EXIT (0) traps are activated, showing a double 'make done'
    message. The exit status also wasn't > 128 to indicate a signal.
    
    bin/package, src/cmd/INIT/package.sh:
    - Be UNIXly well-behaved. Signals should be passed on after
      handling, so when one is caught, make the trap handlers print
      their message and then unset both itself and EXIT/0 before
      resending the signal to self.

commit 44438725b1504f2165a8ecb4a5200f7a03dcb5b0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 09:33:23 2021 +0000

    sh_done(): fix portable exit status logic (re: d024d4c8)
    
    "savxit -= SH_EXITSIG + 128;" may have worked accidentally due to
    subsequent bitmasking, but is blatantly wrong . It subtracts 256 +
    128 = 384 from the exit status.
    
    Use bitwise logic instead, with an octal literal 0200 instead of
    128. This makes more sense in this context.

commit aacf0d0b66cc46f38ca35615fe62b9454288beb6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 09:23:52 2021 +0000

    tests/pty.sh: Rewrite test (re: 129614b9, e08defc2)

commit e08defc233060189e9cd1b54b11a9e4f95e4ccc9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 17 09:04:19 2021 +0000

    tests/pty.sh: fix failure on macOS (re: 5ca7c325)
    
    It failed as follows:
    
            pty.sh[84]: crash after switching from emacs to vi mode: line 750:
            expected "^Success\r?\n$", got "echo Success\r\n"

commit 5ca7c325e322cd2610e6e932f2529f176d531947
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Mar 17 01:46:21 2021 -0700

    tests/pty.sh: Add a regression test for a ksh93r crash (re: 129614b9) (#227)
    
    In ksh93r a crash can occur after switching from emacs mode to vi
    mode[*]:
        $ ENV=/./dev/null ksh2006 -o emacs
        $ echo ${.sh.version}
        Version M 1993-12-28 r
        $ set -o vi
        $ <Esc> <r> <r>  # This triggers the memory fault
    Commit 129614b9 added the OpenSUSE patch for this crash. This commit
    adds the regression test for it.
    
    [*]: https://bugzilla.opensuse.org/show_bug.cgi?id=179917

commit 14352ba0a7383151b9503757ae6b8838b57e7000
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Mar 16 09:13:13 2021 -0700

    Save $? when discipline triggered without command (#226)
    
    A discipline function could incorrectly influence the value of $?
    (exit status of last command) outside its context if it was
    triggered without another command being run, e.g. when a prompt
    variable is read, or COLUMNS or LINES is set.
    
    Reproducers include:
    
    PS1 prompt:
    
        $ PS1.get() { true; }
        $ false
        $ echo $?
        0
    
    PS2 prompt:
    
        $ PS2.get() { return 13; }
        $ \
        >
        $ echo $?
        13
    
    The set discipline is affected too, e.g. COLUMNS and LINES:
    
        $ COLUMNS.set() { return 13; }
        $ true
        $ (press return)
        $ echo $?
        13
    
    There are probably other contexts where the shell reads or changes
    variables without running commands, allowing their get or set
    disciplines to influence $?. So this commit makes ksh save $? for
    all .get, .set, .append, and .unset discipline calls.
    
    src/cmd/ksh93/sh/nvdisc.c:
    - assign(): Save/restore $? when running a .set/.append/.unset
      discipline function.
    - lookup(): Save/restore $? when running a .get discipline.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for $? after displaying a prompt
      and when setting a LINES.set discipline function.
    
    src/cmd/ksh93/tests/return.sh:
    - The above test fails in script form on ksh93u+ and ksh2020, as
      it exposes another form of #117 that occurs after running a
      subshell. Add the above regression test here as well
      (re: 092b90da).
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 715b815a28c5128df334abd2d3f80f876d961ea8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 16 15:19:56 2021 +0000

    tests/pty.sh: 137(C): try to fix intermittent fail on GitHub CI

commit 5b8d29d3589119c8b4b58877809093251018aae3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 16 12:54:38 2021 +0000

    package: don't exit prematurely (re: 3e140727, 936802f9, d18469d6)
    
    Sometimes the shell returned to the prompt before bin/package was
    finished writing all of its output. The problem was that 'tee',
    which is used to write the output to both the terminal and the log
    in arch/*lib/package/gen/make.out, hadn't caught up yet.
    
    bin/package, src/cmd/INIT/package.sh:
    - Run the build itself in the background and 'tee' in the
      foreground. This way, the script will not terminate until 'tee'
      is finished. The build's exit status is obtained with 'wait'.

commit 4f9ce41aaadf0477bdd6314ca397a14d4c7cb8ba
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Tue Mar 16 06:19:00 2021 -0400

    typeset: Allow last numeric type given to be used (#221)
    
    For most numeric types the last provided one wins out. This commit
    closes the gap for -F and -i numerics to not be covered up by other
    preceding float types. Note: -u for requesting an unsigned float or
    integer was considered and decided to be left alone as it stands,
    so as to not allow the variable to become an uppercased string if
    the requested options ended with a -u. As it stands for a case when
    multiple numeric types are requested, a -u option may be applied
    after the last numeric type is processed.
    
    Examples:
    -EF becomes -F
    -Fi becomes -i
    -Fu becomes -F
    -uF becomes -F
    -Fui becomes -i  (because isfloat==1, unsigned is not applied)
    -Fiu becomes -iu (isfloat is reset and allows unsigned to be set)
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - Reset attribute bit flags for -E and -X when -F is requested by
      adding in NV_EXPNOTE to be removed.
    - For -i option if a float precedes it, reset isfloat and -E/-F
      attribute bit flags.
    - Take into account the impact of the shortint flag on floats.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add some validation tests to confirm that, when a -F follows
      either -E or -X, -F is used.
    - Add some validation tests to confirm that, when -F/E/X precede
      a -i, the variable becomes an integer and not a float.
    - Add in various tests when -s followed a float.

commit 1df6a82a8abeba013a9d0d686a981021d7413764
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Mar 15 21:49:02 2021 +0000

    Make ~ expand to home directory after unsetting HOME
    
    There was an issue with tilde expansion if the HOME var is unset.
    
            $ unset HOME
            $ echo ~
            martijn
    
    Only the username is returned. Users are more likely to expect the
    current user's home directory as configured in the OS.
    
    POSIXly, the expansion of ~ is based on the value of HOME. If HOME
    is unset, the results are unspecified. After unsetting HOME, in
    bash, ~ returns the user's home directory as specified by the OS,
    whereas in all other shells, ~ expands to the empty string. Only
    ksh93 returns the username. The behaviour of bash is more useful.
    
    Discussion:
    https://github.com/ksh93/ksh/pull/225#issuecomment-799074107
    
    src/cmd/ksh93/sh/macro.c,
    src/cmd/ksh93/tests/tilde.sh:
    - sh_tilde(): Backport fix by Mike Gilbert from ksh2020.
      See:  https://github.com/att/ast/issues/1391
            https://github.com/att/ast/pull/1396
            https://github.com/att/ast/commit/070d365d
    - Add test.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Note this change.

commit ef4fe4106c8a6efe2cf27b1a5448a642d77ba25b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Mar 14 14:32:04 2021 -0700

    Fix a few regression test failures (#222)
    
    src/cmd/ksh93/tests/_common:
    - Commit aed5c6d7 renamed the err_exit function,
      breaking a few tests in glob.sh that call the function
      directly instead of using the alias. Restore the function.
    
    src/cmd/ksh93/tests/builtins.sh:
    - The dtksh builtins don't have optget option parsing, so
      skip the unrecognized options test for those (this of
      course only has relevance when running dtksh against the
      regression tests).
    
    src/cmd/ksh93/tests/pty.sh:
    - If the vi editor couldn't be found on the $PATH, skip the
      regression test that involves it.

commit 51df036f26cf0ab4c4c758f44d64569568793e43
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 23:17:08 2021 +0000

    options feature test tweaks
    
    src/cmd/ksh93/features/options:
    - SHOPT_TEST_L: Use 'env test' instead of '/bin/test' to run
      external 'test', as the direct path is unportable. Create a test
      symlink and verify the positive case as well as the negative.
    - SHOPT_SYSRC: Use if...then..fi instead of ... && ... for the last
      test to avoid a non-zero exit status of the script, which outputs
      a spurious 'no' result like this:
            iffe: test: cross{ ... }end ... no
    - Add comments for clarity and to make the SHOPT_* names greppable.
    
    Related: https://github.com/ksh93/ksh/issues/219

commit 844e6b241045060651f2ae00dca7493cc0fc51ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 19:27:15 2021 +0000

    ...and now make it work with shcomp (re: aed5c6d7)

commit aed5c6d70a59f014c65c0213fe41ca4b153ab919
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 18:14:43 2021 +0000

    Regress tests: keep common code in one place
    
    src/cmd/ksh93/tests/_common:
    - Added. This keeps one common version of 'err_exit', 'warning',
      and other init code.
    
    src/cmd/ksh93/tests/*.sh:
    - Source _common as a dot script.
    - Remove 50-odd, occasionally slightly different, versions of the
      common code.
    - Some minor tweaks.

commit 6f709122c789334e70378f6e8028f04ee9fb5e19
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 17:14:01 2021 +0000

    tests/pty.sh: backport fix for 137(C) from 93v- beta (re: 43c09c2d)

commit 73ef41f38055820945b8a26ccb7a85e7b1831cd8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 16:42:31 2021 +0000

    tests/io.sh: add test for proc subst with umask 777 (re: ab5dedde)

commit 16c6f854c1b8b1763994d50d2e16eb74fe7ab50e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 13 16:31:35 2021 +0000

    GitHub CI: also test with SHOPT_DEVFD off (re: 6d63b57d)

commit 6d63b57dd3bc0b9b6439a15aecbe00dc8375350c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Mar 13 05:46:42 2021 -0800

    Re-enable SHOPT_DEVFD, fixing process substitution fd leaks (#218)
    
    This commit fixes a long-standing bug (present since at least
    ksh93r) that caused a file descriptor leak when passing a process
    substitution to a function, or (if compiled with SHOPT_SPAWN) to a
    nonexistent command.
    
    The leaks only occurred when ksh was compiled with SHOPT_DEVFD; the
    FIFO method was unaffected.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - When a process substitution is passed to a built-in, the
      remaining file descriptor is closed with sh_iorestore. Do the
      same thing when passing a process substitution to a function.
      This is done by delaying the sh_iorestore() call to 'setexit:'
      where both built-ins and functions terminate and set the exit
      status ($?).
      This means that call now will not be executed if a longjmp is
      done, e.g. due to an error in a special built-in. However, there
      is already another sh_iorestore() call in main.c, exfile(), line
      418, that handles that scenario.
    - sh_ntfork() can fail, so rather than assume it will succeed,
      handle a failure by closing extra file descriptors with
      sh_iorestore(). This fixes the leak on command not found with
      SHOPT_SPAWN.
    
    src/cmd/ksh93/include/defs.h:
    - Since the file descriptor leaks are now fixed, remove the
      workaround that forced ksh to use the FIFO method.
    
    src/cmd/ksh93/SHOPT.sh:
    - Add SHOPT_DEVFD as a configurable option (default: probe).
    
    src/cmd/ksh93/tests/io.sh:
    - Add a regression test for the 'not found' file descriptor leak.
    - Add a test to ensure it keeps working with 'command'.
    
    Fixes: https://github.com/ksh93/ksh/issues/67

commit d2c1700f63597e1e1f2399a470446452b1fb12c4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 12 19:56:59 2021 +0000

    edit/history.c: backport fixes from 93v- beta
    
    src/cmd/ksh93/edit/history.c:
    - Call sh_close() and sh_fcntl() instead of close(2) and fcntl(2),
      updating the shell's file descriptor state.
    - Mark files close-on-exec on opening them. The history file should
      not remain open if ksh execs another process.
    - Another fix for an FD check: < 10 instead of < 2.

commit 59bacfd494a5951936db599d3b59eabfe0aa4097
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Mar 12 08:44:55 2021 -0800

    Add more regression tests, mostly from ksh93v- and ksh2020 (#216)
    
    src/cmd/ksh93/tests/arrays.sh,
    src/cmd/ksh93/tests/arrays2.sh:
    - Backport some regression tests from ksh93v- for associative
      arrays.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add ksh93v- regression tests for background process output in
      backtick and shared-state command substitutions as well as
      functions used in command substitutions.
    
    - Add regression tests for using EXIT traps in subshells. In
      ksh93v- and ksh2020 EXIT traps don't work in forked subshells:
      https://github.com/att/ast/issues/1452
    - The trap builtin shouldn't segfault after receiving an invalid
      signal name. ksh2020 regression:
      https://github.com/att/ast/issues/1403
    - Add a test to make sure invalid flags don't crash ksh.
      ksh2020 regression: https://github.com/att/ast/issues/1284
    - Test for an illegal seek error when using the 'join' command with
      process substitutions. ksh93v- regression:
      https://www.mail-archive.com/ast-users@lists.research.att.com/msg00816.html
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add some regression tests from ksh93v- for the -eq test operator.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Move the regression test for 'exit' in an interactive shell to
      the exit.sh script.
    - Test for assignments preceding the command builtin persisting
      after an error. ksh2020 regression:
      https://github.com/att/ast/issues/1402
    - The chmod builtin should modify the permissions of all files
      passed to it. ksh2020 regression:
      https://github.com/att/ast/issues/949
    - Add regression tests for the cd builtin. In ksh93v- 2013-10-10
      alpha, using cd on a directory without an execute bit doesn't
      cause an error. The test for using cd on a normal file was
      backported from ksh93v-.
    - Backport a ksh93v- regression test for the exit status
      from 'kill %'.
    
    src/cmd/ksh93/tests/case.sh:
    - Test for a segfault when ksh handles an invalid character class
      in a pattern. ksh2020 regression:
      https://github.com/att/ast/issues/1409
    
    src/cmd/ksh93/tests/exit.sh:
    - Add regression tests from ksh2020 for the 'exit' builtin:
      https://github.com/att/ast/commit/d9491d46
    
    src/cmd/ksh93/tests/io.sh:
    - Add a regression test from ksh93v- for a process substitution
      hang. This test fails in the 93v- 2013 alpha but succeeds in
      the 2014 beta.
    
    src/cmd/ksh93/tests/math.sh:
    - 'typeset -s foo=30000' adds garbage to $foo in ksh93u+, ksh93v-
      and ksh2020:
      $ typeset -s foo=30000
      $ echo $foo
      5#1430000
      This bug was fixed in commit 88a6baa1, but that commit didn't
      add a regression test for it.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add a regression test for $PS4 incorrectly unsetting
      ${.sh.subshell}: https://github.com/att/ast/issues/1092

commit 5939964725d23ad12bb6fbc61c8065742786e3a7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 12 13:14:54 2021 +0000

    test/path.sh: don't fail if 'command -x' test runs out of memory
    
    Some systems issue SIGKILL if a process takes up too much memory.
    That is easy to check for.

commit a35a47b83589783aaf47558f60371a7ff7ac7e1c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 12 12:18:28 2021 +0000

    tests/pty.sh: increase output delays from 10ms to 15ms
    
    This is an attempt to avoid fairly rare intermittent failures
    on the GitHub CI runners. Apparently, they are sometimes so
    slow that typeahead can still interfere with a test.

commit c3eac977ead49f45145f4b05b78165f39cb4e9ff
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Mar 12 03:43:23 2021 -0800

    Fix unused process substitutions hanging (#214)
    
    On systems where ksh needs to use the older and less secure FIFO
    method for process substitutions (which is currently all of them as
    the more modern and solid /dev/fd method is still broken, see #67),
    process substitutions could leave background processes hanging in
    these two scenarios:
    
    1. If the parent process exits without opening a pipe to the child
       process forked by the process substitution. The fifo_check()
       function in xec.c, which is periodically called to check if the
       parent process still exists while waiting for it to open the
       FIFO, verified the parent process's existence by checking if the
       PPID had reverted to 1, the traditional PID of init. However,
       POSIX specifies that the PPID can revert to any implementation-
       defined system process in that case. So this breaks on certain
       systems, causing unused process substitutions to hang around
       forever as they never detect that the parent disappeared.
       The fix is to save the current PID before forking and having the
       child check if the PPID has changed from that saved PID.
    
    2. If command invoked from the main shell is passed a process
       substitution, but terminates without opening the pipe to the
       process substitution. In that case, the parent process never
       disappears in the first place, because the parent process is the
       main shell. So the same infinite wait occurs in unused process
       substitutions, even after correcting problem 1.
       The fix is to remember all FIFOs created for any number of
       process substitutions passed to a single command, and unlink any
       remaining FIFOs as they represent unused command substitutions.
       Unlinking them FIFOs causes sh_open() in the child to fail with
       ENOENT on the next periodic check, which can easily be handled.
    
    Fixing these problems causes the FIFO method to act identically to
    the /dev/fd method, which is good for compatibility. Even when #67
    is fixed this will still be important, as ksh also runs on systems
    that do not have /dev/fd (such as AIX, HP-UX, and QNX), so will
    fall back to using FIFOs.
    
    --- Fix problem 1 ---
    
    src/cmd/ksh93/sh/xec.c:
    - Add new static fifo_save_ppid variable.
    - sh_exec(): If a FIFO is defined, save the current PID in
      fifo_save_ppid for the forked child to use.
    - fifo_check(): Compare PPID against the saved value instead of 1.
    
    --- Fix problem 2 ---
    
    To keep things simple I'm abusing the name-value pair routines used
    for variables for this purpose. The overhead is negligible. A more
    elegant solution is possible but would involve adding more code.
    
    src/cmd/ksh93/include/defs.h: _SH_PRIVATE:
    - Define new sh.fifo_tree pointer to a new FIFO cleanup tree.
    
    src/cmd/ksh93/sh/args.c: sh_argprocsubs():
    - After launching a process substitution in the background,
      add the FIFO to the cleanup list before freeing it.
    
    src/cmd/ksh93/sh/xec.c:
    - Add fifo_cleanup() that unlinks all FIFOs in the cleanup list and
      clears/closes the list. They should only still exist if the
      command never used them, however, just run 'unlink' and don't
      check for existence first as that would only add overhead.
    - sh_exec():
      * Call fifo_cleanup() on finishing all simple commands (when
        setting $?) or when a special builtin fails.
      * When forking, clear/close the cleanup list; we do not want
        children doing duplicate cleanup, particularly as this can
        interfere when using multiple process substitutions in one
        command.
      * Process substitution handling:
        > Change FIFO check frequency from 500ms to 50ms.
          Note that each check sends a signal that interrupts open(2),
          causing sh_open() to reinvoke it. This causes sh_open() to
          fail with ENOENT on the next check when the FIFO no longer
          exists, so we do not need to add an additional check for
          existence to fifo_check(). Unused process substitutions now
          linger for a maximum of 50ms.
        > Do not issue an error message if errno == ENOENT.
    - sh_funct(): Process substitutions can be passed to functions as
      well, and we do not want commands within the function to clean up
      the FIFOs for the process substitutions passed to it from the
      outside. The problem is solved by simply saving fifo_tree in a
      local variable, setting it to null before running the function,
      and cleaning it up before restoring the parent one at the end.
      Since sh_funct() is called recursively for multiple-level
      function calls, this correctly gives each function a locally
      scoped fifo_tree.
    
    --- Tests ---
    
    src/cmd/ksh93/tests/io.sh:
    - Add tests covering the failing scenarios.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit d4adc8fcf9e0334646a15f1d82b30b6c06a98973
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Mar 10 00:38:00 2021 +0000

    Fix test -v for numeric types & set/unset state for short int
    
    This commit fixes two interrelated problems.
    
    1. The -v unary test/[/[[ operator is documented to test if a
       variable is set. However, it always returns true for variable
       names with a numeric attribute, even if the variable has not
       been given a value. Reproducer:
            $ ksh -o nounset -c 'typeset -i n; [[ -v n ]] && echo $n'
            ksh: n: parameter not set
       That is clearly wrong; 'echo $n' should never be reached and the
       error should not occur, and does not occur on mksh or bash.
    
    2. Fixing the previous problem revealed serious breakage in short
       integer type variables that was being masked. After applying
       that fix and then executing 'typeset -si var=0':
       - The conditional assignment expansions ${var=123} and
         ${var:=123} assigned 123 to var, even though it was set to 0.
       - The expansions ${var+s} and ${var:+n} incorrectly acted as if
         the variable was unset and empty, respectively.
       - '[[ -v var ]]' and 'test -v var' incorrectly returned false.
       The problems were caused by a different storage method for short
       ints. Their values were stored directly in the 'union Value'
       member of the Namval_t struct, instead of allocated on the stack
       and referred to by a pointer, as regular integers and all other
       types do. This inherently broke nv_isnull() as this leaves no
       way to distinguish between a zero value and no value at all.
       (I'm also pretty sure it's undefined behaviour in C to check for
       a null pointer at the address where a short int is stored.)
       The fix is to store short ints like other variables and refer
       to them by pointers. The NV_INT16P combined bit mask already
       existed for this, but nv_putval() did not yet support it.
    
    src/cmd/ksh93/bltins/test.c: test_unop():
    - Fix problem 1. For -v, only check nv_isnull() and do not check
      for the NV_INTEGER attribute (which, by the way, is also used
      for float variables by combining it with other bits).
      See also 5aba0c72 where we recently fixed nv_isnull() to
      work properly for all variable types including short ints.
    
    src/cmd/ksh93/sh/name.c: nv_putval():
    - Fix problem 2, part 1. Add support for NV_INT16P. The code is
      simply copied and adapted from the code for regular integers, a
      few lines further on. The regular NV_SHORT code is kept as this
      is still used for some special variables like ${.sh.level}.
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - Fix problem 2, part 2. Use NV_INT16P instead of NV_SHORT.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add set/unset/empty/nonempty tests for all numeric types.
    
    src/cmd/ksh93/tests/bracket.sh,
    src/cmd/ksh93/tests/comvar.sh:
    - Update a couple of existing tests.
    - Add test for [[ -v var ]] and [[ -n ${var+s} ]] on unset
      and empty variables with many attributes.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Add a note detailing the change to test -v.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Correct 'typeset -C' documentation. Variables declared as
      compound are *not* initially unset, but initially have the empty
      compound value. 'typeset' outputs them as:
            typeset -C foo=()
      and not:
            typeset -C foo
      and nv_isnull() is never true for them. This may or may not
      technically be a bug. I don't think it's worth changing, but
      it should at least be documented correctly.

commit 4a8072e826dbc848d20c0af6b540a1e50ed776a8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Mar 9 04:35:45 2021 +0000

    Fix ${!foo@} and ${!foo*} to include 'foo' itself in search
    
    These expansions are supposed to yield all variable names beginning
    with the indicated prefix. This should include the variable name
    that is identical to the prefix (as 'prefix' begins with 'prefix').
    
    This bugfix is backported from the abandoned ksh 93v- beta, so AT&T
    intended this change. It also makes ksh work like bash in this.
    
    src/cmd/ksh93/sh/macro.c: varsub(): M_NAMESCAN:
    - Check if the prefix itself exists. If so, start with that.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add tests for these expansions.
    
    src/cmd/ksh93/sh.1:
    - Fix the incomplete documentation of these expansions.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Note the change as it's potentially incompatible in corner cases.
    
    Resolves: https://github.com/ksh93/ksh/issues/183

commit e58637752abe9b5a87e451a8fadc664e2a36a6f5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Mar 8 20:49:02 2021 +0000

    sh_debug(): restore NV_NOFREE attributes (re: c928046a)
    
    Removing the nv_putval() calls also stopped making sure the
    NV_NOFREE attribute was set for those variables, causing an invalid
    free later on. This caused the funcname.ksh script:
    https://gist.github.com/ormaaj/12874b68acd06ee98b59
    to crash even more readily than it did before.
    
    Even after this commit there are various crashing bugs left for
    that script, all intermittent and with different backtraces and
    dependent on the operating system and malloc variant used.
    Investigation ongoing at: https://github.com/ksh93/ksh/issues/212

commit 5aba0c725154425352ea61a53639562fbfe4498a
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sun Mar 7 23:19:36 2021 -0500

    Fix set/unset state for short integer (typeset -si) (#211)
    
    This commit fixes at least three bugs:
    1. When issuing 'typeset -p' for unset variables typeset as short
       integer, a value of 0 was incorrectly diplayed.
    2. ${x=y} and ${x:=y} were still broken for short integer types
       (re: 9f2389ed). ${x+set} and ${x:+nonempty} were also broken.
    3. A memory fault could occur if typeset -l followed a -s option
       with integers. Additonally, now the last -s/-l wins out as the
       option to utilize instead of it always being short.
    
    src/cmd/ksh93/include/name.h:
    - Fix the nv_isnull() macro by removing the direct exclusion of
      short integers from this set/unset test. This breaks few things
      (only ${.sh.subshell} and ${.sh.level}, as far as we can tell)
      while potentially correcting many aspects of short integer use
      (at least bugs 1 and 2 above), as this macro is widely used.
    - union Value: add new pid_t *pidp pointer member for PID values
      (see further below).
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - To fix bug 3 above, unset the 'shortint' flag and NV_SHORT
      attribute bit upon encountering the -l optiobn.
    
    *** To fix ${.sh.subshell} to work with the new nv_isnull():
    
    src/cmd/ksh93/sh/defs.h:
    - Add new 'realsubshell' member to the shgd (aka shp->gd) struct
      which will be the integer value for ${.sh.subshell}.
    
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/data/variables.c:
    - Initialize SH_SUBSHELLNOD as a pointer to shgd->realsubshell
      instead of using a short value (.s) directly. Using a pointer
      allows nv_isnull() to return a positive for ${.sh.subshell} as
      a non-null pointer is what it checks for.
    - While we're at it, initialize PPIDNOD ($PPID) and SH_PIDNOD
      (${.sh.pid}) using the new pdip union member, which is more
      correct as they are values of type pid_t.
    
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - Update the ${.sh.subshell} increases/decreases to refer to
      shgd->realsubshell (a.k.a. shp->gd->realsubshell).
    
    *** To fix ${.sh.level} after changing nv_isnull():
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Add a specific exception for SH_LEVLNOD to the nv_isnull() test,
      so that ${.sh.level} is always considered to be set. Its handling
      throughout the code is too complex/special for a simple fix, so
      we have to special-case it, at least for now.
    
    *** Regression test additions:
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add in missing short integer tests and correct the one that
      existed. The -si test now yields 'typeset -x -r -s -i foo'
      instead of 'typeset -x -r -s -i foo=0' which brings it in line
      with all the others.
    - Add in some other -l attribute tests for floats. Note, -lX test
      was not added as the size of long double is platform dependent.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add tests for ${x=y} and ${x:=y} used on short int variables.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 40860dac20b02b5b471fb3c22cd543735123eb10
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 7 17:01:17 2021 +0000

    job_init(): fix init on setpgid() permission denied (re: 41ebb55a)
    
    Symptoms of this bug below. These only seem to occur on Linux and
    only if you replace your initial login shell by ksh using 'exec'.
    
    1. An erroneous 'Interrupt' message is printed after stopping the
       read builtin in a script. Reproducer:
    
            $ exec arch/*/bin/ksh
            $ cat ./reproducer.sh
            #!/bin/sh
            read foo
            $ ./reproducer.sh
            ^C$ <Enter>
            [1] + Interrupt                ../reproducer.sh
    
    2. Ctrl+C fails to stop /bin/package make. Reproducer:
    
            $ exec arch/*/bin/ksh
            $ mv arch arch.old
            $ bin/package make
            # Press Ctrl+C multiple times
    
    Analysis: In 41ebb55a, I made an error in changing job_init() to
    work correctly on non-interactive shells. This line from before:
    
    552|    if(possible = (setpgid(0,job.mypgid)>=0) || errno==EPERM)
    
    was changed to:
    
    555|    possible = (setpgid(0,job.mypgid) >= 0);
    556|    if(sh_isoption(SH_INTERACTIVE) && (possible || errno==EPERM))
    
    That is wrong. Before, 'possible' was set to 1 (true) if setpgid()
    either succeeded or failed with EPERM. After, it is only set to 1
    if setpgid() succeeds. As a result, job control initialisation is
    aborted later on upon a test for non-zero 'possible'.
    
    src/cmd/ksh93/sh/jobs.c: job_init():
    - Once again set possible to 1 even if setpgid() fails with EPERM.
    
    Thanks to @JohnoKing for the bug report and reproducers.
    
    Resolves: https://github.com/ksh93/ksh/issues/210

commit aad74597f7e7bf5ee3a58d59f964e5880731fb20
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 6 18:45:42 2021 +0000

    Fixes for -G/--globstar (re: 5312a59d)
    
    The fix for '.' and '..' in regular globbing broke '.' and '..' in
    globstar. No globstar pattern that contains '.' or '..' as any
    pathname component still matched. This commit fixes that.
    
    This commit also makes symlink/** mostly work, which it never has
    done in any ksh93 version. It is correct and expected that symlinks
    found by patterns are not resolved, but symlinks were not resolved
    even when specified as explicit non-pattern pathname components.
    For example, /tmp/** breaks if /tmp is a symlink (e.g. on macOS),
    which looks like a bug.
    
    src/lib/libast/include/glob.h,
    src/lib/libast/misc/glob.c: glob_dir():
    - Make symlink/** work. we can check if the string pointed to by
      pat is exactly equal to *. If so, we are doing regular globbing
      for that particular pathname element, and it's okay to resolve
      symlinks. If not (if it's **), we're doing globstar and we should
      not be matching symlinks.
    - Let's also introduce proper identification of symlinks (GLOB_SYM)
      and not lump them in with other special files (GLOB_DEV).
    - Fix the bug with literal '.' and '..' components in globstar
      patterns. In preceding code, the matchdir pointer gets set to the
      complete glob pattern if we're doing globstar for the current
      pathname element, null if not. The pat pointer gets set to the
      elements of the pattern that are still left to be processed;
      already-done elements are trimmed from it by increasing the
      pointer. So, to do the right thing, we need to make sure that '.'
      or '..' is skipped if, and only if, it is the final element in
      the pattern (i.e., if pat does not contain a slash) and is not
      specified literally as '.' or '..', i.e., only if '.' or '..' was
      actually resolved from a glob pattern. After this change,
      '**/.*', '**/../.*', etc. do the right thing, showing all your
      hidden files and directories without undesirable '.' and '..'
      results; '.' and '..' are skipped as final elements, unless you
      literally specify '**/.', '**/..', '**/foo/bar/..', etc.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Note the symlink/** globstar change.
    
    src/cmd/ksh93/sh.1:
    - Try to document the current globstar behaviour more exhausively.
    
    src/cmd/ksh93/tests/glob.sh:
    - Add tests. Try to cover all the corner cases.
    
    src/cmd/ksh93/tests/shtests:
    - Since tests in glob.sh do not use err_exit, they were not
      counted. Special-case glob.sh for counting the tests: count the
      lines starting with a test_* function call.
    
    Resolves: https://github.com/ksh93/ksh/issues/146

commit 89c69b076d03d52083cba1c17ca56370ee613bc2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 7 00:27:33 2021 +0000

    Fix command history corruption on syntax error (re: e999f6b1)
    
    Analysis: When a syntax error occurs, the shell performs a
    longjmp(3) back to exfile() in main.c on line 417:
    415|    if(jmpval)
    416|    {
    417|            Sfio_t *top;
    418|            sh_iorestore((void*)shp,0,jmpval);
    419|            hist_flush(shp->gd->hist_ptr);
    420|            sfsync(shp->outpool);
    The first thing it does is restore the file descriptor state
    (sh_iorestore), then it flushes the history file (hist_flush), then
    it synchronises sfio's logical stream state with the physical
    stream state using (sfsync).
    
    However, the fix applied in e999f6b1 caused sh_iorestore() to sync
    all sfio streams unconditionally. So this was done before
    hist_flush(), which caused unpredictable behaviour, including
    temporary and/or permanent history corruption, as this also synched
    shp->outpool before hist_flush() had a chance to do its thing.
    
    The fix is to only call sfsync() in sh_iorestore() if we're
    actually about to call ftruncate(2), and not otherwise.
    
    Moral of the story: bug fixes should be as specific as possible to
    minimise the risk of side effects.
    
    src/cmd/ksh93/sh/io.c: sh_iorestore():
    - Only call sfsync() if we're about to truncate a file.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add test.
    
    Thanks to Marc Wilson for reporting the bug and to Johnothan King
    for finding the commit that introduced it.
    
    Resolves: https://github.com/ksh93/ksh/issues/209
    Relevant: https://github.com/att/ast/issues/61

commit c1986c4e1a42bf26230f1138b74ef7c7bc7f173b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Mar 5 22:43:38 2021 -0800

    Fix Ctrl+D after ksh receives SIGWINCH (#208)
    
    src/cmd/ksh93/edit/edit.c: ed_read():
    - The loop that handles SIGWINCH assumes sfpkrd will return and
      set errno to EINTR if ksh is sent SIGWINCH. This only occurs
      when select(2) is used to wait for input, so tell sfpkrd to
      use select if possible. This is only done if the last argument
      given to sfpkrd is '2', which should avoid regressions.
    
    src/lib/libast/sfio/sfpkrd.c: sfpkrd():
    - Always use select if the last argument is 2. This allows
      sfpkrd() to intercept SIGWINCH when necessary.
    
    Fixes: https://github.com/ksh93/ksh/issues/202

commit 9f2389ed93238bf3c0825713cf81ae2fa4a0d209
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Mar 6 03:56:52 2021 +0000

    Fix ${x=y} and ${x:=y} for numeric types of x
    
    These POSIX expansions first assign y to x if x is unset or empty,
    respectively, and then they yield the value of x. This was not
    working on any ksh93 version if x was typeset as numeric (integer
    or float) but still unset, as in not assigned a value.
    
    $ unset a; typeset -i a; printf '%q\n' "${a:=42}" "$a"
    0
    ''
    
    Expected output:
    42
    42
    
    src/cmd/ksh93/sh/macro.c:
    - Fix the test for set/unset variable. It was broken because it
      only checked for the existence of the node, which exists after
      'typeset', but did not check if a value had been assigned. This
      additional check needs to be done with the nv_isnull() macro, but
      only for expansions of the regular M_BRACE type. Special
      expansions cannot have an unset state.
    - As of commit 95294419, we know that an nv_optimize() call may be
      needed before using nv_isnull() if the shell is compiled with
      SHOPT_OPTIMIZE. Move the nv_optimize() call from that commit
      forward to before the new check that calls nv_isnull(), and only
      bother with it if the type is M_BRACE.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add tests for this bug. Test float and integer, and also check
      that ${a=b} and ${a:=b} correctly treat the value of 'b' as an
      arithmetic expression of which the result is assigned to 'a' if
      'a' was typeset as numeric.
    
    src/cmd/ksh93/tests/attributes.sh,
    src/cmd/ksh93/tests/comvar.sh,
    src/cmd/ksh93/tests/nameref.sh,
    src/cmd/ksh93/tests/types.sh:
    - Fix a number of tests to report failures correctly.
    
    Resolves: https://github.com/ksh93/ksh/issues/157

commit f8f2c4b60835dd5d37a02f8dc0fe62ab74e4da94
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 5 21:55:25 2021 +0000

    Remove obsolete quote balancing hack
    
    The old Bourne shell failed to check for closing quotes and command
    substitution backticks when encountering end-of-file in a parser
    context (such as a script). ksh93 implemented a hack for partial
    compatibility with this bug, tolerating unbalanced quotes and
    backticks in backtick command subsitutions, 'eval', and command
    line invocation '-c' scripts only.
    
    This hack became broken for backtick command substitutions in
    fe20311f/350b52ea as a memory leak was fixed by adding a newline to
    the stack at the end of the command substitution. That extra
    newline becomes part of any string whose quotes are not properly
    terminated, causing problems such as the one detailed here:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01889.html
    
        $ touch abc
        $ echo `ls "abc`
        ls: abc
        : not found
    
    No other fix for the memory leak is known that doesn't cause other
    problems. (The alternative fix detailed in the referenced mailing
    list post causes a different corner-case regression.)
    
    Besides, the hack has always caused other corner case bugs as well:
    
            $ ksh -c '((i++'
    Actual: ksh: i++(: not found
            (If an external command 'i++(' existed, it would be run)
    Expect: ksh: syntax error at line 1: `(' unmatched
    
            $ ksh -c 'i=0; echo $((++i'
    Actual: (empty line; the arithmetic expansion is ignored)
    Expect: ksh: syntax error at line 1: `(' unmatched
    
            $ ksh -c 'echo $(echo "hi)'
    Actual: ksh: syntax error at line 1: `(' unmatched
    Expect: ksh: syntax error at line 1: `"' unmatched
    
    So, it's time to get rid of this hack. The old Bourne shell is
    dead and buried. No other shell tries to support this breakage.
    Tolerating syntax errors is just asking for strange side effects,
    inconsistent states, and corner case bugs. We should not want to do
    that. Old scripts that rely on this will just need to be fixed.
    
    src/cmd/ksh93/sh/lex.c:
    - struct lexdata: Remove 'char balance' member for remembering an
      unbalanced quote or backtick.
    - sh_lex(): Remove the back to remember and compensate for
      unbalanced quotes/backticks that was executed only if we were
      executing a script from a string, as opposed to a file.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Note the change.
    
    Resolves: https://github.com/ksh93/ksh/issues/199

commit 2215e036d4b9177758d9e795151d9b448f96dc5e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Mar 5 21:54:46 2021 +0000

    tests/arrays.sh: fix running with xtrace

commit 7a0934a8d619b1a4a6500fc9d10b1ddc7d721af6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Mar 4 23:42:07 2021 +0000

    libast: remove antiquated macOS bug workaround
    
    That Mac OS X bug workaround is now 23 days shy of the age of
    majority, and that bug (symlinks testing as regular files) is
    pretty basic, so I'm betting it's fixed by now.
    
    src/lib/libast/include/ast_dir.h:
    - Do not disable D_TYPE on macOS.

commit b48e5b33651420242db5c8a7f180b31c2076a085
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Mar 4 13:37:13 2021 +0000

    Fix arbitrary command execution vuln in array subscripts in arith
    
    This commit fixes an arbitrary command execution vulnerability in
    array subscripts used within the arithmetic subsystem.
    
    One of the possible reproducers is:
            var='1$(echo INJECTION >&2)' ksh -c \
                    'typeset -A a; ((a[$var]++)); typeset -p a'
    
    Output before this commit:
            INJECTION
            typeset -A a=([1]=1)
    The 'echo' command has been surreptitiously executed from an
    external environment variable.
    
    Output after this commit:
            typeset -A a=(['1$(echo INJECTION >&2)']=1)
    The value is correctly used as an array subscript and nothing in it
    is parsed or executed. This is as it should be, as ksh93 supports
    arbitrary subscripts for associative arrays.
    
    If we think about it logically, the C-style arithmetic subsystem
    simply has no business messing around with shell expansions or
    quoting at all, because those don't belong to it. Shell expansions
    and quotes are properly resolved by the main shell language before
    the arithmetic subsystem is even invoked. It is particularly
    important to maintain that separation because the shell expansion
    mechanism also executes command substitutions.
    
    Yet, the arithmetic subsystem subjected array subscripts that
    contain `$` (and only array subscripts -- how oddly specific) to
    an additional level of expansion and quote resolution. For some
    unfathomable reason, there are two lines of code doing specifically
    this. The vulnerability is fixed by simply removing those.
    
    Incredibly, variants of this vulnerability are shared by bash, mksh
    and zsh. Instead of fixing it, it got listed in Bash Pitfalls!
    http://mywiki.wooledge.org/BashPitfalls#y.3D.24.28.28_array.5B.24x.5D_.29.29
    
    src/cmd/ksh93/sh/arith.c:
    - scope(): Remove these two lines that implement the vulnerability.
                            if(strchr(sub,'$'))
                                    sub = sh_mactrim(shp,sub,0);
    - scope(), arith(): Remove the NV_SUBQUOTE flag from two
      nv_endsubscript() calls. That flag causes the array subscript to
      retain the current level of shell quoting. The shell quotes
      everything as in "double quotes" before invoking the arithmetic
      subsystem, and the bad sh_mactrim() call removed one level of
      quoting. Since we're no longer doing that, this flag should no
      longer be passed, or subscripts may get extra backslash escapes.
    
    src/cmd/ksh93/include/name.h,
    src/cmd/ksh93/sh/array.c:
    - nv_endsubscript(): The NV_SUBQUOTE flag was only passed from
      arith.c. Since it is now unused, remove it.
    
    src/cmd/ksh93/tests/arith.sh:
    - Tweak some tests: fix typos, report wrong values.
    - Add 21 tests. Most are based on reproducers contributed by
      @stephane-chazelas and @hyenias. They verify that this
      vulnerability is gone and that no quoting bugs were introduced.
    
    Resolves: https://github.com/ksh93/ksh/issues/152

commit a61430f1b536a7ebdbac351e3e5695dc1132e7df
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Tue Mar 2 22:26:39 2021 -0500

    Readonly attribute size fix (#201)
    
    Corrected the size of attribute(s) being overwritten with 0 when
    'readonly' or 'typeset -r' was applied to an existing variable. Since
    one cannot set any attributes with the 'readonly' command, its function
    call to setall() needs to be adjusted to acquire the current size from
    the old size or existing size of the variable. A plain 'typeset -r' is
    the same as 'readonly' in that it needs to load the old size as its
    current size for use in the subsequent to call to nv_newattr().
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - Both 'readonly' and 'typeset -r' end up calling setall(). setall()
      has full visibility into all user supplied values and existing
      values that are needed to differentiate whereas name.c newattr()
      acquires combined state flags.
    - Added a conditional check if the readonly flag was requested by
      user then meets the criteria of having present size of 0, cannot
      be a numeric nor binary string, and is void of presence of any of
      the justified string attributes.
    - -L/R/Z justified string attributes if not given a value default
      to a size of 0 which means to autosize. A binary string can have
      a fixed field size, e.g. -bZ. The present of any of the -L/R/Z
      attribules means that current size is valid and should be used
      even if it is zero.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Added various tests to capture and reiterate that 'readonly' should
      be equivalent to 'typeset -r' and applying them should not alter the
      previous existing size unless additional attributes are set along
      with typeset command.

commit 61468486933853d8a45a1a5e03db03708d18b64c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 28 23:02:36 2021 +0000

    Fix compiling with SHOPT_REGRESS and SHOPT_P_SUID
    
    src/cmd/ksh93/Mamfile:
    - regress.c: add missing SH_DICT define for getopt self-doc string,
      needed after USAGE_LICENSE macros were removed. (re: ede47996)
    
    src/cmd/ksh93/init.c: sh_init():
    - Do not set error_info.exit early in init. This is the function
      that is called when an error exits the shell. It defaults to
      exit(3). Setting it to sh_exit() early on can cause a crash if an
      error is thrown before shell initialisation is fully finished.
      So set it at the end of sh_init() instead.
    - __regress__: Remove error_info.exit workaround. (re: 506bd2b2)
    - Fix SHOPT_P_SUID directive. This is not actually a 0/1 value, so
      we should use #ifdef and not #if. If SHOPT_REGRESS is on, it it
      set to a function call. (re: 2182ecfa)
    
    src/cmd/ksh93/SHOPT.sh:
    - Document that SHOPT_P_SUID cannot be set to 0 to be turned off.

commit 5d82004426726774bccb1ee8ef069296592836bc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 28 21:57:38 2021 +0000

    Misc regression test fixes
    
    src/cmd/ksh93/tests/basic.sh:
    - Fix syntax error (unbalanced single quote) in two -c script
      invocations. It only failed to throw a syntax error due to a
      problematic hack in ksh that may be removed soon.
      See: https://github.com/ksh93/ksh/issues/199
    
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/io.sh:
    - Redirect standard error on two ksh -i invocations to /dev/null
      to work around the test hanging on AIX.
    
    src/cmd/ksh93/tests/comvario.sh:
    - Remove duplicate copyright header.
    - Fix warning format.
    
    src/cmd/ksh93/tests/functions.sh:
    - Fix the 'TERM signal sent to last process of function kills the
      script' test so that it works on AIX. We cannot rely on grepping
      'ps' output as the external 'sleep' command does not show the
      command name on AIX. Instead, find it by its parent PID.
    
    src/cmd/ksh93/tests/locale.sh,
    src/cmd/ksh93/tests/substring.sh:
    - Rewrite the very broken multibyte locale tests (two outright
      syntax errors due to unbalanced quotes, and none of the tests
      actually worked).
    - Since they set LC_ALL, move them to locale.sh.
    
    src/cmd/ksh93/tests/variables.sh:
    - Redirect stderr on some 'ulimit -t unlimited' invocations (which
      fork subshells as the intended side effect) to /dev/null in case
      that exceeds a system-defined limit.

commit 7ad274f8b660879b5535af3f2d8fd3cb86ef2684
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Feb 27 13:21:58 2021 -0800

    Add more out of memory checks (re: 18529b88) (#192)
    
    The referenced commit neglected to add checks for strdup() calls.
    That calls malloc() as well, and is used a lot.
    
    This commit switches to another strategy: it adds wrapper functions
    for all the allocation macros that check if the allocation
    succeeded, so those checks don't need to be done manually.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/init.c:
    - Add sh_malloc(), sh_realloc(), sh_calloc(), sh_strdup(),
      sh_memdup() wrapper functions with success checks. Call nospace()
      to error out if allocation fails.
    - Update new_of() macro to use sh_malloc().
    - Define new sh_newof() macro to replace newof(); it uses
      sh_realloc().
    
    All other changed files:
    - Replace the relevant calls with the wrappers.
    - Remove now-redundant success checks from 18529b88.
    - The ERROR_PANIC error message calls are updated to inclusive-or
      ERROR_SYSTEM into the exit code argument, so libast's error()
      appends the human-readable version of errno in square brackets.
      See src/lib/libast/man/error.3
    
    src/cmd/ksh93/edit/history.c:
    - Include "defs.h" to get access to the wrappers even if KSHELL is
      not defined.
    - Since we're here, fix a compile error that occurred with KSHELL
      undefined by updating the type definition of hist_fname[] to
      match that of history.h.
    
    src/cmd/ksh93/bltins/enum.c:
    - To get access to sh_newof(), include "defs.h" instead of
      <shell.h> (note that "defs.h" includes <shell.h> itself).
    
    src/cmd/ksh93/Mamfile:
    - enum.c: depend on defs.h instead of shell.h.
    - enum.o: add an -I. flag in the compiler invocation so that defs.h
      can find its subsequent includes.
    
    src/cmd/builtin/pty.c:
    - Define one outofmemory() function and call that instead of
      repeating the error message call.
    - outofmemory() never returns, so remove superfluous exit handling.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit c928046aa9abfe4287acad5d6abb8fbed4c75096
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 27 01:01:30 2021 +0000

    Fix ${.sh.fun} leaking out of DEBUG trap
    
    The value of the ${.sh.fun} variable, which is supposed to contain
    the name of the function currently being executed, leaks out of the
    DEBUG trap if it executes a function. Reproducer:
    
    $ fn() { echo "executing the function"; }
    $ trap fn DEBUG
    $ trap - DEBUG
    executing the function
    $ echo ${.sh.fun}
    fn
    
    ${.sh.fun} should be empty outside the function.
    
    Annalysis:
    
    The sh_debug() function in xec.c, which executes the DEBUG trap
    action, contains these lines, which are part of restoring the state
    after running the trap action with sh_trap():
    
            nv_putval(SH_PATHNAMENOD,shp->st.filename,NV_NOFREE);
            nv_putval(SH_FUNNAMENOD,shp->st.funname,NV_NOFREE);
            shp->st = savst;
    
    First the SH_PATHNAMENOD (${.sh.file}) and SH_FUNNAMENOD
    (${.sh.fun}) variables get restored from the values in the shell's
    scoped information struct (shp->st), but that is done *before*
    restoring the parent scope with 'shp->st = savst;'. It should be
    done after. Fixing the order is sufficient to fix the bug.
    
    However, I am not convinced that these nv_putval() calls are good
    for anything at all. Setting, unsetting, restoring, etc. the
    ${.sh.fun} and ${.sh.file} variables is already being handled
    perfectly well elsewhere in the code for executing functions and
    sourcing dot scripts. The DEBUG trap is neither here nor there.
    There's no reason for it to get involved with these variables.
    
    I was unable to break anything after simply removing those two
    lines. So I strongly suspect this is another case, out of many now,
    where a bug in ksh93 is properly fixed by removing some code.
    
    I couldn't get ${.sh.file} to leak similarly -- I think this is
    because SH_PATHNAMENOD (and not SH_FUNNOD) is set explicitly in
    exfile() in main.c, masking this incorrect restore. It is the only
    place where SH_PATHNAMENOD and SH_FUNNOD are not both set.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove these two spurious nv_putval() calls.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression test for leaking ${.sh.fun}.

commit ef8b80cfd7d43bb4a12d70fdf18babe8f790c214
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 26 12:56:36 2021 +0000

    edit.c: make tput invocation work in restricted mode (re: 7ff6b73b)
    
    At init, and then whenever the TERM variable changes, ed_setup()
    uses sh_trap() to run the external 'tput' command to get the
    current terminal escape sequence for moving up the cursor one line.
    
    A sh_trap() call executes a shell command as if a shell script's
    trap action had executed it, so is subject to modes like the
    restricted mode. As of 7ff6b73b, we execute tput using its absolute
    path (found and hardcoded at compile time) for better
    robustness/security. This fails in restricted mode as it does not
    allow executing commands by absolute path. But in C, nothing stops
    us from turning that off.
    
    src/cmd/ksh93/edit/edit.c: ed_setup():
    
    - Block SIGINT while doing all of the following, so the user can't
      interrupt it and escape from restricted mode. Even without that,
      it's probably a good idea to do this, so an interrupt doesn't
      cause an inconsistent state.
          Note that sigblock() and sigrelease() are macros defined in
      features/sigfeatures. To get those, we need to include <fault.h>.
    
    - Temporarily turn off SH_RESTRICTED before sh_trap()ping tput to
      get the terminal command to move the cursor up one position.
    
    - Avoid potentially using a sequence that was cut off. Only use the
      resulting string if its length does not exceed the space reserved
      for CURSOR_UP. Otherwise, empty it.
    
    src/cmd/ksh93/Mamfile:
    - Add fault.h dependency to edit.c.
    
    src/cmd/ksh93/edit/history.c:
    - Fix typos in introductory comment.

commit d9865ceae173046ad65919e334bba683cd7bc04a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 26 11:20:58 2021 +0000

    emacs: Fix three tab completion bugs
    
    1. The editor accepted literal tabs without escaping in certain
       cases, causing buggy and inconsistent completion behaviour.
       https://github.com/ksh93/ksh/issues/71#issuecomment-656970959
       https://github.com/ksh93/ksh/issues/71#issuecomment-657216472
    
    2. After completing a filename by choosing from a file completion
       menu, the terminal cursor was placed one position too far to the
       right, corrupting command line display. This happened with
       multiline active.
       https://github.com/ksh93/ksh/issues/71#issue-655093805
    
    3. A completion menu was displayed if the file name to be completed
       was at the point where the rest of it started with a number,
       even if that part uniquely identified it so the menu had 1 item.
       https://www.mail-archive.com/ast-users@lists.research.att.com/msg00436.html
    
    src/cmd/ksh93/edit/emacs.c:
    
    - Cosmetic consistency: change two instances of cntl('[') to ESC.
    
    - ed_emacsread(): Fix number 1 by refusing to continue into default
      processing if a tab character was not used for tab completion.
      Instead, beep and continue to the next read loop iteration. This
      behaviour is consistent with most other shells, so I doubt there
      will be objections. To enter a literal tab it's simple enough to
      escape it with ^V (the 'stty lnext' character) or \.
    
    - draw(): Fix number 2 by correcting an off-by-one error in the
      ed_setcursor() call that updates the terminal's cursor display
      in multiline mode. The 'old' and 'new' parameters need to have
      identical values in this particular call to avoid the cursor
      position being off by one to the right. This change makes it
      match the corresponding ed_setcursor() call in vi.c. See below*
      for details. Thanks to Lev Kujawski for the help in analysing.
    
    src/cmd/ksh93/edit/completion.c: ed_expand():
    
    - Fix number 3 by changing from '=' mode (menu-based completion) to
      '\' mode (ordinary filename completion) if the menu would only
      show one option, which was pointless and annoying. This never
      happened in vi mode, so possibly the ed_expand() call in emacs.c
      could have been improved instead. But I'm comfortable with fixing
      it here and not in emacs.c, because this fixes it at a more
      fundamental level, plus it's straightforward and obvious here.
    
    Resolves: https://github.com/ksh93/ksh/issues/71
    ____
    * Further details on bug number 2:
    
    At https://github.com/ksh93/ksh/issues/71#issuecomment-786391565
    Martijn Dekker wrote:
    > I'm back to my original hypothesis that there is somehow an
    > off-by-one error related to the ed_setcursor() call that gets
    > executed when in multiline mode. I cannot confirm whether that
    > off-by-one error is actually in the call itself, or occurs
    > sometime earlier on one of the many possible occasions where
    > ep->cursor is changed. But everything else appears to work
    > correctly, so it's not unlikely that the problem is in the call
    > itself.
    >
    > For reference, this is the original version of that call in
    > emacs.c:
    >
    > ksh/src/cmd/ksh93/edit/emacs.c
    > Lines 1556 to 1557 in df2b9bf
    >  if(ep->ed->e_multiline && option == REFRESH)
    >       ed_setcursor(ep->ed, ep->screen, ep->cursor-ep->screen, ep->ed->e_peol, -1);
    >
    > There is a corresponding call in the vi.c refresh() function
    > (which does the same thing as draw() in emacs.c), where the third
    > (old) and fourth (new) arguments are actually identical:
    >
    > ksh/src/cmd/ksh93/edit/vi.c
    >
    > Lines 2086 to 2087 in df2b9bf
    >  if(vp->ed->e_multiline && vp->ofirst_wind==INVALID)
    >       ed_setcursor(vp->ed, physical, last_phys+1, last_phys+1, -1);
    >
    > The expectation for this particular call is in fact that they
    > should be identical, so that a delta of zero is calculated in
    > that function. Delta not being zero is what causes the cursor to
    > be positioned wrong.
    >
    > In vi.c, last_phys is a macro that is defined as editb.e_peol,
    > and editb is a macro that is defined as (*vp->ed). Which means
    > last_phys means vp->ed->e_peol, which is the same as
    > ep->ed->e_peol in emacs.c. (These editors were originally
    > separate programs by different authors, and I suppose this is how
    > it shows. Korn didn't want to change all the variable names to
    > integrate them, so made macros instead.)
    >
    > That leaves the question of why vi.c adds 1 to both last_phys
    > a.k.a. e_peol arguments, and emacs.c uses e_peol for new without
    > adding anything. Analysing the ed_setcursor() code could answer
    > that question.
    >
    > So, this patch makes emacs.c do it the same way vi.c does. Let's
    > make the third argument identical to the fourth. My brief testing
    > shows the bug is fixed, and the regression tests yield no
    > failures. This fix is also the most specific change possible, so
    > there are few opportunities for side effects (I hope).
    
    At https://github.com/ksh93/ksh/issues/71#issuecomment-786466652
    Lev Kujawski wrote:
    > I did a bit of research on this, and I think the fix to have the
    > Emacs editing mode do the same as Vi is correct.
    >
    > From RELEASE:
    > 08-05-01 In multiline edit mode, the refresh operation will now clear
    > the remaining portion of the last line.
    >
    > Here's a fragment from the completion.c of the venerable but
    > dated CDE DtKsh:
    >
    >                 else
    >                         while (*com)
    >                         {
    >                                 *out++  = ' ';
    >                                 out = strcopy(out,*com++);
    >                         }
    >                 *cur = (out-outbuff);
    >                 /* restore rest of buffer */
    >                 out = strcopy(out,stakptr(0));
    >                 *eol = (out-outbuff);
    >
    > Noticeably missing is the code to add a space after file name
    > completions. So, it seems plausible that if multiline editing
    > mode was added beforehand,the ep->ed->p_eol !=
    > ep->cursor-ep->screen case might never have occurred during
    > testing.
    >
    > Setting the 'first' parameter to -1 seems to be a pretty explicit
    > indicator that the author(s) intended the line clearing code to
    > run, hence the entry in RELASE.
    >
    > The real issue is that if we update the cursor by calling
    > ed_setcursor on line 1554 with old != new, the later call to
    > setcursor on line 1583, here:
    >
    >       I = (ncursor-nscreen) - ep->offset;
    >       setcursor(ep,i,0);
    >
    > will use outdated screen information to call setcursor, which,
    > coincidentally, calls ed_setcursor.

commit df2b9bf67f8553e5fec5914d55f3330e02967b77
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 26 01:30:08 2021 +0000

    vi: fix buffer corruption after filename completion (re: 4cecde1d)
    
    This bug was backported along with a fix from 93v-. An inconsistent
    state occurred if you caused a file name completion menu to appear
    with two TABs (which also puts you in command mode) but then
    re-enter insert mode (e.g. with 'a') instead of entering a number.
    
        $ set -o vi
        $ cd /
        $ bin/p    [press TAB twice]
        1) pax
        2) ps
        3) pwd     [now type 'a', 'wd', return]
        $ bin/pwd
        >          [PS2 prompt wrongly appears; press return]
        /
        $
    
    Here's another reproducer, suggesting the problem is a write past
    the end of the screen buffer:
    
        $ set -o vi
        $ cd /
        $ bin/p    [press TAB twice]
        1) pax
        2) ps
        3) pwd     [press '0', then '$']
        $ bin/p    [cursor is one too far to the right, past the 'p'!]
        [Further operations show random evidence of memory corruption]
    
    Harald van Dijk found the cause (thanks!):
    > In vi.c's textmod there is
    >
    > case '=':               /** list file name expansions **/
    > ...
    >         ++last_virt;
    > ...
    >         if(ed_expand(vp->ed,(char*)virtual, &cur_virt, &last_virt, ch, vp->repeat_set?vp->repeat:-1)<0)
    >         {
    > ...
    >                 last_virt = i;
    > ...
    >         }
    >         else if((c=='=' || (c=='\\'&&virtual[last_virt]=='/')) && !vp->repeat_set)
    >         {
    > ...
    >         }
    >         else
    >         {
    > ...
    >                 --last_virt;
    > ...
    >         }
    >         break;
    >
    > That middle block does not restore last_virt, and everything goes
    > wrong after that. That function used to restore last_virt until
    > commit 4cecde1 (#41). The commit message says it was taken from
    > ksh93v- and indeed this bug is also present in that version too.
    > If I restore the last_virt = i; that was there originally, like
    > below, then this bug seems to be fixed. I do not know why it was
    > taken out, taking it out does not seem to be necessary to fix the
    > original bug.
    
    src/cmd/ksh93/edit/vi.c: textmod():
    - Restore the missing restore of last_virt.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add test that checks basic completion menu functionality works
      and runs modified versions of the two reproducers above.
    
    Resolves: https://github.com/ksh93/ksh/issues/195

commit 82d6272733732ab9288b7cd66125bc6db90f7fa4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 25 16:23:42 2021 +0000

    manual: invocation options: edits for clarity
    
    src/cmd/ksh93/data/builtins.c:
    - sh_optksh[]: Edit descriptions of -c and -s options for clarity.
    - sh_set[]: The --rc long name equivalent for -E was documented
      wrong, but in any case it does not belong in sh_set[], because
      that also shows up in 'set --man' and this invocation-only option
      cannot be used with 'set'. Remove it. (Note that all other
      invocation options already don't have inline documentation of
      their long equivalents. This may or may not be fixed at some
      point. It is problematic because they should not be documented in
      sh_set[] but there is no other good place for them.)
    
    src/cmd/ksh93/sh.1:
    - Generally edit the Invocation section for clarity.
    - Document the long invocation option equivalents.
    - Remove some nonsense from the -s description: "Shell output,
      except for the output of the Special Commands listed above, is
      written to file descriptor 2" (which is standard error).
      In fact, this option has no influence at all on what is written
      to standard error or standard output.

commit caf7ab6c71fdc0ed357582b03e93db41c609731e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 23 21:35:26 2021 +0000

    Make PATH properly survive a shared-state ${ comsub; }
    
    Reproducer:
    
    $ ksh -c 'v=${ PATH=/dev/null; }; echo $PATH; whence ls'
    /dev/null
    /bin/ls
    
    The PATH=/dev/null assignment should survive the shared-state
    command substitution, and does, yet 'ls' is still found.
    The variable became inconsistent with the internal pathlist.
    
    This bugfix is from the 93v- beta.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Do not save and restore pathlist for a subshare.
    - A few other subshell tweaks from 93v- that made sense:
      . reset shp->subdup (bitmask for dups of 1) after saving it
      . use e_dot instead of "." for consistency
      . retry close(1) if it was interrupted
    
    src/cmd/ksh93/tests/path.sh:
    - Add test for this bug.

commit e3882fe71b0746dd64317105fad3963dc00280b1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 23 09:37:20 2021 +0000

    Only run pty tests on systems where pty is known to be good
    
    On some systems (AIX, HP-UX, OpenBSD) the pty tests may hang.
    
    On all systems except Darwin/macOS, FreeBSD and Linux, the pty
    tests show one or more regressions. But when I try out the failing
    tests manually in a real session, it seems to work fine. So I
    suspect pty is broken and not ksh.
    
    src/cmd/ksh93/tests/pty.sh:
    - For now, only run the pty tests on Darwin, FreeBSD and Linux.
    
    src/lib/libast/Mamfile:
    - tvsleep.c: Add missing error.h dependency (re: 2f7918de).
      (unrelated, but just wasn't worth its own commit)

commit 733f70e94b0d17a5f0c491b699a7b2bc0a69795d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Feb 22 14:16:32 2021 -0800

    Fix many compiler warnings and remove unused variables (#191)
    
    Most of these changes remove unused variables, functions and labels
    to fix -Wunused compiler warnings. Somewhat notable changes:
    
    src/cmd/ksh93/bltins/print.c:
    - Removed the unused 'neg' variable.
      Patch from ksh2020: https://github.com/att/ast/pull/725
    
    src/cmd/ksh93/bltins/sleep.c:
    - Initialized ns to fix three -Wsometimes-uninitialized warnings.
    
    src/cmd/ksh93/edit/{emacs,vi}.c:
    - Adjust strncpy size to fix two -Wstringop-truncation warnings.
    
    src/cmd/ksh93/include/shell.h:
    - The NOT_USED macro caused many -Wunused-value warnings,
      so it has been replaced with ksh2020's macro:
      https://github.com/att/ast/commit/19d0620a
    
    src/cmd/ksh93/sh/expand.c:
    - Removed an unnecessary 'ap = ' since 'ap' is never read
      between stakseek and stakfreeze.
    
    src/cmd/ksh93/edit/vi.c: refresh():
    - Undef this function's 'w' macro at the end of it to stop it
      potentially interfering with future code changes.
    
    src/cmd/ksh93/sh/nvdisc.c,
    src/lib/libast/misc/magic.c,
    src/lib/libast/regex/regsubexec.c,
    src/lib/libast/sfio/sfpool.c,
    src/lib/libast/vmalloc/vmbest.c:
    - Fixed some indentation to silence -Wmisleading-indentation
      warnings.
    
    src/lib/libast/include/ast.h:
    - For clang, now only suppress hundreds of -Wparentheses warnings
      as well as a few -Wstring-plus-int warnings.
      Clang's -Wparentheses warns about things like
            if(foo = bar())
      which assigns to foo and checks the assigned value.
      Clang wants us to change this into
            if((foo = bar()))
      Clang's -Wstring-plus-int warns about things like
            "string"+x
      where x is an integer, e.g. "string"+3 represents the string
      "ing". Clang wants us to change that to
            "string"[3]
      The original versions represent a perfectly valid coding style
      that was common in the 1980s and 1990s and is not going to change
      in this historic code base. (gcc does not complain about these.)
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 83630f9d1c10330141f69e4a891f9cf0bc8dea94
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 21 23:07:30 2021 +0000

    editors: fix broken SIGWINCH handling
    
    In the emacs editor:
     1.  press ESC
     2.  change the size of your terminal window
    and your screen is mysteriously cleared. (Until recent fixes, the
    shell probably also crashed somewhere in the job control code.)
    
    The cause is the way SIGWINCH is handled by ed_read() in edit.c.
    For the emacs editor, it sends a Ctrl+L character to the input
    buffer. The Ctrl+L command refreshes the command line. And it so
    happens that ESC plus Ctrl+L is a command to clear the screen in
    the emacs editor.
    
    With the exeption of vi insert/command mode for which it uses a
    shared flag, edit.c does not know the state of the editor, because
    their data are internal to emacs.c and vi.c. So it doesn't know
    whether you're in some mode that treats keyboard input specially.
    Which means this way of dealing with SIGWINCH is fundamentally
    misdesigned and is not worth fixing.
    
    It gets sillier: in addition to sending keyboard commands, edit.c
    was also communicating directly with emacs.c and vi.c via a flag,
    e_nocrnl, which means 'please don't make Ctrl+L emit a linefeed'
    (it normally refreshes on a new line but that is undesirable for
    SIGWINCH). So there is already a hack that breaks the barrier
    between edit.c and emacs.c/vi.c. Let's do that properly instead.
    
    As of this commit, ed_read() does not send any fake keystrokes.
    Instead, two extern functions, emacs_redraw() and vi_redraw(), are
    defined for redrawing the command line. These are put in emacs.c
    and vi.c so they have access to relevant static data and functions.
    Then, instead of sending keyboard commands to the editor and
    returning, ed_read() simply calls the redraw function for the
    active editor, then continues and waits for input. Much cleaner.
    
    src/cmd/ksh93/include/edit.h:
    - Remove e_nocrnl flag from Edit_t struct.
    - Define externs emacs_redraw() and vi_redraw(). Since Emacs_t and
      Vi_t types are not known here, we have to declare void* pointers
      and the functions will have to use typecasts.
    
    src/cmd/ksh93/edit/edit.c:
    - ed_read(): Call emacs_redraw() or vi_redraw() as per above.
    - ed_getchar(): Remove comment about a nonexistent while loop.
    
    src/cmd/ksh93/edit/emacs.c:
    - Updates corresponding to removal of e_nocrnl flag.
    - Add emacs_redraw(). This one is pretty simple. Refresh the
      command line, then ed_flush() to update the cursor display.
    
    src/cmd/ksh93/edit/vi.c:
    - Updates corresponding to removal of e_nocrnl flag. Also remove a
      similar internal 'nonewline' flag which is now equally redundant.
    - Move the Ctrl+L handling code (minus writing the newline) into
      the vi_redraw() function.
    - Change two cases where vi set nonewline and sent Ctrl+L to itself
      into simple vi_redraw() calls.
    - Add vi_redraw(). This is more complicated as it incorporates the
      previous Ctrl+L code. It needs an added refresh() call with a
      check whether we're currently in command or insert mode, as those
      use different refresh methods. Luckily edit.c already maintains
      an *e_vi_insert flag in ed_getchar() that we can use. Since vi's
      refresh() already calls ed_flush(), we don't need to add that.

commit 18529b88c631fce94461809b0740410c173b9791
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 21 22:27:28 2021 +0000

    Add lots of checks for out of memory (re: 0ce0b671)
    
    Huge typeset -L/-R adjustment length values were still causing
    crashses on sytems with not enough memory. They should error out
    gracefully instead of crashing.
    
    This commit adds out of memory checks to all malloc/calloc/realloc
    calls that didn't have them (which is all but two or three).
    
    The stkalloc/stakalloc calls don't need the checks; it has
    automatic checking, which is done by passing a pointer to the
    outofspace() function to the stakinstall() call in init.c.
    
    src/lib/libast/include/error.h:
    - Change the ERROR_PANIC exit status value from ERROR_LEVEL (255)
      to 77, which is what it is supposed to be according to the libast
      error.3 manual page. Exit statuses > 128 for anything else than
      signals are not POSIX compliant and may cause misbehaviour.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/init.c:
    - To facilitate consistency, add a simple extern sh_outofmemory()
      function that throws an ERROR_PANIC "out of memory".
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/data/builtins.c:
    - Remove now-redundant e_nospace[] extern message; it is now only
      used in one place so it might as well be a string literal in
      sh_outofmemory().
    
    All other changed files:
    - Verify the result of all malloc/calloc/realloc calls and call
      sh_outofmemory() if they fail.

commit 0ce0b67149d28c9e4d5c29e2ecb2c7679236820e
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sun Feb 21 04:34:18 2021 -0500

    Fix segmentation fault for justified strings (re: bdb99741) (#190)
    
    Additional adjustments to previous commit bdb9974 to correct
    crashes when the max size of a justified string is requested.
    This commit corrects the following:
    
    Before (Ubuntu 64bit):
    $ typeset -L $(((1<<31)-1)) s=h; typeset +p s
    Segmentation fault (core dumped)
    
    After:
    $ typeset -L $(((1<<31)-1)) s=h; typeset +p s
    typeset -L 2147483647 s
    
    src/cmd/ksh93/sh/name.c: nv_putval():
    - Alter the variables size, dot, and append from int to unsigned
      int to prevent unwanted negative values from being expressed.
    - By creating size, dot, and append as unsigned ints; (unsigned)
      type casting is avoided.

commit 51b2e360fa33f631767ae0606063afc0625d5ad1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 23:20:54 2021 +0000

    job_reap(): fix use of unitialised pointer
    
    This solves another intermittent crash that happened upon
    processing SIGWINCH in the emacs editor. See also: 7ff6b73b
    
    I found this bug while testing ksh 93u+m on OpenBSD. Due to its
    pervasive security hardening, this system crashes a program
    reliably where others crash it intermittently, which is invaluable.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - The pw pointer is not ever given a value if the loop breaks on
      line 318-319, but it is used unconditionally on lines 464-470,
      Initialise the pointer to null on function entry and do not call
      job_list() and job_unpost() if the pointer is still null.

commit 797adc39cc38cd88a8b330e060d6092ad7953478
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 23:19:50 2021 +0000

    Top-level documentation tweaks
    
    LICENSE.md:
    - Fix Markdown formatting of headers.
    
    README.md:
    - Add coding style note about opening braces.
    
    TODO:
    - Add note about OpenBSD regress test failures.

commit f57f7b7a19ce068541466c396e76f8c5b6550ebf
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 22:12:23 2021 +0000

    emacs: more correct fix (re: 9ccb9572)
    
    sptr is set to drawbuff, but may change; drawbuff itself will not
    change and reading before the start of that was the actual cause of
    the crash.

commit 9ccb9572f363a7df6f1e6cd159379a1efb01070c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 21:09:01 2021 +0000

    emacs: fix crash due to read before start of buffer
    
    It's amazing what can happen when you compile ksh using standard
    malloc (i.e. with AST vmalloc disabled) on OpenBSD. Its security
    hardening provokes crashes that reveal decades-old unsolved bugs.
    This one is an attempt to access one byte before the beginning of
    the command line buffer when the cursor is at the beginning of it.
    On this system configuration, it provoked an instant crash whenever
    you moved the cursor back to the beginning of the command line,
    e.g. with ^A or the cursor keys.
    
    src/cmd/ksh93/edit/emacs.c: draw():
    - Check that the cursor is actually past the first position of the
      command line buffer before trying to read the position
      immediately before it. If not, zero the value.

commit 500757d78b63235b1cbc27762704a51d3c2bec38
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 19:52:08 2021 +0000

    Error out on 'redirect >foo' inside ${ shared-state comsub; }
    
    The following caused an infinite loop:
    
            v=${ exec >/dev/tty; }
            v=${ redirect >/dev/tty; }
    
    Even the original authors didn't figure out how to 'exec >foo' or
    'redirect >foo' inside a non-forking command substitution, so they
    fork it by calling sh_subfork(). If we delete that call, even
    normal command substitutions enter into that infinite loop. But of
    course a shared-state comsub can never fork as it would no longer
    share its state. Without a solution to make this work without
    forking, an error message is the only sensible thing left to do.
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - If we're redirecting standard output (1), the redirection is
      permanent as in 'exec'/'redirect' (flag==2), and we're in a
      subshare, then error out.
    
    Resolves: https://github.com/ksh93/ksh/issues/128

commit e1690f61ffc88d0fd68bf4e705d802e8fd100ee0
Author: sterlingjensen <5555776+sterlingjensen@users.noreply.github.com>
Date:   Sat Feb 20 07:58:52 2021 -0600

    package: Fix unspecified behavior after "unset PWD" (#176)
    
    POSIX warns about "unset PWD" leading to unspecified behavior from
    the pwd util, which we then use.
    
    bin/package, src/cmd/INIT/package.sh:
    - Determine if the shell has $PWD with a feature test. Only unset
      PWD if it does not (the old Bourne shell).
    - Clean up 'case' flow.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit bdb997415dd7aee8c51c20439c75aa0d963cea77
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 12:27:53 2021 +0000

    Fix multiple buffer overflows with justified strings (-L/-R/-Z)
    
    ksh crashed in various different and operating system-dependent
    ways when attempting to create or apply justification strings
    using typeset -L/-R/-Z, especially if large sizes are used.
    
    The crashes had two immediate causes:
    - In nv_newattr(), when applying justification attributes, a buffer
      was allocated for the justified string that was exactly 8 bytes
      longer than the original string. Any larger justification string
      caused a buffer overflow (!!!).
    - In nv_putval(), when applying existing attributes to a new value,
      the corresponding memmove() either did not zero-terminate the
      justified string (if the original string was longer than the
      justified string) or could read memory past the original string
      (if the original string was shorter than the justified string).
      Both scenarios can cause a crash.
    
    This commit fixes other minor issues as well, such as a mysterious
    8 extra bytes allocated by several malloc/realloc calls. This may
    have been some naive attempt to paper over the above bugs. It seems
    no one can make any other kind of sense of it.
    
    A readjustment bug with zero-filling was also fixed.
    
    src/cmd/ksh93/sh/name.c:
    - nv_putval():
      . Get rid of the magical +8 bytes for malloc and realloc. Just
        allocate one extra byte for the terminating zero.
      . Fix the memmove operation to use strncpy instead, so that
        buffer overflows are avoided in both scenarios described above.
        Also make it conditional upon a size adjustment actually
        happening (i.e. if 'dot' is nonzero).
      . Mild refactoring: combine two 'if(sp)' blocks into one;
        declare variables only used there locally for legibility.
    - nv_newattr():
      * Replace the fatally broken "let's allocate string length + 8
        bytes no matter the size of the adjustment" routine with a new
        one based on work by @hyenias (see comments in #142). It is
        efficient with memory, taking into account numeric types,
        growing strings, and shrinking strings.
      * Fix zero-filling in readjustment after changing the initial
        size of a -Z attribute. If the number was zero, all zeros were
        still skipped, leaving an empty string.
    
    Thanks to @hyenias for originally identifying this breakage and
    laying the groundwork for fixing nv_newattr(), and to @lijog for
    the crash analysis that revealed the key to the nv_putval() fix.
    
    Resolves: https://github.com/ksh93/ksh/issues/142
    Resolves: https://github.com/ksh93/ksh/issues/181

commit a959a352911cabba2ffd15bce3c513bf939d614a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 20 05:13:51 2021 +0000

    DEBUG trap: restore status 2 trigger to skip command (re: d00b4b39)
    
    So now we know what that faulty check for shp->indebug in sh_trap()
    was meant to do: it was meant to pass down the trap handler's exit
    status, via sh_debug(), down to sh_exec() (xec.c) so that it could
    then skip the execution of the next command if the trap's exit
    status is 2, as documented in the manual page. As of d00b4b39, exit
    status 2 was not passed down, so this stopped working.
    
    This commit reinstates that functionality, but without the exit
    status bug in command substitutions caused by the old way.
    
    src/cmd/ksh93/sh/fault.c: sh_trap():
    - Save the trap's exit status before restoring the parent
      envionment's exit status. Make this saved exit status the return
      value of the function. (This does not break anything, AFAICT; the
      majority of sh_trap() calls ignore the return value, and the few
      that don't ignore it seem to expect it to return exactly this.)
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - The sh_trap() fix has one side effect: whereas the exit status of
      a skipped command was always 2 (as per the trap handler), now it
      is always 0, because it gets reset in sh_exec() but no command is
      executed. That is probably not a desirable change in behaviour,
      so let's fix that here instead: set sh.exitval to 2 when skipping
      commands.
    
    src/cmd/ksh93/sh.1:
    - Document that ${.sh.command} shell-quotes its arguments for use
      by 'eval' and such. This fact was not documented anywhere, AFAIK.
    
    src/cmd/ksh93/shell.3:
    - Document that $? (exit status) is made local to trap handlers.
    - Document that sh_trap() returns the trap handler's exit status.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add test for this bug.
    - Add a missing test for the exit status 255 functionality (if a
      DEBUG trap handler yields this exit status and we're executing a
      function or dot script, a return is triggered).
    
    Fixes: https://github.com/ksh93/ksh/issues/187

commit 2b805f7f1cdbeecaa75d9b1623fc238a552362da
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Feb 19 19:22:24 2021 -0800

    Fix many spelling errors and word repetitions (#188)
    
    Many of the errors fixed in this commit are word repetitions
    such as 'the the' and minor spelling errors. One formatting
    error in the ksh man page has also been fixed.

commit 4e47f89b0695a900e064cb88ba52179d058d9ea4
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Fri Feb 19 15:58:04 2021 -0700

    libast: Improve and harden tvsleep (re: 72968eae) (#186)
    
    On SVR4 platforms, select is a sometimes erroneous wrapper around
    the poll system call, so call poll directly for efficiency purposes if
    it implies no loss in precision.
    
    See, e.g., http://bugs.motifzone.net/long_list.cgi?buglist=129 .
    
    src/lib/libast/features/tvlib:
    - For systems lacking nanosleep, test whether select is truly more
      precise than poll.
    
    src/lib/libast/tm/tvsleep.c:
    - Verify that tv argument is not null.
    - Immediately return if asked to sleep for a duration of zero.
    - Immediately initialize timespec in the nanosleep case.
    - Revise variable names to use Apps Hungarian.
    - Use poll instead of select when there is no loss in precision.
    - Check for overflow in the poll case.
    - Improve comments.
    - Revise arithmetic to work with unsigned types, rather than
      casting to long.
    - Do not return non-zero if we have slept for a sufficient
      time.

commit 350b52ea4e686ba3c51fd2ec72b1eb9a69431954
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 18 23:24:50 2021 +0000

    Update `comsub`-with-alias anti-leak hack (re: fe20311f)
    
    In the 93v- beta, they add a newline instead of a space.
    This has fewer side effects as final newlines get stripped.
    It's still a hack and it would still be nice to have a real fix,
    but it seems even the AT&T guys couldn't come up with one.
    
    src/cmd/ksh93/sh/macro.c:
    - To somehow avoid a memory leak involving alias substitution,
      append a linefeed instead of a space to the comsub buffer.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add test for minor regression caused by the RedHat version.

commit 72968eaed61064d298ebeb683dab0819fa4d0f47
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Thu Feb 18 11:45:27 2021 -0700

    Revise the pow(1,inf) IEEE feature test to defeat clever compilers (#184)
    
    Compilers like GCC are capable of optimizing away calls like
    pow(1,inf), which caused the IEEE compliance feature test within
    libast to incorrectly succeed on platforms with non-IEEE behavior.
    
    This is arguably a bug within GCC, as floating point optimizations
    should never alter the behavior of code unless IEEE compliance is
    explicitly disabled via a flag like -ffast-math. Programs in which
    only some calls to pow are optimized away are liable to severely
    malfunction.
    
    Thanks to Martijn Dekker for pointing this issue out and the kind
    operators of polarhome.com for permitting me gratis use of their
    Unix systems.
    
    src/lib/libast/comp/omitted.c:
    - Add IEEE compliant functions that wrap powf, pow, and powl.
    
    src/lib/libast/features/float:
    - Look for powf, pow, and powl in the C library.
    - For compilers that do the right thing, like the native toolchains
      of Solaris and UnixWare, use lightweight macros to wrap the pow
      functions.
    - Use a volatile function pointer through which to access the C
      library's pow function in an attempt to defeat code optimization.
    - For these overzealous compilers, define pow to _ast_pow so that
      the same technique can be used within the above functions.

commit c2cb0eae198f2c550147704abc5fe56b77b82473
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 18 14:46:10 2021 +0000

    Make 'read' compatible with Shift-JIS
    
    This commit fixes a bug in the 'read' built-in: it did not properly
    skip over multibyte characters. The bug never affects UTF-8 locales
    because all UTF-8 bytes have the high-order bit set. But Shift-JIS
    characters may include a byte corresponding to the ASCII backslash
    character, which cauased buggy behaviour when using 'read' without
    the '-r' option that disables backslash escape processing.
    
    It also makes the regression tests compatible with Shift-JIS
    locales. They failed with syntax errors.
    
    src/cmd/ksh93/bltins/read.c:
    - Use the multibyte macros when skipping over word characters.
      Based on a patch from the old ast-developers mailing list:
      https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01848.html
    
    src/cmd/ksh93/include/defs.h:
    - Be a bit smarter about causing the compiler to optimise out
      multibyte code when SHOPT_MULTIBYTE is disabled. See the updated
      comment for details.
    
    src/cmd/ksh93/tests/locale.sh:
    - Put all the supported locales in an array for future tests.
    - Add test for the 'read' bug. Include it in a loop that tests
      64 SHIFT-JIS character combinations. Only one fails on old ksh:
      the one where the final byte corresponds to the ASCII backslash.
      It doesn't hurt to test all the others anyway.
    
    src/cmd/ksh93/tests/basic.sh,
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/quoting2.sh:
    - Fix syntax errors that occurred in SHIFT-JIS locales as the
      parser was processing literal UTF-8 characters. Not executing
      that code is not enough; we need to make sure it never gets
      parsed as well. This is done by wrapping the commands containing
      literal UTF-8 strings in an 'eval' command as a single-quoted
      operand.
    
    .github/workflows/ci.yml:
    - Run the tests in the ja_JP.SJIS locale instead of ja_JP.UTF-8.
      UTF-8 is already covered by the nl_NL.UTF-8 test run; that should
      be good enough.

commit 8c2d8e5f46b46e0c9caedb04ec6bcd5222c6f61e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 18 02:05:39 2021 +0000

    Revert 096f46ee ("Fix for memory mgmt in variable expansion")
    
    This reverts a Solaris patch (105-CR7032068) with no documentation
    on what it fixes or how or why. There are reports about it causing
    a crash and/or a regression:
    
    https://github.com/ksh93/ksh/issues/180#issuecomment-780980442

commit 50b665b1ed85fbb1e03ec8af879754cc48cd1d9b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 18 01:07:43 2021 +0000

    Revert 0e4c4d61 ("Fix minor typeset attribute regressions")
    
    This commit introduced the following bug, which is worse than the
    one that commit fixed: it became impossible to alter the size of an
    existing justified string attribute.
    
    Thanks to @hyenias for catching this bug:
    https://github.com/ksh93/ksh/issues/142#issuecomment-780931533
    
    $ unset s; typeset -L 100 s=h; typeset +p s; typeset -L 5 s; typeset +p s
    typeset -L 100 s
    typeset -L 100 s
    
    Expected output:
    typeset -L 100 s
    typeset -L 5 s
    
    src/cmd/ksh93/sh/name.c:
    - Revert.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Revert: re-disable tests for minor attribute output regressions.
    - Add a test for this bug and potential similar bugs.

commit 241b5a4af5168e5cbf6a52eaa9ed84f10a91e8e0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 17 18:06:15 2021 +0000

    tests/variables.sh: now also test PATH (re: 222515bf)

commit 911d6b066fec4d66e212eff3496b3c17184258b5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 17 15:33:48 2021 +0000

    Fix subshell scoping of changes in shared command substitution
    
    A ${ shared-state command substitution; } (internally called
    subshare) is documented to share its state with the parent shell
    environment, so all changes made within the command substitution
    survive outside of it. However, when it is run within a
    virtual/non-forked subshell, variables that are not already local
    to that subshell will leak out of it into the grandparent state.
    Reproducer:
    
            $ ksh -c '( v=${ bug=BAD; } ); echo "$bug"'
            BAD
    
    If the variable pre-exists in the subshell, the bug does not occur:
    
            $ ksh -c '( bug=BAD1; v=${ bug=BAD2; } ); echo "$bug"'
            (empty line, as expected)
    
    The problem is that the sh_assignok() function, which is
    responsible for variable scoping in virtual subshells, does not
    ever bother to create a virtual subshell scope for a subshare.
    That is an error if a subshare's parent (or higher-up ancestor)
    environment is a virtual subshell, because a scope needs to be
    created in that parent environment if none exists.
    
    To make this bugfix possible, first we need to get something out of
    the way. nv_restore() temporarily sets the subshell's pointer to
    the preesnt working directory, shpwd, to null. This causes
    sh_assignok() to assume that the subshell is a subshare (because
    subshares don't store their own PWD) and refuse to create a scope.
    However, nv_restore() sets it to null for a different purpose: to
    temporarily disable scoping for *all* virtual subshells, making
    restoring possible. This is a good illustration of why it's often
    not a good idea to use the same variable for unrelated purposes.
    
    src/cmd/ksh93/sh/subshell.c:
    - Add a global static subshell_noscope flag variable to replace the
      misuse of sh.shpwd described above.
    - sh_assignok():
      . Check subshell_noscope instead of shpwd to see if scope
        creation is disabled. This makes it possible to distinguish
        between restoring scope and handling subshares.
      . If the current environment is a subshare that is in a virtual
        subshell, create a scope in the parent subshell. This is done
        by temporarily making the parent virtual subshell the current
        subshell (by setting the global subshell_data pointer to it)
        and calling sh_assignok() again, recursively.
    - nv_restore(): To disable subshell scope creation while restoring,
      set subshell_noscope instead of saving and unsetting sh.shpwd.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add tests. I like tests. Tests are good.
    
    Fixes: https://github.com/ksh93/ksh/issues/143

commit a282ebc8fe8463237cdb9ab1a1ed4124874a3d91
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Feb 17 06:29:12 2021 -0800

    Fix emacs backslash escaping behavior (#179)
    
    This commit fixes the following:
    
    1. Emacs mode ignores --nobackslashctrl (re: 24598fed) when in
       reverse search.
    
    2. When entering more than one backslash, emacs reverse search mode
       deletes multiple backslashes after pressing backspace once.
       Reproducer:
       $ set --emacs --nobackslashctrl
       $ <Ctrl+R> \\\\<Backspace>
    
    3. Except when in reverse search, the backslash fails to escape a
       subsequent interrupt character (^C). Reproducer:
       $ set --emacs --backslashctrl
       $ teststring \<Ctrl+C>
    
    src/cmd/ksh93/edit/emacs.c:
    - Disable escaping backslashes in emacs reverse search if
      'nobackslashctrl' is enabled.
    - Fix the buggy behavior of backslashes in emacs reverse
      search by processing backslashes in a loop.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add regression tests.
    
    src/cmd/ksh93/sh.1:
    - Fix a minor documentation error (^C is the usual interrupt
      character, not ^?).
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit fe74702766ead950db63fdfb09125062912858b9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 16 16:45:06 2021 +0000

    Fix miscellaneous typos

commit 3a315f58f6d7aac06ea931cc355113af1c0b215d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 16 13:36:50 2021 +0000

    More 'case' regression tests (re: e37aa358)
    
    Ref.: https://github.com/ksh93/ksh/issues/177

commit e37aa358bf89337e1cab9885fcbcbef63c7ef153
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 16 06:50:12 2021 +0000

    Fix BUG_CASEEMPT: empty 'case' list was syntax error
    
    'case x in esac' should be syntactically correct, but was an error:
    
            $ ksh -c 'case x in esac'
            ksh: syntax error at line 1: `case' unmatched
    
    Inserting a newline was a workaround:
    
            $ ksh -c $'case x in\nesac'
            (no output)
    
    The problem was that the 'esac' reserved word was not being
    recognised if it immediately followed the 'in' reserved word.
    
    src/cmd/ksh93/sh/lex.c: sh_lex():
    - Do not turn off recognition of reserved words after 'in' if we're
      in a 'case' construct; only do this for 'for' and 'select'.
    
    src/cmd/ksh93/tests/case.sh:
    - Add seven regression test for correct recognition of 'esac'.
      Only two failed on ksh93. The rest is to catch future bugs.
    
    Fixes: https://github.com/ksh93/ksh/issues/177

commit 29b11bba3ac25f468ef8db4829cd64d4d0ca5330
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Feb 15 17:47:15 2021 -0800

    Fix the Alt+D and Alt+H keyboard shortcuts in emacs mode (#178)
    
    This commit fixes the functionality of Alt+D and Alt+H in emacs mode.
    These keyboard shortcuts are intended to work on whole words, but
    after commit 13c3fb21 their functionality was reduced to deleting only
    singular letters:
    
    $ Test word <Alt+H>    # This should delete 'word', not just 'd'.
    $ Foo <Alt+B> <Alt+D>  # This should delete 'Foo', not just 'F'.
    
    Man page entries for reference:
      M-d       Delete current word.
      M-^H      (Meta-backspace) Delete previous word.
      M-h       Delete previous word.
    
    src/cmd/ksh93/edit/emacs.c:
    - 'count' cannot be overridden when handling Alt+D or Alt+H,
      so add the total number of repetitions to count (the number of
      repetitions can't be negative).
    - If 'count' is a negative number, set it to one before adding the
      number of repetitions.

commit 24598fed7c365133c463e7781faee547c0b2bf46
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 16 00:07:03 2021 +0000

    Add new 'nobackslashctrl' shell option; other minor editor tweaks
    
    The following emacs editor 'feature' kept making me want to go back
    to bash. I forget a backslash escape in a command somewhere. So I
    go back to insert it. I type the \, then want to go forward. My
    right arrow key, instead of moving the cursor, then replaces my
    backslash with garbage. Why? The backslash escapes the following
    control character at the editor level and inserts it literally.
    
    The vi editor has a variant of this which is much less harmful. It
    only works in insert mode and the backslash only escapes the next
    kill or erase character.
    
    In both editors, this feature is completely redundant with the
    'stty lnext' character which is ^V by default -- and works better
    as well because it also escapes ^C, ^J (linefeed) and ^M (Return).
    
     [In fact, you could even issue 'stty lnext \\' and get a much more
     consistent version of this feature on any shell. You have to type
     two backslashes to enter one, but it won't kill your cursor keys.]
    
    If it were up to me alone, I'd simply remove this misfeature from
    both editors. However, it is long-standing documented behaviour.
    It's in the 1995 book. Plus, POSIX specifies the vi variant of it.
    
    So, this adds a shell option instead. It was quite trivial to do.
    Now I can 'set --nobackslashctrl' in my ~/.kshrc. What a relief!
    
    Note: To keep .kshrc compatibile with older ksh versions, use:
        command set --nobackslashctrl 2>/dev/null
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/data/options.c:
    - Add new SH_NOBACKSLCTRL/"nobackslashctrl" long-form option. The
      "no" prefix shows it to the user as "backslashctrl" which is on
      by default. This avoids unexpectedly changing historic behaviour.
    
    src/cmd/ksh93/edit/emacs.c: ed_emacsread(),
    src/cmd/ksh93/edit/vi.c: getline():
    - Only set the flag for special backslash handling if
      SH_NOBACKSLCTRL is off.
    
    src/cmd/ksh93/sh.1,
    src/cmd/ksh93/data/builtins.c:
    - Document the new option (as "backslashctrl", on by default).
    
    Other minor tweaks:
    
    src/cmd/ksh93/edit/edit.c:
    - ed_setup(): Add fallback #error if no tput method is set. This
      should never be triggered; it's to catch future editing mistakes.
    - escape(): cntl('\t') is nonsense as '\t' is already a control
      character, so change this to just '\t'.
    - xcommands(): Let's enable the ^X^D command for debugging
      information on non-release builds.
    
    src/cmd/ksh93/features/cmds:
    - The tput feature tests assumed a functioning terminal in $TERM.
      However, for all we know we might be compiling with no tty and
      TERM=dumb. The tput commands won't work then. So set TERM=ansi
      to use a standard default.

commit 786a549e49408ee8490d34f988b40aa00a4576de
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 15 15:41:31 2021 +0000

    test/jobs.sh: use slightly more widely supported ps -o format

commit 5be585f45b4ba61aa61cd8951f5e9e5d9a7ba623
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 15 01:57:17 2021 +0000

    tests/options.sh: add forgotten SHOPT_BRACEPAT check (re: af5f7acf)

commit af5f7acf9992edef3b4429591f235ab79d23a3c4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 14 23:51:19 2021 +0000

    Fix bugs related to --posix shell option (re: 921bbcae, f45a0f16)
    
    This fixes the following:
    1. 'set --posix' now works as an equivalent of 'set -o posix'.
    2. The posix option turns off braceexpand and turns on letoctal.
       Any attempt to override that in a single command such as 'set -o
       posix +o letoctal' was quietly ignored. This now works as long
       as the overriding option follows the posix option in the command.
    3. The --default option to 'set' now stops the 'posix' option, if
       set or unset in the same 'set' command, from changing other
       options. This allows the command output by 'set +o' to correctly
       restore the current options.
    
    src/cmd/ksh93/data/builtins.c:
    - To make 'set --posix' work, we must explicitly list it in
      sh_set[] as a supported option so that AST optget(3) recognises
      it and won't override it with its own default --posix option,
      which converts the optget(3) string to at POSIX getopt(3) string.
        This means it will appear as a separate entry in --man output,
      whether we want it to or not. So we might as well use it as an
      example to document how --optionname == -o optionname, replacing
      the original documentation that was part of the '-o' description.
    
    src/cmd/ksh93/sh/args.c: sh_argopts():
    - Add handling for explitit --posix option in data/builtins.c.
    - Move SH_POSIX syncing SH_BRACEEXPAND and SH_LETOCTAL from
      sh_applyopts() into the option parsing loop here. This fixes
      the bug that letoctal was ignored in 'set -o posix +o letoctal'.
    - Remember if --default was used in a flag, and do not sync options
      with SH_POSIX if the flag is set. This makes 'set +o' work.
    
    src/cmd/ksh93/include/argnod.h,
    src/cmd/ksh93/data/msg.c,
    src/cmd/ksh93/sh/args.c: sh_printopts():
    - Do not potentially translate the 'on' and 'off' labels in 'set
      -o' output. No other shell does, and some scripts parse these.
    
    src/cmd/ksh93/sh/init.c: sh_init():
    - Turn on SH_LETOCTAL early along with SH_POSIX if the shell was
      invoked as sh; this makes 'sh -o' and 'sh +o' show expected
      options (not that anyone does this, but correctness is good).
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/include/shell.h:
    - The state flags were in defs.h and most (but not all) of the
      shell options were in shell.h. Gather all the shell state and
      option flag definitions into one place in shell.h for clarity.
    - Remove unused SH_NOPROFILE and SH_XARGS option flags.
    
    src/cmd/ksh93/tests/options.sh:
    - Add tests for these bugs.
    
    src/lib/libast/misc/optget.c: styles[]:
    - Edit default optget(3) option self-documentation for clarity.
    
    Several changed files:
    - Some SHOPT_PFSH fixes to avoid compiling dead code.

commit cd1cd9c5da3702768e4c88f92a0a82e5a49955f0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 14 19:39:01 2021 +0000

    add NEWS entry for e2d54b71

commit e2d54b716922d68452355a6f905c520ed7116ad7
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Sun Feb 14 00:27:04 2021 -0700

    sleep: guarantee sleeping specified time at minimum (#174)
    
    With this patch, the Korn shell can now guarantee that calls to
    sleep on systems using the select or poll method always result in
    the system clock advancing by that much time, assuming no
    interruptions. This compensates for deficiencies in certain
    systems, including SCO UnixWare.
    
    Discussion: https://github.com/ksh93/ksh/pull/174
    
    src/lib/libast/tm/tvsleep.c:
    - Ensure that at least the time requested to sleep has elapsed
      for the select and poll methods.
    - Simplify the logic of calculating the time remaining to
      sleep and handle the case of an argument of greater than
      10e9 nanoseconds being passed to tvsleep.
    
    src/cmd/ksh93/bltins/sleep.c:
    - Eliminate the check for EINTR to handle other cases wherein
      we have not slept enough.
    
    src/cmd/ksh93/tests/variables.sh:
    - Improve the diagnostic message when the sleep test fails.
    - Revise the SECONDS function test to expect that we always
      sleep for at least the time specified.
    
    src/cmd/ksh93/tests/functions.h:
    - Redirect ps stderr to /dev/null. UnixWare ps prints an error
      message about not being able to find the controlling terminal
      when shtests output is piped, but we are only using ps to find
      the PID.

commit 0e9aaf163536fa28ae323f7afb7927f839551b32
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 14 06:32:57 2021 +0000

    move exit/return tests from basic.sh to return.sh (re: 092b90da)

commit 21d00ffb6c193284f109b6cb243f2679ffacae14
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 14 01:17:35 2021 +0000

    Fix build on QNX
    
    This makes ksh 93u+m build on the following system:
    
            $ uname -a
            QNX qnx 6.5.0 2010/07/09-14:44:03EDT x86pc x86
    
    Thanks to polarhome.com for providing the QNX shell account.
    
    There are a number of regressions left to work out:
    
    arrays.sh[636]: copying a large array fails
    bracket.sh[129]: /tmp/ksh93.shtests.1753215026.6923/bracket.C/original should be older than /tmp/ksh93.shtests.1753215026.6923/bracket.C/newer
    bracket.sh[132]: /tmp/ksh93.shtests.1753215026.6923/bracket.C/newer should be newer than /tmp/ksh93.shtests.1753215026.6923/bracket.C/original
    builtins.sh[683]: real_t1 not found after parent directory renamed in subshell
    functions.sh[1023]: cannot handle comsub depth > 256 in function
    io.sh[252]: <# not working for pipes
    io.sh[337]: read -n3 from pipe not working
    io.sh[346]: read -n3 from fifo failed -- expected 'a', got 'abc'
    io.sh[349]: read -n1 from fifo failed -- expected 'b', got 'd'
    io.sh[379]: should have timed out
    io.sh[380]: line1 should be 'prompt1: '
    io.sh[381]: line2 should be line2
    io.sh[382]: line3 should be 'prompt2: '
    io.sh[406]: LC_ALL=C read -n2 from pipe 'a bcd' failed -- expected 'a bcd', got 'ab cd'
    io.sh[406]: LC_ALL=C.UTF-8 read -n2 from pipe 'a bcd' failed -- expected 'a bcd', got 'ab cd'
    jobs.sh[86]: warning: skipping subshell job control test due to non-compliant 'ps'
    pty.sh[105]: POSIX sh 026(C): line 120: expected "(Stopped|Suspended)", got EOF
    pty.sh[128]: POSIX sh 028(C): line 143: expected "(Stopped|Suspended) \(SIGTTIN\)", got EOF
    pty.sh[151]: POSIX sh 029(C): line 166: expected "(Stopped|Suspended) \(SIGTTOU\)", got EOF
    signal.sh[310]: kill -TERM $$ failed, required termination by signal 'EXIT'
    signal.sh[310]: kill -VTALRM $$ failed, required termination by signal 'EXIT'
    signal.sh[310]: kill -PIPE $$ failed, required termination by signal 'EXIT'
    
    (The io.sh failures mean libast sfpkrd() is not working.)
    
    src/lib/libast/obsolete/spawn.c:
    - Removed. Didn't compile due to wrong number of arguments to
      spawnve(2), but is obsolete and unused.
    
    src/lib/libast/comp/localeconv.c:
    - The initialisation of two static 'struct lconv' variables was
      done in a way that depended on OS headers declaring the struct
      members in a certain order. This holds on most systems, but not
      on QNX, and POSIX does not actually specify the order at all:
            https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/locale.h.html
      So each member must be initialised by name. But C89 does not
      support initialising struct members by name, so we have to do it
      using an initialiser function that simply assigns the values.
    
    src/lib/libast/comp/spawnveg.c:
    - Fix for systems without either P_DETACH or _P_DETACH.
    
    src/lib/libast/features/vmalloc,
    src/lib/libast/vmalloc/vmmopen.c,
    src/lib/libast/Mamfile:
    - Add test for sys/shm.h header. If it doesn't exist, as it doesn't
      on QNX, use the stub vmmapopen() as the real one won't compile.
      (Mamfile: Add dependency on FEATURE/vmalloc to vmmopen.c.)
    
    src/lib/libast/vmalloc/malloc.c:
    - Remove superfluous externs that are already provided by either
      AST or system headers. The 'void cfree' extern caused a build
      failure on QNX because cfree() is of type int on QNX.
    
    src/lib/libast/comp/conf.tab:
    - Remove check for _map_spawnve; src/lib/libast/RELEASE says it was
      removed.

commit cd35ec6048f3292da3e988d7ac00891dba4e101c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 23:21:09 2021 +0000

    tests/builtins.sh: fix fail due to translated system messages
    (re: f7ffaaba, d1483150)

commit fb7551634a453d809079bb127adb360ac053711b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 15:56:13 2021 +0000

    Fix exec/redirect (fd != 1) in shared-state comsub (re: db72f41f)
    
    That OpenSUSE patch introduced a bug: file descriptors other than 1
    that were globally redirected using 'exec' or 'redirect' no longer
    survived a ${ shared-state; } command substitution.
    
    Related: https://github.com/ksh93/ksh/issues/128
    
    src/cmd/ksh93/sh/io.c:
    - Add check for shp->subshare to the OpenSUSE patch.
    
    src/cmd/ksh93/tests/io.sh:
    - Add test.

commit 5529d13d28440a35fde28e9d1700ef36503f9c2f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 14:30:18 2021 +0000

    tests/pty.sh: avoid typeahead: add 10ms delay (re: 5c389035)
    
    We can't actually check for the typeahead effects as they are
    timing-dependent and do not work on the slower GitHub runners.

commit d790731a807021bf96750c2a57e28d8b15aca659
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 13:48:35 2021 +0000

    github: Revert failed experiment (re: 2e6c56df, 9ad9a1de, 5c389035)
    
    .github/workflows/ci.yml:
    - Go back to wrapping the regression tests in script(1).
    
    src/cmd/ksh93/data/builtins.c:
    - Never mind about the stty builtin.
    
    src/cmd/ksh93/tests/pty.sh:
    - Refuse to run if there isn't a functioning tty.
    - Make sure stty(1) works on /dev/tty by redirecting stdin.

commit 2e6c56df823470329d1518af441fc1a929061110
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 13:15:46 2021 +0000

    github: Try to make the tests pass (re: 9ad9a1de, 5c389035)
    
    So, the pty regression tests on the Linux GitHub runner all failed.
    
    Let's test an assumption: the reason is that we need the stty
    builtin to properly set the pty state, because the OS-provided stty
    command does not work if there is no real tty.
    
    src/cmd/ksh93/data/builtins.c:
    - Compile in the stty built-in. This adds about 20k to the binary
      for a command that most users rarely need and even more rarely
      need to be built in, so only compile it in on non-release builds.
    
    src/cmd/ksh93/tests/pty.sh:
    - Skip the tests if we cannot either use the stty builtin or change
      the state of the real terminal to be compatible with the tests.

commit 9ad9a1de44bd0033cbc01651c901b6c43096f9a3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 06:58:30 2021 +0000

    github: Re-disable Mac CI runner (re: 5c389035)
    
    The Mac runner is still broken: intermittent pipe- and
    signal-related regressions that do not occur on any real Mac.
    https://github.com/ksh93/ksh/runs/1892358749
    
    .github/workflows/ci.yml:
    - Remove the macOS runner.
    
    src/cmd/ksh93/tests/pty.sh:
    - Do not skip pty tests if there is no tty. (On FreeBSD with no
      tty, the tty builtin would need to be enabled in builtins.c.)
    
    src/cmd/ksh93/tests/bracket.sh:
    - Don't be noisy when skipping unavailable locales.

commit 5c389035d8f0acca690cb370c41dc4aaf1fb8365
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 05:44:23 2021 +0000

    shtests: Stop requiring a tty
    
    It is desirable to be able to run the tests on a system without
    a functioning tty. Since this distribution comes with its own
    pseudo-tty facility, pty, it should be possible to run the few
    tests that require a tty on the pseudo-tty instead. I've verified
    that they fail as expected on older ksh93.
    
    Discussion: https://github.com/ksh93/ksh/pull/171
    
    src/cmd/ksh93/tests/basic.sh,
    src/cmd/ksh93/tests/bracket.sh:
    - Remove tests that require a tty.
    
    src/cmd/ksh93/tests/pty.sh:
    - Put them here, adapted to work as interactive pty scripts.
    
    src/cmd/ksh93/tests/shtests:
    - No longer refuse to run if there is no functioning tty.
    
    .github/workflows/ci.yml:
    - Since the tests no longer require a tty, no longer use script(1)
      to get a pseudo-tty. Let's see if this works...
    - Re-enable the Mac runner (re: 14632361). Maybe it has improved.

commit a7121b668910295058dbe0913e3fe9570ba0e939
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Fri Feb 12 17:52:54 2021 -0700

    Implement leak detection on UnixWare (#172)
    
    src/cmd/ksh93/tests/leaks.sh: Read vsz from UnixWare's ps
    
    UnixWare's ps reports an accurate virtual size, so collecting that is
    preferable to trying to parse the real resident size.

commit 2c04a88b37ba47b8ca7fa834bdad386aaf36aac6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 13 00:29:19 2021 +0000

    shtests: actually test /dev/tty instead of checking for existence
    
    The GitHub runners apparently provide a non-working /dev/tty. To
    avoid failures and confusion, shtests shold refuse to run the tests
    and tell people to use script(1) to simulate a tty. On Linux, it
    goes like this:
    
            script -q -e -c 'bin/shtests --your-options-here'
    
    On macOS and FreeBSD, the invocation is:
    
            script -q /dev/null bin/shtests --your-options-here
    
    The NetBSD and OpenBSD variants of script(1) need different
    invocations again. They also don't pass down the command's exit
    status, so would need a workaround for that.
    
    It would be nice if we could use pty for this as this comes with
    the distribution, so would work the same on every OS, but it seems
    to be broken for this use case.
    
    src/cmd/ksh93/tests/shtest:
    - Use 'test -t 1' with stdout (fd 1) redirected to /dev/tty to
      ensure the tty is actually on a terminal.
    
    src/cmd/ksh93/tests/basic.sh:
    - Remove superflous check for tty. All tests run through shtests.
    
    Resolves: https://github.com/ksh93/ksh/pull/171

commit 6f6b22016ad2eb5016c1c63bfa0b1941b51f310d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 12 23:59:57 2021 +0000

    command -x: tweak args list size detection (re: 9ddb45b1)
    
    src/cmd/ksh93/features/externs: ARG_EXTRA_BYTES detection:
    - Improve detection of extra bytes per argument: on every loop
      iteration, recalculate the size of the environment while taking
      the amount extra bytes we're currently trying into account. Also
      count arguments (argv[]) as they are stored in the same buffer.
      On 64-bit Linux with glibc, this now detects 9 extra bytes per
      argument instead of 8. An odd number (literally and figuratively)
      but apparently it needs it; I do think my method is correct now.
      On 64-bit Solaris and macOS, this still detects 8 extra bytes.
      (On 64-bit Linux with musl C library, it detects 0 bytes. Nice.)
    
    src/cmd/ksh93/sh/path.c: path_xargs():
    - Remove the kludge subtracting twice the size of the environment.
      With the feature test fixed, this should no longer fail on Linux.
    - Take into account the size of the final null element in the
      argument and environment lists.
    
    src/cmd/ksh93/tests/path.sh:
    - Do not use awk for the test due to breakage in the system awks
      on Solaris/Illumos (hangs) and AIX & UnixWare (drops arguments).
      Instead, use (wait for it...) ksh. It's a bit slower, but works.

commit 8c1e9971a730cdbe5ead7259aabadfb0335dc57d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 12 23:52:25 2021 +0000

    tests/jobs.sh: suppress error msg on noncompliant 'ps'

commit dec10fee6a6ce4a9847cd0cc43a5a0a2288ba3a3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 12 15:18:53 2021 +0000

    package: compat: no $PWD on Bourne shell (re: 6cc2f6a0, f5eaf217)

commit a9e7012dfd1e1c2a47b728e47b69bdb9012f41d8
Author: Lev Kujawski <int21h@mailbox.org>
Date:   Thu Feb 11 20:04:11 2021 -0700

    Fix a potential read of uninitialized memory through a pointer
    
    src/lib/libast/misc/magic.c:
    - Use strncpy instead of memcpy to avoid reading past the null
      terminator of the string pointed to by p.

commit 3224b7908325361843b14f509deb27e423fd7ec7
Author: Lev Kujawski <int21h@mailbox.org>
Date:   Thu Feb 11 17:00:49 2021 -0700

    Forestall spurious test failures by skipping unavailable locales
    
    src/cmd/ksh93/tests/bracket.sh:
    - Read the list of installed locales to ensure the locale to be tested
      actually exists on the system under test.
    - Produce a warning diagnostic for skipped locales.
    - Additionally test the en_US.ISO8859-1 and en_US.UTF-8 locales.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit d5a94b37224cfb9f0f3de79330ba5cf9d10bae9d
Author: Lev Kujawski <int21h@mailbox.org>
Date:   Thu Feb 11 15:25:51 2021 -0700

    Produce IEEE compliant output from pow() despite platform deviations
    
    src/cmd/ksh93/features/math.sh:
    - Specify ast_float.h within iffehdrs instead of math.h, so that iffe
      will pick up on macro substitutions within libast. This should make
      any future efforts to remedy floating point behavior easier as well.
    - Always include ast_float.h within the generated math header file,
      not just on IA64 platforms.
    
    src/cmd/ksh93/tests/arith.sh:
    - Test pow(1.0,-Inf) and pow(1.0,NaN) for IEEE compliance as well.
    - Test the exponentiation operator (**) in addition, as streval.c,
      which processes the same, calls pow() separately.
    
    src/lib/libast/features/float:
    - Test the IEEE compliance of the underlying math library's pow()
      function and substitute macros producing compliant behavior if
      necessary.

commit 0f92d6382369105c0d1497bfc45728762c76a9aa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 12 12:45:47 2021 +0000

    tests/attributes.sh: fix spurious fail if any env var contains 'foo'

commit 41ebb55a3a9133f58cf3cc1c47e83bb5dc11404e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 11 22:05:00 2021 +0000

    Fix most of job control (-m/-o monitor) in scripts
    
    If I haven't missed anything, this should make the non-interactive
    aspects of job control in scripts work as expected, except for the
    "<command unknown>" issue in the output of 'bg', 'fg' and 'jobs'
    (which is not such a high priority as those commands are really
    designed for interactive use).
    
    Plus, I believe I now finally understand what these three are for:
    * The job.jobcontrol variable is set to nonzero by job_init() in
      jobs.c if, and only if, the shell is interactive *and* managed to
      get control of the terminal. Therefore, any changing of terminal
      settings (tcsetpgrp(3), tty_set()) should only be done if
      job.jobcontrol is nonzero. This commit changes several checks for
      sh_isoption(SH_INTERACTIVE) to checks for job.jobcontrol for
      better consistency with this.
    * The state flag, sh_isstate(SH_MONITOR), determines whether the
      bits of job control that are relevant for both scripts and
      interactive shells are active, which is mostly making sure that a
      background job gets its own process group (setpgid(3)).
    * The shell option, sh_isoption(SH_MONITOR), is just that. When the
      user turns it on or off, the state flag is synched with it. It
      should usually not be directly checked for, as the state may be
      temporarily turned off without turning off the option.
    
    Prior discussion:
    https://www.mail-archive.com/austin-group-l@opengroup.org/msg06456.html
    
    src/cmd/ksh93/bltins/typeset.c, src/cmd/ksh93/sh/args.c:
    - Move synching the SH_MONITOR state flag with the SH_MONITOR
      shell option from b_set() (the 'set' builtin) to sh_applyopts()
      which is indirectly called from b_set() and is also used when
      parsing the shell invocation command line. This ensures -m is
      properly enabled in both scenarios.
    
    src/cmd/ksh93/sh/jobs.c:
    - job_init(): Do not refuse to initialise job control on
      non-interactive shells. Instead, skip everything that should only
      be done on interactive shells (i.e., everything to do with the
      terminal). This function is now even more of a mess than it was
      before, so refactoring may be desirabe at some point.
    - job_close(), job_set(), job_reset(), job_wait(): Do not reset the
      terminal process group (tcsetpgrp()) if job.jobcontrol isn't on.
    
    src/cmd/ksh93/sh/xec.c:
    - sh_exec(): TFORK: For SIGINT handling, check the SH_MONITOR
      state flag, not the shell option.
    - sh_exec(): TFORK: Do not turn off the SH_MONITOR state flag in
      forked children. The non-interactive part of job control should
      stay active. Instead, turn off the SH_INTERACTIVE state flag so
      we don't get interactive shell behaviour (i.e. job control noise
      on the terminal) in forked subshells.
    - _sh_fork(), sh_ntfork(): Do not reset the terminal process group
      (tcsetpgrp()) if job.jobcontrol isn't on. Do not turn off the
      SH_MONITOR state flag in forked children.
    
    src/cmd/ksh93/sh/subshell.c: sh_subfork():
    - Do not turn off the monitor option and state in forked subshells.
      The non-interactive part of job control should stay active.
    
    src/cmd/ksh93/bltins/misc.c: b_bg():
    - Check isstate(SH_MONITOR) instead of sh_isoption(SH_MONITOR) &&
      job.jobcontrol before throwing a 'no job control' error.
      This fixes a minor bug: fg, bg and disown could quietly fail.
    
    src/cmd/ksh93/tests/jobs.sh:
    - Add tests for 'fg' with job control IDs (%%, %1) in scripts.
    - Add test checking that a background job launched from a subsell
      with job control enabled correctly becomes the leader of its own
      process group.
    
    Makes progress on: https://github.com/ksh93/ksh/issues/119

commit 37a18bab7173427ce045c9a67772cb98eb678cb7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 11 13:41:10 2021 +0000

    Fix ${ comsub; } killing job control
    
    Another longstanding whopper of a bug in basic ksh93 functionality:
    run a ${ shared-state; } command substitution twice and job control
    promptly loses track of all your running jobs. New jobs are tracked
    again until you run another two shared-state command substitutions.
    This is in at least 93t+, 93u-, 93u+, 93v- and ksh2020.
    
    $ sleep 300 &
    [1]     56883
    $ jobs                                          # OK
    [1] +  Running                 sleep 300 &
    $ v=${ echo hi1; }
    $ jobs                                          # OK
    [1] +  Running                 sleep 300 &
    $ v=${ echo hi2; }
    $ jobs                                          # Nothing!
    $ fg
    ksh: fg: no such job
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - The current environment number shp->curenv (a.k.a. sh.curenv) was
      not being restored if the virtual subshell we're leaving is of
      the shared-state command substitution variety as it was wrongly
      considered to be part of the environment that didn't need
      restoring. This caused it to be out of sync with shp->jobenv
      (a.k.a. sh.jobenv) which did get restored from savedcurenv.
      Restore both from savedcurenv at the same time for any subshell.
      (How these numbers are used exactly remains to be discovered.)
    
    src/cmd/ksh93/tests/jobs.sh:
    - Added, with a test for this bug to start it off. There is no
      other test script where job control fits, and a lot more related
      fixes are anticipated: https://github.com/ksh93/ksh/issues/119

commit 2996d7ae7c86d763e48b269e972fe85567acede7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 10 16:22:11 2021 +0000

    Fix typos in <customtypecommand> --man self-documentation
    
    src/cmd/ksh93/bltins/enum.c:
    - enum_type[]: Fix typos; minor edit for style.
    - enum_type[], enuminfo(): Make the list of supported values
      comma-separated, instead of using a comma at the start of each.
    
    src/cmd/ksh93/sh/nvtype.c:
    - sh_opttype[]: Fix typos.

commit 76ea18dcbdec466979ffd7dc2ca3a74ce40d39ee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 10 02:05:33 2021 +0000

    Fix disabling SHOPT_FIXEDARRAY (re: 2182ecfa)
    
    It was easier than expected to fix this one. The many regression
    test failures caused by disabling it were all due to one bug:
    'typeset -p' output broke when building without this option.
    
    src/cmd/ksh93/sh/nvtree.c: nv_attribute():
    - In this function to print the attributes of a name-value pair,
      move four lines of code out of #if SHOPT_FIXEDARRAY...#endif that
      were inadvertently moved into the #if block in ksh93 2012-05-18.
      See the changes to nvtree.c in this multishell repo commit:
      https://github.com/multishell/ksh93/commit/aabab56a
    
    src/cmd/ksh93/data/builtins.c:
    - Update/rewrite 'typeset -a' documentation.
    - Make it adapt to SHOPT_FIXEDARRAY.
    - Fix a few typos.
    
    src/cmd/ksh93/tests/arrays2.sh:
    - Only one regression test needs a SHOPT_FIXEDARRAY check.
    
    .github/workflows/ci.yml:
    - Disable SHOPT_FIXEDARRAY when regression-testing without SHOPTs.
    - Enable xtrace, add ':' commands for traced comments. This should
      make the CI runner output logs a little more readable.

commit 2182ecfa08cf1da7f0c4b55fd23935c792d7d74c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 8 17:16:43 2021 +0000

    Fix compile/regress fails on compiling without SHOPT_* options
    
    Many compile-time options were broken so that they could not be
    turned off without causing compile errors and/or regression test
    failures. This commit now allows the following to be disabled:
    
    SHOPT_2DMATCH    # two dimensional ${.sh.match} for ${var//pat/str}
    SHOPT_BGX        # one SIGCHLD trap per completed job
    SHOPT_BRACEPAT   # C-shell {...,...} expansions (, required)
    SHOPT_ESH        # emacs/gmacs edit mode
    SHOPT_HISTEXPAND # csh-style history file expansions
    SHOPT_MULTIBYTE  # multibyte character handling
    SHOPT_NAMESPACE  # allow namespaces
    SHOPT_STATS      # add .sh.stats variable
    SHOPT_VSH        # vi edit mode
    
    The following still break ksh when disabled:
    
    SHOPT_FIXEDARRAY # fixed dimension indexed array
    SHOPT_RAWONLY    # make viraw the only vi mode
    SHOPT_TYPEDEF    # enable typeset type definitions
    
    Compiling without SHOPT_RAWONLY just gives four regression test
    failures in pty.sh, but turning off SHOPT_FIXEDARRAY and
    SHOPT_TYPEDEF causes compilation to fail. I've managed to tweak the
    code to make it compile without those two options, but then dozens
    of regression test failures occur, often in things nothing directly
    to do with those options. It looks like the separation between the
    code for these options and the rest was never properly maintained.
    Making it possible to disable SHOPT_FIXEDARRAY and SHOPT_TYPEDEF
    may involve major refactoring and testing and may not be worth it.
    
    This commit has far too many tweaks to list. Notables fixes are:
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/data/options.c:
    - Do not compile in the shell options and documentation for
      disabled features (braceexpand, emacs/gmacs, vi/viraw), so the
      shell is not left with no-op options and inaccurate self-doc.
    
    src/cmd/ksh93/data/lexstates.c:
    - Comment the state tables to associte them with their IDs.
    - In the ST_MACRO table (sh_lexstate9[]), do not make the S_BRACE
      state for position 123 (ASCII for '{') conditional upon
      SHOPT_BRACEPAT (brace expansion), otherwise disabling this causes
      glob patterns of the form {3}(x) (matching 3 x'es) to stop
      working as well -- and that is ksh globbing, not brace expansion.
    
    src/cmd/ksh93/edit/edit.c: ed_read():
    - Fixed a bug: SIGWINCH was not handled by the gmacs edit mode.
    
    src/cmd/ksh93/sh/name.c: nv_putval():
    - The -L/-R left/right adjustment options to typeset do not count
      zero-width characters. This is the behaviour with SHOPT_MULTIBYTE
      enabled, regardless of locale. Of course, what a zero-width
      character is depends on the locale, but control characters are
      always considered zero-width. So, to avoid a regression, add some
      fallback code for non-SHOPT_MULTIBYTE builds that skips ASCII
      control characters (as per iscntrl(3)) so they are still
      considered to have zero width.
    
    src/cmd/ksh93/tests/shtests:
    - Export the SHOPT_* macros from SHOPT.sh to the tests as
      environment variables, so the tests can check for them and decide
      whether or how to run tests based on the compile-time options
      that the tested binary was presumably compiled with.
    - Do not run the C.UTF-8 tests if SHOPT_MULTIBYTE is not enabled.
    
    src/cmd/ksh93/tests/*.sh:
    - Add a bunch of checks for SHOPT_* env vars. Since most should
      have a value 0 (off) or 1 (on), the form ((SHOPT_FOO)) is a
      convenient way to use them as arithmetic booleans.
    
    .github/workflows/ci.yml:
    - Make GitHub do more testing: run two locale tests (Dutch and
      Japanese UTF-8 locales), then disable all the SHOPTs that we can
      currently disable, recompile ksh, and run the tests again.

commit a9d77bba4064401f874e076cb3554d451e92de89
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 7 18:07:56 2021 +0000

    libast: optget(): emphasis: add screen/tmux, dtterm (re: ec79563b)
    
    src/lib/libast/misc/optget.c:
    - Add screen* (which includes tmux) and dtterm* (CDE terminal) to
      the glob pattern deciding whether to use ANSI boldface sequences.
    - Don't bother parsing the env var if stderr is not on a terminal.
    
    src/cmd/ksh93/sh.1:
    - Extend self-documentation documentation; document how optget(3)
      uses the ERROR_OPTIONS env var to control boldface output.
    - Tweaks and minor edits.

commit ec79563b8fb11d33fcd4917ec58cc515a50370c1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Feb 7 05:37:22 2021 +0000

    libast: optget(): fix emphasis state initialisation
    
    This fixes a bug in libast optget()'s use of emphasis in the
    display of --man(uals) via standard error on a terminal.
    
    Symptom:
    
    $ printf --man 2>&1 | more
    (ok; emphasis disabled, no escape codes shown)
    $ printf --man
    (ok; emphasis correctly displayed)
    $ printf --man 2>&1 | more
    (whoops; emphasis not disabled; escape codes garble 'more' output)
    
    The problem was that the state.emphasis variable was not
    initialised and, when set to one, was never reset again
    (except through the use of the --api, --html or --nroff option).
    
    The source code also reveals an undocumented feature: if the
    environment variable $ERROR_OPTIONS contains 'noemphasi', emphasis
    is forced off, else if it contains 'emphasi', it's forced on.
    Other characters (such as the final 's' of emphasis) are ignored.
    This was also broken (forcing off didn't work) and is now fixed.
    
    src/lib/libast/misc/optget.c:
    - Do not assume that enabling emphasis is forever; re-initialise
      the state on every relevant getopts invocation.
    - Increase the number of terminals on which emphasis is displayed
      using ANSI escape codes. (This is a hack and we should ask the OS
      for the correct codes, but never mind -- ANSI is now universal.)

commit 403e864ac84a08247f94a46a48fac83e039cd46f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Feb 6 22:00:55 2021 +0000

    Disallow >;word and <>;word for 'redirect' (re: 7b59fb80, 7b82c338)
    
    The >;word and <>;word redirection operators cannot be used with
    the 'exec' builtin, but the 'redirect' builtin (which used to be
    an alias of 'command exec') permitted them. However, they do not
    have the documented effect of the added ';'. So this commit blocks
    those operators for 'redirect' as they are blocked for 'exec'.
    
    It also tweaks redirect's error message if a non-redirection
    argument is encountered.
    
    src/cmd/ksh93/sh/parse.c: simple():
    - Set the lexp->inexec flag for SYSREDIR (redirect) as well as
      SYSEXEC (exec). This flag is checked for in sh_lex() (lex.c) to
      throw a syntax error if one of these two operators is used.
    
    src/cmd/ksh93/sh.1, src/cmd/ksh93/data/builtins.c:
    - Documentation tweaks.
    
    src/cmd/ksh93/sh/xec.c, src/cmd/ksh93/bltins/misc.c:
    - When 'redirect' gives an 'incorrect syntax' (e_badsyntax) error
      message, include the first word that was found not to be a valid
      redirection. This is simply the first argument, as redirections
      are removed from the arguments list.
    
    src/cmd/ksh93/tests/io.sh:
    - Update test to reflect new error message format.

commit 43dfe3c8fab32025433001fcfd85dc71e855ee0a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 5 15:39:31 2021 +0000

    build system: rm unused variable declarations from Mamfiles
    
    Now that the Make Abstract Machine files are maintained manually
    and not generated automatically, unused variables are an annoying
    distraction -- and there are many.
    
    But the language/format is very simple and very parseable using
    shell, awk, etc. -- so this was easy to automate. All variables are
    declared with 'setv' and they are used if an expansion of the form
    ${varname} exists (the braces are mandatory in Mamfiles).
    
    bin/Mamfile_rm_unused_vars:
    - Added for reference and future use.
    
    src/*/*/Mamfile:
    - Remove all unused 'setv' variable declarations.

commit 7b59fb805c956a9ae9c4ba074f6230c992a9f93d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 5 05:38:38 2021 +0000

    Fix 'redirect {var}>file' in subshell (re: 7b82c338)
    
    Permanent redirections of that form broke in subshells when used
    with the 'redirect' command, because I had overlooked one instance
    where the new 'redirect' builtin needs to match the behaviour of
    the 'exec' builtin.
    
    src/cmd/ksh93/tests/io.sh: sh_exec():
    - Do not restore file descriptors in (virtual) subshells for
      'redirect' just as this isn't done for 'exec'.
    
    src/cmd/ksh93/tests/io.sh:
    - Add regression test for this bug.
    - Complete the test for f9427909 which I committed prematurely.
    
    Fixes: https://github.com/ksh93/ksh/issues/167

commit f9427909dc72cd06d1f1448d55246d0da73c3dc9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Feb 5 03:42:10 2021 +0000

    Make redirections like {varname}>file work with brace expansion off
    
    This is some nonsense: redirections that store a file descriptor
    greater than 9 in a variable, like {var}<&2 and the like, stopped
    working if brace expansion was turned off. '{var}' is not a brace
    expansion as it doesn't contain ',' or '..'; something like 'echo
    {var}' is always output unexpanded. And redirections and brace
    expansion are two completely unrelated things. It wasn't documented
    that these redirections require the -B/braceexpand option, either.
    
    src/cmd/ksh93/sh/lex.c: sh_lex():
    - Remove incorrect check for braceexpand option before processing
      redirections of this form.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Insert a brief item mentioning this.
    
    src/cmd/ksh93/sh.1:
    - Correction: these redirections do not yield a file descriptor >
      10, but > 9, a.k.a. >= 10.
    - Add a brief example showing how these redirections can be used.
    
    src/cmd/ksh93/tests/io.sh:
    - Add a quick regression test.

commit c7098685723be8a6e03cce245d23e59554723be0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 4 20:41:59 2021 +0000

    process substitution: improve fifo error handling (re: ab5dedde)
    
    src/cmd/ksh93/sh/args.c: sh_argprocsub():
    - Fix compiler warnings with SHOPT_DEVFD on by including "io.h".
    - Without SHOPT_DEVFD, the FIFO code didn't consider that libast's
      pathtemp(3) may also fail and return null. Add a check for this.

commit cea04c4a6f304133f965a0107b453047befa52d5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 4 17:31:22 2021 +0000

    Add missing NEWS entries (re: a410bc48, 6f3b23e6); update README.md

commit a410bc480f0e0712aededd961e0eeb3e74cdafc8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 4 16:20:27 2021 +0000

    autoload: Add loop detection
    
    It was trivial to crash ksh by making an autoloaded function
    definition file autoload itself, causing a stack overflow due to
    infinite recursion. This commit adds loop detection that stops a
    function that is being autoloaded from autoloading itself either
    directly or indirectly, without removing the ability of autoloaded
    function definition files to autoload other functions.
    
    src/cmd/ksh93/sh/path.c: funload():
    - Detect loops by checking if the path of a function to be
      autoloaded was already added to a new internal static tree,
      and if not, adding it while the function is being loaded.
    
    src/cmd/ksh93/tests/path.sh:
    - Add regression test.
    - Tweak a couple of others to be freeze- and crash-proof.
    
    NEWS:
    - Add this fix + a forgotten entry for the previous fix (6f3b23e6).
    
    Fixes: https://github.com/ksh93/ksh/issues/136

commit 6f3b23e6f4d59590a51bfbcc66dc60082728b71d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 4 04:34:01 2021 +0000

    Fix crash on trying a very long nonexistent command
    
    Reproducer from @Saikiran-m:
    | ~# sh -c `perl -e 'print "a"x100000'`
    |  genunix: NOTICE: core_log: sh[1221] core dumped: /var/cores/core.sh.0.1602153496
    | Memory fault(coredump)
    
    The crash was in trying to decide whether the name was suitable for
    autoloading as a function on $FPATH. This calls strmatch() to check
    the name against a regex for valid function name. But the libast
    regex code is not designed optimally and uses too much recursion,
    limiting the length of the strings it's able to cope with.
    
    src/cmd/ksh93/sh/path.c: path_search():
    - Before calling strmatch(), check that the name is shorter than
      256 bytes. The maximum length of file names on Linux and macOS is
      255 bytes, so an autoload function can't have a name longer than
      that anyway.
    
    src/cmd/ksh93/tests/path.sh:
    - Add test for this bug.
    - Tweak 'command -x' test to not leave a hanging process on Ctrl+C.
    
    Fixes: https://github.com/ksh93/ksh/issues/144

commit 32cff97b2465e0e8b4fbe68ea0824077fc4ea837
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Feb 4 02:19:29 2021 +0000

    tests/*.sh: fix indentation of warnings

commit e22044526592d01e947f7888c451df885dea991f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 23:58:04 2021 +0000

    Re-allow disabling vmalloc for release builds (re: 399886da)
    
    Well, that commit was based on a silly oversight: of course it's
    necessary to pass ${KSH_RELFLAGS} to the feature tests too as they
    use this flag to determine whether to enable or disable vmalloc.
    
    On further analysis I think the annoying warnings can be solved in
    a different way. Quotes (single or double) in 'exec -' commands
    don't seem to be special to mamake at all; it looks like they are
    passed on to the shell as is. So Mamfile variables are expanded and
    the expansions backslash-escaped the same way regardless of quotes.
    Which means we can make the shell remove the unwanted level of
    backslashes by using double instead of single quotes.
    
    src/*/*/Mamfile:
    - On iffe commands, restore ${KSH_RELFLAGS}, using double quotes to
      group the compiler command as one argument to iffe.

commit 824a85e38ea63b92681f4c53e7dfc3e7d781687d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 23:08:34 2021 +0000

    ksh93/README: Void Linux (musl) successfully tested

commit 7dbcbce407cef011112f5f5ac1f7726829cb099d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 21:42:50 2021 +0000

    Revert 7a6980a3, restoring build on Alpine Linux
    
    This reverts an OpenSUSE patch ("libast/comp/conf.sh: apply limits
    detection fixes for Linux"). It broke the build on Alpine Linux
    with the musl C library (see also e245856f).

commit 9ddb45b12d140de263e53df5adef5b4bb352e418
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 20:05:12 2021 +0000

    command -x: fix 'args list too long' on Linux, again (re: 8f5235a5)
    
    This time it was failing on a 64-bit Debian Linux system with very
    few and short environment variables. Sigh.
    
    src/cmd/ksh93/sh/path.c:
    - Combine the strategy from 63979488 with that of 8f5235a5.

commit 8f5235a53fc188a397b930ac2bb19e6521975884
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 18:38:14 2021 +0000

    fix 'args list too long' on Linux, again (re: 63979488)
    
    That fix turned out to be insufficient as NixOS has huge
    environment variable lists because (due to each software package
    being installed in its own directory tree) it has to keep dozens
    of directories in variables like XDG_CONFIG_DIRS and others.
    The 'command -x' regression test was failing on NixOS.
    
    src/cmd/ksh93/sh/path.c:
    - Different strategy. Leave twice the size of the existing
      environment free.

commit 7ff6b73bdb084613b47659190d188f8abaca5312
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 17:09:08 2021 +0000

    emacs.c: fix 2 causes of crash
    
    Hopefully this will deal with ksh crashing in macOS Terminal.app
    once and for all. Trigger: press Command-F to open the find bar,
    then press Esc to close it, then press Esc again. Result: crash
    somewhere random in the job control code.
    
    Turns out macOS Terminal.app apparently (and wrongly) sends <Esc>
    followed by <Ctrl+L> to the terminal, which ksh takes as a sequence
    for clearing the screen. The related crash ultimately traced back
    to the code for that in emacs.c. The other crash was in the code
    for double-ESC file name completion.
    
    This commit also fixes a non-robust invocation of the 'tput'
    command by using the direct path found in $(getconf PATH).
    
    src/cmd/ksh93/features/cmds:
    - Remove unused tests for the presence of commands
      (newgrp,test,id,wc,cut,logname,pfexec).
    - Replace 'cmd tput' test by 'pth tput' which will find its path
      in $(getconf PATH) and store that path as the macro value.
    - Add two tests to determine if 'tput' supports terminfo and/or
      termcap codes. (FreeBSD still requires old termcap codes.)
    
    src/cmd/ksh93/edit/emacs.c: escape():
    - Fix a crash in the code for double-ESC completion. Check if the
      cursor is on a non-zero position; this caused a bus error
      (invalid address access) in the subsequent ed_expand call.
    - For <Esc><Ctrl+L> (clear screen), fix the strange crash in macOS
      Terminal by not using sh_trap() to invoke "tput clear", which
      causes ksh itself to invoke that command. ksh apparently doesn't
      cope with doing this while SIGWINCH (window size change signal)
      is sent by Terminal. The fix is to just use the C standard
      system(3) function to invoke tput. This invokes tput via /bin/sh,
      but what the hey. (Note that ksh also ran any function or alias
      called 'tput' instead of the real command, and that is now also
      fixed.)
    - Use the new _pth_tput test result to invoke tput with the
      hardcoded default system path, increasing robustness.
    
    src/cmd/ksh93/edit/edit.c: ed_setup():
    - Use the new _pth_tput test result to invoke tput with the
      hardcoded default system path, increasing robustness.
    - When getting the escape code for "cursor up", use the new
      _tput_terminfo and _tput_termcap test results to determine which
      kind of command code to send. This fixes it on FreeBSD.

commit f5eaf217ed9073a296218810fa70e805867e10ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 3 16:58:35 2021 +0000

    build system: fix detection of default system directories
    
    src/cmd/INIT/iffe.sh:
    - Fix "standard system directories" for the cmd test, which were
      hardcoded as bin, /etc, /usr/bin, /usr/etc, /usr/ucb. That's both
      unportable and antiquated. Replace this with the path output by
      'getconf PATH'.
    - Add fixes from modernish for 'getconf PATH' output to compensate
      for bugs/shortcomigns in NixOS and AIX. Source:
      https://github.com/modernish/modernish/blob/9e4bf5eb/lib/modernish/aux/defpath.sh
      Ref.: https://github.com/NixOS/nixpkgs/issues/65512
    
    src/lib/libast/comp/conf.tab: PATH:
    - Add the NixOS and AIX default path fixes here too; this fixes
      'command -p' and the builtin 'getconf PATH' on these systems.
    
    bin/package, src/cmd/INIT/package.sh:
    - Re-support being launched with just the command name 'package' in
      the command line (if the 'package' command is in $PATH). At least
      one other script in the build system does this. (re: 6cc2f6a0)
    - Go back three levels (../../..) if we were invoked from
      arch/*/bin/package, otherwise we won't find src/cmd/ksh93/SHOPT.sh.

commit be3394241522787d3fe07bc0d4c8310f146885a2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 21:03:01 2021 +0000

    Some more build fixes from OpenSUSE
    
    These update some outdated library path searches as well as
    a couple of gcc-specific improvements.
    
    Original patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-compat.dif

commit 52067c3d3791d1a5442bf3d1e9ba9471ff30cf1e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 17:25:21 2021 +0000

    Backport atomic job locking from ksh 93v- beta
    
    Something similar was previously done in 07cc71b8 from a Debian
    patch, and eventually reverted; it redefined the ast atomic
    functions asoincint() and asodecint() to be gcc-specific. This
    imports the upstream version from the ksh 93v- beta instead.
    
    This commit is based on an OpenSUSE patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-joblock.dif
    
    src/cmd/ksh93/include/jobs.h:
    - Replace job locking mechanism with the 93v- version which uses
      the atomic libast functions asoincint(), asogetint() and
      asodecint(). See: src/lib/libast/man/aso.3
    
    src/cmd/ksh93/sh/jobs.c: job_subsave():
    - Revert gcc optimiser bug workaround from c258a04f.
      It should now be unnecessary.

commit 1bd062070881b1de520f4336aea02dc66304f120
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 16:20:59 2021 +0000

    libast: sfio(3) fixes from ksh 93v- beta
    
    These fixes were backported by OpenSUSE. Original patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-sfio.dif

commit 63979488e6da43cffec348b65c7740352ea81f12
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 15:19:13 2021 +0000

    command -x: fix 'arg list too long' on Linux (re: 66e1d446)
    
    I got one intermittent regression test failure due to 'argument
    list too long' on a Debian x86_64 system.
    
    src/cmd/ksh93/sh/path.c: path_xargs():
    - Leave extra argument space for systems that need extra bytes:
      1KiB per extra byte, with a minimum of 2KiB (the old value).

commit db71b3ad4344503ebd546607f93416187a4be380
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 14:44:34 2021 +0000

    libast: robustness fixes for temporary files and streams
    
    From an OpenSUSE patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-pathtemp.dif
    
    See src/lib/libast/man/path.3 for pathtemp()
    and src/lib/libast/man/sfio.3 for sftmp()
    
    src/lib/libast/path/pathtemp.c:
    - Error check fix: add an access check wrapper function that checks
      if a path was given and if there is enough free space on the
      device, setting errno appropriately in case of trouble.
    
    src/lib/libast/sfio/sftmp.c:
    - On Linux, use the /dev/shm shared memory objects for the new
      temporary file descriptor -- that is, do not access HD or SSD but
      only the memory based tmpfs of the POSIX SHM.

commit b12be093d72a50236fdeb35a68c4504099844db4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 14:31:35 2021 +0000

    typeset: print_value(): save/restore last_table
    
    This fix comes via an OpenSUSE patch but also exists in 93v- beta.
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-typedef.dif
    (only the printvalue() diff was still applicable to 93u+m;
    the setall() fix was done differently and better in a2f13c19)

commit 4645e6ad3314789b477d1213c53e53b8320016a3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 12:49:00 2021 +0000

    job_reset(): fix for resetting foreground process group
    
    Patch from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-foreground-prgrp.dif
    
    src/cmd/ksh93/sh/jobs.c: job_reset():
    - Only reset the foreground process group associated with the
      current job if the current job's process ID is different from the
      terminal's foreground process group ID.

commit 9f980ba65a13847fe8a4dcbf593bef7ed9adbacd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 11:52:54 2021 +0000

    sh_setmatch(): fix node size calculation
    
    This fixes the function that sets ${.sh.match}. Patch from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-limit-name-len.dif
    
    src/cmd/ksh93/sh/init.c: sh_setmatch():
    - Fix node size calculation, possibly preventing data corruption.
    
    src/cmd/ksh93/include/ulimit.h: Limit_t:
    - Defining the 'name' struct member as 'char name[16]' makes
      no sense as the name is being initialised statically in
      data/limits.c; just make it a 'char *name' pointer.

commit 3002c4113ee64f5317bc4242862216f0d241bd11
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 05:33:24 2021 +0000

    vmalloc: better detect default region size on Linux
    
    This is a Linux-specific fix for vmalloc from OpenSUSE, for what
    that's still worth; we're not going to keep using vmalloc long term.
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-vm.dif

commit e2c2753ee88fc4ca56bebe1652233a6fa8a0286c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 05:27:08 2021 +0000

    libast: Fix detection of GCC 4.1+ 64/32-bit atomic operations model
    
    This fix to the atomic scalar operations feature tests is from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-aso.dif

commit 69e18de58f08ba7e1eae09a8c621cb2b7846b453
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 05:24:11 2021 +0000

    edit.c: Fix history generation if there are zero arguments
    
    This applies a fix from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-reg.dif

commit 627df2b19a2c6a2097abde92db5ad254bc5329f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 05:17:52 2021 +0000

    libast: optget(3): fix some uninitialised variables
    
    This is a part of this OpenSUSE patch:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-gcc.dif

commit 0684806d47969f08e8219c7e46d84aee64b48b32
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 04:40:09 2021 +0000

    feature tests: signbit detection fix for ia64
    
    An Intel Itanium fix from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-ia64.dif

commit 7a6980a380cd9fbd646c06e322a4428797767026
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 04:35:54 2021 +0000

    libast/comp/conf.sh: apply limits detection fixes for Linux
    
    This is another patch from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-limits.dif

commit fa3a3d7955074eb15ecb726f3cfcc9b61e499e9b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 04:25:46 2021 +0000

    sh_ntfork(): handle SIGTSTP along with SIGTTIN and SIGTTOU
    
    This applies a patch from OpenSUSE that makes SIGTSTP handling
    consistent with that of SIGTTIN and SIGTTOU.
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-signals.dif

commit 8a58166bc42664c1157666d0ee58f83e61dd89b3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Feb 2 03:16:43 2021 +0000

    Add OpenSUSE fixes for the uname builtin on Linux
    
    Original patches:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-uname.dif
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-no-sysctl.dif

commit 0e4c4d619d91f0fcbcfe7841178b167c3af1ee2a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 1 23:49:02 2021 +0000

    Fix minor typeset attribute regressions (re: 95fe07d8, fdb9781e)
    
    This fixes the following regressions marked TODO in attributes.sh:
    
    $ typeset -L 13 bar; readonly bar; typeset -p bar
    typeset -r -L 0 foo             # exp.: typeset -r -L 13 foo
    $ typeset -R 13 bar; readonly bar; typeset -p bar
    typeset -r -R 0 bar             # exp.: typeset -r -R 13 bar
    $ typeset -Z 13 baz; readonly baz; typeset -p baz
    typeset -r -Z 0 -R 0 baz        # exp.: typeset -r Z 13 -R 13 baz
    
    I've discovered that these were briefly fixed between fdb9781e (Red
    Hat patch for typeset -xu/-xl) and 95fe07d8 (reversal of patch,
    different -xu/-xl fix, but reintroduced these regressions).
    
    src/cmd/ksh93/sh/name.c: nv_newattr():
    - Replace check from 95fe07d8 with a new one that combines its
      approach with that of fdb9781e: do not change size (and hence
      return early) if NV_RDONLY and/or NV_EXPORT are the only
      attributes that are changing.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Enable the TODO regression tests.

commit fe05350f2d147a0799f8ff33310905af3057424d
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Mon Feb 1 18:35:18 2021 -0500

    typeset: fix short integer restriction (#166)
    
    This commit corrects how shortint was being applied to various
    possible typeset variables in error. The short integer option
    modifier 'typeset -s' should only be able to be applied if the
    the variable is also an integer. Several issues were resolved
    with this fix:
    - 'typeset -s': created a short integer having an invalid base
      of zero. 'typeset -s foo' created 'typeset -s -i 0 foo=0' and
      now will result in an empty string.
    - 'typeset -sL': previously resulted in a segmentation fault.
    
    The following are the various incorrect 'typeset' instances
    that have been fixed:
    
    $ 'export foo; typeset -s foo; readonly foo; typeset -p foo'
    (before) typeset -x -r -s -i 0 foo=0
    ( after) typeset -x -r foo
    
    $ 'typeset -sL foo=1*2; typeset -p foo'
    (before) Segmentation fault (core dumped)
    ( after) typeset -L 3 foo='1*2'
    
    $ 'typeset -sR foo=1*2; typeset -p foo'
    (before) typeset -s -i foo=2
    ( after) typeset -R 3 foo='1*2'
    
    $ 'typeset -sZ foo=1*2; typeset -p foo'
    (before) typeset -F 0 foo=2
    ( after) typeset -Z 3 -R 3 foo='1*2'
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - Add conditional check within the 's' option to only
      apply NV_SHORT as well as remove any NV_LONG flag
      if NV_INTEGER flag was set.
    - Relocate shortint conditional logic to the 'i' option.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Adjust regression tests for '-s' and add '-si' check.

commit 5491fe9724d8b7f76605d7621669ec08a3903cb2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 1 16:19:04 2021 +0000

    Correctly block invalid values for arrays of an enum type
    
    This fixes part of https://github.com/ksh93/ksh/issues/87:
    
    Scalar arrays (-a) and associative arrays (-A) of a type created by
    'enum' did not consistently block values not specified by the enum
    type, yielding corrupted results.
    
    An expansion of type "${array[@]}" yielded random numbers instead
    of values for associative arrays of a type created by 'enum'.
    
    This does not yet fix another problem: ${array[@]} does not yield
    all values for associative enum arrays.
    
    src/cmd/ksh93/bltins/enum.c: put_enum():
    - Always throw an error if the value is not in the list of possible
      values for an enum type. Remove incorrect check for the NV_NOFREE
      flag. Whatever that was meant to accomplish, I've no idea.
    
    src/cmd/ksh93/sh/array.c: nv_arraysettype():
    - Instead of sh_eval()ing a shell assignment, use nv_putval()
      directly. Also use the stack (see src/lib/libast/man/stk.3)
      instead of malloc to save the value; it's faster and will be
      auto-freed at some point. This shortens the function and makes it
      faster by not entering into a whole new shell context -- which
      also fixes another problem: the error message from put_enum()
      didn't cause the shell to exit for indexed enum arrays.
    
    src/cmd/ksh93/sh/name.c: nv_setlist():
    - Apply a patch from David Korn that correctly sets the data type
      for associative arrays, fixing the ${array[@]} expansion yielding
      random numbers. Thanks to @JohnoKing for the pointer.
      https://github.com/ksh93/ksh/issues/87#issuecomment-662613887
      https://www.mail-archive.com/ast-developers@lists.research.att.com/msg00697.html
    
    src/cmd/ksh93/tests/enum.sh:
    - Add tests checking that invalid values are correctly blocked for
      indexed and associative arrays of an enum type.
    
    Makes progress on: https://github.com/ksh93/ksh/issues/87

commit 6a0e9a1a751a644aaf3b2dcb5ceadeb8d0f4a3f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Feb 1 00:28:18 2021 +0000

    Tweak and regress-test 'command -x' (re: 66e1d446)
    
    Turns out the assumption I was operating on, that Linux and macOS
    align arguments on 32 or 64 bit boundaries, is incorrect -- they
    just need some extra bytes per argument. So we can use a bit more
    of the arguments buffer on these systems than I thought.
    
    src/cmd/ksh93/features/externs:
    - Change the feature test to simply detect the # of extra bytes per
      argument needed. On *BSD and commercial Unices, ARG_EXTRA_BYTES
      shows as zero; on Linux and macOS (64-bit), this yields 8. On
      Linux (32-bit), this yields 4.
    
    src/cmd/ksh93/sh/path.c: path_xargs():
    - Do not try to calculate alignment, just add ARG_EXTRA_BYTES to
      each argument.
    - Also add this when substracting the length of environment
      variables and leading and trailing static command arguments.
    
    src/cmd/ksh93/tests/path.sh:
    - Test command -v/-V with -x.
    - Add a robust regression test for command -x.
    
    src/cmd/ksh93/data/builtins.c, src/cmd/ksh93/sh.1:
    - Tweak docs. Glob patterns also expand to multiple words.

commit f37098f177d86647b9ed50bb5081e16d601c0606
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 31 23:47:43 2021 +0000

    Build fix for Linux i386
    
    iffe feature test that add a -D_LARGEFILE64_SOURCE compiler flag to
    detect the presence of 64-bit types like off64_t are very
    incorrect; they always find the type even if the rest of the source
    is not compiled with that flag, causing an inconsistent compilation
    environment. This was the cause of mysterious failures to compile
    some feature tests on Linux i386 -- it tried to use an off64_t type
    that was wrongly detected.
    
    A flag like -D_LARGEFILE64_SOURCE needs to be added to the compiler
    flags consistently so it is used for compiling all files and tests.
    
    src/lib/libast/features/dirent,
    src/lib/libast/features/fs,
    src/lib/libast/features/lib,
    src/lib/libast/features/mmap,
    src/cmd/ksh93/features/rlimits:
    - Remove the -D_LARGEFILE64_SOURCE flag from all the tests that
      used it.
    - Fix some preprocessor directives for compiling without
      _LARGEFILE64_SOURCE. We cannot rely on the result of the _lib_*64
      tests because those functions are still found in glibc even if
      _LARGEFILE64_SOURCE is not defined; we have to check for the
      existence of the type definitions before using them.
    
    src/cmd/INIT/cc.linux.i386,
    src/cmd/INIT/cc.linux.i386-icc:
    - Add/update compiler wrappers to hardcode -D_LARGEFILE64_SOURCE
      in the flags for the default compiler. If it is overriden with
      $CC, then it needs to be added manually if desired.

commit a1f727749ab36da8fe34733e1de52735538b137d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 31 20:50:03 2021 +0000

    tests/locale.sh: disable en_US.UTF-8 spaces test
    
    This test depends on the correctness of the locale data provided
    by the OS, and some installations are broken. Failures of this test
    most likely do not represent a bug in ksh or libast.

commit ede479967f11ab93d0f4c3df24cb49537a9c9fe5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 31 10:41:11 2021 +0000

    resolve/remove USAGE_LICENSE macros; remove repetitive (c) strings
    
    This takes another small step towards disentangling the build
    system from the old AT&T environment. The USAGE_LICENSE macros with
    author and copyright information, which was formerly generated
    dynamically for each file from a database, are eliminated and the
    copyright/author information is instead inserted into the AST
    getopt usage strings directly.
    
    Repetitive license/copyright information is also removed from the
    getopt strings in the builtin commands (src/lib/libcmd/*.c and
    src/cmd/ksh93/data/builtins.c). There's no need to include 55
    identical license/copyright strings in the ksh binary; one (in the
    main ksh getopt string, shown by ksh --man) ought to be enough!
    This makes the ksh binary about 10k smaller.
    
    It does mean that something like 'enum --author', 'typeset
    --license' or 'shift --copyright' will now not show those notices
    for those builtins, but I doubt anyone will care.

commit 66e1d446429543be0f9d47d9364e472932dc53f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 30 05:51:22 2021 +0000

    command -x: fix efficiency; always run external cmd (re: acf84e96)
    
    This commit fixes 'command -x' to adapt to OS limitations with
    regards to data alignment in the arguments list. A feature test is
    added that detects if the OS aligns the argument on 32-bit or
    64-bit boundaries or not at all, allowing 'command -x' to avoid
    E2BIG errors while maximising efficiency.
    
    Also, as of now, 'command -x' is a way to bypass built-ins and
    run/query an external command. Built-ins do not limit the length of
    their argument list, so '-x' never made sense to use for them. And
    because '-x' hangs on Linux and macOS on every ksh93 release
    version to date (see acf84e96), few use it, so there is little
    reason not to make this change.
    
    Finally, this fixes a longstanding bug that caused the minimum exit
    status of 'command -x' to be 1 if a command with many arguments was
    divided into several command invocations. This is done by replacing
    broken flaggery with a new SH_XARG state flag bit.
    
    src/cmd/ksh93/features/externs:
    - Add new C feature test detecting byte alignment in args list.
      The test writes a #define ARG_ALIGN_BYTES with the amount of
      bytes the OS aligns arguments to, or zero for no alignment.
    
    src/cmd/ksh93/include/defs.h:
    - Add new SH_XARG state bit indicating 'command -x' is active.
    
    src/cmd/ksh93/sh/path.c: path_xargs():
    - Leave extra 2k in the args buffer instead of 1k, just to be sure;
      some commands add large environment variables these days.
    - Fix a bug in subtracting the length of existing arguments and
      environment variables. 'size -= strlen(cp)-1;' subtracts one less
      than the size of cp, which makes no sense; what is necessary is
      to substract the length plus one to account for the terminating
      zero byte, i.e.: 'size -= strlen(cp)+1'.
    - Use the ARG_ALIGN_BYTES feature test result to match the OS's
      data alignment requirements.
    - path_spawn(): E2BIG: Change to checking SH_XARG state bit.
    
    src/cmd/ksh93/bltins/whence.c: b_command():
    - Allow combining -x with -p, -v and -V with the expected results
      by setting P_FLAG to act like 'whence -p'. E.g., as of now,
            command -xv printf
      is equivalent to
            whence -p printf
      but note that 'whence' has no equivalent of 'command -pvx printf'
      which searches $(getconf PATH) for a command.
    - When -x will run a command, now set the new SH_XARG state flag.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Change to using the new SH_XARG state bit.
    - Skip the check for built-ins if SH_XARG is active, so that
      'command -x' now always runs an external command.
    
    src/lib/libcmd/date.c, src/lib/libcmd/uname.c:
    - These path-bound builtins sometimes need to run the external
      system command by the same name, but they did that by hardcoding
      an unportable direct path. Now that 'command -x' runs an external
      command, change this to using 'command -px' to guarantee using
      the known-good external system utility in the default PATH.
    - In date.c, fix the format string passed to 'command -px date'
      when setting the date; it was only compatible with BSD systems.
      Use the POSIX variant on non-BSD systems.

commit 005d38f410e806a080b0dea79076651a31f914a2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 07:26:40 2021 +0000

    tests/leaks.sh: add procfs method for Linux
    
    This allows faster testing for memory leaks on Linux if
    ksh is compiled without vmalloc.

commit ab6b483b17258c7068e08c2f7bc4c3f9f259ab78
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 07:19:07 2021 +0000

    features/pty: restore build on AIX by reordering #includes

commit 674a0c3559b6fdb25e021f003384ada6bd906890
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 06:32:42 2021 +0000

    Another lexical fix for here-documents (re: 6e515f1d)
    
    OpenSUSE patch from:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-heredoc.dif
    
    src/cmd/ksh93/sh/lex.c: here_copy():
    - Do not potentially seek back a zero or negative length.

commit 4604df9ada906e0a6537157a63b6ce7c0509f34d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 06:08:38 2021 +0000

    Stack robustness fixes from OpenSUSE
    
    Three OpenSUSE patches from:
    https://build.opensuse.org/package/show/shells/ksh
    
    As usual, the relevant bug is not currently public:
    https://bugzilla.opensuse.org/show_bug.cgi?id=844071
    
    src/cmd/ksh93/sh/xec.c: sh_debug()/sh_exec():
    - Fix stk restoration. [bnc#844071]
    
    src/lib/libast/misc/stk.c:
    - Fix stk aliasing code. [bnc#844071]
      (ksh93-stkalias.dif)
    - Make a unknown location fatal in stkset() so that we get a core
      dump right away instead of later in an unrelated part of code.
      (ksh93-stkset-abort.dif)
    
    src/lib/libast/man/stk.3,
    src/lib/libast/man/stak.3:
    - Update manual with new stkset() behaviour. (93u+m addition)
      (Note that stak is implemented as macros that translate to stk)

commit c5bd6874ef8fe3dfb2889eed7860d27981550a7f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 05:16:49 2021 +0000

    test -p: fix bug due to wrong parentheses
    
    Patch from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-test.dif
    
    src/cmd/ksh93/bltins/test.c:
    - Fix parentheses in the isapipe() macro.
    - test_binop(): Initialise variables.

commit 288b6c6517b815ad6873594577c1a0da047e0848
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 04:54:41 2021 +0000

    Fix various possible uses of uninitialised variables
    
    Patch from OpenSUSE, slightly adapted for 93u+m. Source:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-uninitialized.dif

commit c52cb939992f6aa32b608690ef2b8d9e83102231
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 04:38:48 2021 +0000

    sh_funscope(): Fix possible dereference of null pointer
    
    Patch from OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-unset-f.dif

commit 129614b99f129e9baffbf8066656ed0dc7979aa5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 04:35:46 2021 +0000

    edit/vi.c: sanity checks from OpenSUSE
    
    Source: https://build.opensuse.org/package/view_file/shells/ksh/ksh93-vi.dif
    Patch from 2007, apparently never upstreamed.

commit 3ad4307054bb5dfca6f463c95521bd3e935eebc4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 04:01:49 2021 +0000

    name.c: fix possible crash in attstore()
    
    From OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-env.dif
    (the init.c fix there is already done differently in 3654ee73)
    
    src/cmd/ksh93/sh/name.c: attstore():
    - Check nv_mapchar() returns a non-null pointer before using it.

commit cc4927529bb35557fdd772b8570d3855c68398d7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 02:29:55 2021 +0000

    libast: Update cdt(3): Allow empty strings in (dt)trees
    
    This backports most of the Cdt (container data types) mechanism
    from the ksh 93v- beta, based on ground work done by OpenSUSE:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-dttree-crash.dif
    plus adaptations to match ksh 93u+m and an updated manual page
    (src/lib/libast/man/cdt.3) added directly from the 93v- sources.
    
    | Thu Dec 20 12:48:02 UTC 2012 - werner@suse.de
    |
    | - Add ksh93-dttree-crash.dif - Allow empty strings in (dt)trees
    |   (bnc#795324)
    |
    | Fri Oct 25 14:07:57 UTC 2013 - werner@suse.de
    |
    | - Rework patch ksh93-dttree-crash.dif
    
    As usual, precious little information is available because the
    OpenSUSE bug report is currently closed to the public:
    https://bugzilla.opensuse.org/show_bug.cgi?id=795324
    
    However, a cursory inspection suggests that this code contains
    improvements to do with concurrent processing and related
    robustness. The new cdt.3 manual page adds a lot about that.
    
    This has been in production use on OpenSUSE for a long time,
    so hopefully this will make ksh a little more stable again.
    Only one way to find out: let's commit and test this...
    
    BTW, to get a nice manual, use groff and ghostscript's ps2pdf:
    $ groff -tman src/lib/libast/man/cdt.3 | ps2pdf - cdt.3.pdf

commit aa2644ab848a0ea904e11cb98709f2c1ba858f87
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 28 00:42:17 2021 +0000

    build: add missing version.h dependencies (re: 7fdeadd4)
    
    src/cmd/ksh93/Mamfile:
    - parse.c and shcomp.c now depend on version.h; this makes sure
      they are rebuilt if version.h changes.

commit 77ab60a149c77f1797a25a43c613dcdb8ad6ce07
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 15:03:06 2021 +0000

    iffe: revert <stdio.h> removal, add different fix (re: 308696ec)
    
    Commit 308696ec caused the build to fail on macOS Catalina.
    
    src/cmd/INIT/iffe.sh:
    - Fix a blatantly unportable practice of passing multiple
      "|"-separated 'case' patterns through a variable. This was a way
      of grepping for some headers including stdio.h, but it only works
      this way on ksh93 and possibly the original Bourne shell, and not
      on *any* other shell (not even pdksh or mksh) -- and the fact
      that it works on ksh93 is arguably a bug. Fix by eliminating the
      "noext" variable (which is init'ed once and never changes) and
      using the pattern in the relevant 'case' statement directly.
    
    src/cmd/builtin/features/pty:
    - No matter what I try, including <stdio.h> causes the build to
      fail on Gentoo Linux (i386) with mysterious "invalid identifier:
      off64_t" errors -- this is probably some AST preprocessor hackery
      gone awry, but I've no idea where to even begin with that. This
      works around the problem by using AST sfio instead, which is
      built and functional by the time this feature test is run.
    - Remove explicit extern declaration for ptsname(2) that was never
      used because it depended on an npt_ptsname feature test that
      doesn't exist (or no longer exists).
    - Add missing <fcntl.h>, <stdlib.h>, and <unistd.h> for open(2),
      ptsname(2) and close(2), respectively.
    
    src/lib/libast/features/float,
    src/lib/libast/features/sfio,
    src/lib/libast/features/stdio:
    - Re-include <stdio.h>.
    
    Fixes: https://github.com/ksh93/ksh/issues/164 (I hope)

commit 399886daa971c3330731071c4101981007202ef5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 14:54:53 2021 +0000

    **/Mamfile: iffe: rm irrelevant flags (re: 580ff616, 6cc2f6a0)
    
    This fixes annoying warnings from feature tests that show up when
    building with IFFEFLAGS=-d1 (show compiler output from iffe), e.g.:
    
    | In file included from <built-in>:367:
    | <command line>:3:26: warning: missing terminating '"' character [-Winvalid-pp-token]
    | #define _AST_git_commit \"a5c53a59\"
    |                          ^
    | 1 warning generated.
    
    This means the double quotes were incorrectly escaped, which is
    probably a bug in mamake -- but they're done correctly for the .c
    files that actually need these flags. I may or may not trace the
    mamake bug sometime.
    
    src/*/*/Mamfile:
    - Remove ${KSH_SHOPTFLAGS} en ${KSH_RELFLAGS} from the iffe
      invocations; they are not relevant for feature tests, only when
      actually compiling .c files (the $CC commands).

commit db5621dbf8abec3ff4f4450845439a014eb6d121
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 05:56:12 2021 +0000

    Fix editor prediction code garbling input
    
    This applies a patch from OpenSUSE. Source:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-edpredict.dif
    
    | Tue Jul  5 14:49:03 CEST 2016 - mls@suse.de
    |
    | - fix editor prediction code garbling input [bnc#964966]
    |   new patch: ksh93-edpredict.dif
    
    Unfortunately the bug report is not currently public:
    https://bugzilla.opensuse.org/show_bug.cgi?id=964966
    but this one seems sensible enough and is in production use,
    so I'll take it on faith.

commit 9b5ff0f833c6fbb81a268da73e7bbce7d7810e63
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 05:45:51 2021 +0000

    Fix leak in optimize processing
    
    This applies a patch from OpenSUSE. Source:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-optimizeleak.dif
    
    | Tue Jul  5 14:49:03 CEST 2016 - mls@suse.de
    |
    | - fix leak in optimize processing [bnc#982423]
    |   new patch: ksh93-optimizeleak.dif
    
    Unfortunately the bug report is not currently public:
    https://bugzilla.opensuse.org/show_bug.cgi?id=982423
    but this one seems sensible enough and is in production use,
    so I'll take it on faith.

commit 6d1352699e05c951ea35b78cd0d2ffa8cdfbadba
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 05:32:24 2021 +0000

    Fix locking error in spawn implementation
    
    This applies a patch from OpenSUSE. Source:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-spawnlock.dif
    
    | Wed Oct 12 13:23:14 CEST 2016 - mls@suse.de
    |
    | - fix locking error in spawn implementation [bnc#988213]
    |   new patch: ksh93-spawnlock.dif
    
    Unfortunately the bug report is not currently public:
    https://bugzilla.opensuse.org/show_bug.cgi?id=988213
    but this one seems sensible enough and is in production use,
    so I'll take it on faith.

commit a5c53a59e1bc8bfc2bb3c405e3aef79f51458c10
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 04:22:12 2021 +0000

    pty: more tweaks (re: 206bba4f, 5a2e7dae)
    
    src/cmd/builtin/pty.c:
    - Add missing #include <signal.h>.
    - No need to limit SIGTTOU handling to Linux only -- it is POSIX
      compliant. Change #ifdef __linux__ to #ifdef SIGTTOU.
    - The ECHOKE flag is not POSIX, so protect it with an #ifdef.
    - s/slave/minion/g because minions are way more fun.

commit 206bba4f2edfdbfc4ad5a382007d7ad6e0f67c0c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 02:50:28 2021 +0000

    pty.c: Restore build on systems without cfmakeraw(3) (re: 5a2e7dae)
    
    The OpenSUSE patch uses cfmakeraw(3) which is on Linux, BSD and
    macOS, but not portable. The build failed on Solaris and variants.
    
    src/cmd/builtin/features/pty:
    - Add simple test for the presence of cfmakeraw(3). I love iffe.
    
    src/cmd/builtin/pty.c:
    - Add POSIX compliant fallback flaggery for systems without it.

commit 8e45daeaf13d4701365d39650114b7f5413718fd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 01:14:13 2021 +0000

    ksh93/README: we now build on Alpine, 0 regress fails (re: e245856f)

commit eaacfbb929c3ea463b889cb9d3ffc1f5d06d2137
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 00:54:48 2021 +0000

    tests/pty.sh: Re-disable the process group exercise test
    
    It freezes the 'less' pager on OpenBSD, which is not a ksh bug.

commit 28f97ba85c83fa5f755996110cf3bf1f6dd6ea92
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 27 00:44:26 2021 +0000

    Allow building on AIX
    
    This makes ksh build at least on AIX 7.1 on RISC (PowerPC).
    
    There are 4 regression test failures:
    
            leaks.sh[159]: memory leak on PATH reset before PATH search
            (leaked approx 220 KiB after 16384 iterations)
    
            pty.sh[351]: POSIX sh 104(C): line 364: expected
            "^done\r?\n$", got EOF
    
            signal.sh[280]: subshell ignoring signal does not send
            signal to parent (expected 'SIGUSR1', got 'done')
    
            signal.sh[282]: parent does not wait for child to complete
            before handling signal
    
    src/cmd/INIT/iffe.sh:
    - Unset LIBPATH on AIX. The features/pty output{ ... }end will fail
      to link to libiconv otherwise, causing a build failure. See:
      https://www.ibm.com/support/pages/member-libiconvso2-not-found-archive
    
    src/cmd/builtin/pty.c:
    - CMIN is not defined on AIX, so set it to 1 if it's not defined.
    
    src/cmd/ksh93/README:
    - Update list of tested OSs.

commit 308696ec958bdfd6ca5e6094b16cb0f8d3bd59f5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 26 21:53:48 2021 +0000

    feature tests: do not re-include <stdio.h>
    
    iffe --man documents that stdio.h is automatically pre-included for
    all feature tests. Including it in the test code is not needed.
    
    You'd think it shouldn't do any harm, but on a Gentoo i386 system,
    this include turned out to be the cause of a mysterious 'unknown
    type: off64_t' error while compiling the output{ ... }end block in
    features/pty. I'm not going to bother with further tracing the
    cause of that -- there is some hackery with off64_t defines in the
    AST headers that probably has something to do with it.
    
    src/cmd/builtin/features/pty,
    src/lib/libast/features/float,
    src/lib/libast/features/sfio,
    src/lib/libast/features/stdio:
    - Remove '#include <stdio.h>' from output{ ... }end blocks.

commit b6bd9815a465facc86bc8fd90bd0dcba845f7522
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 26 17:15:23 2021 +0000

    **/Mamfile: Use IFFEFLAGS variable to add iffe flags like -d1
    
    It was unreasonably hard to debug problems with iffe tests that
    fail to compile where they should (particularly output{ ... }end
    blocks that write esserntial headers).
    
    In e72543a9 the problem was already somewhat mitigated by making
    some of the failing output{ ... }end blocks emit #error directives
    so that invalid/incomplete headers would cause an error at a
    sensible point, and not a much harder to track error later.
    
    This commit further mitigates the problem by making the Mamfiles
    respect an IFFEFLAGS environmenet variable that is prefixed to
    every iffe command's arguments. The typical use would be to export
    IFFEFLAGS=-d1 to enable debug level 1: show compiler output for all
    iffe tests. This now makes it reasonably feasible to detect
    problems in the feature tests themselves.
    
    src/**/Mamfile:
    - Import IFFEFLAGS environment variable using setv.
    - Prefix ${IFFEFLAGS} to every iffe command.
    
    src/**/features/*:
    - Amend the new fail error messages to recommend exporting
      IFFEFLAGS=-d1 to show the cause of the failure.
    
    README.md, TODO:
    - Updates.

commit f033bb0351d3e263ed621c101e62698e1ddd859b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 26 15:48:38 2021 +0000

    alarm: don't save sh.ifstable (re: 18b3f4aa)
    
    It is not correct to save sh.ifstable (a.k.a. shp->ifstable) before
    calling a function and then restore it after; this can cause field
    splitting to malfunction. See 70368c57.
    
    The change to init.c in the Red Hat patch applied in 18b3f4aa
    (shp->ifstable[0] = S_EOF) appears to be sufficient.
    
    src/cmd/ksh93/bltins/alarm.c:
    - Revert save/restore of sh.ifstable.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Tweak the regression test to work correctly on a slower machine,
      i.e. a Raspberry Pi running FreeBSD 12.2 arm64 (thanks to hyenias
      for providing testing access).

commit e72543a9fae72df642f859ed8a3369ed27ef2606
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 26 09:45:17 2021 +0000

    Build system tweaks; fix use of brk(2)/sbrk(2) feature test
    
    There is a feature test for brk(2)/sbrk(2), but it was not checked
    for in one place in vmbest.c, causing libdll to fail to build on
    FreeBSD aarch64 because the features/dll output{...}end block
    failed to link. This commit allows libdll to build on that system,
    though another mysterious build failure apparently remains.
    https://github.com/ksh93/ksh/issues/154
    
    src/lib/libast/include/vmalloc.h,
    src/lib/libast/vmalloc/vmbest.c:
    - Add missing '#if _mem_sbrk' directives to disable uses of sbrk(2)
      on systems that have removed this deprecated interface.
    
    src/cmd/builtin/features/pty,
    src/lib/libast/features/common,
    src/lib/libast/features/float,
    src/lib/libast/features/lib,
    src/lib/libast/features/sfio,
    src/lib/libast/features/sizeof:
    - Add a fail clause to more 'tst - output{' blocks so they write an
      informative #error directive if they fail to compile and write
      required header identifiers. This should avoid much more obscure
      compile errors later on. (re: e20c0c6b)
    
    .gitignore:
    - Add pattern for emacs #backup# files.

commit 856a2bb25340dc067aff2a001d9c053b1e936388
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 25 13:39:30 2021 +0000

    **/Mamfile: add header comment pointing to MAM docs (re: 6cc2f6a0)
    
    The only proper documentation of the MAM language is in Glenn
    Fowler's paper, which is unfortunately copyrighted so we can't
    include it. But we can at least provide a link to it.
    
    src/**/Mamfile:
    - Add header comment.
    
    src/cmd/INIT/mamake.c:
    - Re-enable clang warnings on unused values (there aren't any).

commit 19c427435b1b5cb57d7e05581af07c6c0ed0f30d
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sun Jan 24 17:45:08 2021 -0500

    typeset: Correct numeric attribute change for floating points (#163)
    
    This commit resolves the following incorrect variable assignments:
    $ unset a; typeset -uF a=2; typeset -p a
    typeset -X a=0x1.0000000000p+1
    $ unset a; typeset -Fu a=2; typeset -p a
    typeset -X a=0x1.0000000000p+1
    $ unset a; typeset -ulF a=2; typeset -p a
    typeset -l -X a=0x1.0000000000p+1
    $ unset a; typeset -Ful a=2; typeset -p a
    typeset -l -X a=0x1.0000000000p+1
    $ unset a; typeset -Eu a=2; typeset -p a
    typeset -E -X a=2
    $ unset a; typeset -Eul a=2; typeset -p a
    typeset -l -E -X a=2
    
    src/cmd/ksh93/bltins/typeset.c:
    - If the unsigned option (-u) was provided in conjunction with a
      floating point (-F) then due to a flag collision with NV_UNSIGN
      and NV_HEXFLOAT both having the value of NV_LTOU caused the
      floating point to become a hexadecimal floating point (-X) in
      error. Also, if a -E option flag was followed with a -u option
      then the resulting variable would be both a scientific notation
      and a hexadecimal floating point at the same time.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add regression tests.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 5a2e7dae67e6b58869563eb21919d45fd4527d03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 24 18:57:27 2021 +0000

    pty: Fix signal handling (re: 1ca9286a)
    
    This applies the OpenSUSE changes to pty.c from:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-builtin.dif
    
    src/cmd/builtin/pty.c:
    - Add a patch from OpenSUSE with a fix for signal handling.
    
    src/cmd/ksh93/tests/pty.sh:
    - Re-enable the process group exercise test.
    
    Resolves: https://github.com/ksh93/ksh/issues/61

commit 70368c57d67c6d3f327a52de39697e8c6647ee7a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 24 15:46:46 2021 +0000

    Fix field splitting bug triggered by DEBUG trap
    
    An unquoted variable expansion evaluated in a DEBUG trap action
    caused IFS field splitting to be deactivated in code executed after
    the trap action. Thanks to Koichi Nakashima for the reproducer:
    
    | v=''
    | trap ': $v' DEBUG
    | A="a b c"
    | set -- $A
    | printf '%s\n' "$@"
    |
    | Expected
    |
    | a
    | b
    | c
    |
    | Actual
    |
    | a b c
    
    src/cmd/ksh93/sh/fault.c: sh_trap():
    - Remove incorrect save/restore of sh.ifstable, the internal state
      table for field splitting. This reverts three lines added in ksh
      93t+ 2009-11-30. Analysis: As an expansion is split into fields
      (macro.c, lines 2367-2471), sh.ifstable is modified. If that
      happens within a DEBUG trap, any modifications in ifstable are
      undone by the restoring memccpy, leaving an inconsistent state.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Document the DEBUG trap fixes, particularly the incorrect
      inheritance by subshells and functions that some scripts may now
      rely on because this bug is so longstanding. (re: 2a835a2d)
    
    src/cmd/ksh93/tests/basic.sh:
    - Add relevant tests.
    
    Resolves: https://github.com/ksh93/ksh/issues/155
    
    TODO: add a -T (-o functrace) option as in bash, which should allow
    subshells and ksh-style functions to inherit DEBUG traps.
    
    P.S.: The very handy multishell repo allows us to use 'git blame'
    to trace the origin of the recently fixed DEBUG trap bugs.
    
    The off-by-one error causing various bugs, reverted in 2a835a2d,
    was introduced in ksh 93t 2008-07-25:
    https://github.com/multishell/ksh93/commit/8e947ccf
    (fault.c, line 321)
    
    The incorrect check causing the exit status bug, reverted in
    d00b4b39, was introduced in ksh 93t 2008-11-04:
    https://github.com/multishell/ksh93/commit/b1ade268
    (fault.c, line 459)
    
    The ifstable save/restore causing the field splitting bug, reverted
    in this commit, was introduced in ksh 93t+ 2009-11-30:
    https://github.com/multishell/ksh93/commit/53d9f009
    (fault.c, lines 440, 444, 482)
    
    So all the bugs reported in #155 were fixed by simply reverting
    these specific changes. I think that they are some experiments that
    the developers simply forgot to remove. I've suspected such a thing
    multiple times before. ksh93 was developed by researchers who were
    genius innovators, but incredibly sloppy maintainers.

commit e664b78f980fa31bd5e4c5755ce025dd5dae5618
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 24 03:51:00 2021 +0000

    Add regress test for redirection in DEBUG trap action (re: 2a835a2d)
    
    Turns out the previous commit also fixed the bug that disables the
    DEBUG trap if a redirection is used in a DEBUG trap action -- in
    other words, that's the same bug.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add test from the reproducer in the bug report.
    
    Makes progress on: https://github.com/ksh93/ksh/issues/155

commit 2a835a2d8a7979d37820705087ad43bcdadc5201
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 24 00:49:36 2021 +0000

    Fix restoring DEBUG trap upon exiting virtual subshell
    
    This trap failed to be restored correctly when being trapped in
    a subshell, causing corruption or a crash when restoring the
    parent shell environment's trap upon leaving the subshell.
    
    Thanks to Koichi Nakashima for the report and reproducer.
    
    src/cmd/ksh93/sh/fault.c: sh_sigreset():
    - Fix an off-by-one error in the loop that restores the
      pseudosignal traps.
    
    src/cmd/ksh93/tests/basic.sh:
    - Test overwriting the main shell trap in a subshell for all
      pseudosignals.
    
    Makes progress on: https://github.com/ksh93/ksh/issues/155

commit ac8e702ef221cca7ce9c730ab1ad8aa967441336
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 23 22:31:06 2021 +0000

    sh.1: rm Solaris-specific SHOPT_PFSH info (re: f089d799)
    
    The -P option only ever worked on Solaris so it's questionable it
    should have been in the general-purpose manual to begin with. And
    now it doesn't even work on Solaris as it disable SHOPT_PFSH with a
    patch (that functionality is now provided by a wrapper that works
    with all shells). So it's long past time to stop documenting it.
    
    For the same reason, this also removes the info about invoking ksh
    as pfksh, etc. -- this is still possible on Solaris with the new
    method, but the functionality is no longer actually provided by
    ksh. If the Solaris maintainers want it back in the man page, that
    should be done by adding a patch to their build system.

commit e73696fd87db1a556db36cdba1856c967894021b
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Sat Jan 23 14:31:47 2021 -0700

    Reenable the clobber method on UnixWare. (#160)
    
    UnixWare's ps prefers to read psinfo (from the proc structure in
    kernel memory) within /proc as an anti-Trojan horse measure.
    Updates to argv[0] are still reflected within /proc/$pid/cmdline,
    which is useful for diagnostic purposes.
    
    src/cmd/ksh93/sh/main.c:
    - Remove __USLC__ from the list of platforms excluded from the
      fixargs method.
    
    src/cmd/ksh93/tests/basic.sh:
    - Read /proc/$pid/cmdline instead of ps on UnixWare.

commit d2cc5208837f1305fe3a11bb9f7ba4023ae7d201
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 23 17:50:12 2021 +0000

    Disable SHOPT_KIA (ksh -R) by default
    
    SHOPT_KIA enables the -R option that generates a cross-reference
    database from a script. However, no tool to analyse this database
    is shipped or seems to be available anywhere (in spite of multiple
    people looking for one), and the format is very opaque. No usage
    examples are known or findable on the internet. This seems like it
    should not be compiled in by default, although we'll keep the code
    in case some way to use it is found.
    
    src/cmd/ksh93/SHOPT.sh:
    - Disable SHOPT_KIA by default by removing the default 1 value.
    
    src/cmd/ksh93/sh/args.c, src/cmd/ksh93/sh/parse.c:
    - Fix a couple of preprocessor logic bugs that made it impossible
      to compile ksh without SHOPT_KIA.
    
    src/cmd/ksh93/data/builtins.c:
    - Fix typo in -R doc in ksh --man (in case SHOPT_KIA is enabled).
    
    src/cmd/ksh93/sh.1:
    - Since sh.1 is not generated dynamically, remove the -R doc.

commit 0a9c6fd77139f4fe095ce997a6fecd33559fdf45
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 23 15:00:40 2021 +0000

    Revert GNU __malloc_initialize_hook(3) change (re: e8b3274a)
    
    This post-Korn AT&T commit from Feburary 2020 broke the build at
    least on Slackware 14.2 with gcc 5.5.0 and glibc 2.23 if vmalloc
    was disabled by defining _std_malloc or _AST_ksh_release (see
    35672208). So building with vmalloc disabled has always been broken
    on 93u+m on at least this version of Linux.
    
    As usual, AT&T did not document the reason for applying this
    change. It was also part of a commit that I already have little
    trust in (I reverted another part of it in 16e4824c). So let's just
    revert this and see what happens.
    
    Hmm. The Linux __malloc_initialize_hook(3) manual page says it's
    deprecated and was to be removed from glibc as of 2.24, whereas
    Slackware 14.2 uses glibc 2.23. This would explain why this change
    didn't break Linux with newer glibc versions, as the feature test
    won't detect it and it won't be used at all.
    
    src/lib/libast/features/vmalloc, src/lib/libast/vmalloc/malloc.c:
    - Revert change in definition of __malloc_initialize_hook. It now
      conforms again with the spec in the Linux man page.
    
    The build error caused by this change was:
    | + cc -D_BLD_DLL -fPIC -D_BLD_ast '-D_AST_git_commit="e3f6d2d0"' -Os -g -D_std_malloc -I. -I/usr/local/src/ksh/src/lib/libast -Icomp -I/usr/local/src/ksh/src/lib/libast/comp -Ivmalloc -I/usr/local/src/ksh/src/lib/libast/vmalloc -Iinclude -I/usr/local/src/ksh/src/lib/libast/include -Istd -I/usr/local/src/ksh/src/lib/libast/std -D_PACKAGE_ast -c /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c: In function '_ast_mallopt':
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c:1089:58: warning: implicit declaration of function 'mallopt' [-Wimplicit-function-declaration]
    |  extern int F2(_ast_mallopt, int,cmd, int,value) { return mallopt(cmd, value); }
    |                                                           ^
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c: At top level:
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c:1093:22: error: return type is an incomplete type
    |  extern Mallinfo_t F0(_ast_mallinfo, void) { return mallinfo(); }
    |                       ^
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c:72:19: note: in definition of macro 'F0'
    |  #define F0(f,t0)  f(t0)
    |                    ^
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c: In function '_ast_mallinfo':
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c:1093:52: warning: implicit declaration of function 'mallinfo' [-Wimplicit-function-declaration]
    |  extern Mallinfo_t F0(_ast_mallinfo, void) { return mallinfo(); }
    |                                                     ^
    | /usr/local/src/ksh/src/lib/libast/vmalloc/malloc.c:1093:52: warning: 'return' with a value, in function returning void
    | mamake [lib/libast]: *** exit code 1 making malloc.o

commit c2108888df9b62b3d53ca5e77bd53f24b2ee1461
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 23 14:35:23 2021 +0000

    bin/package: reallow building old ksh versions (re: 6cc2f6a0)
    
    When building old code for debugging purposes (e.g. when doing 'git
    bisect' runs), it's best to use the current build system even with
    the old code, because the old build system was very broken. E.g.:
    
            git checkout (some old commit)
            git checkout master bin src/cmd/INIT # use new build system
            bin/package make
    
    However, that became impossible in 6cc2f6a0 because the new
    SHOPT.sh script was unconditionally sourced. The error caused the
    script to exit because '.' is a special builtin.
    
    bin/package, src/cmd/INIT/package.sh:
    - If src/cmd/ksh93/SHOPT.sh doesn't exist, issue a warning instasd
      of trying to source it.

commit e3f6d2d0e644857612038c2df8e5d0160f763a03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 23 00:40:00 2021 +0000

    Fix build on systems without O_CLOEXEC (re: 9f43f8d1)
    
    A build failure on HP-UX B.11.11 was introduced when O_cloexec was
    changed to O_CLOEXEC (which is POSIX standard) in the backported
    93v- code. The lowercase variant is conditionally defined by libast
    in src/lib/libast/features/fcntl.c precisely for compatibility with
    systems that do not have O_CLOEXEC.
    
    src/lib/libast/tm/tvtouch.c:
    - Revert to using the AST O_cloexec flag when calling open(2).

commit 6cc2f6a0af3ed1ebef724b3e5b293db716a140ea
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 22 23:23:14 2021 +0000

    Build system: make SHOPT_* editable again; allow indenting Mamfiles
    
    The build system is adapted to make SHOPT_* compile-time options
    editable without nmake. We can now easily change ksh's compile-time
    options by editing src/cmd/ksh93/SHOPT.sh. The bin/package script
    is adapted to turn these into compile flags. This resolves the most
    important drawback of not using nmake.
    
    Also, mamake now has support for indented Mam (Make Abstract
    Machine) code. Only one type of block (make...done) is supported in
    Mamfiles, so they are easy to indent automatically. A script to
    (re)do this is included.
    
    Since nmake is not going to be restored (it has too many problems
    that no one is interested in fixing), this at least makes mamake
    significantly easier to work with.
    
    The Makefiles are deleted. They may still be handy for reference to
    understand the Mamfiles, but they haven't actually matched the
    Mamfiles for a while -- and you can still look in the git history.
    
    Deleting them requires some adaptations to bin/package and mamake.c
    because, even though they do not use those files, they still looked
    for them to decide whether to build code in a directory.
    
    Finally, this commit incorporates some #pragmas for clang to
    suppress annoying warnings about the coding style used in this
    historic code base. (gcc does not complain so much.)
    
    src/cmd/ksh93/SHOPT.sh:
    - Added.
    
    bin/package, src/cmd/INIT/package.sh:
    - cd into our own directory in case we were run from another dir.
    - $makefiles: only look for Mamfiles.
    - Add ksh compile-options via KSH_SHOPTFLAGS. Include SHOPT.sh.
    - make_recurse(): Do not write a missing Makefile.
    - finalize environment: Look for Mamfiles instead of Makefiles.
    
    src/cmd/INIT/mamake.c:
    - Tell clang to suppress annoying warnings about coding style.
    - Update version string and self-documentation.
    - input(): Add support for indented Mam code by skipping initial
      whitespace on each input line.
    - files[]: Instead of looking for various of Makefiles to decide
      where to build, only look for Mamfiles.
    
    src/Makefile, src/cmd/INIT/Makefile, src/cmd/Makefile,
    src/cmd/builtin/Makefile, src/cmd/ksh93/Makefile, src/lib/Makefile,
    src/lib/libast/Makefile, src/lib/libcmd/Makefile,
    src/lib/libdll/Makefile, src/lib/libsum/Makefile:
    - Removed.
    
    src/Mamfile, src/cmd/INIT/Mamfile, src/cmd/Mamfile,
    src/cmd/builtin/Mamfile, src/cmd/ksh93/Mamfile, src/lib/Mamfile,
    src/lib/libast/Mamfile, src/lib/libcmd/Mamfile,
    src/lib/libdll/Mamfile, src/lib/libsum/Mamfile:
    - Indent the code with tabs.
    - In ksh93/Mamfile, add ${KSH_SHOPT_FLAGS} to every $CC command.
    - In ksh93/Mamfile, add "prev SHOPT.sh" for every *.o file
      so they are rebuilt whenever SHOPT.sh changes.
    
    bin/Mamfile_indent:
    - Added, in case someone wants to re-indent a Mamfile.
    
    src/cmd/INIT/proto.c, src/cmd/INIT/ratz.c, src/cmd/INIT/release.c,
    src/lib/libast/features/common, src/lib/libast/include/ast.h:
    - Tell clang to suppress annoying warnings about coding style that
      it disapproves of (mainly concerning the use of parentheses).
    
    src/cmd/INIT/cc.darwin, src/cmd/INIT/cc.freebsd,
    src/cmd/INIT/cc.openbsd:
    - Remove now-redundant clang warning suppression flags.
    
    Resolves: https://github.com/ksh93/ksh/issues/60

commit 47468f56c2d0506045120fb4d0709f3a734693f5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 22:23:28 2021 +0100

    main.c: fixargs(): add support for *BSD using setproctitle(3)
    
    What is this for? See cefe087d
    
    src/cmd/ksh93/Mamfile:
    - Make iffe generate a test for the presence of setproctitle(3).
    
    src/cmd/ksh93/sh/main.c:
    - Include setproctitle test result.
    - Re-enable fixargs() for FreeBSD and DragonFly BSD.
      Disable it for UnixWare.
    - fixargs(): Add _lib_setproctitle version. Keep it simple with a
      128-character buffer array -- should be plenty for 'ps' output.
    - fixargs(): Fix an off-by-one in zeroing the rest of the buffer.
    
    src/cmd/ksh93/tests/basic.sh:
    - Update the relevant regression test to run on FreeBSD/DragonFly
      and tolerate the "ksh: " prefix added by setproctitle(3).

commit 7fdeadd4f115bd41f2ddbf289bb806359a2e7a88
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 14:15:30 2021 +0000

    Increase shcomp bytecode header version; doc updates
    
    src/cmd/ksh93/include/version.h:
    - Centrally define the 93u+m copyright (SH_RELEASE_CPYR) for adding
      to the original AT&T copyright in 'ksh --man' and 'shcomp --man'.
    - Centrally define the binary header version number for bytecode
      generated by shcomp: SHCOMP_HDR_VERSION.
    - Bump SHCOMP_HDR_VERSION from 3 to 4. Converting all the preset
      aliases to builtin commands has caused new bytecode to be
      incompatible with old ksh. (However, old bytecode runs fine on
      93u+m, because shcomp pre-expands the preset aliases.)
    
    src/cmd/ksh93/sh/shcomp.c:
    - Instead of keeping its own version date (not changed since 2003),
      use the same version string as ksh itself (SH_RELEASE).
    - Use SH_RELEASE_CPYR for the extra 93u+m copyright string.
    - Use SHCOMP_HDR_VERSION for the bytecode header.
    
    src/cmd/ksh93/sh/parse.c: sh_parse():
    - Use SHCOMP_HDR_VERSION for the bytecode version check.
    
    src/cmd/ksh93/data/builtins.c: opt_ksh[]:
    - Use SH_RELEASE_CPYR for the extra 93u+m copyright string.
    
    src/cmd/ksh93/COMPATIBILITY:
    - Mention that 93u+m shcomp bytecode won't run on older ksh.
    - Document changes in printf %T (re: 9526b3fa).
    
    src/cmd/ksh93/README:
    - Mention that we run on UnixWare (with major regressions).
      https://github.com/ksh93/ksh/pull/159#issuecomment-764667929

commit 9f43f8d10bec580c44289a5ef1684f504ac5b7bb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 13:45:05 2021 +0000

    Backport changes to AST time library from ksh 93v- beta
    
    This incorporates the last changes in the tm library before AT&T
    laid off the AST developers. It contains mostly time zone and
    locale related changes/fixes.
    
    I was hoping these would fix #52 (locale-based 'printf %T' output
    is broken), but no such luck. This is probably good to have anyway.

commit 0a10e76cccb6e7388a7b0ff6b7e40b9b09d79040
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 00:24:13 2021 +0000

    typeset: add error msgs for incompatible options; improve usage msg
    
    This adds informative error messages if incompatible options are
    given. It also documents the exclusive -m, -n and -T options on
    separate usage lines, as was already done with -f. The usage
    message for incompatible options now looks something like this:
    
    | $ ksh -c 'typeset -L10 -F -f -i foo'
    | ksh: typeset: -i/-F/-E/-X cannot be used with -L/-R/-Z
    | ksh: typeset: -f cannot be used with other options
    | Usage: typeset [-bflmnprstuxACHS] [-a[type]] [-i[base]] [-E[n]]
    |                [-F[n]] [-L[n]] [-M[mapping]] [-R[n]] [-X[n]]
    |                [-h string] [-T[tname]] [-Z[n]] [name[=value]...]
    |    Or: typeset -f [name...]
    |    Or: typeset -m [name=name...]
    |    Or: typeset -n [name=name...]
    |    Or: typeset -T [tname[=(type definition)]...]
    |  Help: typeset [ --help | --man ] 2>&1
    
    (see also the previous commit, e21a053e)
    
    Unfortunately the first "Usage" line has some redundancies with the
    "Or:" lines showing separate usages. It doesn't seem to be possible
    to avoid this; it's a flaw in how libast generates everything
    (usage, help, manual) from one huge getopt(3) string. I still think
    the three added "Or:" lines are an improvement as it wasn't
    previously shown that these options need to be used on their own.
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - Instead of only showing a generic usage message, add an
      informative error message if incompatible options were given.
    - Conflicting options detection was failing because NV_LJUST and
      NV_EXPNOTE have the same bitmask value. Use a new 'isadjust'
      flag for -L/-R/-Z to remember if one of these was set.
    - Detect conflict between -L/-R/-Z and a float option, not just -i.
    
    src/cmd/ksh93/include/name.h, src/cmd/ksh93/data/msg.c:
    - Add the two new error messages for incompatible options.
    
    src/cmd/ksh93/data/builtins.c: sh_opttypeset[]:
    - Add a space after 'float' in in "[+float?\btypeset -lE\b]" as
      this makes 'float' appear on its own line, improving formatting.
    - Show -m, -n, -T on separate usage lines like -f, as none of these
      can be combined with other options.
    - Remove "cannot be combined with other options" from -m and -n
      descriptions, as that should now be clear from the separate usage
      lines -- and even if not, the error message is now informative.
    
    src/cmd/ksh93/sh.1, src/cmd/ksh93/COMPATIBILITY:
    - Update.
    
    src/cmd/ksh93/tests/types.sh:
    - Remove obsolete test: 'typeset -RF' is no longer accepted.
      (It crashed in 93u+, so this is not an incompatibility...)
    
    Resolves: https://github.com/ksh93/ksh/issues/48

commit e21a053e190be6c0c82187b7df6877732385e917
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 00:02:01 2021 +0000

    libast: optget: improve usage messages, adding help info line
    
    For example, this changes 'typeset -Q' (a bad option) from:
    
    | ksh: typeset: -Q: unknown option
    | Usage: typeset [-bflmnprstuxACHS] [-a[type]] [-i[base]] [-E[n]]
    |                [-F[n]] [-L[n]] [-M[mapping]] [-R[n]] [-X[n]]
    |                [-h string] [-T[tname]] [-Z[n]] [name[=value]...]
    |    Or: typeset [ options ] -f [name...]
    
    to:
    
    | ksh: typeset: -Q: unknown option
    | Usage: typeset [-bflmnprstuxACHS] [-a[type]] [-i[base]] [-E[n]]
    |                [-F[n]] [-L[n]] [-M[mapping]] [-R[n]] [-X[n]]
    |                [-h string] [-T[tname]] [-Z[n]] [name[=value]...]
    |    Or: typeset -f [name...]
    |  Help: typeset [ --help | --man ] 2>&1
    
    src/lib/libast/misc/optget.c: args():
    - Revert the changes done in 6916a873 and ae92cd89. The --help and
      --man labels weren't added consistently (they did not show up in
      the example above) whereas they did show up unnecessarily in the
      manual page itself.
    - In the usage section and usage messges, only show an [ options ]
      label on the first usage line; don't redundantly repeat on second
      and further ("Or:") lines.
    - In usage and --help (but not --man), add a new "Help:" line
      telling the user about the --help and --man options. This
      replaces the reverted changes. Show the 2>&1 redirection as a
      reminder that you need to do this to pipe it into a pager, as
      everything is written to standard error!
    - Add some comments clarifying what I think this code does...
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update to match changes in getopts usage output.

commit 6445573d240157cfd3ba8044f0896179b16deb1b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 21 08:39:10 2021 +0000

    typeset: only alloc stack space if needed (re: ff70c27f)
    
    src/cmd/ksh93/bltins/typeset.c:
    - Don't call stakalloc(3) unless/until we actually need it to
      construct a new list of arguments.

commit ff70c27f2470355b965534e931d5ca989681af60
Author: Lev Kujawski <77709387+lev105@users.noreply.github.com>
Date:   Thu Jan 21 00:50:07 2021 -0700

    typeset: Fix stack fencepost error, ISO C90 compat (#159)
    
    src/cmd/ksh93/bltins/typeset.c:
    - The new_argv[] array was one item too short (should be argc+2).
    - Use AST stakalloc(3) to allocate it instead of a dynamic array;
      this restores compatibility with ISO C90.
    
    src/lib/libast/features/standards, src/cmd/INIT/cc.unixware.i386:
    - Add support for UnixWare.
    - Do not define any standards macros on this system, as on FreeBSD
      and DragonFly BSD.

commit bb4d6a2ee598adfe5c3ae2930acc99d286e39c49
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 22:13:32 2021 +0000

    cd: add missing "test.h" include (re: 5ee290c7)
    
    Fixes: https://github.com/ksh93/ksh/issues/158

commit 8cd4bc1690484b963fbdc63df7933821ee5d0fed
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 22:05:22 2021 +0000

    conf.sh: correct embarrassing typo (re: a75d0dfa)

commit d00b4b39f66e2912797195f2aac9913218826350
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 17:40:09 2021 +0000

    Fix side effect to exit status of DEBUG trap in comsub
    
    This fixes the following:
    
    trap ':' DEBUG
    r=$(exit 123)
    echo $? # Expected 123, but actually 0.
    
    Thanks to Koichi Nakashima for the report and reproducer.
    
    src/cmd/ksh93/sh/fault.c: sh_trap():
    - Restore the saved current exit status (exitval) for all traps.
      Do not except the DEBUG trap from doing that. I've no idea why
      this exception was made, but it's not correct.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add tests.
    
    Makes progress on: https://github.com/ksh93/ksh/issues/155

commit 5ee290c7a89d9f3f0b0a908304d0ad34b55df709
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 05:43:46 2021 +0000

    cd: Fork if $PWD exists but is not actually the PWD (re: d1483150)
    
    Commit d1483150 did not fully fix #153.
    Test case from Harald van Dijk that was still failing:
    
    $ mkdir test
    $ cd test
    $ rmdir $PWD
    $ mkdir $PWD
    $ ksh -c "(cd /); pwd"
    /
    
    Forking a virtual subshell in that case is needed to avoid ending
    up in a directory that replaced the PWD, because it will not be
    possible for a process to change back to the original directory.
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - When deciding whether to fork, instead of attempting to opendir
      the PWD, compare the inodes $PWD and "." to determine if $PWD
      still actually refers to the current directory. This uses the
      test_inode() function which is also used by 'test foo -ef bar'.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add test based on the above.
    
    Progresses: https://github.com/ksh93/ksh/issues/153

commit ec0155ee65bd5faa6a59e9043516f5e29dff90d8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 05:38:55 2021 +0000

    tests/variables.sh: tweaks for special and locale variable tests
    
    src/cmd/ksh93/tests/variables.sh:
    - Fork the subshell with the test that includes unsetting LINENO
      and changing its type. Otherwise, some side effect of that leaks
      out of the subshell, messing up $LINENO. This is a bug, but it's
      low priority -- we may get to it someday. Marked with a TODO.
    - Do the LC_* tests in their own subshell. Skip them if changing
      LANG to an invalid value does not produce a diagnostic message.
      This occurs on OpenBSD and Alpine Linux (with musl libc). It
      looks like their C libraries do not verify the locale, so
      failures here are not a ksh problem; skip the tests in that case.

commit 21c42fcef84cdd5ba89be593e561e3cc81bd8c9b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 05:01:57 2021 +0000

    tests/pty.sh: skip 4 tests when running as root

commit e245856fd23b07c1cfa7a3d18921f054c14b2c43
Author: lev105 <77709387+lev105@users.noreply.github.com>
Date:   Tue Jan 19 21:02:00 2021 -0700

    Fix incompatibilities with the musl C library (#156)
    
    This makes ksh build on Alpine Linux which uses this C library.
    
    src/lib/libast/include/ast_std.h:
    - Define __DEFINED_FILE to hide FILE internals from the Korn
      shell's SFIO.
    
    src/lib/libast/features/wchar:
    - Include wchar.h before redefining iswalpha() to avoid mangling
      the C library's declaration.
    
    src/lib/libast/features/lib:
    - Test whether off64_t and off_t are actually distinct types before
      using the former.
    
    Fixes: #3

commit 699965fe41d1d1d86c3b950282a6e480cab25287
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 20 03:54:23 2021 +0000

    tests/builtins.sh: don't test for x perm check as root

commit a75d0dfa184587fe66eb4e1f8bbaaad3461c5e95
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 23:05:39 2021 +0000

    conf.sh: avoid pointless reruns (re: 33b6718b)
    
    Same idea as in the referenced commit.
    
    src/lib/libast/comp/conf.sh:
    - If an output header file has not changed after rerunning conf.sh,
      still update the output file's timestamp using touch(1) to signal
      that the test has already been run.

commit 7c7128e49642542b7114f67828dd13dc97a41a30
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 23:05:01 2021 +0000

    update bin/ scripts (re: 3b19944e)

commit 3b19944e07824b5cf1feb44c3989c3b4e816d756
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 22:35:41 2021 +0000

    tweak for compat with broken /bin/sh on AIX ibm.risc
    
    AIX on ibm.risc comes with a broken version of ksh88 as /bin/sh
    where the following causes breakage in the parser (spurious syntax
    errors):
    
            (set -o posix) 2>/dev/null && set -o posix
    
    However, prefixing it with 'command' (while keeping the subshell)
    circumvents the problem. So, why not.
    
            (command set -o posix) 2>/dev/null && set -o posix

commit e20c0c6b5d48dc2a77ec5cca495437a6d6bb012a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 22:19:54 2021 +0000

    dll feature test: output #error directive on failure
    
    A common cause of build failures on some systems is that the output
    block in the dll feature test silently fails to compile. This leads
    to very-hard-to-trace compiler errors about missing identifiers
    later on. iffe syntax does not allow aborting compilation if a
    block does not compile, however, it does let us produce alternative
    output from a shell script if compilation fails. This can be used
    to generate an informative #error directive that is inserted in
    place of the missing identifiers.
    
    src/lib/libdll/features/dll:
    - Add fail block to output block that produces an #error directive.

commit 820bb6a04b4653480294dae5fdd13cf78bdf7279
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 22:13:59 2021 +0000

    make.probe: probe_optimize: remove -O2
    
    Solaris Studio 12.5 cc seems to produce incorrect code at -O2
    (a.k.a. -xO2) optimisation level; integer variables initialise at
    random values, and the behaviour of the shell is so incorrect it
    can't even run the test scripts. It does not support -Os so that
    is skipped for that compiler. At -O it works fine.
    
    src/cmd/INIT/make.probe:
    - By default, only try -Os and -O optimisation flags.

commit 7bab9508aa8aeef98764b64953463af116a12fe4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 18:47:41 2021 +0000

    Fix crash on subshell exit if PWD is inaccessible (re: dd9bc229)
    
    This commit also further mitigates the problems with restoring an
    inaccessible or nonexistent PWD on exiting a virtual subshell.
    
    Harald van Dijk writes:
    > On a build of ksh with -fsanitize=undefined to help diagnose
    > problems:
    >
    > $ mkdir deleted
    > $ cd deleted
    > $ rmdir ../deleted
    > $ ksh -c '(cd /; (cd /)); :'
    > /home/harald/ksh/src/cmd/ksh93/sh/subshell.c:561:22: runtime
    > error: null pointer passed as argument 1, which is declared to
    > never be null
    > Segmentation fault (core dumped)
    >
    > Note that it segfaults the same with default compilation flags,
    > but it does not print out the useful extra message. The code
    > assumes that pwd is non-null and passes it to strcmp without
    > checking, but it will be null if the current directory cannot be
    > determined, for instance because it has been deleted.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Avoid the null pointer dereference reported above.
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - Fork a virtual subshell even on systems with fchdir(2) if the
      present working directory tests as inaccessible on invoking 'cd';
      it may no longer exist and fchdir would fail to get a handle.
      (For the test we have to opendir(3) the full path to the PWD and
      not ".", as the latter may succeed even if the PWD is gone.)
    
    src/cmd/ksh93/data/builtins.c:
    - Update 'cd' version string.
    
    Fixes:   https://github.com/ksh93/ksh/issues/153
    Related: https://github.com/ksh93/ksh/issues/141

commit 82847bba3fbd7848546ed7de1c87c5f244ac0a28
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 18:30:29 2021 +0000

    sh_main(): do not decrease null pointer
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Reading the code makes it obvious that the shp->comdiv-- decrease
      in the 'else' block is never reached unless that pointer is still
      null, in which case it makes no sense to decrease it. Must be
      some kind of missed leftover from old code. Remove the decrease.

commit de7eb8525501c47724fe5643bdbdc2647680aa69
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 18:23:14 2021 +0000

    sh_subsavefd(): avoid a negative shift operand
    
    This change is backported from the abandoned ksh 93v- beta.
    
    src/cmd/ksh93/sh/subshell.c: sh_subsavefd():
    - Do not subtract 1 from fd, as this would cause a negative shift
      operand for stdin (fd==0).

commit ba6fc164d7d963173150145fbe61e846d4b8d7ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 19 04:15:12 2021 +0000

    README.md: update in prep for release

commit ccd98fe7548527ff2c5e5437fede815f721e3c09
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 23:48:11 2021 +0000

    src/cmd/ksh93/{COMPATIBILITY,README}: updates in prep for release

commit 33b6718bf276f0f50d317681618048763ba593fa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 21:35:27 2021 +0000

    iffe: avoid pointless reruns: update result timestamp if unchanged
    
    If iffe re-ran a test because the source test script changed, but
    the result file is unchanged, it didn't update the timestamp of the
    result, so the source script remained newer. The build system then
    kept pointlessly re-running the test on each rebuild. If a central
    test script such as src/lib/libast/features/standards was changed,
    this had cascading effects, e.g., causing libast to be rebuilt over
    and over as I recompiled small changes elsewhere. Until now, my
    workaround was to delete the entire 'arch' directory and start
    over. Hopefully that will now no longer be needed.
    
    src/cmd/INIT/iffe.sh:
    - If a test output file has not changed after rerunning a test that
      has changed, still update the output file's timestamp using
      touch(1) to signal that the test has already been run.

commit dd0d03b973730bed9e550eecd5f2dfaea1b835b6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 19:16:17 2021 +0000

    Eliminate LDFLAGS hack to compile on certain OSs
    
    Instead, we now link to the libm system math library where needed
    by adding -lm to the relevant compile commands in the Mamfiles.
    This is not needed on every system but never does any harm.
    
    (This adds more custom edits to the Mamfiles, which were originally
    generated from the nmake Makefiles. This takes us further from
    restoring nmake, but that already wasn't going to happen anyway,
    due to its many problems... the path forward will be to translate
    the Mamfiles to some other, current make system such as GNU make.)
    
    bin/package, src/cmd/INIT/package.sh:
    - Remove LDFLAGS=-lm hack for DragonFly BSD, NetBSD and Solaris.
    
    src/cmd/builtin/Mamfile,
    src/cmd/ksh93/Mamfile,
    src/lib/libdll/Mamfile:
    - Add -lm where linking failed on any of the three mentioned OSs.
    
    src/lib/libdll/features/dll:
    - In the output test program, add missing #include <math.h>, fixing
      unknown identifier errors on NetBSD (ldexp, ldexpl).
    
    src/cmd/builtin/features/pty:
    - Add missing #include <stdio.h> to make printf work on all systems
      (this is just a feature test, no need to bother with sfio here).
    
    src/lib/libast/features/stdio:
    - Undef __FILE_T to avoid interference from system headers on QNX.
      (There are still other problems preventing a build on QNX 6.5.0.
      The shipped version of gcc seems to be broken.)

commit 5f6371f078dded41c6ad8583b4dded274e8015ed
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 09:33:26 2021 +0000

    main.c: tweak fixargs() macros: single point of truth

commit 4dcf5c5066ed8db67f93563e8ca0d641ad571113
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 09:08:48 2021 +0000

    Apply patches to build on DragonFly BSD and (older) FreeBSD
    
    This now makes ksh build on DragonFly BSD.
    
    bin/package, src/cmd/INIT/package.sh:
    - DragonFly also needs the -lm hack for LDFLAGS.
    
    src/cmd/ksh93/sh/main.c, src/cmd/ksh93/tests/basic.sh:
    - fixargs() doesn't work on DragonFly either
      (re: 9b7c392a, 159fb9ee, cefe087d).
    
    The following are backported from:
    https://github.com/att/ast/issues/26#issuecomment-313927854
    https://github.com/att/ast/pull/19
    
    src/lib/libast/comp/setlocale.c:
    - Add missing #include <errno.h> since errno is used.
    
    src/lib/libast/features/standards:
    - Do not set any standards macros (_POSIX_SOURCE etc) on FreeBSD or
      DragonflyBSD; they disable too much functionality on those.
    
    src/lib/libast/features/wchar:
    - Set _STDFILE_DECLARED on DragonFly, too.
    
    src/lib/libast/include/sfio.h, src/lib/libast/include/sfio_t.h,
    src/lib/libast/sfio/_sfopen.c, src/lib/libast/sfio/sfclrlock.c,
    src/lib/libast/sfio/sfhdr.h, src/lib/libast/sfio/sfnew.c,
    src/lib/libast/sfio/sfset.c:
    - Rename SF_* macros to SFIO_* to avoid a conflict with system
      headers.
    
    src/lib/libast/string/strexpr.c:
    - Rename error() to err() to avoid a conflict.

commit 8633290e6394b5194d39a512264f92be765f213d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 07:48:15 2021 +0000

    Fix build failure on certain versions of glibc
    
    Patch from:
    https://bugzilla.redhat.com/show_bug.cgi?id=1477082
    
    See also:
    https://github.com/att/ast/pull/63
    https://bugs.debian.org/887743

commit 8361e065e68505362008d0d106f5c4e822c040e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 06:59:29 2021 +0000

    job_unpost(): fix segfault
    
    This function could segfault under certain conditions (in macOS
    Terminal, when ksh received SIGWINCH and a complex PS1 prompt is
    defined; see 61437b27)
    
    0   ksh            job_unpost + 49 (jobs.c:1703)
    1   ksh            job_reap + 1632 (jobs.c:468)
    2   ksh            job_wait + 942 (jobs.c:1525)
    3   ksh            sh_exec + 19579 (xec.c:1627)
    4   ksh            sh_eval + 545 (xec.c:763)
    5   ksh            sh_trap + 427
    6   ksh            ed_emacsread + 3598 (emacs.c:1072)
    7   ksh            slowread + 489 (io.c:1962)
    8   ksh            sfrd + 1026 (sfrd.c:253)
    9   ksh            _sffilbuf + 587 (sffilbuf.c:105)
    10  ksh            sfreserve + 662
    11  ksh            exfile + 1922 (main.c:527)
    12  ksh            sh_main + 1071 (main.c:351)
    13  libdyld.dylib  start + 1
    
    src/cmd/ksh93/sh/jobs.c: job_unpost():
    - Fix a dereference of a possible null pointer returned by
      job_byjid(). Add a check and return if that pointer is null.

commit 7222ba3af715a5ad26b83669a5790f7a9294403d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 06:27:08 2021 +0000

    tests/basic.sh: fix intermittent spurious regress fail
    
    ~- and ~+ are ksh93-specific tilde expansions that expand to
    $OLDPWD and $PWD, respectively. On some systems, $OLDPWD is not set
    on entry to the test script, because it is not exported to the
    environment. This made it unset before any 'cd' was executed,
    which (correctly) disabled ~- expansion.
    
    src/cmd/ksh93/tests/basic.sh:
    - Before testing 'cd ~-', make sure $OLDPWD is set by cd'ing to
      /dev first (a directory guaranteed by POSIX).

commit 8e8ff5f6f6c3a649bf9c5d383075fd9af9a6120a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 06:11:45 2021 +0000

    Disable SHOPT_PFSH in feature test (re: f089d799)
    
    src/cmd/ksh93/features/options:
    - To make sure SHOPT_PFSH stays disabled on Solaris, we
      also need to stop this feature test from re-enabling it.

commit f089d7990a34b24b9c8fa8857d7d8de3d4587b49
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 05:24:44 2021 +0000

    Solaris: disable deprecated SHOPT_PFSH by default
    
    Solaris /bin/ksh disables the SHOPT_PFSH compile option ("solaris
    exec_attr(4) profile execution") with a patch. Since this option
    applies to Solaris and variants only, let's upstream that change.
    
    (Solaris now provides pfksh93 as a wrapper around ksh93, and does
    the same for other shells, so profiling functionality is no longer
    ksh-specific.)
    
    If you want to re-enable it, add -DSHOPT_PFSH to your $CCFLAGS.
    
    Original patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/150-CR7168611.patch
    
    src/cmd/ksh93/Makefile:
    - Add note that edits in Makefile are ineffective as we do not ship
      nmake.
    - Disable SHOPT_PFSH, cosmetically.
    
    src/cmd/ksh93/Mamfile:
    - Remove -DSHOPT_PFSH from all compiler commands.

commit 4cfe49aebb224ba49f153ee3cd6c5994bb5d880c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 03:48:06 2021 +0000

    package: involve $CCFLAGS when determing 64-bit arch (re: 9a48ba15)
    
    bin/package, src/cmd/INIT/package.sh:
    - It can depend on the compiler flags passed whether the compiler
      produces code for a 64-bit architecture, so pass $CCFLAGS to
      the compiler when testing whether it creates 64-bit object code.
    
    README.md:
    - Copy-edit of build instructions.

commit 580ff61617b0884c135513d13d6ba796c0e0fe49
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 18 01:07:45 2021 +0000

    Fix release and standards build flags (re: 35672208, aa4669ad)
    
    bin/package, src/cmd/INIT/package.sh:
    - CCFLAGS overwrites the autodetected optimisation flags (e.g. -Os)
      if set. Unfortunately, that also happened when we added something
      to CCFLAGS for a release build or to add an extra flag needed by
      Solaris. The fix is to use a new flags variable (KSH_RELFLAGS)
      instead. This needs to be done in a different place as it needs
      to be added to the mamake command as an assignment argument.
    - Remove the Solaris CCFLAGS hack; see features/common below.
    
    src/*/*/Mamfile:
    - Add ${KSH_RELFLAGS} to all the compiler commands.
    
    src/lib/libast/features/common:
    - Enable POSIX standard on Solaris (i.e.: if __sun is defined) by
      defining _XPG6 directly in the feature test that generates
      ast_std.h, which is indirectly included by everything. This
      removes the need to pass -D_XPG6 via CCFLAGS. (Doing so
      automatically with gcc was not otherwise possible.)
    
    src/cmd/INIT/cc.sol11.*:
    - No longer pass -D_XPG6, as per above.

commit e25d9f4190b247676449ab42de778437719c990a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 17 03:55:46 2021 +0000

    nv_newattr(): fix potential invalid free
    
    src/cmd/ksh93/sh/name.c:
    - Zero the 'cp' pointer after freeing it, as the next loop
      iteration may otherwise re-use the old address.

commit 9a48ba15572cc6f4b36245b234f8cfe003f25662
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 16 22:53:35 2021 +0000

    package: fix code for detecting 64-bit compiler
    
    bin/package, src/cmd/INIT/package.sh:
    - The code for detecting a 64-bit object file was seriously broken:
      the temporary file name could contain '64' because it included $$,
      the current PID, and 64-bit was detected if the output of 'file'
      (which includes the complete file name) contained '64'. Fix by
      removing the file name from 'file' output before testing.
    - Also refactor that code a bit and remove the nonsensical test if
      /bin/sh is a 64-bit binary, which is neither here nor there. It's
      what the compiler produces that we need to care about.

commit 6025c8125e596ccf5e25c651a8800c072310f3a4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 16 22:01:07 2021 +0100

    make.probe: add fallback optimisation flags
    
    src/cmd/INIT/make.probe:
    - probe_optimize: Also try -O2 and -O, for compilers (such as
      Solaris Studio cc) that do not support -Os.
    - Use more robust code to loop through possible optimiser flags.

commit 1554ec2cdd7b3c1630db245d083dee20373abd6e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 16 18:32:37 2021 +0100

    libast: Revert conf.sh changes (re: 2e839d87, 3aa01a95)
    
    These caused a compilation failure in the generated conftab.c
    file while compiling on Solaris with gcc.

commit 68a6f9a6e2ecccc8326b7f8ff8dfbe6f82340b35
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 16 18:10:39 2021 +0100

    Fix Solaris cc wrappers (re: 4e67234a)
    
    The versions from the Solaris patch require $CC_EXPLICIT to be set,
    which is specific to the internal Solaris build environment.
    
    src/cmd/INIT/cc.sol11.*:
    - Cope without $CC_EXPLICIT set in environment; fall back to $CC
      and if that is not set either, detect whether to use cc or gcc.
    - Set appropriate flags for cc (Solaris Studio) or gcc, including
      the necessary -D_XPG6 flag, without which ksh crashes on Solaris.
    
    bin/package, src/cmd/INIT/package.sh:
    - Update hack to add the -D_XPG6 flag so it applies to gcc only
      (note: the src/cmd/INIT/cc.* scripts are never used for gcc).

commit 2e839d8775bc05b6cee305b03bd4fb9ed568898d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 16 14:43:22 2021 +0000

    getconf detection: fix compiler error msg extraction (re: 3aa01a95)
    
    That patch didn't work for non-gcc, non-clang compilers -- at least
    Solaris Studio cc. It doesn't prefix error messages with "error:".
    As a result, it caused the build to fail on Solaris with native cc.
    
    src/lib/libast/comp/conf.sh:
    - Use a sed formula that should catch error messages prefixed by
      "line xx:" while still removing warnings and suggestions. This
      works on at least clang, gcc, Solaris Studio cc.

commit 2f7918deec140ef837070bb749a35ed19bfcd0ec
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 15 19:05:32 2021 +0000

    libast: backport tvsleep(3) from ksh 93v- (re: 2db9953a)
    
    src/lib/libast/tm/tvsleep.c:
    - Since the 'sleep' builtin was backported/fixed from ksh93v- and
      ksh2020, it makes sense to use the latest/last tvsleep(3), too.
      Looks like this added an interrupt check (errno == EINTR).
      Also, new fallback versions for systems without nanosleep(2).
    
    Documentation: src/lib/libast/man/tv.3 (unchanged)

commit a3f4ef7adf5b26dc9a2c0930d5c72b2d9ea994f0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 15 15:20:16 2021 +0000

    libast: fix detection of long double NaN/INF signatures
    
    src/lib/libast/features/float:
    - libast attempts to determine the binary representation of Inf and
      NaN to use as a fall-back code path for systems that do not
      support fpclassify(). The libast feature detection did not get
      consistent signatures between builds. To fix this, zero the
      memory before determining the signature.
    
    src/lib/libast/sfio/sfcvt.c:
    - The fall-back code path is broken because there are multiple
      representations for NaN - the important thing is to check the
      exponent and for a non-zero significand. The trailing bits can be
      random or left over from interim operations. For that reason, to
      ensure we never end up using the fall-back code path, explicitly
      generate a compile error if we end up there.
    
    Based on a patch from @citrus-it:
    https://github.com/citrus-it/ast/commit/8bf59a9a8fb9b0b00316f0c46c145b7a6c0dcc91
    but uses POSIX memset(3) instead of deprecated bzero(3).

commit 3aa01a95eed7226df259ecdac27925ebe332a444
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 15 14:50:55 2021 +0000

    getconf detection: cope with new compiler messages
    
    conf.sh checks for undefined symbols by parsing compiler output and
    looking for strings of capital letters and underscores. Modern gcc
    produces suggestions for replacement variables too, for example:
    
    error: '_SC_CLOCKRES_MIN' undeclared here (not in a function); did you mean _POSIX_CLOCKRES_MIN?
     _SC_CLOCKRES_MIN,
     ^~~~~~~~~~~~~~~~
     _POSIX_CLOCKRES_MIN
    
    This causes good variables to be excluded along with bad, causing differences
    between the builtin and system getconf commands.
    
    src/lib/libast/comp/conf.sh:
    - Only use lines containing 'error:' and ignore everything starting
      from 'did you mean:'. (Note this scripts sets the locale to C.)
    
    Patch from @citrus-it:
    https://github.com/citrus-it/ast/commit/061a4b1da12400cc1902dd7bdc7c3fc438bd9ff0

commit 649f4b047b3f72297f8521eb6dfb06421c53758c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 12 18:18:39 2021 +0000

    tests/builtins.sh: tweak for HP-UX

commit 4d5e21de805624c764422618f457d247bcc885cf
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 10 22:31:51 2021 +0000

    Fix for compiling with SHOPT_DYNAMIC disabled
    
    src/cmd/ksh93/bltins/typeset.c:
    - Correct faulty preprocessor directive logic causing a build
      failure if SHOPT_DYNAMIC is disabled.

commit e981f7c8b877ef9448298660578606e55c3c1f86
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 10 20:53:41 2021 +0100

    Regression test tweaks to avoid false fails on Solaris
    
    src/cmd/ksh93/tests/path.sh:
    - Re-export PATH after unsetting it.
    
    src/cmd/ksh93/tests/pty.sh:
    - Increase some delays.

commit 9b7c392a7cc75dd79c64b7873245fde8b0559e8e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 10 18:47:12 2021 +0000

    Disable fixargs() on Solaris (re: 159fb9ee, cefe087d)
    
    It doesn't work on Solaris either.

commit 159fb9ee27696655fb7ac998dec1b9fdd3cf7bcd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jan 10 06:34:49 2021 +0000

    main.c: Tweak fixargs() (re: cefe087d)
    
    src/cmd/ksh93/sh/main.c: fixargs():
    - Erase the entire length of the command arguments buffer (the
      space from argv[0] until environ[0]) so that remnants of longer
      command arguments aren't left in 'ps' output when executing a
      hashbang-ess script with a shorter command line.
    - Disable fixargs() on FreeBSD. It has never had any effect on that
      system; apparently it either requires another method to rewrite
      arguments for 'ps' output purposes (which?) or it's not possible.
    
    src/cmd/ksh93/tests/basic.sh:
    - Skip the test if running on FreeBSD.

commit e7202832fd386e2f928e013a20668ef863d8b8d3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 16:16:28 2021 +0000

    Revert "bin/package: don't test-compile using possibly broken dev shell"
    
    This reverts commit 600cb182.
    $cc may be a system compiler binary, it is not necessarily a
    src/cmd/INIT/cc.* wrapper script; so prefixing 'sh' is wrong.

commit 4d0b77d39867ab5058e6f108bac9238fbca01672
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 13:18:00 2021 +0000

    Revert "Fix SIGALRM core dump (Solaris patch 230-18229654)"
    
    This reverts commit 13e7b262. It caused the regression test for the
    'alarm' builtin, introduced in 18b3f4aa, to hang on FreeBSD.

commit 7d2bb8fdd9a96158437360a2de07cbcbe107fa79
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 01:58:23 2021 +0000

    libast: fix exec fail on interactive (Solaris patch 315-26773587)
    
    This upstreams a Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/315-26773587.patch
    which ostensibly fixes this bug filed in Oracle's closed system:
    26773587 interactive ksh exec failure in while read loop
    
    src/lib/libast/comp/spawnveg.c:
    - If posix_spawn(3) fails with an error other than EPERM, retry,
      but without attributes.

commit 4e67234ae8800f52af3a666ffbcce2f6466686ef
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 01:03:08 2021 +0000

    INIT: Add Solaris 11 compiler wrappers (Solaris patch 005-compiler)
    
    This upstreams a Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/005-compiler.patch

commit e03c010c4da26c351bc182568622cc88a926f3b6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 00:45:51 2021 +0000

    Fix for non-UTF-8 wide charsets (Solaris patch 050-CR7065478)
    
    This upstreams a Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/050-CR7065478.patch
    
    src/lib/libast/comp/setlocale.c:
    - Add wide_wctomb() wrapper for wctomb(3). It changes an invalid
      character (wctomb returns -1) to a single byte with length 1.
    - set_ctype(): Use wide_wctomb() instead of wctomb(3) as the
      conversion discipline function (ast.mb_conv). Effectively this
      means there are no invalid characters. Perhaps this is necessary
      for compatibility with ASCII. Sadly, no public info available.

commit 096f46eee5dc31025625eefa67ff61146db0aa21
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 00:28:11 2021 +0000

    Fix for memory mgmt in variable expansion (Solaris 105-CR7032068)
    
    This upstreams a Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/105-CR7032068.patch
    
    No other information is publicly available but this has been in
    production use on Solaris for a long time. It looks like this is
    intended to avoid an invalid free().

commit 37637ab6b47b3b4e1b39f18ff1a887e75efb9bed
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jan 9 00:06:13 2021 +0000

    libast: sfmode: tweak for 64-bit (Solaris 140-MAP_TYPE_64_Bits)
    
    This upstreams a Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/140-MAP_TYPE_64_Bits.patch
    
    src/lib/libast/sfio/sfmode.c: _sfmode():
    - Do not turn off mmap on 64-bit systems.

commit aa7713c2a98fbdddfa0c5f4810746c14a693a116
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 23:53:04 2021 +0000

    sh_init(): rm directoryless '.profile' login file path
    
    This applies a patch from Solaris:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/160-CR7175995.patch
    
    There is no public information on why it's needed, but it seems
    sensible on the face of it. Using a file called '.profile' in the
    PWD on login, without a directory path, is redundant at best, since
    "$HOME/.profile" (e_profile, see data/msg.c) is already used. And
    if the PWD is not $HOME at login time, it seems to me there are
    serious problems and the last thing you want is to read some
    random and probably dodgy '.profile' from the PWD.
    
    src/cmd/ksh93/sh/init.c: sh_init(): login_files[]:
    - Remove redundant/problematic ".profile" entry.

commit 5d7e00a109360adf28c5a292ab80e7f1a1f2c092
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 22:31:16 2021 +0000

    cd: validate $OLDPWD (Solaris patch 185-Bug17714341)
    
    This change was pulled in from:
    https://raw.githubusercontent.com/oracle/solaris-userland/master/components/ksh93/patches/185-Bug17714341.patch
    
    No public information about the reasons for this change is
    available, but it seems reasonable to trust that the Solaris people
    found a legitimate need for it.
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - When determining the old PWD before 'cd', do not trust shp->pwd
      but get and validate the current PWD using path_pwd().

commit 1de20d65a8a347f7f5078cf5c2f950a9486ca5e7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 22:15:48 2021 +0000

    Fix crash on long PS1 prompt (Solaris patch 195-17824699)
    
    Original report and info:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01677.html
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01679.html
    
    Patch pulled in from:
    https://raw.githubusercontent.com/oracle/solaris-userland/master/components/ksh93/patches/195-17824699.patch
    
    src/cmd/ksh93/edit/edit.c: ed_setup():
    - Prevent the ed_setup() function from writing past ep->e_prompt,
      which is set to the local char prompt[PRSIZE] variable in
      ed_emacsread().
    
    src/cmd/ksh93/include/edit.h:
    - Increase maximum prompt size, PRSIZE, to 256.

commit 86fc4c6d0ac3228ac0ff5ef369b7979d51bb57c5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 21:59:30 2021 +0000

    init: Refuse to import $KSH_VERSION from environment
    
    $KSH_VERSION is initialised as a nameref to ${.sh.version}, but it
    was not realiable as it could be overridden from the environment.
    Some scripts do version checking so this would allow influencing
    their execution.
    
    This fix is inspired by the following Solaris patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/200-17435456.patch
    but a different approach was needed, because the code has changed
    (see 960a1a99).
    
    src/cmd/ksh93/sh/init.c: env_init():
    - Refuse to import $KSH_VERSION. Using strncmp(3) might be crude,
      but it's effective and I can't figure out another way.

commit 13e7b262029c6f9add87c678189eb84da5dde5d7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 18:50:34 2021 +0000

    Fix SIGALRM core dump (Solaris patch 230-18229654)
    
    This should fix the following Solaris bug:
    18229654 ksh93 read not reentrant in alarm context dumps core
    with the patch taken from:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/230-18229654.patch
    
    Unfortunately the link to the details is inaccessible
    as lists.research.att.com is dead.

commit 99cbb7f794e71a63303353424cccfbc3c0b7d6c0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 18:15:11 2021 +0000

    Add reproducer from https://github.com/att/ast/issues/7 as regress
    
    ksh 93u+ has a subshell leak bug where a variable exported in
    function in a subshell is also visible in a different subshell.
    This is long fixed in 93u+m, but there wasn't a regression test for
    this particular bug yet, so this commit adds one.

commit 62cf88d0df8729b7dc971aa99e50e299bc56f13f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 17:33:04 2021 +0000

    Fix SIGHUP on termination (Solaris patch 260-22964338)
    
    This fixes the following bug filed with Solaris: "22964338 ksh93
    appears to send SIGHUP to unrelated processes on occasion". It is
    fixed by applying this patch by Lijo George from the Solaris repo:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/260-22964338.patch
    
    The ksh2020 upstream rejected this, but if it's in production use
    in Solaris, Solaris, it's probably good enough for 93u+m. If any
    breakage is left, it can be fixed later.
    https://github.com/att/ast/pull/1
    
    src/cmd/ksh93/include/jobs.h,
    src/cmd/ksh93/sh/fault.c,
    src/cmd/ksh93/sh/jobs.c:
    - Use a new job_hup() function instead of job_kill() to send SIGHUP
      to job processes on termination. The new function checks if a job
      is in fact still live before issuing SIGHUP to it.

commit ab98ec65e4ce0efb06de4b07dae7a359895c4ef9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 16:35:26 2021 +0000

    Replace safe FD fix with Solaris/ksh2020 version (re: 045fe6a1)
    
    This pulls a new version of sh_iosafefd() from:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/285-30771135.patch
    
    It was written by Kurtis Rader for ksh2020:
    https://github.com/att/ast/issues/198
    https://github.com/att/ast/pull/199
    It is presumably better than the Red Hat version and also comes
    with more regression test cases (although it still doesn't fix
    modernish BUG_CSUBSTDO, which remains in the TODO file).
    
    This commit does not go along with other peripheral changes from
    that patch, i.e. a different name and location of this function.
    
    src/cmd/ksh93/sh/io.c:
    - Replace sh_iosafefd() as above.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add and tweak tests from the patch.

commit 17ebfbf6a345e98881065f55c2cf6dce7a54dc36
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 14:06:34 2021 +0000

    Fix I/O redirection in -c script (Solaris patch 280-23332860)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/280-23332860.patch
    
    Info and reproducers:
    https://github.com/att/ast/issues/36
    
    In a -c script (like ksh -c 'commands'), the last command
    misredirects standard output if an EXIT or ERR trap is set.
    This appears to be a side effect of the optimisation that
    runs the last command without forking.
    
    This applies a patch by George Lijo that flags these specific
    cases and disables the optimisation.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/bltins/trap.c,
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/sh/main.c,
    src/cmd/ksh93/sh/xec.c:
    - Apply patch as above.
    
    src/cmd/ksh93/tests/io.sh:
    - Add the reproducers from the bug report as regression tests.

commit 7c47ab56fe1def28ac9977841fe70135df8c0d0c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 13:24:03 2021 +0000

    I/O: Properly handle EIO error (Solaris patch 275-20855453)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/275-20855453.patch
    https://github.com/att/ast/issues/30
    
    George Lijo wrote on 17 Feb 2017:
    > Here's a reproducible testcase on a Solaris11 host running
    > ksh93u+(2012-08-01).
    > $ cat a.sh
    > #!/bin/sh
    >
    > AAA="aaa"
    > echo 'insert character'
    > BBB=`echo ${AAA} | sed "s/aaa/bbb/g"`
    > logger "variable BBB = ${BBB}"
    >
    > $ cat t.sh
    > #!/bin/ksh
    >
    > sleep 10
    > /bin/ksh ./a.sh
    > exit 0
    >
    > $
    >
    > $ ./t.sh
    >
    > The expected result is:
    >
    > Apr 9 12:43:34 lab user: [ID 702911 user.notice] variable BBB = bbb
    >
    > because variable "BBB" is supposed to be set to 'bbb' in a.sh.
    >
    > But if the parent shell is terminated, the variable is wrongly set.
    >
    > user@xxxxx$ telnet lab
    > ...
    > $ ./t.sh & <--- Run t.sh in background.
    > [1] 2067
    > $ logout <--- CTRL + D to exit while t.sh is running.
    > Connection to lab closed by foreign host.
    >
    > Again, access the system and check the output:
    >
    > user@xxxxx$ telnet lab
    > ...
    > $ tail -f /var/adm/messages
    > :
    > Apr 9 12:47:47 lab user: [ID 702911 user.notice] variable BBB =
    > insert character <--- !!!
    > Apr 9 12:47:47 lab bbb
    > <--- !!!
    >
    > Thus the variable is wrongly set. (The previous echo string was
    > not cleared.)
    >
    > The issue happens because the EIO error during the logout is not
    > handled properly.
    
    src/cmd/ksh93/sh/io.c,
    src/lib/libast/include/error.h:
    - Amend the ERROR_PIPE() macro to check for EIO as well as EPIPE
      and ECONNRESET.

commit 3f38f8a28575a73a53a4cb5f36fd04be96b16170
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 12:55:05 2021 +0000

    emacs: Fix crash on inputting Asian chars (Solaris 240-22461939)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/240-22461939.patch
    
    Information:
    https://github.com/att/ast/issues/6
    
    George Lijo wrote on 14 Mar 2016:
    > I observed this issue in a Solaris 11 system on ksh2012-08-01
    > [...]. The issue can be reproduced if we add Asian locales to
    > ibus (such as Korean). In the ksh93 shell prompt, input some
    > Asian character. ksh promptly dumps core [...].
    >
    > The coredump happens at the following line no 320 in
    > src/cmd/ksh93/edit/emacs.c
    >       if(c!='\t' && c!=ESC && !isdigit(c)).
    >
    > I referred the vi.c code and added the digit(c) macro, i.e.
    > ((c&~STRIP)==0 && isdigit(c)) and replaced the isdigit(c) usage
    > with the "digit(c)" macro.

commit a3ccff6c754345226980cef20a44c054467a9232
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 12:32:56 2021 +0000

    cd: fix an invalid free() call (Solaris patch 211-21547336)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/211-21547336.patch
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - The functions path_pwd() and path_relative() in sh/path.c may
      return a pointer to e_dot[] (".") as a fallback if they fail to
      determine a path. This is a string in read-only memory
      (data/msg.c), so must not be freed. A pointer to that string may
      end up in sh.pwd (== shp->pwd), so b_cd() needs a check for that.

commit ad9ea0ba7d42b44a6430cfa8bb940db19f3e621b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 11:56:04 2021 +0000

    Fix off-by-one in nv_mktype() (Solaris patch 210-Bug15993811)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/210-Bug15993811.patch
    
    Unfortunately there is no publicly available documentation on why
    this change was needed. We just have to assume the Solaris people
    knew what they were doing. ksh2020 upstreamed this too (as well as
    all the other Solaris patches applied here).

commit ba4989d974f864fa1e4541e543ded1f65065ba11
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 11:50:57 2021 +0000

    libast/port/mnt.c: rm cachefs support (Solaris patch 135-CR6729252)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/135-CR6729252.patch

commit 744e68e7be7dab6c685e7be1504a7d0a41af07c8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 11:47:05 2021 +0000

    rm obsolete /usr/5bin paths (Solaris patch 130-CR7019368)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/130-CR7019368.patch

commit bae02c39b6e25aa42f98470f1fbba7d471cbb454
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 11:28:33 2021 +0000

    Fix for argv for setuid scripts (Solaris patch 115-CR6934836)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/115-CR6934836.patch
    
    Unfortunately there is no publicly available documentation on what
    this does or why it was needed. We just have to assume the Solaris
    people knew what they were doing. ksh2020 upstreamed this too (as
    well as all the other Solaris patches applied here).

commit 3f150672720e7e31cd5b7d50fc51d334a3e7b177
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 10:18:28 2021 +0000

    setdisc(): Return null pointer if no event (Solaris 110-CR7061011)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/110-CR7061011.patch
    
    Unfortunately there is no publicly available documentation on why
    this change was needed. We just have to assume the Solaris people
    knew what they were doing. ksh2020 upstreamed this too (as well as
    all the other Solaris patches applied here).
    
    src/cmd/ksh93/sh/nvdisc.c: setdisc():
    - If no <event> is known for <np>, return a null pointer instead
      of a pointer to the empty string.

commit 54c4e94205224b26a8e299950606bd68d5bca91f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 05:30:29 2021 +0000

    Fix for libast sfstrtof() (Solaris patch 075-multi_lang_arith)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/075-multi_lang_arith.patch
    
    It appears to be a fix for converting a string to a floating point
    value in certain locales. Unfortunately there is no publicly
    available documentation on what it does exactly. We just have to
    assume the Solaris people knew what they were doing.

commit c69bf543cfe509d862fb4839133125773735ce94
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 05:20:28 2021 +0000

    libcmd/wclib: Fix for wide char handling (Solaris 055-CR7026179)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/055-CR7026179.patch
    
    It's a fix for wide-character handling in the wc (word count)
    library.

commit 4c75920baadc5c9ed1a6db55064ee423bc90c47b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 05:09:55 2021 +0000

    libcmd/cmp: report read errors (Solaris patch 045-CR7025778)
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/045-CR7025778.patch
    
    src/lib/libcmd/cmp.c:
    - If a read error occurs, issue an error message.

commit e20db01247d769288d4d078585ce93735b90da4a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jan 8 04:59:54 2021 +0000

    Apply Solaris patch 065-CR7110983
    
    This change is pulled from here:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/065-CR7110983.patch
    
    Unfortunately there is no publicly available documentation on what
    it does. We just have to assume the Solaris people knew what they
    were doing. It looks like this fixes a memory leak in nv_putval().
    
    This patch was also applied by ksh2020:
    https://github.com/att/ast/commit/056386400a47ea2fb47633779f119193678b28fe

commit 222515bf08b8eba52b789e87684abb800e3582ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 7 21:18:33 2021 +0000

    Implement hash tables for virtual subshells (re: 102868f8, 9d428f8f)
    
    The forking fix implemented in 102868f8 and 9d428f8f, which stops
    the main shell's hash table from being cleared if PATH is changed
    in a subshell, can cause a significant performance penalty for
    certain scripts that do something like
    
        ( PATH=... command foo )
    
    in a subshell, especially if done repeatedly. This is because the
    hash table is cleared (and hence a subshell forks) even for
    temporary PATH assignments preceding commands.
    
    It also just plain doesn't work. For instance:
    
        $ hash -r; (ls) >/dev/null; hash
        ls=/bin/ls
    
    Simply running an external command in a subshell caches the path in
    the hash table that is shared with a main shell. To remedy this, we
    would have to fork the subshell before forking any external
    command. And that would be an unacceptable performance regression.
    
    Virtual subshells do not need to fork when changing PATH if they
    get their own hash tables. This commit adds these. The code for
    alias subshell trees (which was removed in ec888867 because they
    were broken and unneeded) provided the beginning of a template for
    their implementation.
    
    src/cmd/ksh93/sh/subshell.c:
    - struct subshell: Add strack pointer to subshell hash table.
    - Add sh_subtracktree(): return pointer to subshell hash table.
    - sh_subfuntree(): Refactor a bit for legibility.
    - sh_subshell(): Add code for cleaning up subshell hash table.
    
    src/cmd/ksh93/sh/name.c:
    - nv_putval(): Remove code to fork a subshell upon resetting PATH.
    - nv_rehash(): When in a subshell, invalidate a hash table entry
      for a subshell by creating the subshell scope if needed, then
      giving that entry the NV_NOALIAS attribute to invalidate it.
    
    src/cmd/ksh93/sh/path.c: path_search():
    - To set a tracked alias/hash table entry, use sh_subtracktree()
      and pass the HASH_NOSCOPE flag to nv_search() so that any new
      entries are added to the current subshell table (if any) and do
      not influence any parent scopes.
    
    src/cmd/ksh93/bltins/typeset.c: b_alias():
    - b_alias(): For hash table entries, use sh_subtracktree() instead
      of forking a subshell. Keep forking for normal aliases.
    - setall(): To set a tracked alias/hash table entry, pass the
      HASH_NOSCOPE flag to nv_search() so that any new entries are
      added to the current subshell table (if any) and do not influence
      any parent scopes.
    
    src/cmd/ksh93/sh/init.c: put_restricted():
    - Update code for clearing the hash table (when changing $PATH) to
      use sh_subtracktree().
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - When invalidating path name bindings to relative paths, use the
      subshell hash tree if applicable by calling sh_subtracktree().
    - rehash(): Call nv_rehash() instead of _nv_unset()ting the hash
      table entry; this is needed to work correctly in subshells.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add leak tests for various PATH-related operations in the main
      shell and in a virtual subshell.
    - Several pre-existing memory leaks are exposed by the new tests
      (I've confirmed these in 93u+). The tests are disabled and marked
      TODO for now, as these bugs have not yet been fixed.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Update.
    
    Resolves: https://github.com/ksh93/ksh/issues/66

commit a95d107ee5b78bfc358551d45c46eff323938e3f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jan 7 17:34:47 2021 +0000

    Fix segfault while updating ${.sh.match}
    
    The SHOPT_2DMATCH code block in sh_setmatch() modifies the 'ap'
    pointer, which is initialised as nv_arrayptr(SH_MATCHNOD). This
    caused a (rarely occurring) segfault in the following line near the
    end of the function:
            ap->nelem -= x;
    as this line assumed that 'ap' still had the initial value.
    
    src/cmd/ksh93/sh/init.c: sh_setmatch():
    - On init, save ap in ap_save and use ap_save instead of ap where
      it should be pointing to SH_MATCHNOD. This also allows removing
      two redundant nv_arrayptr(SH_MATCHNOD) calls, slightly increasing
      the efficiency of this function.

commit f2c84ee202025dfabf6a6f2b4cc3067a42777790
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jan 6 20:17:31 2021 +0000

    .gitignore fix for flat-hierarchy binaries (re: cda1976e)
    
    To ignore binaries generated by 'bin/package flat make', the
    entries all need an initial '/' or they will be ignored on deeper
    hierarchy levels as well.

commit c8513fcb7a0e57bf281bd3756069a6f039adc8f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 5 23:08:20 2021 +0000

    Arith: informative err msg on '.' radix point in non-'.' locales
    
    Scripts that use floating point shell arithmetic confusingly fail
    with 'arithmetic syntax error' when running in a locale that uses
    ',' as the radix point, because '.' is generally assumed by
    scripts. The error message is confounding as the problem is not a
    syntax error but a locale that is incompatible with the script.
    
    src/cmd/ksh93/sh/arith.c:
    - If the locale's radix point is not '.' but a '.' is found in its
      place, issue an informative error message that instructs setting
      LC_NUMERIC=C.
    
    Resolves: https://github.com/ksh93/ksh/issues/145

commit d1483150ab985ab368f16315a6dbe4f936ab7344
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jan 5 04:55:07 2021 +0000

    'cd': properly ignore $CDPATH if initial component is '.' or '..'
    
    @stephane-chazelas writes:
    > Per POSIX[*], cd should skip the $CDPATH processing if the first
    > component of the directory given to cd is . or ...
    >
    > Yet, with ksh93u+m 2021-01-03 at least, while that's OK with ..,
    > it's not with . with or without the posix option:
    >
    > $ CDPATH=/ ./ksh -o posix -c 'cd -P ./etc && pwd'
    > /etc
    > /etc
    >
    > It seems to be a regression introduced with ksh93u+ as I can't
    > reproduce it with ksh93u or any version prior to that. I can also
    > reproduce in u+, v- and the ksh2020 from the Ubuntu 20.04
    > package.
    
    src/cmd/ksh93/bltins/cd_pwd.c: b_cd():
    - Skip $CDPATH processing not only if the path is absolute, but
      also if the initial path component is '.' or '..' (in the latter
      case the $CDPATH processing was done but appeared to be a no-op).
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression test.
    
    [*] https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/cd.html
    
    Fixes: https://github.com/ksh93/ksh/issues/151

commit 3567220898c34a22cfd5c7e3dbd17d436422620a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jan 4 15:07:06 2021 +0000

    New semantic versioning scheme; disable vmalloc in release builds
    
    As of this commit, ksh 93u+m has a standard semantic version number
    <https://semver.org/>, beginning with 1.0.0-alpha. This is added to
    the version string in a way that should be compatible with scripts
    parsing ${.sh.version} or $(ksh --version). This addition does not
    replace the release date and does not affect $((.sh.version)).
    
    For non-release builds, the version string will be:
            FORK/VERSION+HASH YYYY-MM-DD
    e.g.:   93u+m/1.0.0-alpha+41ef7f76 2021-01-03
    
    For release builds, it will be:
            FORK/VERSION YYYY-MM-DD
    e.g.:   93u+m/1.0.0 2021-01-03
    
    It is now automatically decided by bin/package whether to build a
    release or development build. When building from a directory that
    is not a git repository, or if the current git branch name starts
    with a number (e.g. '1.0'), the release build is enabled; otherwise
    a development build is the default. This is arranged by adding -D
    flags to $CCFLAGS as described below. These flags are prepended to
    $CCFLAGS, so they can be overridden by adding your own -D or -U
    flags via the environment.
    
    In addition, AST vmalloc is disabled for release builds as of this
    commit, forcing the use of the OS's standard malloc(3). In 2021,
    this is generally more reliable, faster, and more economical with
    memory than AST vmalloc. Several memory leaks and crashing bugs are
    avoided, e.g.: <https://github.com/ksh93/ksh/issues/95>.
    
    For development builds, vmalloc stays enabled (along with its known
    bugs) because this allows the use of the vmstat builtin, making it
    much more efficient to test for memory leaks. For more info, see
    the regression test script: src/cmd/ksh93/tests/leaks.sh
    
    bin/package, src/cmd/INIT/package.sh:
    - Add flags for build type. In $CCFLAGS, define _AST_ksh_release if
      we're not on any git branch or on a git branch whose name starts
      with a number. Otherwise, define _AST_git_commit as the first 8
      characters of the current git commit hash.
    
    src/lib/libast/features/vmalloc:
    - If _AST_ksh_release is defined, disable vmalloc and force use of
      the operating system's malloc. Discussion:
      https://github.com/ksh93/ksh/issues/95
    
    src/cmd/ksh93/include/version.h:
    - Define new format for version string, adding a semantic version
      number as well as (for non-release builds) the git commit hash.
    
    src/cmd/ksh93/sh/init.c: e_version[]:
    - Add a 'v' to the ${.sh.version} feature string if ksh was
      compiled with vmalloc enabled. This allows scripts, such as
      regression tests, to detect this.
    
    src/cmd/ksh93/data/builtins.c: sh_optksh[]:
    - Add a copyright line crediting the contributors to ksh 93u+m.
    
    Resolves: https://github.com/ksh93/ksh/issues/95

commit 41ef7f76cf898fdcdb8994bb2993e659b7f95fd2
Author: Harald van Dijk <harald@gigawatt.nl>
Date:   Sun Jan 3 23:54:36 2021 +0000

    Invocation: fix infinite loop on 'ksh +s'
    
    When starting ksh +s, it gets stuck in an infinite loop continually
    trying to parse its own binary as a shell script and rejecting it:
    
    $ arch/linux.i386-64/bin/ksh +s
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    [...]
    $ echo 'echo "this is stdin"' | arch/linux.i386-64/bin/ksh +s
    arch/linux.i386-64/bin/ksh: arch/linux.i386-64/bin/ksh: cannot execute [Exec format error]
    (no loop, but still ksh trying to parse itself)
    
    src/cmd/ksh93/sh/init.c: sh_init():
    - When forcing on the '-s' option upon finding no command
      arguments, also update sh.offoptions, a.k.a. shp->offoptions.
      This avoids the inconsistent state causing this problem.
    
      In main.c, there is:
    
      if(sh_isoption(SH_SFLAG))
          fdin = 0;
      else
          (code to open $0 as a file)
    
      This was entering the else block because sh_isoption(SH_SFLAG)
      was returning 0, and $0 is set to the ksh binary as it is
      supposed to when no other script is provided. When I looked for
      why sh_isoption was returning 0, I found main.c's
    
      for(i=0; i<elementsof(shp->offoptions.v); i++)
          shp->options.v[i] &= ~shp->offoptions.v[i];
    
      Before this loop, shp->offoptions tracks which options were
      explicitly disabled by the user on the command line. The effect
      of this loop is to make "explicitly disabled" take precedence
      over "implicitly enabled". My patch removes the registration of
      the +s option.
    
    Fixes: https://github.com/ksh93/ksh/issues/150
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 737438a30f3ccee326a74950d6c2ca7c7123d2f7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Dec 20 16:47:11 2020 +0000

    tests/path.sh: fix spurious 'whence -a' test failures
    
    A recent change in Github's Ubuntu test runners exposed a problem
    in the way the all_paths test function replicates 'whence -a'
    functionality, causing spurious regression test failures.
    The problem occurs when e.g. /bin is a symlink to /usr/bin, but
    both are in $PATH. The all_paths function treats them as separate
    but 'whence -a' detects a duplicate and will not output /usr/bin/*.
    I have not succeeded in making all_paths match 'whence -a' exactly.
    
    src/cmd/ksh93/tests/path.sh: function all_paths:
    - Using the -ef test expression operator, remove entries from $PATH
      that point to the same directory as another entry in $PATH (e.g.
      when /bin is a symlink to /usr/bin but both are in $PATH).
      Avoiding such dupes works around the problem.

commit cda1976e4c5e599bfc413f4082c5a06e4bc8c28d
Author: Chase <nicetrynsa@protonmail.ch>
Date:   Sun Dec 20 01:31:26 2020 +0000

    Properly clean and ignore flat make binaries and libs
    
    bin/package, src/cmd/INIT/package.sh:
    - When running bin/package flat make clean, also clean the flat
      hierarchy binaries.
    
    .gitignore:
    - Ignore flat hierarchy binaries.

commit 77111310aa4728dbb203d74f9fdd7411ee64652a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Dec 4 03:49:23 2020 +0000

    name.c: rm duplicate #define Empty
    
    src/cmd/ksh93/sh/name.c:
    - The Empty macro (a constant pointer to the empty string) is already
      defined in include/defs.h, so does not need to be repeated here.

commit 67880e35cf0929df1105e278387ee80c7ebfc6d4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Nov 26 13:58:08 2020 +0000

    tests/builtins.sh: fix false fail when TZ is GMT (re: eaaa0de7)
    
    GMT and UTC have identical time but are used in different contexts.
    When the system time zone is set to GMT (e.g. in the UK at winter
    time), the 'printf %T' test could fail as it correctly uses GMT
    whereas the test expects UTC.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Fix possible false negative in 'printf %T\\n now' test by
      replacing GMT with UTC in both 'date' output and 'printf %T'
      output, instead of only the former.

commit 88a6baa1a77e24d0eefabb1f339f9a6001d8f857
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Thu Nov 26 08:50:30 2020 -0500

    Fix floating point numerics having precision of 0 with assignments (#149)
    
    Issuing typeset floating point numerics having a precision of 0
    failed as the precision/size was being overwritten with the string
    length of the value, e.g. 'typeset -F0 x=5.67' would result in
    'typeset -F 4 x=5.6700' as len('5.67') is 4.
    
    src/cmd/ksh93/include/nval.h:
    
    - Created a symbolic name of NV_FLTSIZEZERO to respresent a float
      having a precision/size of 0. NV_FLTSIZEZERO needs to be a
      negative value.
    
    src/cmd/ksh93/bltins/typeset.c:
    
    - In b_typeset(), added code to set tdata.argnum to NV_FLTSIZEZERO
      for E, F, X options.
    
    - In setall(), adjusted code to allow for tp->argnum to be negative.
    
    src/cmd/ksh93/sh/name.c: nv_newattr():
    
    - Adjusted option value only change code to handle NV_FLTSIZEZERO as
      well as changed to directly setting np->nvsize instead of using
      nv_setsize(np,size) as nv_setsize might contain conflicting and/or
      redundant code.
    
    - Added missing conditional check of '!(newatts&NV_INTEGER)' to
      constrain the size==0 code block to justified strings as
      NV_LJUST, NV_RJUST, or NV_ZFILL are only valid for strings if
      NV_INTEGER is not set. This code block was mistakenly setting
      the precision/size value to the length of the value of an
      assignment for floats whereas it should only be performing
      auto assignment length for justified strings.

commit 95fe07d86944806f90361e7af76092b91ecea8c3
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Thu Nov 26 08:30:24 2020 -0500

    Improved 'typeset -xu'/'typeset -xl' fix (re: fdb9781e) (#147)
    
    'typeset -xu' and 'typeset -xl' would export the variable but fail
    to change case in the value as the check between old and new
    attributes did not provide the necesssary insight for lower or
    upper case transcoding due to the lower or upper case attribute
    being set within typeset.c prior to calling name.c nv_newattr
    function.
    
    Previous rhbz#1188377 patch added a conditional check for size==-1
    which in effect caused the nv_newattr export code block return
    optimization to never be executed as one cannot set any attributes
    using the readonly builtin. By altering the size==-1 check to !trans
    the export only optimization can run.
    
    Also, the rhbz#1188377 patch altered new_attr function by setting
    the new size to oldsize if run by the readonly builtin. The result
    of setting size==oldsize allowed the succeeding if statement to
    run more frequently and if size was a non-zero value resulted in
    nv_setsize resetting the value to what it already was. Investigation
    yielded that size was always 0 coming from the readonly builtin.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Remove the setting of tdata.argnum to -1 as it is not needed due to
      existing name.c nv_newattr() logic.
    
    src/cmd/ksh93/sh/name.c: nv_newattr():
    - Corrected the export only check optimization by using !trans instead
      of using size==-1.
    - Removed previous condition check to set size=oldsize if coming from
      the readonly builtin. nv_newattr already had existing logic to
      prevent changing the size via nv_setsize as size is always 0 when
      coming from readonly builtin.

commit 02e4f2da9e0a0bd39e0ff5d460f7650e740f19bd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Oct 22 22:30:12 2020 +0200

    fix possible false negatives in whence -a/-v regress tests
    
    src/cmd/ksh93/tests/builtins.sh:
    - Remove redundant extra bincat=$(whence -p cat).
    - Move whence -v/-a tests to path.sh.
    - Fix 'whence -q' test so errors are counted outside of a subshell.
    
    src/cmd/ksh93/tests/path.sh:
    - Add all_paths function that is basically a reimplementation of
      'whence -a -p' in shell. Useful for testing 'whence'.
    - Move whence -v/-a tests to here, changing them to use all_paths
      where needed. Also fix the 'whence -a' function autoloading
      regression test to do the same. This fixes the tests for systems
      (such as Slackware) where commands such as 'ls' or 'chmod' have
      more than one path in even the default $PATH.

commit 5ea811413e7ac6692cddd25ed6e61f17b066bf38
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Oct 7 07:15:05 2020 +0200

    tests/path.sh: tweak to avoid false failure on ancient Mac OS X

commit 213fb932c073caa0849a2fac1aa705319cdb9fce
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Oct 7 03:36:54 2020 +0200

    Remove SH_NOLOG vestiges
    
    The '-o nolog' option (which prevented function definitions from being
    recorded in the history file) was removed a long time ago, leaving
    only a stub for backwards compatibility to stop 'set' from erroring
    out if the option is set. But some other vestiges remained.
    
    src/cmd/ksh93/sh/path.c,
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - Remove a few pointless 'sh_onstate(SH_NOLOG)' statements. As of
      93u+ or earlier, this is never checked for anywhere.
    
    src/cmd/ksh93/sh.1:
    - They forgot to remove the 'nolog' option documentation here.
      Specify that it's obsolete and has no effect.
    
    src/cmd/ksh93/data/builtins.c: sh_set[]:
    - Be more concise.

commit dd9bc22928c71376d14e686770505ec119f2b46f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Oct 6 23:13:41 2020 +0200

    Mitigate PWD race condition in non-forking subshells
    
    Virtual/non-forking subshells that change the present working
    directory (PWD) with 'cd' suffer from a serious race condition. The
    PWD is changed within the same process. This means it may not be
    possible to change back to the original PWD when exiting the
    subshell, as some other process may destroy the PWD or modify its
    permissions in the meantime. ksh did not handle this error
    condition at all, so, after exiting a subshell that invoked 'cd',
    it could silently end up running the script's following command(s)
    in the wrong directory. Which might be 'rm -rf *'. So, ouch.
    
    The proper and obvious fix is never to allow a virtual subshell to
    change the PWD, as it can never be guaranteed you can return to a
    previous directory. If the PWD is changed in a child process, there
    is no need to restore it in the parent process, and this whole
    problem is avoided. So subshells really should always fork on
    encountering a 'cd' command.
    
    But forking is slow. It is not uncommon for scripts to 'cd' in a
    subshell that is run repeatedly in a loop.
    
    There is also the issue of custom builtins that can be added to ksh
    via shared libraries. In the standard shell language, 'cd' is the
    only command that changes the PWD, so we could just make that
    command fork the subshell it is run from. But there's no telling
    what a custom builtin might do.
    
    So this commit implements a compromise that will not affect
    performance unless there is the pathological condition of a PWD
    that has been rendered inaccessible in some way:
    
    1. When entering a virtual subshell, if the parent shell's PWD
    proves inaccessible upon saving it, the subshell will now fork into
    a separate process, avoiding the unrestorable PWD problem.
    
    2. If some attack renders the parent shell's PWD unrestorable
    *after* ksh enters a virtual subshell, ksh will now error out when
    exiting it. There is nothing else left to do then. Continuing would
    mean running arbitrary commands in the wrong PWD.
    
    src/cmd/ksh93/sh/subshell.c:
    
    - Put all the code/variables only needed for fchdir() behind '#if
      _lib_fchdir'. This makes it clearer what's what.
      (I don't know if there is still any system out there without
      fchdir(3); I haven't found any. The chdir(3) fallback version may
      be removed later as there is no way to make it remotely secure.)
    
    - Fix the attempt to use the O_PATH mode for open(2) as a fallback
      for nonexistent O_SEARCH on Linux. Define _GNU_SOURCE on Linux,
      or <fcntl.h> (which is included indirectly) won't define O_PATH.
    
    - Fix use of O_SEARCH. The code was simply wrong, repeating an
      open(".",O_RDONLY) instead. Since a nonexistent O_SEARCH is now
      redefined as either O_PATH or O_RDONLY, we can simply
      open(".",O_SEARCH) and be done with it.
    
    - Fix fatal error handling. Introduce fatal error condition for
      failure to fchdir(3) back to the parent's PWD; rename 'duped' to
      'fatalerror' and use it for error numbers; save and restore errno
      on fatal error so the message will report the cause. (We must
      call errormsg() near the end of sh_subshell() to avoid crashes.)
    
    - If open(".",O_SEARCH) was not able get a file descriptor to our
      PWD on entry, then call sh_subfork() immediately before running
      the subshell commands. (Forking earlier causes a crash.)
    
    - When restoring the PWD, if fchdir(3) fails, do *not* fall back to
      chdir(3). We already know the PWD is inaccessible, so if chdir(3)
      "succeeds" then, it's very likely to be a substitute injected by
      an attacker.
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    
    - If we don't have fchdir(3), then sh_subshell() must fall back to
      chdir(2) to restore the PWD. That is highly vulnerable, as a
      well-timed rename would allow an attacker to usurp the PWD. We
      can't do anything about that if some custom builtin changes the
      PWD, but we can at least make 'cd' always fork a subshell, which
      slows down ksh but removes the need for the parent shell ever to
      restore the PWD. (There is certainly no popular system where this
      is relevant and there might not be any such current system.)
    
    This commit adds no regression test because a portable regression
    test is not really doable. Different kernels, external /bin/pwd
    utilities, etc. all have quite different behaviour under the
    pathological condition of an inaccessible PWD, so both the
    before-fix and the after-fix behaviour differs. See link below.
    
    Resolves: https://github.com/ksh93/ksh/issues/141
    Thanks to Stéphane Chazelas for the bug report.

commit 4ae962aba62eb1a92044fa5086372549cefdd758
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Oct 6 10:00:52 2020 +0200

    Fix ksh93/features/options tests
    
    src/cmd/ksh93/features/options:
    - Fix unportable SHELLMAGIC test:
      1. /bin/echo does not work on all systems, but /usr/bin/env is a
         de-facto standard path (even NixOS gave in and has it).
      2. Do not try to execute a temp file in /tmp as it might be
         mounted noexec. Use our own $EXECROOT instead.
    - rm unnecessary 'exec 9<&-' (it was never opened globally).
    - Remove broken SHOPT_UCB test. It had a syntax error, but the
      result is not used anywhere.

commit efcc66a3f51755aeec62a4c135ede6734d2413a1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Oct 5 18:39:49 2020 +0200

    fix typos: descritor -> descriptor

commit 6697edba1c302c4bdd0796945158decc825b5bd5
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Sun Oct 4 05:18:34 2020 -0400

    Enforce integer base limits of 2 to 64 (#139)
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - For integer bases change argnum check to default values that
      are < 2 or > 64 to 10 instead of allowing invalid base values
      that ksh cannot process.
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - Remove argnum check for integer base of 1 as base cannot be 1.
    - Relocate strlen(name) to inside of conditional check for
      np->nvfun as this code does not need to run all.
    - Remove no-op oldname code
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add typeset -i base bounds checks to default base 10

commit cefec34774d978ee3dd6da6bce08fd5dd3979981
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Oct 3 00:32:32 2020 +0200

    regress test tweaks
    
    src/cmd/ksh93/tests/builtins.sh:
    - Fix a test so it doesn't fail if 'whence -a' finds multiple paths
      for 'ls'.
    
    src/cmd/ksh93/tests/coprocess.sh
    - Update known failure comment with current information.

commit 79d19458130ba05998148b522bb402767752f152
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Oct 2 23:35:31 2020 +0200

    Streamline some shell state flaggery
    
    src/cmd/ksh93/sh/args.c: sh_argprocsub():
    - Save and restore state more efficiently by just saving and
      restoring all the state bits in one go using the
      sh_{get,set}state() macros, which are defined in defs.h as:
        #define     sh_getstate()   (sh.st.states)
        #define     sh_setstate(x)  (sh.st.states = (x))
      (and there is yet more evidence that it doesn't matter whether
      we use a 'shp->' pointer or 'sh.' direct access).
    
    src/cmd/ksh93/sh/main.c: exfile():
    - Remove a no-op 'sh_offstate(SH_INTERACTIVE);'. It was in the
      'else' clause of 'if(sh_isstate(SH_INTERACTIVE))' so if we get
      there, it is known that this flag is already off.
    - To properly disable job control, we also have to save and restore
      the job.jobcontrol variable.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Remove some no-op flaggery from this highly performance-sensitive
      point in the code. Given the immediately preceding:
            volatile int    was_errexit = sh_isstate(SH_ERREXIT);
            volatile int    was_monitor = sh_isstate(SH_MONITOR);
      the following:
            sh_offstate(SH_ERREXIT);
            if(was_errexit&flags)
                    sh_onstate(SH_ERREXIT);
      can be reformulated as:
            if(!(flags & sh_state(SH_ERREXIT)))
                    sh_offstate(SH_ERREXIT);
      (IOW, if it was already on, don't turn it off and then on again)
      ...and the following:
            if(was_monitor&flags)
                    sh_onstate(SH_MONITOR);
      can be removed; it's a no-op because it wasn't preceded by an
      sh_offstate() and if 'was_monitor' is true, this option is known
      to be on. (I considered they may have forgotten an 'sh_offstate'
      there like in the SH_ERREXIT case, but adding that causes several
      regressions in a shtests run.)
    
    src/cmd/ksh93/include/defs.h:
    - Remove comment that is evidently long outdated; there is not (or
      no longer) a Shscoped_t type defined anywhere, nor are these
      struct fields replicated in any other type definition.
    - Add comment to clarify what the 'states' int in 'struct
      sh_scoped' is for.

commit 48ba6964ada0d8041c20f1d5173ede4cffd8b1db
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Oct 2 08:07:28 2020 +0200

    Turn off SH_INTERACTIVE state flag in subshells
    
    By definition, subshells are never interactive, so they should
    disable behaviour associated with interactive shells even if the
    main shell is interactive.
    
    Most visibly, running a background job from a subshell like
            ( some_command & )
    now no longer prints a job ID that you cannot use in the main shell.
    This behaviour change matches pdksh/mksh, bash, zsh, dash, et al.
    
    Prior discussion:
    https://www.mail-archive.com/austin-group-l@opengroup.org/msg06456.html
    (plus the preceding thread)
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Before running the command(s) in the subshell using sh_exec(),
      turn off the SH_INTERACTIVE shell state flag. (No need to add
      code to restore it as this function already saves and restores
      the entire shell state.)
    
    src/cmd/ksh93/bltins/misc.c: b_bg():
    - If there is no job control when using 'bg', 'fg' or 'disown',
      always print the "no job control" error message and not only if
      the shell is in the interactive state. This is also what
      pdksh/mksh, bash and zsh do.

commit 7424844df5496d90a6bad94a1ff5570a185ae1c1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Oct 1 16:49:10 2020 +0200

    Remove SH_SUBSHELL option vestiges
    
    Mildly interesting: apparently there was once an idea to implement
    shared-state command substitutions as a shell option like 'set -o
    subshare'. They were implemented using a new ${ syntax; } instead,
    but there is a vestigial SH_SUBSHARE option ID in shell.h plus a
    check for it in subshell.c that would cause backtick-style command
    substitutions (comsub==1) to share their state. That option isn't
    defined in data/options.c so it's impossible for a user to set it.
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/sh/subshell.c:
    - Remove SH_SUBSHELL option vestiges.
    
    src/cmd/ksh93/include/defs.h:
    - Correct my comment on 'comsub' flag; I was wrong about what the
      values meant. 2 is for a shared-state comsub. (re: 4ce486a7)

commit d89ef0fafafd9667d38a91ce6d282a661d762bde
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Oct 1 06:13:00 2020 +0200

    Fix $LINENO corruption when autoloading functions
    
    Autoloading a function caused the calling script's $LINENO to be
    off by the number of lines in the function definition file. In
    addition, while running autoloaded functions, errors/warnings were
    reported with wrong line numbers.
    
    src/cmd/ksh93/sh/path.c:
    - Save $LINENO (shp->inlineno) before autoloading a function, reset
      it to 1 so that the correct line number offset is remembered for
      the function definition, and restore it after.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression test for $LINENO, directly and in error messages,
      within and outside a non-autoloaded and an autoloaded function.
    
    Fixes: https://github.com/ksh93/ksh/issues/116

commit be22f3759e4909ce29ac86bd3093c1393e8146df
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Oct 1 04:16:33 2020 +0200

    sfio/sfpkrd.c: re-allow compiling on ancient systems (re: 9ba2c2e0)

commit 76d71889e287cb57d4243f3857af3de8ab7612ac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 30 20:09:13 2020 +0200

    don't run posix mode regress tests on ksh without -o posix

commit c049eec854d506ad6110eb50c769b10224c60075
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 30 16:13:34 2020 +0200

    Fix pipefail with (errexit or ERR trap) regression
    
    ksh 93u+ introduced a regression in the combination of the
    'set -o pipefail' and 'set -e'/'set -o errexit' options:
    
    $ ksh93 -o errexit -o pipefail -c \
            '(exit 3) | true; echo "still here despite $? status"'
    still here despite 3 status
    
    The bug is in how the the huge sh_exec() function in xec.c handles
    the 'echeck' flag. Near the end of sh_exec(), this flag triggers a
    sh_chktrap() call to check whether to trigger any traps, including
    the ERR trap -- and that same function also handles the errexit
    option, which is basically the same as 'trap "exit" ERR'.
    
    We can learn more easily how sh_exec() works by inserting debug
    warnings in all its 'switch(type&COMMSK)' cases, like:
    
        case TCOM:
            errormsg(SH_DICT,ERROR_warn(0),"[DEBUG] TCOM");
    
    ... and same for all the others. With that done, the output
    of a very simple dummy pipeline looks as follows:
    
    $ arch/*/bin/ksh -c 'true | true | true'
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TFIL
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TFORK
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TFORK
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TSETIO
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TCOM
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TCOM
    arch/darwin.i386-64/bin/ksh: warning: [DEBUG] TCOM
    
    So, it looks like sh_exec() handles this pipeline as follows:
    
            TFIL
               |_____TFORK
               |         |_____TCOM
               |_____TFORK
               |         |_____TCOM
               |_____TSETIO
                         |_____TCOM
    
    Each time a pipeline like command1 | command2 | ... is executed,
    sh_exec() is invoked with type TFIL; this then recursively invokes
    sh_exec() to handle the individual elements. The last element of
    the pipe triggers a sh_exec() run with type TSETIO; since it is run
    in the current shell environment, it is effectively treated as a
    command with an input redirection. All the previous elements are of
    type TFORK instead, because they are executed asynchronously in
    separate, forked subshell processes. Finally, the TFORK or TSETIO
    code then recursively calls sh_exec() again with type TCOM to
    actually execute the commands.
    
    When reading the code, we find that the 'echeck' flag is set as
    part of the TSETIO code. This makes sense of why only an error in
    the last element of the pipe triggers the errexit/ERR trap action.
    So that's the bug: the flag is set in the wrong place.
    
    This can be fixed by setting that flag in the TFIL handling code
    instead, as this is what calls everything else and collects all the
    exit statuses. So the sh_chktrap() call is now executed after
    handling the entire pipeline, at the TFIL recursion level.
    
    This also allows getting rid of the special-casing in the buggy
    TSETIO version. The SH_ERREXIT state is restored at the end of each
    sh_exec() call, so since we're now doing this at a lower recursion
    level, it will already have been restored.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Fix the bug as per the above.
    
    src/cmd/ksh93/tests/options.sh:
    - Add tests for errexit and ERR trap combined with pipefail.
    
    src/cmd/ksh93/tests/basic.sh:
    - Tweak a couple of tests that reported a trap wasn't triggered
      even if it was actually triggered more than once.
    
    Fixes: https://github.com/ksh93/ksh/issues/121
    Thanks to Stéphane Chazelas for the bug report.

commit fdb9781ebb5bfa593a959c056204b067451e2fd4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 30 00:34:02 2020 +0200

    Fix 'typeset -xu', 'typeset -xl' (rhbz#1188377)
    
    'typeset -xu' and 'typeset -xl' would export the variable but fail
    to change case in the value under certain conditions.
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-xufix.patch
    
    This applies the patch essentially without change and adds a
    regression test based on the reproducer provided in the RH bug.
    
    Unfortunately there is no description of how the patch works and
    it's a little obscure to me. As far as I can figure out, the cause
    of the problem was that nv_newattr() erroneously processed a
    nonexistent size option-argument such as what can be given to
    options like typeset -F, e.g. typeset -F3 for 3 digits after the
    dot. A nonexistent size argument is represented by the value of -1.

commit ba0b1bba2b38576a924c20f9c1b1ef653a708501
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 29 20:37:23 2020 +0200

    tests/basic.sh: fix for 'ps' that truncates args (re: cefe087d)

commit 7afb30e15c8ea61e9dde2326551807791f3a7cea
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 29 19:34:59 2020 +0200

    libast: Work around gcc optimiser bug for strdup() (rhbz#1221766)
    
    Red Hat erratum: https://bugzilla.redhat.com/1221766
    "Previously, the gcc utility optimized out a non-NULL test in the
    ksh implementation of the strdup() function. This caused an
    unexpected termination when ksh was executed in a clean chroot
    environment. With this update, ksh compilation parameters have been
    updated to prevent optimizing out a non-NULL test, and ksh no
    longer crashes in clean chroot environments."
    
    The optimizer bug occurs in that function's single-line body:
    
      return (s && (t = oldof(0, char, n = strlen(s) + 1, 0))) ? (char*)memcpy(t, s, n) : (char*)0;
    
    So it must be the test for non-NULL 's' that fails. And 's' is
    declared in the function definition, as follows:
    
      extern char*
      strdup(register const char* s)
    
    So that makes me wonder if we can work around the bug by simply
    removing the 'const' (and the 'register' while we're at it).
    However, I have no easy way to verify that at the moment. The Red
    Hat patch instead tells gcc to disable optimization for this
    function using a #pragma directive.
    
    I have no idea if that gcc optimiser bug has been fixed in the
    meantime, but experience from c258a04f has shown that we cannot
    trust that it has been fixed (that other optimizer bug is at least
    a decade old and still not fixed). So, in it goes, until someone
    shows evidence that we no longer need it.
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-badgcc.patch
    
    src/lib/libast/string/strdup.c:
    - Tell GCC to disable all optimisations for strdup().

commit 1477b5fff7b85433cdf9a580a529a8759547ccee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 29 05:21:50 2020 +0200

    Fix possible out-of-bounds write in xec.c:iousepipe (rhbz#1506344)
    
    Discussion/analysis: https://bugzilla.redhat.com/1506344
    
    iousepipe() might write out of bounds, causing a crash, if
    subpipe[2] is set to a value >= sh.gd.lim.open_max.
    
    src/cmd/ksh93/sh/xec.c: iousepipe():
    - Validate the FD using sh_iovalidfd() before the write.

commit 90941717dac45a2f1ae55864a9fd5f4c3f13910e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 29 05:18:08 2020 +0200

    tests/basic.sh: fix test for BSD 'ps' (re: cefe087d)

commit 30aee65113e47832060ac1ea6ee72fd47ef4897a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 29 02:28:08 2020 +0200

    Fix signal/trap behaviour in ksh functions (rhbz#1454804)
    
    Prior discussion:
    https://bugzilla.redhat.com/1454804
    
    On 2017-05-23 13:33:25 UTC, Paulo Andrade wrote:
    > In previous ksh versions, when exiting the scope of a ksh
    > (not posix) function, it would restore the trap table of
    > the "calling context" and if the reason the function exited
    > was a signal, it would call sh_fault() passing as argument
    > the signal value.
    >   Newer ksh checks it, but calls kill(getpid(), signal_number)
    > after restoring the trap table, but only calls for SIGINT and
    > SIGQUIT.
    [...]
    >   The old way appears to have been more appropriate, but there
    > must be a reason to only pass SIGINT and SIGQUIT as it is an
    > explicit patch.
    
    The last paragraph is where I differ. This would not be the first
    example of outright breakage that appeared to be added deliberately
    and that 93u+m has fixed or removed, see e.g. 8477d2ce ('printf %H'
    had code that deleted all multibyte characters), cefe087d, or
    781f0a39. Sometimes it seems the developers added a little
    experiment and then forgot all about it, so it became a misfeature.
    
    In this instance, the correct pre-2012 ksh behaviour is still
    explicitly documented in (k)sh.1: "A trap condition that is not
    caught or ignored by the function causes the function to terminate
    and the condition to be passed on to the caller". Meaning, if there
    is no function-local trap, the signal defaults to the parent scope.
    There is no language that limits this to SIGINT and SIGQUIT only.
    It also makes no sense at all to do so -- signals such as SIGPIPE,
    SIGTERM, or SIGSEGV need to be caught by default and to do
    otherwise results in misbehaviour by default.
    
    src/cmd/ksh93/sh/xec.c: sh_funscope():
    - When resending a signal after restoring the global traps state,
      remove the spurious check that limits this to SIGINT and SIGQUIT.
    - Replace it with a check for nsig!=0, as that means there were
      parent trap states to restore. Otherwise 'kill' may be called
      with an invalid signal argument, causing a crash on macOS.
    
    src/cmd/ksh93/tests/signal.sh:
    - Update a test to check that a function-local SIGTERM trap is
      triggered correctly when signalled from another process.
    - Complete the tests for 3aee10d7; this bug needed fixing before
      we could test that previous fix in a ksh function scope.
    - Add a test for triggering global traps from ksh functions,
      testing multiple POSIX-standard signals.

commit 3aee10d781fd55970642cee9701e84fe67e50f88
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 28 22:43:04 2020 +0200

    Fix off-by-one error, possible crash (re: 6193c6a3)
    
    The ksh-20120801-trapcom.patch patch contains an off-by-one error,
    which was also imported into 93u+m. When saving signals:
    
    https://github.com/ksh93/ksh/blob/ceb77b136fb1f2cb0adf1e197c1b60d5b7c91d96/src/cmd/ksh93/sh/subshell.c#L572-L592
    572     if((nsig=shp->st.trapmax)>0 || shp->st.trapcom[0])
    573     {
    574             ++nsig;
    575             savsig = malloc(nsig * sizeof(char*));
    576             /*
    577              * the data is, usually, modified in code like:
    578              *      tmp = buf[i]; buf[i] = strdup(tmp); free(tmp);
    579              * so shp->st.trapcom needs a "deep copy" to properly save/restore pointers.
    580              */
    581             for (isig = 0; isig < nsig; ++isig)
    582             {
    583                     if(shp->st.trapcom[isig] == Empty)
    584                             savsig[isig] = Empty;
    585                     else if(shp->st.trapcom[isig])
    586                             savsig[isig] = strdup(shp->st.trapcom[isig]);
    587                     else
    588                             savsig[isig] = NULL;
    589             }
    
    On line 574, the number of signals 'nsig' is increased by one. That
    increase is permanent, so the 'for' loop on line 581 tries to save
    one signal state too many.
    
    The increase was a holdout from the ksh93 code from before the
    patch. After the patch, it is not required; it is fine to malloc as
    many records as there are trapcom elements to save. So it should
    simply be removed. xec.c has the same code to save trap states for
    ksh functions, and the same applies.
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Don't increase nsig.
    
    src/cmd/ksh93/sh/xec.c: sh_funscope():
    - Same.
    
    src/cmd/ksh93/tests/signal.sh:
    - Add test.

commit f527706f6cc954c0c3bea4c9cb72d1cf44a91603
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 28 22:41:48 2020 +0200

    tests/functions.sh: speed up a test

commit ceb77b136fb1f2cb0adf1e197c1b60d5b7c91d96
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 28 18:01:39 2020 +0200

    fix ksh login crash on disk full (rhbz#1212992)
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20140801-diskfull.patch
    
    Prior discussion:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg01037.html
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg01038.html
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg01042.html
    https://bugzilla.redhat.com/1212992
    
    On Fri, 08 May 2015 14:37:45 -0700, Paulo Andrade wrote:
    > I have a user with a ksh crashing problem, and that has
    > some "Write error: No space left on device" messages
    > in /var/log/messages.
    >
    > After some debugging, and creating a chroot on a file
    > disk image, and a test user, and slowly filling the
    > "on file" filesystem, e.g.
    >
    > dd if=/dev/zero of=/mnt/tmp/zerosN bs=1M count=1024
    > dd if=/dev/zero of=/mnt/tmp/zerosN bs=1K count=2
    >
    > until leaving just around 12K, I managed to reproduce the
    > problem, and be able to debug it with valgrind and vgdb;
    > debugging on these conditions is tricky, as cannot tell
    > valgrind to spawn gdb, because then gdb itself would fail
    > to start.
    >
    > So, after following the code enough, I learned that at places
    > it handles SH_JMPEXIT, there was almost non existing
    > handling of SH_JMPERREXIT.
    >
    > ksh would evently cause a crash due to the struct
    > subshell allocated on stack, in sh/subshell.c:sh_subshell
    > kept set to the global subshell_data, after it siglongjmp
    > back the stack due to, not fully handling the out of disk
    > space errors. It would print a few messages, everytime
    > a pipe was created, e.g.:
    >
    > /etc/profile: line 28: write to 3 failed [No space left on device]
    >
    > until eventually crashing due to corrupted memory; e.g. the
    > references to stack data from sh_subsell in the global
    > subshell_data. One strange thing to me in coredump analysis
    > was that subshell_data prev field was pointing to itself when
    > it eventually crashed, what later was understood and expected...
    >
    > The attached patch handles SH_JMPERREXIT in the code
    > paths SH_JMPEXIT is handled, and the failed login, on
    > full disk, ends in a pause() call:
    >
    > ---terminal 1---
    > $ valgrind -q --leak-check=full --free-fill=0x5a --vgdb=full
    > --vgdb-error=0 /bin/ksh -l
    > ==17730== (action at startup) vgdb me ...
    > ==17730==
    > ==17730== TO DEBUG THIS PROCESS USING GDB: start GDB like this
    > ==17730==   /path/to/gdb /bin/ksh
    > ==17730== and then give GDB the following command
    > ==17730==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=17730
    > ==17730== --pid is optional if only one valgrind process is running
    > ==17730==
    > ==17730== Syscall param mount(type) points to unaddressable byte(s)
    > ==17730==    at 0x563377A: mount (in /usr/lib64/libc-2.17.so)
    > ==17730==    by 0x493E58: fs3d_mount (fs3d.c:115)
    > ==17730==    by 0x493C8B: fs3d (fs3d.c:57)
    > ==17730==    by 0x423E41: sh_init (init.c:1302)
    > ==17730==    by 0x405CD3: sh_main (main.c:141)
    > ==17730==    by 0x405B84: main (pmain.c:45)
    > ==17730==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
    > ==17730==
    > ==17730== (action on error) vgdb me ...
    > ==17730== Continuing ...
    > /etc/profile: line 28: write to 3 failed [No space left on device]
    > ---8<---
    >
    > ---terminal 2---
    > (gdb) c
    > Continuing.
    > ^C
    > Program received signal SIGTRAP, Trace/breakpoint trap.
    > 0x00000000055fa470 in __pause_nocancel () from /lib64/libc.so.6
    > (gdb) bt
    > #0  0x00000000055fa470 in __pause_nocancel () from /lib64/libc.so.6
    > #1  0x000000000041e73d in sh_done (ptr=0x793360 <sh>, sig=255) at
    > /home/pcpa/rhel/ksh/ksh-20120801/src/cmd/ksh93/sh/fault.c:665
    > #2  0x0000000000407407 in exfile (shp=0x4542, iop=0xff, fno=0) at
    > /home/pcpa/rhel/ksh/ksh-20120801/src/cmd/ksh93/sh/main.c:604
    > #3  0x0000000000405c43 in sh_source (shp=0x793360 <sh>, iop=0x0,
    > file=0x524804 <e_sysprofile> "/etc/profile")
    >     at /home/pcpa/rhel/ksh/ksh-20120801/src/cmd/ksh93/sh/main.c:109
    > #4  0x00000000004060e4 in sh_main (ac=2, av=0xfff000498, userinit=0x0)
    > at /home/pcpa/rhel/ksh/ksh-20120801/src/cmd/ksh93/sh/main.c:202
    > #5  0x0000000000405b85 in main (argc=2, argv=0xfff000498) at
    > /home/pcpa/rhel/ksh/ksh-20120801/src/cmd/ksh93/sh/pmain.c:45
    > (gdb)
    > ---8<---

commit e3d7bf1df25353d1d073a06b298d273ba3ad3645
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 22:32:42 2020 +0200

    Fix '( command & )' breakage on interactive (rhbz#1217236)
    
    Prior discussion:
    https://bugzilla.redhat.com/1217236
    Summary: doing
            ( some_simple_command & )
    i.e., launching a background job from within a subshell, on a ksh
    interactive login shell, caused misbehaviour (command not run).
    
    For me on 93u+m, the misbehaviour was different -- an outright
    crash in the job handling code following SIGCHLD, backtracing to:
    0   ksh                         job_unpost + 49 (jobs.c:1655)
    1   ksh                         job_reap + 1632 (jobs.c:468)
    2   libsystem_platform.dylib    _sigtramp + 29
    3   ???                         0 + 4355528544
    4   ksh                         ed_getchar + 102 (edit.c:1048)
    5   ksh                         ed_emacsread + 659 (emacs.c:280)
    [...]
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-nohupfork.patch
    
    Lines 1874-1886 in sh_exec() optimise the highly specific case of
    '( simple_command & )' by avoiding a sh_subshell() call that sets
    up a virtual subshell before forking:
    
    https://github.com/ksh93/ksh/blob/bd283959/src/cmd/ksh93/sh/xec.c#L1874-L1886
    1874    else if(((type=t->par.partre->tre.tretyp)&FAMP) && ((type&COMMSK)==TFORK))
    1875    {
    1876            pid_t   pid;
    1877            sfsync(NIL(Sfio_t*));
    1878            while((pid=fork())< 0)
    1879                    _sh_fork(shp,pid,0,0);
    1880            if(pid==0)
    1881            {
    1882                    sh_exec(t->par.partre,flags);
    1883                    shp->st.trapcom[0]=0;
    1884                    sh_done(shp,0);
    1885            }
    1886    }
    1887    else
    1888            sh_subshell(shp,t->par.partre,flags,0);
    
    The original patch inserts the following before the sh_done call on
    line 1884:
    
                            sh_offoption(SH_INTERACTIVE);
    
    sh_done() checks for SH_INTERACTIVE and only runs job handling code
    if that option is on.
    
    Also, I had missed the need for an update of shgd->current_pid
    here. Since 843b546c replaced lots of getpid() calls by reading
    that variable, this could cause ksh to SIGCHLD the wrong process.
    
    But even after adding the shgd->current_pid update to the RH patch,
    I was still able to make it crash.
    
    src/cmd/ksh93/sh/xec.c: sh_exec(): case TPAR:
    - Disable this optimisation outright for interactive or job
      control-enabled shells. I really don't trust it at all, but there
      have been no problem reports for scripts without job control, so
      keep it until such reports surface.
    - Update shgd->current_pid so the child doesn't end up signalling
      the wrong process (re: 843b546c).
    
    ___________________________________________________________________
    P.S.:
    
    It was noted in the Red Hat discussion that ( ... & ) does a double
    fork, i.e., a virtual/non-forked subshell always forks before
    forking the background job. This extra fork is done by the
    following two lines in under 'case TFORK:' in sh_exec() in xec.c:
    
    https://github.com/ksh93/ksh/blob/bd283959/src/cmd/ksh93/sh/xec.c#L1534-L1535
    1534    if((type&(FAMP|TFORK))==(FAMP|TFORK))
    1535            sh_subfork();
    
    This is executed if we're in a virtual/non-forked subshell, i.e.
    shp->subshell is true (note it is false for forked subshells). So
    it forks the virtual subshell (the first fork) before running the
    background job (the second fork). A background job is recognised by
    'type' having both the FAMP (AMP == ampersand == &) and TFORK bits
    set and no others.
    
    So the obvious way to remove the double fork is to comment out
    these two lines. Indeed, testing that confirms it gone and ksh
    appears to work fine at first glance. Does it really? Nearly!
    There are just four regression failures in a 'bin/shtests -p' run:
    
      options.sh[394]: & job delayed by --pipefail, expected '1212 or 1221', got '1122'
      signal.sh[280]: subshell ignoring signal does not send signal to parent (expected 'SIGUSR1', got 'done')
      signal.sh[289]: subshell catching signal does not send signal to parent (expected 'SIGUSR1', got 'done')
      subshell.sh[467]: sleep& in subshell hanging
    
    So, those two lines cannot be removed now and we have to keep the
    double fork. But removing them doesn't appear to break very much,
    so it may be possible to add some tests so we only do an extra fork
    when really necessary. That is a project for another day.

commit ddcef2137e1eedec7810c654b11e46760231082d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 28 04:47:53 2020 +0200

    NEWS: fix typo (re: bd283959)

commit bd283959be69cb6824381cdafbdc9273c69bc881
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 21:26:09 2020 +0200

    Fix lexing of 'case' in do...done in a $(comsub) (rhbz#1241013)
    
    The following caused a spurious syntax error:
    
    $ x=$(for i in 1; do case $i in word) true;; esac; done)
    -ksh: syntax error: `;;' unexpected
    
    Prior discussion:
    https://bugzilla.redhat.com/1241013
    
    Original patch, backported from 93v- beta, applied without change:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-parserfix.patch

commit bb15f7fb190b94f4dc6796c644cf2d0339d1f1da
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 12:51:09 2020 +0200

    Fix elusive/intermittent DEBUG trap crash (rhbz#1200534)
    
    For one Red Hat customer, the following reproducer consistently
    crashed, tough I was not able to reproduce it and neither was RH.
    However, the crash analysis is sound (see below).
    
        function dlog
        {
          fc -ln -0
        }
        trap dlog DEBUG
        >/tmp/blah
    
    Original patch: https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20140801-arraylen.patch
    
    The Red Hat bug thread is closed to the public as it also contains
    some correspondence with their customer. But it has an excellent
    crash analysis from Thomas Gardner which I'm including here for the
    record (the line numbers are for their ksh at the time, not 93u+m).
    
    ===begin analysis===
    > The creation of an empty file instead of a command that executes
    > anything causes the coredump.
    [...]
    > Here is my analysis on the core that was provided by the customer:
    >
    > (gdb) bt
    > #0  sh_fmtq (string=0x1 <Address 0x1 out of bounds>)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/string.c:340
    > #1  0x0000000000457e96 in out_string (cp=<value optimized out>, c=32,
    >     quoted=<value optimized out>, iop=<value optimized out>)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/xec.c:444
    > #2  0x000000000045804c in sh_debug (shp=0x76d180, trap=0x7f2f13a821e0 "dlog",
    >     name=<value optimized out>, subscript=<value optimized out>,
    >     argv=0x76e070, flags=<value optimized out>)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/xec.c:548
    > #3  0x000000000045a867 in sh_exec (t=0x7f2f13aafad0, flags=4)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/xec.c:1265
    > [...need go no further...]
    >
    > In frame 2, we can see it cycling through your classic
    > (char **)argv array like:
    >
    > 543           while(cp = *argv++)
    > 544           {
    > 545                   if((flags&ARG_EXP) && argv[1]==0)
    > 546                           out_pattern(iop, cp,' ');
    > 547                   else
    > 548                           out_string(iop, cp,' ',n?0: (flags&(ARG_RAW|ARG_NOGLOB))||*argv);
    > 549           }
    > 550           if(flags&ARG_ASSIGN)
    > 551                   sfputc(iop,')');
    > 552           else if(iop==stkstd)
    >
    > (we seg-fault after going down the out_string function in line
    > 548 up there). The string pointer that points to = 0x1 up in
    > frame #0 (sh_fmtq) traces back to the "cp" variable in line 548
    > up there. The "argv" variable being referenced up there just gets
    > passed in as the fifth argument to this function.
    >
    > In frame #3 (sh_exec, line 1265), the line that makes the call
    > that takes us to frame 2 is:
    >
    > 1265                     int n = sh_debug(shp,trap,(char*)0,(char*)0, com, ARG_R     AW);
    >
    > so "com" (the fifth argument) is what's going wrong as it
    > descends down through these calls. Looking at where it comes
    > from, well, it's assigned here:
    >
    > 1241                 if(argn==0)
    > 1242                 {
    > 1243                     /* fake 'true' built-in */
    > 1244                     np = SYSTRUE;
    > 1245                     *argv = nv_name(np);
    > 1246                     com = argv;
    > 1247                 }
    >
    > because as we can see:
    >
    > (gdb) f 3
    > #3  0x000000000045a867 in sh_exec (t=0x7f2f13aafad0, flags=4)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/xec.c:1265
    > 1265                                          int n = sh_debug(shp,trap,(char*)0,(char*)0, com, ARG_RAW);
    > (gdb) p argn
    > $2 = 0
    > (gdb)
    >
    > argn is == 0 here. The tip-off here is that nv_name clearly
    > returns a simple pointer to an array of characters, not an array
    > of pointers to arrays of characters as is evidenced by the fact
    > that the assignment is "*argv = nv_name(np);" not "argv =
    > nv_name(np);". Looking at the function nv_name proves that it
    > does indeed return a single pointer to an array of characters,
    > not a pointer to an array of pointers to arrays of characters.
    > Now, com is defined as a 'char **':
    >
    > 1002         char        *cp=0, **com=0, *comn;
    >
    > (as it is expected to be in the calls that follow) also, that
    > argv is also defined as the effective equivalent a 'char **':
    >
    > 1237                 static char *argv[1];
    >
    > Yup, argv is actually an array of pointers (char ** equivalent),
    > but that array is restricted to having exactly one element.
    > Recalling the assignment in the previously quoted line:
    >
    > 1245                     *argv = nv_name(np);
    >
    > we see that the one and only element in that argv array is
    > getting assigned a pointer to an array of characters here.
    > Nothing necessarily wrong with that, but remember the loop we
    > looked at earlier in frame #2 (sh_debug). It went like:
    >
    > 543           while(cp = *argv++)
    > 544           {
    > 545                   if((flags&ARG_EXP) && argv[1]==0)
    > 546                           out_pattern(iop, cp,' ');
    > 547                   else
    > 548                           out_string(iop, cp,' ',n?0: (flags&(ARG_RAW|ARG_NOGLOB))||*argv);
    > 549           }
    >
    > which is clearly expecting argv in this context (com in frame 3,
    > which really points to that static local single element array
    > that is also pointed to by argv in frame 2) to be an array of
    > pointers of indefinite size, each element being a pointer, but
    > whose last element will be a null pointer. Well, in frame 3 it is
    > clearly an array with only a single element, and that one element
    > is NOT pointing to null. Watch this:
    >
    > (gdb) f 3
    > #3  0x000000000045a867 in sh_exec (t=0x7f2f13aafad0, flags=4)
    >     at /usr/src/debug/ksh-20120801/src/cmd/ksh93/sh/xec.c:1265
    > 1265                                          int n = sh_debug(shp,trap,(char*)0,(char*)0, com, ARG_RAW);
    > (gdb) p com
    > $8 = (char **) 0x76e060
    > (gdb) p &argv
    > $9 = (char *(*)[1]) 0x76e060
    > (gdb) p com[0]
    > $11 = 0x5009c6 "true"
    > (gdb) p com[1]
    > $10 = 0x1 <Address 0x1 out of bounds>
    > (gdb) p argv[0]
    > $12 = 0x5009c6 "true"
    > (gdb) p argv[1]
    > $13 = 0x1 <Address 0x1 out of bounds>
    > (gdb)
    >
    > So, as expected, com and &argv point to the same place, the first
    > element points to the constant string "true", but since the array
    > is defined as having only one element, when you refer to a second
    > element in that array, you get well, whatever random crap happens
    > to be in that memory location. When we try to reproduce this
    > problem, apparently we're getting 0 there (or we're not quite
    > following this same code path, which is also possible), but the
    > customer happens to have a "1" in that memory location.
    ===end analysis===
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - When processing TCOM (simple command) with an empty/null command,
      increase the size of the static dummy argv[1] array to argv[2],
      ensuring a terminating NULL element so that 'while(cp = *argv++)'
      loops don't crash. (Note that static objects are automatically
      initialised to zero in C.)
    
    src/cmd/ksh93/tests/io.sh:
    - Adapt the reproducer, testing a null-command redirection 1000x.

commit a5d38b1de7baa8bffa09ffa68984da779201af3f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 06:46:52 2020 +0200

    add missing function crash test (re: 6193c6a3)
    
    Of course I was wrong to say the bug had nothing to do with
    functions; traps in ksh functions are local, are handled the same
    way as traps that are local to virtual subshells, and had the same
    crashing bug. So this adds a test for that as well.

commit 6193c6a3c5882adbc4ef58b1d9295ea5fbb6bf0e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 05:58:54 2020 +0200

    Fix crash while handling subshell trap (rhbz#1117404)
    
    Contrary to the RH bug report, this is yet another bug with
    virtual/non-forked subshells and has nothing to do with functions.
    If a signal is ignored (empty trap) in the main shell while any
    trap (empty or not) is set on the same signal in a subshell, a
    crash eventually occurred upon restoring state when leaving the
    subshell.
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-trapcom.patch
    
    Prior discussion:
    https://bugzilla.redhat.com/1117404
    
    Paulo Andrade wrote there:
    > The problem is that the sh_subshell function was saving pointers
    > that could change, and when restoring, bad things would happen.
    [...]
    > The only comment I added:
    > /* contents of shp->st.trapcom may change */
    > may be a bit misleading, the "bad" save/restore already knows it,
    > probably I should have added a better description telling that the
    > data is, usually, modified in code like:
    >
    > tmp = buf[i]; buf[i] = strdup(tmp); free(tmp);
    >
    > so the shp->st.trapcom needs a "deep copy", as done in the
    > patch, to properly save/restore pointers.
    
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - sh_subshell(), sh_funscope(): Make *savsig/*savstak into a
      **savsig array. Use strdup(3) to save the data and get known
      pointers that will not change. Free these upon restore.
    - Change the comment from the patch as Paulo wished he had done.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Test 2500 times. This should trigger the crash most of the time.

commit 045fe6a1104f0ae29f78d919e1172712b3aaa573
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 04:18:07 2020 +0200

    Fix: Closing a FD within a comsub broke output (rhbz#1116072)
    
    Another Red Hat patch. "Prior to this update, the result of a
    command substitution was lost if a file descriptor used for the
    substitution was previously explicitly closed. With this update,
    ksh no longer reuses file descriptors that were closed during the
    execution of a command substitution. Now, command substitutions
    work as expected in the described situation."
    
    Prior discussion:
    https://bugzilla.redhat.com/1116072
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20140929-safefd.patch
    
    src/cmd/ksh93/include/io.h,
    src/cmd/ksh93/sh/io.c:
    - Add sh_iosafefd() function to get a file descriptor that is not
      in use or otherwise occupied (including marked as closed).
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - Use that function to obtain a safe FD upon restoring state when
      exiting a command substitution. I don't really know the how and
      why -- all that I/O magic is still beyond me and the code is
      uncommented as usual.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add regression test from the reproducer in the bug, reduced to
      the minimum necessary.

commit 18b3f4aa28182e2047957dd7edcf6f9d0ff1cc69
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 27 02:00:55 2020 +0200

    combining alarm and IFS caused segfault (rhbz#1176670)
    
    The undocumented alarm builtin executes actions unsafely so that
    'read' with an IFS assignment crashed when an alarm was triggered.
    
    This applies an edited version of a Red Hat patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-alarmifs.patch
    
    Prior discussion:
    https://bugzilla.redhat.com/1176670
    
    src/cmd/ksh93/bltins/alarm.c:
    - Add a TODO note based on dgk's 2014 email cited in the RH bug.
    - When executing the trap function, save and restore the IFS table.
    
    src/cmd/ksh93/sh/init.c: get_ifs():
    - Remove now-unnecessary SHOPT_MULTIBYTE preprocessor directives as
      8477d2ce lets the compiler optimise out multibyte code if needed.
    - Initialise the 0 position of the IFS table to S_EOF. This
      corresponds with the static state tables in data/lexstates.c.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Crash test.

commit f7c3565f4eed029163c8959ad8e44767224b3c9c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 26 22:31:14 2020 +0200

    Fix $PWD breakage on fork; cd; exec (rhbz#1168611)
    
    This applies the following Red Hat patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-cdfork.patch
    
    The associated bug report is public, but nearly all info (such as
    a reproducer) has been wiped: https://bugzilla.redhat.com/1168611
    However, the errata blurb is mildly informative:
    
    "Previously, ksh sometimes incorrectly initialized a variable
    holding the path of the working directory. If a program changed the
    working directory between forking and ksh execution, then ksh could
    contain an incorrect value in the working directory variable. With
    this update, initialization of the working directory variable has
    been corrected, and ksh now contains the correct value in the
    aforementioned situation."
    
    Also, the patch makes a lot of sense on the face of it. It removes
    an optimisation in path_pwd() that checks for the directory defined
    by e_crondir[] in data/msg.c, which is:
    
        const char e_crondir[]              = "/usr/spool/cron/atjobs";
    
    Of /usr/spool not existed on any system for decades as it is common
    to mount usr as read-only, so all the writable stuff was moved to
    /var. So that would never check out. And if 'flag' is nonzero, the
    optimizing 'count++' is executed regardless of whether that
    directory exists, ensuring that it never gets the real PWD and
    defaults to returning ".".
    
    src/cmd/ksh93/sh/path.c:
    - Apply patch as described.
    - Mark 'flag' variable as NOT_USED to suppress compiler warning.
      Keep it for backwards compat, as some programs that link with
      libshell might use this function (though it's undocumented).
    
    src/cmd/ksh93/include/path.h,
    src/cmd/ksh93/data/msg.c:
    - Remove now-unused e_crondir[].

commit 960a1a99cd75f9e6f6d5b5d41bcf733b9c6961a6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 26 20:28:55 2020 +0200

    Avoid importing env vars with invalid names (rhbz#1147645)
    
    This imports a new version of the code to import environment
    variable values that was sent to Red Hat from upstream in 2014.
    It avoids importing environment variables whose names are not valid
    in the shell language, as it would be impossible to change or unset
    them. However, they stay in the environment to be passed to child
    processes.
    
    Prior discussion: https://bugzilla.redhat.com/1147645
    Original patch: https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-oldenvinit.patch
    
    src/cmd/ksh93/sh/init.c:
    
    - env_init(): Import new, simplified code to import environment
      variable name/value pairs. Instead of doing the heavy lifting
      itself, this version uses nv_open(), passing the NV_IDENT flag to
      reject and skip invalid names.
    
    - Get rid of gotos and a static var by splitting off the code to
      import attributes into a new env_import_attributes() function.
      This is a better way to avoid importing attributes when
      initialising the shell in POSIX mode (re: 00d43960
    
    - Remove an nv_mapchar() call that was based on some unclear
      flaggery which was also removed by upstream as sent to Red Hat.
      I don't know what that did, if anything; looks like it might have
      had something to do with typeset -u/-l, but those particular
      attributes have never been successfully inherited through the
      environment.
        (Maybe that's another bug, or maybe I just don't care as
        inheriting attributes is a misfeature anyway; we have to put up
        with it because legacy scripts might use it. Maybe someone can
        prove it's an unacceptable security risk to import attributes
        like readonly from an environment variable that is inherently
        vulnerable to manipulation. That would be nice, as a CVE ID
        would give us a solid reason to get rid of this nonsense.)
    
    - Remove an 'else cp += 2;' that was very clearly a no-op; 'cp' is
      immediately overwritten on the next loop iteration and not used
      past the loop.
    
    src/cmd/ksh93/tests/variables.sh:
    
    - Test.

commit 8a34fc40e6bb16c718fd0a805be444a6a9c2a2aa
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Sep 26 11:26:18 2020 -0700

    whence -f: ignore functions (#137)
    
    According to 'whence --man', 'whence -f' should ignore functions:
      -f              Do not check for functions.
    
    Right now this is only accomplished partially. As of commit
    a329c22d 'whence -f' avoids any output when encountering a
    function (in ksh93u+ 'whence -f' has incorrect output). The
    return value is still wrong though:
    
    $ foo() { true; }
    $ whence -f foo; echo $?
    0
    
    This commit fixes the return value and makes 'type -f' error out
    when given a function (like in Bash).
    
    src/cmd/ksh93/bltins/whence.c:
    - If -f was passed, set 'cp' to NULL since functions should be
      ignored (as documented).
    - Simplify return value by avoiding bitwise logic.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for 'whence -f' and 'type -f'.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 7e6bbf85b635a884dc48a7c7cca8123e2a2f2257
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 26 02:36:43 2020 +0200

    Fix another comsub regression (rhbz#1116508) (re: 970069a6)
    
    Another Red Hat patch of a patch. With the new comsub mechanism,
    functions could sometimes return the wrong exit status when invoked
    from a command substitution.
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-fununset.patch
    
    I have determined that the extra setexit() in the Red Hat patch,
    which copies the current exit status to $?, is not needed, as the
    code for running functions already sets $? on termination. I've
    added extra regression tests to prove this.
    
        By the way, the setexit() macro is defined like this in defs.h:
    
                #define exitset()   (sh.savexit=sh.exitval)
    
        That's more evidence (see also 3654ee73) that it does not
        matter whether you address the shell's status struct via a
        pointer. That macro is used in places that use shp pointers.
        But, that aside...
    
    src/cmd/ksh93/sh/subshell.c: sh_subshell():
    - When waiting within a command substitution for a forked process
      to end, save & restore sh.exitval (the exit status of the command
      currently being run) so that job_wait() cannot override it.
    
    src/cmd/ksh93/tests/functions.sh:
    - Add tests based in part on the reproducer from rhbz#1116508.

commit 95225e1e01d123c4b25b4846972c98f52fe2fb47
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 26 01:17:07 2020 +0200

    tests/subshell.sh: test from rhbz#1138751 reproducer (re: 4ce486a7)

commit c382cea176bf9308418ffff370460a68dc4fe5db
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 25 23:46:24 2020 +0200

    fix non-null pointer check (re: b7932e87)
    
    src/cmd/ksh93/sh/xec.c: sh_funct():
    - The np->nvalue.rp pointer was dereferenced before the check that
      it is non-null. Do this check before dereferencing it.

commit 352e68dabd5e2fe6bee23e688f11d43fb0d9bf16
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 25 23:26:25 2020 +0200

    do not resend signal on termination (rhbz#1075635)
    
    public bug: https://bugzilla.redhat.com/1075635
    patched by: https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-sufix.patch
    
    src/cmd/ksh93/sh/io.c: io_prompt():
    - Reset the currently running command's exit status (exitval) when
      writing the prompt. This does not affect "$?" which is savexit.

commit 3050bf28bcd5395603657c4f1445ad8192b27e63
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 25 15:39:08 2020 +0200

    whence -v/-a: report path to autoloadable functions
    
    Since at least 1999, whence -v on pdksh (and its successor mksh)
    reports the path where an autoloadable function may be found:
    
      $ mkdir ~/fun; FPATH=~/fun
      $ echo 'myfn() { echo hi; }' >~/fun/myfn
      $ whence -v myfn
      myfn is a undefined (autoload from /home/user/fun/myfn) function
    
    Whereas ksh93 only reports, rather uselessly:
    
      myfn is an undefined function
    
    As of this commit, whence -v/-a on ksh 93u+m does the same as
    pdksh, but with correct grammar:
    
      myfn is an undefined function (autoload from /home/user/fun/myfn)
    
    This may be a small violation of my own "no new features" policy
    for 93u+m, but I couldn't resist. This omission has been annoying
    me, and it's just embarrassing to lack a pdksh feature :)
    
    src/cmd/ksh93/include/path.h,
    src/cmd/ksh93/data/msg.c:
    - Add e_autoloadfrom[] = " (autoload from %s)" message.
    
    src/cmd/ksh93/bltins/whence.c: whence():
    - Report the path (if any) when reporting an undefined function.
      This needs to be done in two places:
      1. When a function has been explicitly marked undefined with
         'autoload', we need to do a quick path_search() loop to find
         the path. (These undefined functions take precedence over
         regular commands, so are reported first.)
      2. When a function is not explicitly autoloaded but merely
         available in $FPATH, that path search was already done, so all
         we need to do is report it. (These are reported last.)
      Note that the output remains as on 93u+ if no function definition
      file is found on $FPATH. This is also like pdksh/mksh.
    
    src/cmd/ksh93/data/builtins.c:
    - Bump 'whence' version date. The inline docs never detailed very
      exactly what 'whence -v' reports, so no need for further edits.
    
    src/cmd/ksh93/tests/path.sh:
    - Regress-test the new whence behaviour plus actual autoloading,
      including the command override behaviour of autoloaded functions.

commit cefe087d238c5ceda568513614d7dacc4515d201
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 25 08:19:43 2020 +0200

    Fix argv rewrite on invoking hashbangless script (rhbz#1047506)
    
    The fixargs() function is invoked when ksh needs to run a script
    without a #!/hashbang/path. Instead of letting the kernel invoke a
    shell, ksh exfile()s the script itself from sh_main(). In the
    forked child, it calls fixargs() to set the argument list in the
    environment to the args of the new script, so that 'ps' and
    /proc/PID/cmdline show the expected output.
    
    But fixargs() is broken because, on systems other than HP-UX (on
    which ksh uses pstat(2)), ksh simply inserts a terminating zero.
    The arguments list is not a zero-terminated C string. Unix systems
    expect the entire arguments buffer to be zeroed out, otherwise 'ps'
    and /proc/*/cmdline will have fragments of previous command lines
    in the output.
    
    The Red Hat patch for this bug is:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-argvfix.patch
    
    However, that fix is incomplete because 'command_len' was also
    hardcoded to be limited to 64 characters (!), which still gave
    invalid 'ps' output if the erased command line was longer.
    
    src/cmd/ksh93/sh/main.c: fixargs():
    
    - Remove CMD_LENGTH macro which was defined as 64.
    
    - Remove code that limited the erasure of the arguments buffer to
      CMD_LENGTH characters. That code also had quite a dodgy strdup()
      call -- it copies arguments to the heap, but they are never freed
      (or even used), so it's a memory leak. Also, none of this is
      ever done if the length is calculated using pstat(2) on HP-UX,
      which is a clear indication that it's unnecessary.
      (I think this code block must have been some experiment they
      forgot to remove. One reason why I think so is that a 64 byte
      arguments limit never made sense, even in the 1980s when they
      wrote ksh on 80-column CRT displays. Another indication of this
      is that fixing it didn't require adding anything; the code to do
      the right thing was already there, it was just being overridden.)
    
    - Zero out the full arguments length as in the Red Hat patch.
    
    src/cmd/ksh93/tests/basic.sh:
    
    - Add test. It's sort of involved because 'ps' is one of the least
      portable commands in practice, in spite of standardisation.

commit 651bbd563e32e6dd7da7fa9a28699162e4384220
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Sep 24 19:37:22 2020 -0700

    Fix garbled output from Ctrl+Alt+V (#135)
    
    This fixes a regression introduced in commit f9c127e3.
    When the legacy code for older versions of libast was
    removed, the fmtident wrapper wasn't removed. As a result,
    the version string output by Ctrl+Alt+V is garbled because
    the fmtident wrapper doesn't do any formatting:
    
    $ <Ctrl+Alt+V>
    ^J@(#)$Id: Version AJM 93u+m 2020-09-14
    
    src/cmd/ksh93/sh/string.c:
    - Remove the old version of fmtident that was overriding
      the current version of fmtident provided by libast
      (in src/lib/libast/string/fmtident.c).

commit e40aaa8aa855c9ab170efb259b21d0548564500e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 24 15:43:49 2020 +0200

    Simplify comsub logic (re: 970069a6, 4ce486a7)
    
    There was still an opportunity for code simplification.
    No change in behaviour.

commit a14d17c0f471e81cde6644ac17ec2f890d63383c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 24 07:36:44 2020 +0200

    Allow turning off brace expansion in comsubs (rhbz#1078698)
    
    There was no check for the -B/braceexpand option before calling
    path_expand() to process brace expansion, making it impossible to
    turn off brace expansion within command substitutions. Normally the
    lexer flags brace expansion so that this code is not reached, but
    shell code within command substitutions is handled differently.
    
    Red Hat patches this by adding this check to the function itself:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20140301-fikspand.patch
    But I think it's more logical to patch it at the point of decision.
    
    src/cmd/ksh93/sh/macro.c: endfield():
    - Decide to call either path_generate() or path_expand() based on
      the state of the SH_BRACEEXPAND shell option.
    - Fix '#if SHOPT_BRACEPAT' preprocessor check that previously
      hardcoded this decision at compile time.
    
    src/cmd/ksh93/tests/options.sh:
    - Add tests.

commit c1d9eed54b63142da3da45f5ae020c0f4c315420
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 24 06:49:45 2020 +0200

    tests/math.sh: do not break loop; show all errors (re: d7c90ead)

commit 02a48218f3949bec7299a40d5518f79c35b3f8c8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 24 06:27:39 2020 +0200

    add another comsub regress test variant (re: 6e515f1d)

commit 4ce486a7a4daa5df3edfd2b23c250ceff7da0f3f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 24 05:54:25 2020 +0200

    Fix hang in `comsubs` (rhbz#1062296) (re: 970069a6)
    
    The new command substitution mechanism imported in 970069a6 from
    Red Hat patches introduced this bug: backtick-style command
    substitutions hang when processing about 117KiB of data or more.
    
    It is fixed by another Red Hat patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20140415-hokaido.patch
    
    It saves the value of the shp->comsub flag so that it is set to 2
    (usually meaning new-style $(comsubs)) in two specific cases even
    when processing backtick comsubs. This stops the sh_subtmpfile()
    function in subshell.c from creating a /tmp file. However, I think
    that approach is quite ugly, so I'm taking a slightly different one
    that has the same effect.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/subshell.c:
    - Redefine sh_subtmpfile() to pass the comsub flag as an argument.
      (Remove the shp pointer argument, which is redundant; a pointer
      to the shell state can easily be obtained in the function.)
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Apply the Red Hat fix by passing flag 2 to sh_subtmpfile().
    
    src/cmd/ksh93/tests/subshell.sh:
    - Move regress test from ce68e1be from basic.sh to here; this is
      the place for command substitution tests as they are subshells.
    - Add regress test for this bug.
    
    All other changed files:
    - Update sh_subtmpfile() calls to pass on the shp->comsub flag.

commit 3654ee73c03fb622dc878d6d2adb54dff13e0624
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 23 19:15:45 2020 +0200

    Fix typeset -l/-u crash on special vars (rhbz#1083713)
    
    When using typeset -l or -u on a variable that cannot be changed
    when the shell is in restricted mode, ksh crashed.
    
    This fixed is inspired by this Red Hat fix, which is incomplete:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-tpstl.patch
    
    The crash was caused by the nv_shell() function. It walks though a
    discipline function tree to get the pointer to the interpreter
    associated with it. Evidently, the problem is that some pointer in
    that walk is not set correctly for all special variables.
    
    Thing is, ksh only has one shell language interpreter, and only one
    global data structure (called 'sh') to keep its main state[*]. Yet,
    the code is full of 'shp' pointers to that structure. Most (not
    all) functions pass that pointer around to each other, accessing
    that struct indirectly, ostensibly to account for the non-existent
    possibility that there might be more than one interpreter state.
    The "why" of that is an interesting cause for speculation that I
    may get to sometime. For now, it is enough to know that, in the
    code as it is, it matters not one iota what pointer to the shell
    interpreter state is used; they all point to the same thing (unless
    it's broken, as in this bug).
    
    So, rather than fixing nv_shell() and/or associated pointer
    assignments, this commit simply removes it, and replaces it with
    calls to sh_getinterp(), which always returns a pointer to sh (see
    init.c, where that function is defined as literally 'return &sh').
    
    [*] Defined in shell.h, with the _SH_PRIVATE part in defs.h
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/name.c:
    - Remove nv_shell().
    
    src/cmd/ksh93/sh/init.c:
    - In all the discipline functions for special variables, initialise
      shp using sh_getinterp() instead of nv_shell().
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression test for typeset -l/-u on all special variables.

commit 843b546c1afa8a237b2af57ae5dcf5e1d24d1b6c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 23 04:19:02 2020 +0200

    rm redundant getpid(2) syscalls (re: 9de65210)
    
    Now that we have ${.sh.pid} a.k.a. shgd->current_pid, which is
    updated using getpid() whenever forking a new process, there is no
    need for anything else to ever call getpid(); we can use the stored
    value instead. There were a lot of these syscalls kicking around,
    some of them in performance-sensitive places.
    
    The following lists only changes *other* than changing getpid() to
    shgd->currentpid.
    
    src/cmd/ksh93/include/defs.h:
    - Comments: clarify what shgd->{pid,ppid,current_pid} are for.
    
    src/cmd/ksh93/sh/main.c,
    src/cmd/ksh93/sh/init.c:
    - On reinit for a new script, update shgd->{pid,ppid,current_pid}
      in the sh_reinit() function itself instead of calling sh_reinit()
      from sh_main() and then updating those immediately after that
      call. It just makes more sense this way. Nothing else ever calls
      sh_reinit() so there are no side effects.
    
    src/cmd/ksh93/sh/xec.c: _sh_fork():
    - Update shgd->current_pid in the child early, so that the rest of
      the function can use it instead of calling getpid() again.
    - Remove reassignment of SH_PIDNOD->nvalue.lp value pointer to
      shgd->current_pid (which makes ${.sh.pid} work in the shell).
      It's constant and was already set on init.

commit ce68e1be37c342d7d11679b4c6316f9ad0f02a74
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 23 01:56:09 2020 +0200

    Fix crash in `backtick comsubs` with job control on (rhbz#825520)
    
    This imports another fix from Red Hat/Fedora. Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-crash.patch
    
    src/cmd/ksh93/include/jobs.h,
    src/cmd/ksh93/sh/jobs.c,
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - Import the Red Hat fix with these differences:
      - Rename the 'hack1_waitall' variable to 'bktick_waitall' and add
        a comment describing what it's for.
      - Remove unused 'pipefail' variable.
    
    src/cmd/ksh93/tests/basic.sh:
    - Regression test from reproducer given in the Red Hat bug report.
    - Add special handling to SIGKILL it, as it might freeze hard.

commit f7ffaaba1793a99a8c6a7ba4628475a3af587e53
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 21:38:15 2020 +0200

    tests/builtin.sh: add 'cd' regress tests
    
    These are based on Red Hat patches and/or bug reports.
    None of these bugs currently exist in 93u+m, but let's
    make sure to keep it that way.

commit 600cb182e33cb792a911b6951e3245f4a35eb214
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 16:14:53 2020 +0200

    bin/package: don't test-compile using possibly broken dev shell

commit 7444fc7c246c5de4689aaed6b45275a18d7abe54
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 14:39:28 2020 +0200

    better v=$(<file) fix (re: fe6d0903)
    
    If we're adding a check for flag==3 to limit the fix to v=$(<file),
    we might as well use the existing check upon returning the FD.

commit e149cf4fd8479ff22a4bf81c153352edd13c45e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 06:52:39 2020 +0200

    tests/builtin.sh: tweaks

commit 03cf032349bee19959c934900905993c4d0a2849
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 03:33:56 2020 +0200

    fix unportable path in regress test (re: a329c22d)

commit fe6d0903dc5a6d6af3e72fc1d0da72e2c9db6751
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 02:45:59 2020 +0200

    Fix v=$(<file) for closed FD 0,1,2 (rhbz#1066589)
    
    var=$(< file) now reads the file even if the standard inout,
    standard output and/or standard error file descriptors are closed.
    
    Original patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-filecomsubst.patch
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - When processing the '<' redirector as part of $(< ...), i.e. if
      flag==3, make sure the FD of the file to read is > 2 by calling
      sh_iomovefd(). Unlike the RedHat patch, this checks for flag==3
      to avoid unnecessary sh_iomovefd() calls for normal redirections,
      as there was no bug with those.
    
    src/cmd/ksh93/tests/io.sh:
    - Add test.

commit 5683155cb53197edf3893788ec9ad9bf76d148cc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 22 01:42:15 2020 +0200

    update NEWS, SH_RELEASE (re: 970069a6)

commit 970069a6feb71424f4a98b9f3005181eeaa1c448
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 21 23:02:08 2020 +0200

    Fix command substitutions in here-docs (rhbz#994241, rhbz#1036802)
    
    When ksh was compiled with SHOPT_SPAWN (the default), any command
    substitution embedded in a here-document returned an empty string.
    The bug was also present in 93u+ 2012-08-01 (although not in every
    case as some systems compile it without SHOPT_SPAWN).
    
    This fixes it by applying a slightly edited combination of two Red
    Hat patches (the second containing a fix for the first), which
    backport a new command substitution mechanism from the abandoned
    ksh 93v- beta version. The originals are:
    
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-macro.patch
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-fd2lost.patch
    
    src/cmd/ksh93/include/io.h:
    - The iopipe() function from xec.c is now needed in sh_subshell()
      (subshell.c), so rename it to sh_iounpipe() and declare it as an
      extern here. The 93v- beta did it as well. (The Red Hat patch did
      this without renaming it.)
    
    src/cmd/ksh93/sh/xec.c:
    - Backport new versions of iousepipe() and sh_iounpipe() from ksh
      93v-. New 'type' flaggery is introduced to distinguish between
      different command substitution conditions. What all that means
      remains to be determined.
    - sh_exec(): I made one change to the Red Hat patch myself: if in a
      subshell and the type flags FAMP (for "ampersand" as in '&' as in
      background job) and TFORK are set, continue to call sh_subfork()
      to fork the subshell unconditionally, instead of only if we're in
      a command substitution connected to an unseekable file. Maybe the
      latter works for the 93v- code, but on 93u+(m) it causes a couple
      of regressions, which are fixed by my change:
      signal.sh[273]: subshell ignoring signal does not send signal to parent
      signal.sh[276]: subshell catching signal does not send signal to parent
      Details: https://github.com/ksh93/ksh/issues/104#issuecomment-696341902
    
    src/cmd/ksh93/sh/macro.c,
    src/cmd/ksh93/sh/subshell.c:
    - Updates that go with those new functions.
    
    Fixes:   https://github.com/ksh93/ksh/issues/104
    Affects: https://github.com/ksh93/ksh/issues/124

commit 0d3bedd67de26a1e9e32818a215e6dee16c3f326
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 21 02:08:29 2020 +0200

    tests/leaks.sh: avoid false leak: pre-run test (re: fe20311f)

commit fe20311fe9ca9fbc69df84d8cae3aef31e4fa740
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 20 23:58:44 2020 +0200

    Fix `command substitution` memory leaks (rhbz#982142)
    
    This fixes two memory leaks in old-style command substitutions
    (one when invoking an alias, one when invoking an autoloaded
    function), as well as a possible third leak with an unknown
    reproducer, by applying this Red Hat patch:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-mlikfiks.patch
    
    src/cmd/ksh93/sh/macro.c: comsubst():
    - For as-yet unknown reasons, the alias leak did not occur when
      adding a space at the end of the command substitution, as in
      a=`some_alias `. This fix is a workaround that simply writes
      an extra space to the stack. TODO: a real fix.
    
    src/cmd/ksh93/sh/path.c: funload():
    - Add missing free() before return. This fixes the leak with
      autoloaded functions.
    
    src/cmd/ksh93/sh/lex.c: alias_exceptf():
    - This function is called "whenever an end of string is found with
      alias". This adds a check for an SF_FINAL stream status flag when
      deciding whether to call free(). In sfio.h this is commented as:
          #define SF_FINAL 11 /* closing is done except stream free */
      When I revert this change, none of the regression tests fail, so
      I don't know how to trigger this supposed leak. But it makes some
      sense given the sfio.h comment, so I'll keep it.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add the reproducers from rhbz#982142 as regression tests
      (including an extra one for nested command substitutions that was
      already fixed as of 93u+, but testing is good).
         I replaced the external 'expr' and 'ls' commands by uses of
      the 'true' builtin, otherwise the tests take far too long to run
      with 16384 iterations. At least the alias leak was still behaving
      identically after replacing 'ls' by 'true'.

commit e6611916aab59857f61fb6d243df410f183565b2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 20 20:47:49 2020 +0200

    tests/coprocess.sh: temp disable known intermittent fail
    
    Export DEBUG_COPROCESS=y to include it in the tests.
    See: https://github.com/ksh93/ksh/issues/132

commit d9f01e012085913d483cc0497a7b5a9508e736f9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 20 14:54:49 2020 +0200

    path_search(): still close file if not autoloading (re: a329c22d)

commit a329c22dbafead7d745be9eef50f172ec515d257
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 20 07:56:09 2020 +0200

    Multiple 'whence' and path search fixes
    
    Hopefully this doesn't introduce new bugs, but it does fix at
    least the following:
    
    1. When whence -v/-a found an "undefined" (i.e. autoloadable)
       function in $FPATH, it actually loaded the function as a side
       effect of reporting on its existence (!). Now it only reports.
    
    2. 'whence' will now canonicalise paths properly. Examples:
            $ whence ///usr/lib/../bin//./env
            /usr/bin/env
            $ (cd /; whence -v dev/../usr/bin//./env)
            dev/../usr/bin//./env is /usr/bin/env
    
    3. 'whence' no longer prefixes a spurious double slash when doing
       something like 'cd / && whence bin/echo'. On Cygwin, an initial
       double slash denotes a network server, so this was not just a
       cosmetic problem.
    
    4. 'whence -a' now reports a "tracked alias" (a.k.a. hash table
       entry, i.e. cached $PATH search) even if an actual alias by the
       same name exists. This needed fixing because in fact the hash
       table entry continues to be used when bypassing the alias.
       Aliases and "tracked aliases" are not remotely the same thing;
       confusing nomenclature is not a reason to report wrong results.
    
    5. When using 'hash' or 'alias -t' on a command that is also a
       builtin to force caching a $PATH search for the external
       command, 'whence -a' double-reported the path:
            $ hash printf; whence -a printf
            printf is a shell builtin
            printf is /usr/bin/printf
            printf is a tracked alias for /usr/bin/printf
       This is now fixed so that the second output line is gone.
       Plus, if there were multiple versions of the command on $PATH,
       the tracked alias was reported at the end, which is the wrong
       order. This is also fixed.
    
    src/cmd/ksh93/bltins/whence.c: whence():
    - Refactor the do...while loop that handles whence -v/-a for path
      searches in such a way that the code actually makes sense and
      stops looking like higher esotericism. Just doing this fixed #2,
      #4 and #5 above (the latter two before I even noticed them). For
      instance, the path_fullname() call to canonicalise paths was
      already there; it was just never used.
    - Remove broken 'notrack' flaggery for deciding whether to report a
      hash table entry a.k.a. "tracked alias"; instead, check the hash
      table (shp->track_tree).
    
    src/cmd/ksh93/sh/path.c:
    - path_search(): Re #3: When prefixing the PWD, first check if
      we're in '/' and if so, don't prefix it; otherwise, adding the
      next slash causes an initial double slash. (Since '/' is the only
      valid single-character absolute path, all we need to do is check
      if the second character pwd[1] is non-null.)
    - path_search(): Re #1: Stop autoloading when called by 'whence':
      * The 'flag==2' check to avoid autoloading a function was
        broken. The flag value is 2 on the first whence() loop
        iteration, but 3 on subsequent ones. Change to 'flag >= 2'.
      * However, this only fixes it if the function file does not have
        the x permission bit, as executable files are handled by
        path_absolute() which unconditionally autoloads functions!
        So, pass on our flag parameter when callling path_absolute().
    - path_absolute(): Re #1: Add flag parameter. Do not autoload
      functions if flag >= 2.
    
    src/cmd/ksh93/include/path.h,
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/sh/main.c,
    src/cmd/ksh93/sh/xec.c:
    - Re #1: Update path_absolute() calls, adding a 0 flag parameter.
    
    src/cmd/ksh93/include/name.h:
    - Remove now-unused pathcomp member from union Value. It was
      introduced in 99065353 to allow examining the value of a tracked
      alias. This commit uses nv_getval() instead.
    
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/path.sh:
    - Add and tweak various related tests.
    
    Fixes: https://github.com/ksh93/ksh/issues/84

commit 95fc175993febd7b207b2a0bea91a7cf6fc477ba
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 22:09:47 2020 +0200

    tests/signal.h: double SIGCHLD test sleep time due to intermittent fail

commit f45a0f16504f58b3dbd7647794761ab771ec2c40
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 20:32:34 2020 +0200

    -o posix: inverse-sync braceexpand; properly sync letoctal
    
    {Brace,expansion} is potentially incompatible with POSIX scripts,
    because in POSIX those are simple literal strings with no special
    meaning. So the POSIX option should really turn that off.
    
    As of b301d417, the 'posix' option was also forcing 'letoctal'
    behaviour on, without actually setting that option. I've since
    found that to be a botch; 'let' may recognise octals without that
    option being set, and that looks like a bug.
    
    So as of this commit, the '-o posix' option actually toggles both
    of these options off/on and on/of, respectively. 'set +o posix'
    toggles them inversely. However, it is now possible to control both
    options (and their associated behaviour) independently in between
    'set -o posix' and 'set +o posix'. Much better.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - If SH_POSIX was set on init, turn on SH_LETOCTAL by default
      instead of SH_BRACEEXPAND.
    
    src/cmd/ksh93/sh/args.c: sh_applyopts():
    - Turn off SH_BRACEEXPAND and turn on SH_LETOCTAL when SH_POSIX is
      turned on (but not if it was already on).
    - Turn on SH_BRACEEXPAND and turn off SH_LETOCTAL when SH_POSIX is
      turned off (but not if it was already off).
    
    src/cmd/ksh93/sh/arith.c: arith():
    - Revert to pre-b301d417 and only check SH_LETOCTAL option when
      deciding whether 'let' should skip initial zeros.
    
    src/cmd/ksh93/tests/options.sh:
    - Update $- test to allow '-o posix' to switch B = braceexpand.
    
    src/cmd/ksh93/sh.1:
    - Update.
    - Edit for clarity.

commit dc80f40d4015e89123f0a1dc56cb0a414836736d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 20:06:34 2020 +0200

    tests/sigchild.sh: increase a sleep to prevent very rare intermittent fail

commit fbdf240acb94e3365f1e0253ed47d2a6498904fc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 19:19:18 2020 +0200

    tests/leaks.sh: allow run without vmalloc/vmstate
    
    This allows running 'bin/shtests leaks' on a ksh without the
    vmstate builtin and/or that is not compiled with AST vmalloc.
    It falls back to 'ps -o rss= -p $$' to get the memory state.
    
    This is in preparation for the beta and release versions, which
    will not use vmalloc due to its defects[*]. Unfortunately,
    abandoning vmalloc means abandoning the vmstate builtin which makes
    it extremely efficient to test for memory leaks.
    
    Because 'ps' only has a KiB granularity and also shows larger
    artefacts/variations than vmalloc on most systems, we need many
    more iterations (16384) and also tolerate a higher number of bytes
    per iterations (8). So the run takes much longer. To tolerate only
    2 bytes per iteration, we would need four times as many iterations,
    which would make it take too long to run. Since a single word (e.g.
    one pointer) on a 64-bit system is 8 bytes, it still seems very
    unlikely for a real memory leak to be that small.
    
    This is coded to make it easy to detect and add iteration and
    tolerance parameters for a new method to get the memory state,
    if some efficient or precise system-specific way is discovered.
    
    I've also managed to trigger a false leak with shcomp in a UTF-8
    locale on CentOS on a ksh with vmalloc/vmstate. So this increases
    the tolerance for vmalloc from 2 to 4 bytes/iteration.
    
    [*] Discussion: https://github.com/ksh93/ksh/issues/95

commit 69679be8d727c63d91cd23880692f076d1761158
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 16:51:57 2020 +0200

    tests/leaks.sh: test unalias (re: 5d50f825)

commit 73038247898125bf105a5d57985f4fba53349237
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 13:53:53 2020 +0200

    tests/attributes.sh: add reproducer from rhbz#903750 (already fixed in 93u+)

commit ba752034c069b1eaec97d00e80ede0001cf0e3f6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 06:43:20 2020 +0200

    Fix crash in .paths file handling
    
    When compiling ksh with '-O0 -g -D_std_malloc' on my Mac, the
    paths.sh regress test set crashed. This is the test that crashed:
    
        print 'FPATH=../fun' > bin/.paths
        cat <<- \EOF > fun/myfun
                function myfun
                {
                        print myfun
                }
        EOF
        x=$(FPATH= PATH=$PWD/bin $SHELL -c  ': $(whence less);myfun') 2> /dev/null
        [[ $x == myfun ]] || err_exit 'function myfun not found'
    
    The crash occurred on the second-to-last line. The backtrace
    suggests an invalid use of strcpy() with overlapping memory:
    
    0   libsystem_kernel.dylib  __pthread_kill + 10
    1   libsystem_pthread.dylib pthread_kill + 284
    2   libsystem_c.dylib       abort + 127
    3   libsystem_c.dylib       abort_report_np + 177
    4   libsystem_c.dylib       __chk_fail + 48
    5   libsystem_c.dylib       __chk_fail_overlap + 16
    6   libsystem_c.dylib       __chk_overlap + 34
    7   libsystem_c.dylib       __strcpy_chk + 64
    8   ksh                     path_chkpaths + 1038 (path.c:1534)
    9   ksh                     path_addcomp + 1032 (path.c:1481)
    10  ksh                     path_addpath + 395 (path.c:1598)
    11  ksh                     put_restricted + 626 (init.c:329)
    [...]
    
    src/cmd/ksh93/sh/path.c: path_chkpaths():
    - When reading the '.paths' file, use memmove(3) instead of
      strcpy(3) as the former does a non-destructive copy with
      tolerance for overlap.

commit 7e7f1372452bcae7451f9a6e68d4b691b068bb82
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Sep 18 03:17:20 2020 -0700

    Fix a crash on unsetting preset alias (re: ddaa145b) (#133)
    
    The following set of commands caused ksh to crash:
    
    $ unalias history; unalias r
    Memory fault
    
    When ksh is compiled with -D_std_malloc, the crash always
    occurs when the 'r' alias is removed with 'unalias r',
    although with vmalloc 'unalias history' must be run first
    for the crash to occur. With the native malloc, the crash
    message is also different:
    
    $ unalias history; unalias r
    free(): invalid pointer
    Abort
    
    This crash happens because when an alias is unset, _nv_unset
    removes the NV_NOFREE flag which results in an invalid use
    of free(3) as nv_isattr no longer detects NV_NOFREE afterward.
    The history and r aliases shouldn't be freed from memory by
    nv_delete because those aliases are given the NV_NOFREE attribute.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Save the state of NV_NOFREE for aliases to fix the crash
      caused by 'unalias r'.
    
    src/cmd/ksh93/tests/alias.sh:
    - Use unalias on both history and r to check for the crash.
      'unalias -a' can't be used to replicate the crash.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 7e5fd3e98dc38a69f1cccb285af64e71458b2272
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 04:42:27 2020 +0200

    A few job control (-m, -o monitor) fixes (rhbz#960034)
    
    This patch from Red Hat fixes the following:
    
    1. ksh was ignoring the -m (-o monitor) option when specified on
       the invocation command line.
    
    2. Scripts did not properly terminate their background processes
       on Ctrl+C if the -m option was turned off. Reproducer:
            xterm &
            read junk
       When run as a script without turning on -m, pressing Ctrl+C
       should terminate the xterm, and now does.
    
    3. Scripts no longer attempt to set the terminal foreground process
       group ID, as only interactive shells should be doing that.
    
    This makes some progress on https://github.com/ksh93/ksh/issues/119
    but we're a long way from fixing all of that.
    
    src/cmd/ksh93/sh/main.c: exfile():
    - On non-interactive shells, do not turn off the monitor option.
      Instead, if it was turned on, turn on the SH_MONITOR state flag.
    
    src/cmd/ksh93/edit/edit.c: ed_getchar():
    - On Ctrl+C, issue SIGINT to the current process group using
      killpg(2) instead of going via sh_fault(), which handles a
      signal only for the current shell process.
    
    src/cmd/ksh93/sh/jobs.c: job_reap(), job_reset(),
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Only attempt to set the terminal foreground process group ID
      using tcsetpgrp(3) if the shell is interactive.
    
    Original patch: https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-kshmfix.patch
    This was applied to Red Hat's ksh 93u+ on 8 July 2013.

commit 06e721c313699c7b80a1e500c3098b236fbdbb59
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 18 03:03:39 2020 +0200

    data/signals.c: fix empty SIGINT/SIGPIPE messages
    
    src/cmd/ksh93/data/signals.c includes two checks for the JOBS
    identifier; if it is not defined then the interactive shell's
    background job signal messages for SIGINT and SIGPIPE are empty.
    The cause was that the "jobs.h" header, which defines that ID, was
    not #included in signals.c. This commit adds that #include.
    (ksh 93u+, ksh 93v- and ksh2020 all have this bug as well.)
    
    Before:
    
    $ sleep 30 &
    [1]     86430
    $ kill -s INT "$!"
    [1] +                          sleep 30 &
    $
    
    After:
    
    $ sleep 30 &
    [1]     86445
    $ kill -s INT "$!"
    [1] + Interrupt                sleep 30 &
    $

commit 13c3fb21e9c1c071818dabc0a2bc4ee3eb2a3ad6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 17 17:28:03 2020 +0200

    emacs, vi: Support repeat parameters to VT220 keys (re: f2a3f4e3)
    
    In the vi and emacs line editors, repeat count parameters can now
    also be used for the arrow keys and the forward-delete key. E.g.,
    in emacs mode, <ESC> 7 <left-arrow> will now move the cursor seven
    positions to the left. In vi control mode, this would be entered
    as: 7 <left-arrow>.
    
    src/cmd/ksh93/edit/emacs.c:
    - ed_emacsread(): Upon getting ^[ (ESC), save current repeat count
      in a new variable; restore and reset it upon the next character.
    - escape(): Minor bugfix: when processing a ^[[x sequence where 'x'
      is a character other than '~' (which would be DEL), also reinsert
      the final character into the buffer so scripts can detect them.
    
    src/cmd/ksh93/edit/vi.c:
    - cntlmode(): Do not reset the repeat count if the command is '[',
      the character following ESC in VT220 escape sequences.
    - mvcursor():
      * Do not use getcount() to get the character following '[', as
        that was parsing repetition parameters in the wrong place.
        There wouldn't be any, so this would reset the repeat count.
      * After that, no more need for the special-casing of ^[[3~ (DEL)
        introduced in f2a3f4e3. Move it to within the 'switch' block.
      * When handling left and right arrows and Home and End keys, do
        not modify cursor directly but ed_ungetchar() the corresponding
        traditional command keys as with the rest. Otherwise a repeat
        count parameter would now wrongly survive those keys.
    
    src/cmd/ksh93/sh.1:
    - Document control character notation used for vi mode docs.
    - Since vi control mode beeps and aborts on ESC except if a
      subsequent [ is already in the input buffer upon receiving ESC,
      document that VT220 escape sequences only preserve repeat counts
      when entered into the input buffer all at once.
    - Don't skip the initial ESC in the documentation of the VT220
      escape sequences. In control mode, skipping the initial ESC still
      works as before, but that is now undocumented, as it's really
      nothing more than an artefact of VT220 escape processing.
    - Move the two long paragraphs on '-o viraw' and canonical (i.e.
      line-based) input processing from the vi editor introduction to
      the options section under 'viraw'. It is much too arcane for the
      intro, and besides, ksh 93u+ (and hence also 93u+m) has
      SHOPT_VIRAW enabled by default, so the shell is compiled to force
      this option on at all times, making it even less relevant for
      most users.

commit c24c3dc0afea30db3517852dae0299e0ed3f8f03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 16 06:38:53 2020 +0200

    include/edit.h: cleanup: rm unused Edit_t struct members

commit 461a1aebc1eb8597f1a1ec6cd2b9e3d6d150d156
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 15 23:39:54 2020 +0200

    Fix memory leak in typeset (rhbz#1036470)
    
    A memory leak occurred when typeset was used in a function called
    from within a command substitution. This fix was backported from
    the 93v- beta by Red Hat on 22 Jan 2014. Source:
    https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-memlik3.patch
    
    src/cmd/ksh93/include/name.h,
    src/cmd/ksh93/sh/subshell.c:
    - Replace the nv_subsaved() function by the version from ksh 93v-.
      This version frees a table from memory if the NV_TABLE flag is
      passed in the new second parameter, a bitmask for flags (which
      was oddly named 'table'; I've renamed it to 'flags').
    
    src/cmd/ksh93/sh/name.c:
    - nv_delete(): When calling nv_subsaved(), pass on the NV_TABLE
      flag if given.
    - table_unset(): Call nv_delete() with the NV_TABLE flag.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add test based on the reproducer provided in Red Hat bug 1036470.

commit 05683ec75b4c7123143bf60c58f52c75e719cb45
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 15 07:47:38 2020 +0200

    Fix several memory leaks related to arrays (rhbz#921455)
    
    I now have access to some of the private bugs on the Red Hat bug
    tracker. This one doesn't have a lot of information on the patch,
    but it contains a good reproducer, so we can at least verify that
    it works.
    
    src/cmd/ksh93/sh/array.c,
    src/cmd/ksh93/sh/name.c:
    - Apply the patch associated with Red Hat bug #921455. Source:
      https://src.fedoraproject.org/rpms/ksh/blob/642af4d6/f/ksh-20120801-memlik.patch
      This was applied to Red Hat's ksh on 04 Jul 2013.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add leak tests for associative and indexed arrays in functions
      based on the reproducer from rhbz#921455.
    - Both tests still leak (though much less) when run in a locale
      other than C. For now, temporarily set the locale to C and add
      a TODO note. Perhaps another Red Hat patch is yet to fix this.

commit 16e4824c456dde259a765988534d479c8d8e8d75
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 15 05:50:08 2020 +0200

    emacs.c: unbreak menu-driven pathname completion (re: e8b3274a)
    
    One of the few AT&T fixes applied in early 2020 was a one-line
    change to emacs.c tab handling, with only this info in the commit
    message:
    
    |  - fix to emacs.c (I think from dgk)
    
    So, it's unknown what that was meant to accomplish, but I did just
    find that it breaks menu-driven pathname completion:
    
    $ ls arch/darwin.i386-64/
    1) bin/
    2) fun/
    3) include/
    4) lib/
    5) man/
    6) src/
    $ ls arch/darwin.i386-64/3      _
    
    Typing 3+TAB should have inserted 'include/' but inserted a literal
    tab instead. Reverting the vague "fix" fixes this bug.

commit f2a3f4e36b3ca7b71f56d579c15d104f03a0d900
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 15 00:49:05 2020 +0200

    Handle forward-delete key in emacs and vi editors
    
    On every modern system, the forward-delete key on PC/Mac keyboards
    generates the VT220 sequence ESC [ 3 ~. Every other shell with an
    editor handles this now, ksh93 seems to be the last not to.
    
    src/cmd/ksh93/edit/emacs.c: escape():
    - Handle the ^[[3 as part of normal escape processing, then read an
      extra character to check for the final '~'. If detected, insert
      an ERASECHAR key event.
    
    src/cmd/ksh93/edit/vi.c: mvcursor():
    - Replace the ^[[3~ sequence by an 'x' command. We have to
      special-case its processing, because vi mode parses numbers as
      repetition operators. The escape sequence contains a number,
      making it incompatible with normal command handling. This means
      number repetitions don't work with the forward-delete key. If
      that annoys anyone enough to fix it, a patch would be welcome.
      For now, it will do to make the forward-delete key stop
      exhibiting bizarre behaviour (beep + change case + move forward).
    
    src/cmd/ksh93/sh.1
    - Copy-edit emacs documentation for VT220-style sequences; map them
      to their actual key, otherwise it's meaningless to the reader.
    - Document the new forward-delete key behaviour for emacs mode.
    - Leave the forward-delete key for vi mode undocumented for now, as
      repetitions don't work, so it doesn't really match the vi canon.
      (OTOH, it doesn't work in vim, either...)

commit f0be4d95e862cebfd50f69f4f7a63f94dc8a1c61
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Sep 14 09:27:41 2020 +0200

    tests/io.sh: add proc subst FD leak test (re: ab5dedde)

commit d7c90eadc39ea3363ee6fe4f16ce0e2baecc81b1
Author: hyenias <58673227+hyenias@users.noreply.github.com>
Date:   Mon Sep 14 06:15:05 2020 -0400

    sfio: correct floating decimal point scaling of fractions (#131)
    
    _sfcvt(), "convert a floating point value to ASCII", did not adjust
    for negative decimal place movement as what happens with leading
    zeroes. This caused ksh's 'printf %f' formatter to fail to round
    floating point values correctly.
    
    src/lib/libast/sfio/sfcvt.c:
    - Removed constraint of <1e-8 for doubles by matching what was done
      for long doubles having <.1.
    - Corrected a condition when the next power of 10 occurred and that
      new 1 digit was being overwritten by a 0.
    
     src/cmd/ksh93/tests/math.sh:
    - Validate that typeset -E/F formatting matches that of their
      equivalent printf formatting options as well as checking for
      correct float scaling of the fractional parts.

commit 9f2066f146ae0d3ea733d9cccf5031273fb28e21
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 13 09:53:36 2020 +0200

    Improve fix for parentheses in param expansions (re: 5ed9ffd6)
    
    The fix was incomplete: expansions using '?' (${var?w(ord},
    ${var:?wo)rd}) still did not tolerate parentheses in the word
    as regular characters.
    
    It was also possible to simplify the fix by making use of the
    ST_BRACE (sh_lexstate7[]) state table. See data/lexstates.c and
    include/lexstates.h.
    
    src/cmd/ksh93/sh/lex.c: sh_lex(): case S_MOD1:
    - The previous fix tested for modifier operator characters : - + =
      as part of the S_MOD2 case, though they are defined as S_MOD1 in
      the ST_BRACE state table. It only worked because of the
      fallthrough. And it turns out the S_MOD1 case already had a
      similar fix, though incomplete. The new fix effectively cancelled
      the old one out as any S_MOD1 character eventually led to
      'continue'. So it can be simplified by removing most of that
      code, without causing any change in behaviour. Only the mode
      change to the ST_QUOTE state table followed by 'continue' is
      necessary. This also fixes it for the '?' operator as that is
      also defined as S_MOD1 in the ST_BRACE state table.
    
    src/cmd/ksh93/sh/macro.c:
    - When skipping a ${...} expansion using sh_lexskip(), use the
      ST_QUOTE state table if the character c is an S_MOD1 modifier
      operator character. This makes it consistent with the S_MOD1
      handling in sh_lex().
    
    src/cmd/ksh93/tests/variables.sh:
    - Update regression tests to include ? and :? operators.

commit ab5dedded7d08f8a954ab2c01672e6ae1897a04f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 12 19:52:47 2020 +0200

    Work around process substitution file descriptor leak
    
    File descriptors are not properly closed, causing a leak, when
    using a process substitution as an argument to a shell function.
    See: https://github.com/ksh93/ksh/issues/67
    
    Process substitution uses /dev/fd/NN pseudofiles if the kernel
    provides them. This is tested in src/cmd/ksh93/features/options
    which causes SHOPT_DEVFD to be defined if /dev/fd/9 can be used.
    If not, ksh uses a fallback mechanism involving a temporary FIFO,
    which works on all Unix variants.
    
    As it happens, the leak only occurs when using the /dev/fd
    mechanism. So, until a fix is found, we can work around the bug by
    disabling it. The FIFO mechanism might be slightly less robust,
    but it's an improvement over leaking file descriptors. Plus, there
    is room for improving it.
    
    src/cmd/ksh93/include/defs.h:
    - Unconditionally redefine SHOPT_DEVFD as 0 for now.
    
    src/cmd/ksh93/sh/args.c: sh_argprocsub():
    - pathtemp() does appropriate access checks using access(2), but
      there is an inherent race condition between calling it and
      mkfifo(). Make the FIFO mechanism more robust by handling errors,
      trying again if an error occurs that must have resulted from
      losing that race, e.g. file name conflict or temp dir
      permission/location change.
    - Initially create the FIFO without any permissions, then chmod()
      the appropriate user read/write permissions. Since mkfifo()
      honours the umask and chmod() does not, this ensures that process
      substitution continues to work if a shell script sets a umask
      that disallows user read or write. (The /dev/fd/ mechanism does
      not care about the umask, so neither should the fallback.)

commit 10cca4767b7479df01f74a3f36bb3d835a149827
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 12 18:28:10 2020 +0200

    libast: update /usr/tmp fallback to /var/tmp
    
    To find the temporary files directory to use, the pathtemp()
    function (generate a unique path to a temporary file) first checks
    $TMPDIR and $TMPPATH, then falls back to /tmp, then to /usr/tmp as
    a last resort. But all systems replaced /usr/tmp by /var/tmp
    decades ago to allow mounting /usr as read-only, and a /usr/tmp
    compatibility symlink is no longer commonly provided.
    
    src/lib/libast/path/pathtemp.c:
    - Change TMP2 definition from "/usr/tmp" to "/var/tmp".
    
    src/lib/libast/features/mmap,
    src/lib/libast/features/stdio:
    - Change "/usr/tmp" to "/var/tmp" in feature tests.

commit 2ae6e2cf55606c31962745dfdd0d1a0c2300eace
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 12 03:24:22 2020 +0200

    tests/builtins.sh: correctly count errors (re: 1bc2c74c)

commit ddaa145b3dfa9267a742bdae3a24adb31bdd7561
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 11 20:51:35 2020 +0200

    Reinstate 'r' and 'history' as preset aliases for interactive ksh
    
    Following a community discussion, it became clear that 'r' is
    particularly problematic as a regular builtin, as the name can and
    does conflict with at least one legit external command by that
    name. There was a consensus against removing it altogether and
    letting users set the alias in their login scripts. However,
    aliases are easier to bypass, remove or rename than builtins are.
    My compromise is to reinstate 'r' as a preset alias on interactive
    shells only, along with 'history', as was done in 17f81ebe before
    they were converted to builtins in 03224ae3. So this reintroduces
    the notion of predefined aliases to ksh 93u+m, but only for
    interactive shells that are not initialised in POSIX mode.
    
    src/cmd/ksh93/Makefile,
    src/cmd/ksh93/Mamfile,
    src/cmd/ksh93/include/shtable.h,
    src/cmd/ksh93/data/aliases.c:
    - Restore aliases.c containing shtab_aliases[], a table specifying
      the preset aliases.
    
    src/cmd/ksh93/include/shtable.h,
    src/cmd/ksh93/sh/init.c:
    - Rename inittree() to sh_inittree() and make it extern, because we
      need to use it in main.c (sh_main()).
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Init preset aliases from shtab_aliases[] only if the shell is
      interactive and not in POSIX mode.
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/tests/alias.sh:
    - unall(): When unsetting an alias, pass on the NV_NOFREE attribute
      to nv_delete() to avoid an erroneous attempt to free a preset
      alias from read-only memory. See: 5d50f825
    
    src/cmd/ksh93/data/builtins.c:
    - Remove "history" and "r" entries from shtab_builtins[].
    - Revert changes to inline fc/hist docs in sh_opthist[].
    
    src/cmd/ksh93/bltins/hist.c: b_hist():
    - Remove handling for 'history' and 'r' as builtins.
    
    src/cmd/ksh93/sh.1:
    - Update accordingly.
    
    Resolves: https://github.com/ksh93/ksh/issues/125

commit 777dfa3e59ee18fcbec900416d57c5df50b45d56
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 11 20:31:26 2020 +0200

    (k)sh.1: invocation-related edits for clarity and completeness

commit b9d10c5a9ce204a67bce0c62eefb81e9890f12fc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 11 09:33:29 2020 +0200

    Fix 'command' expansion bug and POSIX compliance
    
    The 'command' name can now result from an expansion, e.g.:
            c=command; "$c" ls
            set -- command ls; "$@"
    both work now. This fixes BUG_CMDEXPAN.
    
    If -o posix is on, 'command' now disables not only the "special"
    but also the "declaration" properties of builtin commands that it
    invokes. This is because POSIX specifies 'command' as a simple
    regular builtin, and any command name following 'command' is just
    an argument to the 'command' command, so there is nothing that
    allows any further arguments (such as assignment-arguments) to be
    treated specially by the parser. So, if and only if -o posix is on:
    a. Arguments that start with a variable name followed by '=' are
       always treated as regular words subject to normal shell syntax.
    b. Since assignment-arguments are not processed as assignments
       before the command itself, 'command' can now stop the shell from
       exiting (as required by the standard) if a command that it
       invokes (such as 'export') tries to modify a readonly variable.
       This fixes BUG_CMDSPEXIT.
    
    Most of 'command' is integrated in the parser and parse tree
    executer, so that is where it needed fixing.
    
    src/cmd/ksh93/sh/parse.c: simple():
    - If the posix option is on, do not skip past SYSCOMMAND so that
      any declaration builtin commands that are arguments to 'command'
      are not detected and thus not treated specially at parsetime.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - When detecting SYSCOMMAND in order to skip past it, not only
      compare the Namval_t pointer 'np' to SYSCOMMAND, but also handle
      the case where that pointer is NULL, as when the command name
      results from an expansion. In that case, search the function tree
      shp->fun_tree for the name and see if that yields the SYSCOMMAND
      pointer. fun_tree is initialised with a dtview to bltin_tree, so
      searching fun_tree instead allows for overriding 'command' with a
      shell function (which the POSIX standard requires us to allow).
    
    src/cmd/ksh93/sh.1,
    src/cmd/ksh93/data/builtins.c:
    - Update documentation to match these changes.
    - Various related edits and improvements.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Check that 'command' works if resulting from an expansion.
    - Check that 'command' can be overridden by a shell function.

commit 092b90da81f1ab1d45495052615fb4bf83a25d03
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 9 20:02:20 2020 +0200

    Fix BUG_LOOPRET2 and related return/exit misbehaviour
    
    The 'exit' and 'return' commands without an argument failed to pass
    down the exit status of the last-run command when incorporated in a
    block with redirection, &&/|| list, 'case' statement, or 'while',
    'until' or 'for' loop.
    
    src/cmd/ksh93/bltins/cflow.c:
    - Use $?, which is sh.savexit a.k.a. shp->savexit, as the default
      exit status value if there is no argument, instead of
      shp->oldexit. This fixes the default exit status behaviour to
      match POSIX and other shells.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/include/shell.h:
    - Remove now-unused sh.oldexit (a.k.a. shp->oldexit) private struct
      member. It appeared to fulfill the same function as sh.savexit,
      but in a slightly broken way.
    - Move the savexit/$? declaration from the _SH_PRIVATE part of the
      struct definition to the public API part. Since $? uses this,
      it's clearly a publicly exposed value already, and this is
      generally the one to use. (If anything, it's exitval that should
      have been private.) This declares savexit right next to exitval,
      rewriting the comments to clarify the difference between them.
    
    src/cmd/ksh93/sh/fault.c,
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - Remove assignments to shp->oldexit.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add thorough regression tests for the default exit status
      behaviour of 'return' and 'exit' in various lexical contexts.
    - Verify that 'for' and 'case' without any command, as well as a
      lone redirection, still correctly reset the exit status to 0.
    
    Fixes: #117

commit 400c107773bc18833385c8fc6aa10f1a66d56e99
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Sep 7 19:20:18 2020 -0700

    Fix compile with -D_std_malloc (re: f9c127e) (#130)
    
    src/cmd/ksh93/include/jobs.h:
    - The commit that removed legacy code mistakenly removed the
      definition of vmbusy() required for ksh to compile with
      -D_std_malloc. Ksh assumes vmbusy is always a macro, even
      when _std_malloc is defined. This commit reintroduces the
      _std_malloc definition of vmbusy to fix undefined
      reference errors.

commit 6d0c4ac55f11f961e3f52f16c96b2cc2a03bd150
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Sep 6 22:40:17 2020 +0200

    tests/coprocess.sh: fix rare fail (re: 712261c8)
    
    A coprocess cleanup test could fail on rare occasions because I had
    lowered the 'sleep 1' between two test coprocesses to 'sleep .1'.
    This increases the sleep to prevent future spurious fails.
    
    Fixes: https://github.com/ksh93/ksh/issues/129

commit e1c41bb2de3f0691e7875534495135b0617813f5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 19:31:28 2020 +0200

    Fix subshell leak for 3 special variables (re: 417883df, bd3e2a80)
    
    Using a process of elimination I've identified ${.sh.level}
    (SH_LEVELNOD) as the cause of the crash. This node apparently
    cannot be copied or moved without destabilising the shell. It
    contains the current depth of function calls and it cannot be
    changed by assignment, so this is not actually a problem.
    Meanwhile, this commit re-fixes it for the other three.
    
    src/cmd/ksh93/sh/subshell.c:
    - Simplify sh_assignok() by removing special-casing for L_ARGNOD,
      SH_SUBSCRNOD and SH_NAMENOD. 'add' now has 3 modes (0, 1, 2).
    - The test for a ${ subshare; } was actually wrong. sp->subshare is
      a saved backup value. We must test shp->subshare. (re: a9de50bf)
    
    src/cmd/ksh93/bltins/typeset.c:
    - setall(): Update the mode 3 sh_assignok() call.
    
    src/cmd/ksh93/tests/variables.sh:
    - Regress-test subshell leaks for all special variables except
      ${.sh.level}.

commit 417883dfdd4a39bd882285e74f6fbe9b1aea47a3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 16:48:17 2020 +0200

    Revert "Fix subshell leak for 4 special variables (re: bd3e2a80)"
    
    This reverts commit b3d37b00b0d46d434c90b4e5a3673fc3f5d5a197.
    While ksh's own regression test suite passed just fine, when
    running the modernish[*] regression tests uite, ksh either froze
    hard (needing SIGKILL) or threw a spurious syntax error.
    Cause unknown, but I'm certainly reverting until I find out.
    
    This reintroduces a subshell leak for four special variables.
    
    [*] https://github.com/modernish/modernish

commit 5ed9ffd6c49bbc7114b5762d7cb228f3e43dc8ab
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 16:20:22 2020 +0200

    This fixes erroneous syntax errors in parameter expansions such as
    ${var:-wor)d} or ${var+w(ord}. The parentheses now correctly lose
    their normal grammatical meaning within the braces. Fix by Eric
    Scrivner (@etscrivner) from July 2018 backported from ksh2020.
    
    This fix complies with POSIX:
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02
    
    src/cmd/ksh93/sh/lex.c: sh_lex():
    - Set the ST_QUOTE state when analysing a modifier with parameter
      expansions using operators ':', '-', '+', '='. This state causes
      subsequent characters (including parentheses) to be considered
      quoted, suppressing their normal grammatical meaning.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Same for skipping the expansion.
    
    Fixes: https://github.com/ksh93/ksh/issues/126
    Prior discussion: https://github.com/att/ast/issues/475

commit b3d37b00b0d46d434c90b4e5a3673fc3f5d5a197
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 13:57:39 2020 +0200

    Fix subshell leak for 4 special variables (re: bd3e2a80)
    
    The following special variables leaked out of a subshell:
    $_, ${.sh.name}, ${.sh.level}, ${.sh.subscript}.
    This was due to a faulty optimisation in sh_assignok().
    bd3e2a80 fixed that in part, this fixes the rest.
    
    src/cmd/ksh93/sh/subshell.c:
    - Simplify sh_assignok() by removing special-casing for these four
      special variables. The 'add' param reverts to a simple boolean.
    - The test for a ${ subshare; } was actually wrong. sp->subshare is
      a saved backup value. We must test shp->subshare. (re: a9de50bf)
    
    src/cmd/ksh93/bltins/typeset.c:
    - setall(), unall(): Update sh_assignok() calls.
    
    src/cmd/ksh93/tests/variables.sh:
    - Regress-test subshell leaks for all special variables.
    
    Closes: #122

commit 00d439605f2ff0f10883f4ba235594a143869731
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 10:33:50 2020 +0200

    -o posix: don't import/export variable attributes thru environment
    
    When exporting variables, ksh exports their attributes (such as
    'integer' or 'readonly') in a magic environment variable called
    "A__z" (string defined in e_envmarker[] in data/msg.c). Child
    shells recognise that variable and restore the attributes.
    
    This little-known feature is risky; the environment cannot
    necessarily be trusted and that A__z variable is easy to manipulate
    before or between ksh invocations, so you can cause a script's
    variables to be of the wrong type, or readonly. Backwards
    compatibility requires keeping it, at least for now. But it should
    be disabled in the posix mode, as it violates POSIX.
    
    To do this, we have to solve a catch-22 in init.c. We must parse
    options to know whether to turn on posix mode; it may be specified
    as '-o posix' on the command line. The option parsing loop depends
    on an initialised environment[*], while environment initialisation
    (i.e., importing attributes) should depend on the posix option.
    
    The catch-22 can be solved because initialising just the values
    before option parsing is enough to avoid regressions. Importing the
    attributes can be delayed until after option parsing. That involves
    basically splitting env_init() into two parts while keeping a local
    static state variable between them.
    
    src/cmd/ksh93/sh/init.c:
    - env_init():
      * Split the function in two stages based on a new
        'import_attributes' parameter. Import values in the first
        stage; import attributes from A__z in the second (if ever).
        Make the 'next' variable static as it keeps a state needed for
        the attributes import stage.
      * Single point of truth, greppability: don't hardcode "A__z" in
        separate character comparisons, but use e_envmarker[].
      * Fix an indentation error.
    - sh_init(): When initialising the environment (env_init), don't
      import the attributes from A__z yet; parse options first, then
      import attributes only if posix option is not set.
    
    src/cmd/ksh93/sh/name.c:
    - sh_envgen(): Don't export variable attributes to A__z if the
      posix option is set.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Check that variable attributes aren't imported or exported
      if the POSIX option is set.
    
    src/cmd/ksh93/sh.1:
    - Update.
    
    This was the last item on the TODO list for -o posix for now.
    Closes: #20
    
    [*] If environment initialisation is delayed until after option
        parsing, bin/shtests shows various regressions, including:
        restricted mode breaks; the locale is not initialised properly
        so that multibyte variable names break; $SHLVL breaks.

commit 20fcf229731bdc4cfdd65fc2900f17df8dd39e41
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 10:26:03 2020 +0200

    tests/attributes.sh: tweak: loop thru array subscripts (re: a2f13c19)

commit 6affd23601439e2e00e29fbff5cf4eb627647ecb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 09:43:22 2020 +0200

    Remove problematic check for standards env vars (re: 921bbcae)
    
    This commit removes the following standards check on init:
    
            strcmp(astconf("CONFORMANCE",0,0),"standard")==0
    
    This also checks for the POSIXLY_CORRECT variable; the libast
    configuration system uses it to set "CONFORMANCE" to "standard",
    *but*, only if that parameter wasn't already initialised from the
    _AST_FEATURES environment variable (see 'getconf --man').
    
    Problem is, there is a harmful interaction between POSIXLY_CORRECT
    and _AST_FEATURES. If the latter exists, it overrides the former.
    Not only that, merely querying CONFORMANCE makes astconf create and
    export the _AST_FEATURES variable, propagating the current setting
    to child ksh processes, which will then ignore POSIXLY_CORRECT.
    
    We could get around this by simply using getenv("POSIXLY_CORRECT").
    But then the results may be inconsistent with the AST config state.
    
    The whole thing may not be the best idea anyway. Honouring
    POSIXLY_CORRECT at startup introduces a backwards compatibility
    issue. Existing scripts or setups may export POSIXLY_CORRECT=y to
    put external GNU utilities in standards mode, while still expecting
    traditional ksh behaviour from newly initialised shells.
    
    So it's probably better to just get rid of the check. This is not
    bash, after all. If ksh is invoked as sh (the POSIX standard
    command name), or with '-o posix' on the command line, you get the
    standards mode; that ought to be good enough.
    
    src/cmd/ksh93/sh/init.c: sh_init():
    - Remove astconf call as per above.

commit ca9de42d5983c13c4b302b39857fa9df279cea59
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Sep 5 06:21:32 2020 +0200

    -o posix: minor manpage/usage tweaks (re: 921bbcae)

commit 3ede73aa33801c7a60a364518e213566ed2e1d6c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 4 20:51:29 2020 +0200

    fix "$-" expansion for posix option (re: 921bbcae)
    
    In the SHOPT_BASH code, the -o posix option was given a '\374'
    (0xFC, 252) single-letter option character. Reasons unclear. The
    'set' builtin doesn't accept it. It can be omitted and the option
    still works. And it caused the "$-" expansion (listing active
    short-form options) to include that invalid high-bit character if
    the -o posix option is active, which is clearly wrong.
    
    src/cmd/ksh93/sh/args.c: optksh[], flagval[]:
    - Remove '\374' one-letter option equivalent for SH_POSIX.
    
    src/cmd/ksh93/tests/options.sh:
    - Add test verifying that '-o posix' does not affect "$-".

commit bec6556236759f5d5959a1ce8bcba03ed7d7844b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 4 05:29:52 2020 +0200

    update NEWS, SH_RELEASE (re: 6575903d)

commit 6575903d1da378e65e4444483d46664b81ef34e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Sep 4 04:54:35 2020 +0200

    Fix ${!} and ${$} throwing syntax error in here-document
    
    The inclusion of the special parameter expansions ${!} and ${$}
    (including the braces) in a here-document caused a syntax error.
    Bug reported by @Saikiran-m on Github.
    
    src/cmd/ksh93/data/lexstates.c: sh_lexstate7[]:
    - Change the state for ! (33) and $ (36) from S_ERR to 0. State
      table 7 is for skipping over ${...}, so this avoids the S_ERR
      state being invoked in sh_lex() (lex.c) for these characters
      while skipping ${...} in a here-doc.
    
    src/cmd/ksh93/tests/heredoc.sh:
    - Test evaluating the braces expansion form for all special
      parameters (@ * # ! $ - ? 0) in a here-document.
    
    Fixes: https://github.com/ksh93/ksh/issues/127

commit f9c127e39e03c12ab6adcbf06c1260bde9e3a7af
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Sep 3 02:27:15 2020 +0200

    Remove legacy code for older libast versions
    
    Since ksh 93u+m comes bundled with libast 20111111, there's no need
    to support older versions, so this is another cleanup opportunity.
    
    src/cmd/ksh93/include/defs.h:
    - Throw an #error if AST_VERSION is undefined or < 20111111.
      (Note that _AST_VERSION is the same as AST_VERSION, but the
      latter is newer and preferred; see src/lib/libast/features/api)
    
    All other changed files:
    - Remove legacy code for versions older than the currently used
      versions, which are:
      _AST_VERSION    20111111
      ERROR_VERSION   20100309
      GLOB_VERSION    20060717
      OPT_VERSION     20070319
      SFIO_VERSION    20090915
      VMALLOC_VERSION 20110808

commit 8d7f616e75c58590f0a7addc1d4ff97a27204694
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 2 15:52:41 2020 +0100

    Remove abandoned SHOPT_ENV experiment
    
    SHOPT_ENV is an undocumented compile-time option implementing an
    experimental method for handling environment variables, which is
    implemented in env.h and env.c. There is no mention in the docs or
    Makefile, and no mention in the mailing list archives. It adds no
    new functionality, but at first glance it's a clean-looking
    interface.
    
    However, unfortunately, it's broken. Compiling with -DSHOPT_ENV
    added to CCFLAGS causes bin/shtests to show these regressions:
    
    functions.sh[341]: export not restored name=value function call -- expected 'base', got ''
    functions.sh[1274]: Environment variable is not passed to a function
    substring.sh[236]: export not restored name=value function call
    variables.sh[782]: SHLVL should be 3 not 2
    
    In addition, 'export' stops working on unset variables.
    
    In the 93v- beta this code is still present, unchanged, though 93v-
    made lots of incompatible changes. By the time ksh2020 noticed it,
    it was no longer compiling, so it probably wasn't compiling in the
    93v- beta either. Discussion: https://github.com/att/ast/issues/504
    So the experiment was already abandoned by D. Korn and his team.
    
    Meanwhile it was leaving sh/name.c with two versions of several
    enviornment-related functions, and it's not clear which one is
    actually compiled without doing detective work tracing header files
    (most of the code was made conditional on _ENV_H, which is defined
    in env.h, which is included by defs.h if SHOPT_ENV is defined).
    This actively hinders understanding of the codebase. And any
    changes to these functions would need to be implemented twice.
    
    src/cmd/ksh93/include/env.h,
    src/cmd/ksh93/sh/env.c:
    - Removed.
    
    src/cmd/ksh93/DESIGN,
    src/cmd/ksh93/Makefile,
    src/cmd/ksh93/Mamfile:
    - Update accordingly.
    
    All other changed files:
    - Remove deactivated code behind SHOPT_ENV and _ENV_H.

commit bc4dbe0627261d767d0c3ad7bdce1a1baa8a8e16
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 2 15:51:02 2020 +0100

    shtests: add ${.sh.pid} to PS4/xtrace (re: 9de65210)

commit 539564103604dc698e662948e033e52ce5a0aafd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Sep 2 06:02:40 2020 +0100

    shtests: cd to each test set's temp dir before running
    
    An oops in tests/io.sh (re: c607c48c) wrote temporary files outside
    $tmp and into src/cmd/ksh93/tests. Let's fix this properly so it
    doesn't happen again.
    
    src/cmd/ksh93/tests/shtests:
    - Start each test set in its own temporary directory by default.
    
    src/cmd/ksh93/tests/*.sh:
    - Refuse to run if $tmp != $PWD.
    - Related cleanups.

commit 55f0f8ce52ec39a797a745031a60816f998ce01a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 20:24:44 2020 +0100

    -o posix: disable '[ -t ]' == '[ -t 1 ]' hack
    
    On ksh93, 'test -t' is equivalent to 'test -t 1' (and of course
    "[ -t ]" is equivalent to "[ -t 1 ]").
    
    This is purely for compatibility with ancient Bourne shell
    breakage. No other shell supports this. ksh93 should probably keep
    it for backwards compatibility, but it should definitely be
    disabled in POSIX mode as it is a violation of the standard; 'test
    -t' is an instance of 'test "$string"', which tests if the string
    is empty, so it should test if the string '-t' is empty (quod non).
    
    This also replaces the fix for 'test -t 1' in a command
    substitution with a better one that avoids forking (re: cafe33f0).
    
    src/cmd/ksh93/sh/parse.c:
    - qscan(): If the posix option is active, disable the parser-based
      hack that converts a simple "[ -t ]" to "[ -t 1 ]".
    
    src/cmd/ksh93/bltins/test.c:
    - e3(): If the posix option is active, disable the part of the
      compatibility hack that was used for compound expressions
      that end in '-t', e.g. "[ -t 2 -o -t ]".
    - test_unop(): Remove the forking fix for "[ -t 1 ]".
    
    src/cmd/ksh93/edit/edit.c:
    - tty_check(): This function is used by "[ -t 1 ]" and in other
      contexts as well, so a fix here is more comprehensive. Forking
      here would cause a segfault, but we don't actually need to. This
      adds a fix that simply returns false if we're in a virtual
      subshell that is also a command substitution. Since command
      substitutions always fork upon redirecting standard output within
      them (making them no longer virtual), it is safe to do this.
    
    src/cmd/ksh93/tests/bracket.sh
    - Add comprehensive regression tests for test/[/[[ -t variants in
      command substitutions, in simple and compound expressions, with
      and without redirecting stdout to /dev/tty within the comsub.
    - Add tests verifying that -o posix disables the old hack.
    - Tweak other tests, including one that globally disabled xtrace.

commit 9077fcc3a4670abf2376c21db10dbd8259fb4eab
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 15:43:54 2020 +0100

    shtests: refuse to run if no /dev/tty (re: 14632361)

commit 5e21cacf7ad4b55aaf5814173b017e795b5962f9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 09:08:04 2020 +0100

    init: fix sh detection (re: 921bbcae)
    
    ksh was enabling POSIX mode on init if it was invoked as any name
    that merely started with 'sh' (after parsing initial 'r'). This
    included shcomp, which was bad news.
    
    src/cmd/ksh93/sh/init.c: sh_type():
    - Check that the 'sh' is at the end of the string by checking
      for a final zero byte.
    - On Windows (_WINIX, see src/lib/libast/features/common), allow
      for a file name extension (sh.exe) by checking for a dot as well.

commit c607c48c84dc29b994d397bc31c8bd6fe6a9201b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 08:36:28 2020 +0100

    Revert <> redir FD except in posix mode (re: eeee77ed, 60516872)
    
    eeee77ed implemented a POSIX compliance fix that caused a potential
    incompatibility with existing ksh scripts; it made the (rarely
    used) read/write redirection operator, <>, default to file
    descriptor 0 (standard input) as POSIX specified, instead of 1
    (standard output) which is traditional ksh93 behaviour. So ksh
    scripts needed to change all <> to 1<> to override the new default.
    
    This commit reverts that change, except in the new posix mode.
    
    src/cmd/ksh93/sh/lex.c:
    - Make FD for <> default to 0 in POSIX mode, 1 otherwise.
    
    src/cmd/ksh93/tests/io.sh:
    - Revert <> regression test changes from 60516872; we no longer
      need 1<> instead of <> in ksh code.

commit fd977388a265b1c4e3199f0ba7880986fb9d089a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 08:11:27 2020 +0100

    -o posix: allow invoked programs to inherit FDs > 2
    
    If there are file descriptors > 2 opened with 'exec' or 'redirect',
    ksh93 has always closed them when invoking another pogram. This is
    contrary to POSIX which states:
        Utilities other than the special built-ins […] shall be invoked
        in a separate environment that consists of the following. The
        initial value of these objects shall be the same as that for
        the parent shell, except as noted below.
        * Open files inherited on invocation of the shell, open files
          controlled by the exec special built-in plus any
          modifications, and additions specified by any redirections to
          the utility
        * […]
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_12
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - When flag==2, do not close FDs > 2 if POSIX mode is active.
    
    src/cmd/ksh93/tests/io.sh:
    - Regress-test inheriting FD 7 with and without POSIX mode.
    
    src/cmd/ksh93/sh.1:
    - Update.

commit b301d41731945fe0a537277abc43f0410bff1e3f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 07:16:51 2020 +0100

    -o posix: always recognise octals in "let" builtin
    
    Though the "let" builtin is not itself a POSIX standard command, it
    processes standard shell arithmetic, so it should recognise octals
    by leading zeros as POSIX requires if the 'posix' option is on.
    This overrides the setting of the 'letoctal' option.
    
    Note that none of this applies to the ((...)) arithmetic command,
    which has always recognised leading-octal zeros and does not listen
    to 'letoctal'. So setting the posix mode makes this consistent.
    
    src/cmd/ksh93/sh/arith.c:
    - When running the 'let' builtin, test that both SH_LETOCTAL and
      SH_POSIX are off before stripping leading zeros to disable octal
      number recognition.
    - Cosmetic: fix spurious newline.
    
    src/cmd/ksh93/sh.1:
    - Document the change.
    
    src/cmd/ksh93/tests/shtests:
    - Make sure to disable posix mode by default for regression tests.

commit 921bbcaeb706729a87bded701f02ea4c07fada08
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 06:19:19 2020 +0100

    Remove SHOPT_BASH; keep &> redir operator, '-o posix' option
    
    On 16 June there was a call for volunteers to fix the bash
    compatibility mode; it has never successfully compiled in 93u+.
    Since no one showed up, it is now removed due to lack of interest.
    
    A couple of things are kept, which are now globally enabled:
    
    1. The &>file redirection shorthand (for >file 2>&1). As a matter
       of fact, ksh93 already supported this natively, but only while
       running rc/profile/login scripts, and it issued a warning. This
       makse it globally available and removes the warning, bringing
       ksh93 in line with mksh, bash and zsh.
    
    2. The '-o posix' standard compliance option. It is now enabled on
       startup if ksh is invoked as 'sh' or if the POSIXLY_CORRECT
       variable exists in the environment. To begin with, it disables
       the aforementioned &> redirection shorthand. Further compliance
       tweaks will be added in subsequent commits. The differences will
       be fairly minimal as ksh93 is mostly compliant already.
    
    In all changed files, code was removed that was compiled (more
    precisely, failed to compile/link) if the SHOPT_BASH preprocessor
    identifier was defined. Below are other changes worth mentioning:
    
    src/cmd/ksh93/sh/bash.c,
    src/cmd/ksh93/data/bash_pre_rc.sh:
    - Removed.
    
    src/cmd/ksh93/data/lexstates.c,
    src/cmd/ksh93/include/shlex.h,
    src/cmd/ksh93/sh/lex.c:
    - Globally enable &> redirection operator if SH_POSIX not active.
    - Remove warning that was issued when &> was used in rc scripts.
    
    src/cmd/ksh93/data/options.c,
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/args.c:
    - Keep SH_POSIX option (-o posix).
    - Replace SH_TYPE_BASH shell type by SH_TYPE_POSIX.
    
    src/cmd/ksh93/sh/init.c:
    - sh_type(): Return SH_TYPE_POSIX shell type if ksh was invoked
      as sh (or rsh, restricted sh).
    - sh_init(): Enable posix option if the SH_TYPE_POSIX shell type
      was detected, or if the CONFORMANCE ast config variable was set
      to "standard" (which libast sets on init if POSIXLY_CORRECT
      exists in the environment).
    
    src/cmd/ksh93/tests/options.sh,
    src/cmd/ksh93/tests/io.sh:
    - Replace regression tests for &> and move to io.sh. Since &> is
      now for general use, no longer test in an rc script, and don't
      check that a warning is issued.
    
    Closes: #9
    Progresses: #20

commit 84331a96fc064ba85076191236553bf225059a76
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Sep 1 03:10:30 2020 +0100

    'test --man --': fix a few errors (re: 77beec1e)

commit 77beec1e0dc397420538bffa2262a761cd0351d9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 31 23:43:22 2020 +0100

    restore 'test --man --' oddness (re: fa6a180f)
    
    Following a community objection to its removal, the inline 'test'
    manual page along with its strange method of invocation is
    restored. I've taken the opportunity to correct several mistakes,
    add some missing info, do some copy-editing, and document the way
    to get these docs in the main (k)sh.1 manual.
    
    Discussion:
    https://github.com/ksh93/ksh/commit/fa6a180f#commitcomment-41897553

commit fa6a180fdde09401e0eb85df0ac0208040eb836c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 30 07:47:20 2020 +0100

    test/[: remove effectively inaccessible self-doc
    
    Did you know that you could get a manual page for the 'test'/'['
    builtin command using one of these strange command lines?
    
            test --man --
    
            [ --man -- ]
    
    Neither did I. It's not documented or mentioned anywhere (and this
    syntax violates POSIX). So nobody knows about it, which makes that
    documentation useless. (The regular --man option doesn't work
    because that would break 'test'.) I only found out how to invoke it
    when I understood what the uncommented C code handling this does.
    
    The test/[ command's self-documentation is unmaintained since 2003
    and somewhat incomplete. It's also mostly redundant with the
    documentation on Conditional Expressions in the main (k)sh.1 manual
    page. But unlike the latter, this is resident in RAM, wasting
    working memory in every shell process.
    
    src/cmd/ksh93/sh.1:
    - Add documentation for 'test'/'[' commands (yes, they were not
      mentioned in the main manual page until now), describing them
      in terms of differences from '[[' and recommending the latter.
    
    src/cmd/ksh93/include/test.h,
    src/cmd/ksh93/bltins/test.c,
    src/cmd/ksh93/data/testops.c:
    - Remove RAM-resident --man doc for test/[ command.
    - Remove the bizarre option parsing that allowed invoking it.

commit cd2cf236c2a0ef04c7cdf6653ecb3a48fa6ab151
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 30 05:29:21 2020 +0100

    test/[: use a shell state bit (re: 7003aba4)
    
    Instead of a global 'sh_in_test_builtin' integer flag, it is nicer
    to use the mechanism for shell state bits, which was designed for
    this sort of thing.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/defs.c:
    - Remove global sh_in_test_builtin integer.
    - Define new SH_INTESTCMD state bit.
    
    src/cmd/ksh93/bltins/test.c: _ERROR_exit_b_test(), b_test():
    - Use the new state bit.

commit 42301639d661e95b3249a2e9a36f4dd8784a7a09
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 30 03:59:12 2020 +0100

    '#if 0' cleanup
    
    This removes various blocks of uncommented experimental code that
    was disabled using '#if 0' or '#if 1 ... #else' directives. It's
    hard or impossible to figure out what the thoughts behind them
    might have been, and we can really do without those distractions.

commit f8feed1bd2031b0abd7e481a9c890837dc57d105
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 29 22:45:04 2020 +0100

    SHOPT_MULTIBYTE-related cleanup (re: 8477d2ce)
    
    As of 8477d2ce, the mbwide() macro (which tests if we're in a
    multibyte locale, i.e. UTF-8) is redefined as a constant 0 if we're
    compiling without SHOPT_MULTIBYTE. See src/cmd/ksh93/include/defs.h
    
    The other multibyte macros use mbwide() as well, so they all revert
    to the single-byte fallbacks in that case, and the multibyte code
    in them is never compiled. See src/lib/libast/include/ast.h
    
    Consequently we can now do a bit of cleanup and get rid of many of
    the '#if SHOPT_MULTIBYTE' directives, as the compiler optimiser
    will happily remove the multibyte-specific code. This increases the
    legibility of the ksh code.
    
    I'm taking the opportunity to fix a few typos and whitespace
    formatting glitches as well.

commit 7c5d39fa04a4bf14e82a69646365a2a5ee141ed4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 29 21:52:29 2020 +0100

    Refactor "$*" multibyte handling (re: 8b5f11dc)
    
    The first of the two multibyte fixes from 8b5f11dc (which was for
    using the first character of IFS as an output field separator when
    expanding "$*" and similar) had a minor backwards compatibility
    problem: if $IFS started with a byte sequence that is not a valid
    UTF-8 character, then it treated IFS as empty in UTF-8 locales, so
    the fields would be joined without any separator. The expected
    behaviour would be for it to fall back to using the first byte of
    IFS as it used to (and as bash and zsh do).
    
    The new code handling this was also a bit kludgy and inefficient,
    repeating the mbsize() calculation for every byte of the separator
    character and for every field joined by the expansion.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - Rewrite code for joining fields for $* in a quoted or scalar
      context and $@ in a scalar context, eliminating a confusing 'd'
      variable and concentrating the routine in one block.
    - When expanding $* with a multibyte separator (first character
      of $IFS), only calculate the size in bytes once per expansion.
    - If $IFS starts with a byte sequence that represents an invalid
      multibyte character, fall back to using the first byte.
    
    src/cmd/ksh93/tests/variables.sh:
    - Tweak some regression tests, including one that overwrote $LANG.
    - Add test for invalid multibyte character behaviour as per above.

commit 8f813bb0a32c0496c512f6f2f894eef2ade4232a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 26 14:19:51 2020 -0700

    Fix a file descriptor leak when fstat errors out with EIO (#120)
    
    src/cmd/ksh93/sh/path.c: canexecute():
    - Close file descriptors inside of the err label. This fixes
      a file descriptor leak that occurs when open succeeds but
      fstat fails with EIO. The previous code only returned -1
      after 'goto err', leaving the opened file descriptor
      inaccessible. This bugfix was backported from ksh2020:
      https://github.com/att/ast/commit/55cad1d

commit e08ca80d15baa21e20ec0c093fb5f02843b7fc14
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 26 17:11:18 2020 +0100

    bin/package: do not use previously compiled shell
    
    The package script searches for a good shell to run the build
    scripts, preferring a ksh. But it also finds any recently compiled
    development version of ksh in arch/*/bin that may be broken, or
    have debug code, etc. -- and uses that in preference to anything
    else. This is quite capable of breaking the build process.
    
    The way to get around it is to do something like
            bin/package make SHELL=/bin/ksh
    which is annoying to have to keep doing.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - When finding a good shell, use the saved user path ($path), not
      the current $PATH which includes arch/$HOSTTYPE/bin. Prefix this
      temporary path with `getconf PATH`, the system's default path,
      so that known-good system shells are found first.

commit 42092187a769f9ff90dddd4bef8d923b1d5d188a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 25 20:57:21 2020 +0100

    TODO: rm done item (re: 42d16511)

commit 9b45f2ccbecf88e1e237a2c118b3d8ffe84efba0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 23 23:41:31 2020 +0100

    build system: modernise shell compatibility checks
    
    All changed files:
    - Put the shell in POSIX mode if it has an '-o posix' option.
    - Remove nonsense disabling 'set -x' on bash. It's not broken.
    
    bin/package, src/cmd/INIT/package.sh:
    - Add check blocking native zsh mode (e.g., "$path" conflicts).
      Using a 'sh -> zsh' symlink works, so recommend that.
    - Remove old ksh93 version check for a supposed conflict with
      libcmd. It was broken; it would revert to /bin/sh, but on illumos
      distributions, /bin/sh is a ksh93 of a version that is supposedly
      affected. It builds fine anyway.
    - Rewrite checksh() to incorporate the shell compatibility checks
      that were previously in two different places in 'package'.
    
    bin/ignore, src/cmd/INIT/ignore.sh,
    bin/silent, src/cmd/INIT/silent.sh:
    - Change bad check for a full POSIX 'export' command (no, $RANDOM
      has nothing to do with that) with a proper feature test.

commit 42d1651108831c391dca5b5284ca9ba2c4ae94ce
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 23 19:20:33 2020 +0100

    iffe: fix broken shell detection; allow building on NetBSD 9.0
    
    The shell detection test assumed that any shell that has $RANDOM
    and isn't bash must be ksh and have the 'print' built-in command.
    This broke iffe on NetBSD 9.0 sh, which has $RANDOM but not 'print'.
    
    src/cmd/INIT/iffe.sh:
    - Rewrite shell detection test to test for features actually used
      by iffe. "$shell" can now have the values 'bsh' for an ancient
      pre-POSIX Bourne shell, 'bash' for bash, 'ksh' for a shell with
      'let', 'typeset -u' and 'print' (ksh88, ksh93, mksh, pdksh, zsh),
      and 'posix' for another POSIX or POSIX-ish shell with modern
      command substitutions and parameter substitutions. (The 'posix'
      value currently is not actively checked for anywhere, but avoids
      unnecessary use of bsh fallbacks.)

commit 506bd2b23aed5c363d363714ab6b1858feecba50
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 22 16:03:01 2020 +0100

    fix SHOPT_REGRESS crash
    
    If ksh was compiled with -DSHOPT_REGRESS=1, it would immediately
    segfault on init. After fixing that, another segfault remained that
    occurred when using the --regress= command line option with an
    invalid option-argument.
    
    The __regress__ builtin allows tracing a few things (see
    '__regress__ --man' after compiling with -DSHOPT_REGRESS=1, or
    usage[] in src/cmd/ksh93/bltins/regress.c). It seems of limited
    use, but at least it can be used/tested now.
    
    src/cmd/ksh93/sh/init.c: sh_init():
    - Move the call to sh_regress_init() up. The crash on init was
      caused by geteuid() being intercepted by regress.c before the
      shp->regress (== sh.regress) pointer was initialised.
    - The builtin can also be called using a --regress= option-argument
      on the ksh command line. Before calling b___regress__() to parse
      that, temporarily change error_info.exit so any usage error calls
      exit(3) instead of sh_exit(), as the latter assumes a fully
      defined shell state and this call is done before the shell is
      fully initialised.

commit f89fc2c7139d6c606e84268d0bcaf44c126144df
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 21 19:55:23 2020 +0100

    tests/leaks.sh: add test for PATH reset leak triggered by nmake build

commit 52dc071a56680fb1a2550fb78b6b1f9ea43d83c2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 20 22:47:51 2020 +0100

    bin/package: fix a POSIX-ism (re: 3552a2ba)
    
    The INIT scripts are supposed to be Bourne shell scripts, not
    POSIX, so we can't use $( ... ) command substitutions.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Change a POSIX command substitution to old-style backticks.

commit 9ba2c2e0dfadd78b1688161e4c4feb072a6d3447
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 19 21:58:46 2020 +0100

    Speed up 'read', fixing macOS hang (take 2)
    
    This fixes a hanging bug that could occur on macOS when using the
    'read' command to read from a FIFO and encountering end-of-file
    without a final newline character. It also makes the 'read' command
    perform 15-25% faster on macOS and Linux.
    
    The previous version (ff385e5a) failed on SunOS/Solaris/Illumos
    because those systems apparently don't (fully) support the POSIX
    standard recv(2) syscall with MSG_PEEK[*], which is the feature
    that iffe detects under the 'socket_peek' identifier. On Illumos,
    using that methods causes a compilation failure (unknown identifier
    MSG_PEEK); on Solaris 11.4, that method causes multiple regressions
    in tests/io.sh, suggesting the method compiles but doesn't work at
    all. Instead, SunOS/Solaris/Illumos requires the method using
    ioctl(2)+I_PEEK and select(2). No other system that ksh currently
    builds on requires this method, so it is now only used on
    SunOS/Solaris/Illumos.
    
    So far, this version of sfpkrd() has been tested to work correctly
    on Linux, macOS, FreeBSD, NetBSD, OpenBSD, HP-UX, Solaris, and
    OmniOS (an Illumos distribution).
    
    It still fails to peek on Cygwin, but in the exact same way it
    failed before, so that's no loss.
    
    To test, run the 'io' test set:  bin/shtests -p io
    
    src/lib/libast/sfio/sfpkrd.c: sfpkrd():
    - Remove long-obsolete Mac OS X and Solaris bug workarounds.
    - Remove methods that are no longer needed.
         On systems with a POSIX compliant recv(2), the only thing that
      is required to avoid regressions is the code that was conditional
      upon the socket_peek feature test, which tests for the correct
      functioning of the recv(2) syscall. This has now been made
      mandatory for non-SunOS/Solaris/Illumos systems (using an #error
      directive if it is not detected), with the other methods removed.
      The result performs 15-25% faster on macOS and Linux while
      passing all the regression tests.
         On macOS, avoiding the select(2) method fixes the hanging bug.
         On SunOS/Solaris/Illumos (the '__sun' identifier), the method
      using ioctl(2)+I_PEEK and select(2) (iffe feature IDs:
      stream_peek and lib_select) is preserved.
    
    Resolves: https://github.com/ksh93/ksh/issues/118 (again)
    
    [*] https://pubs.opengroup.org/onlinepubs/9699919799/functions/recv.html

commit 569c1bb9c10c5449b295cd5e46dbfa60af6a40aa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 19 04:10:55 2020 +0100

    Revert "Speed up 'read', fixing macOS hang"
    
    This reverts commit ff385e5a8928071f2ada262016d24964da70f255.
    It broke Solaris and illumos. More testing is needed.

commit ff385e5a8928071f2ada262016d24964da70f255
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 19 01:36:01 2020 +0100

    Speed up 'read', fixing macOS hang
    
    This fixes a hanging bug that could occur on macOS when using the
    'read' command to read from a FIFO and encountering end-of-file
    without a final newline character. It also makes the 'read' command
    perform 15-25% faster on macOS and Linux and maybe other systems.
    
    src/lib/libast/sfio/sfpkrd.c: sfpkrd():
    - Get rid of the optional stuff that uses the poll(2) or select(2)
      syscalls. The only thing that is required to avoid regressions is
      the code that was conditional upon the socket_peek feature test,
      which tests for the correct functioning of the recv(2) syscall.
      This has now been made mandatory. The rest now uses what was
      previously a fallback in plain C, resulting in a function that is
      not only more readable, but actually faster than the syscalls.
    
    Resolves: https://github.com/ksh93/ksh/issues/118

commit c3388ffd85653327b7abf875a60e38d1e14322e0
Author: Chase <nicetrynsa@protonmail.ch>
Date:   Sun Aug 16 14:37:59 2020 -0500

    nval.h: remove dtksh additions & old compat redefs (re: e2d1b593)
    
    CDE <https://cdesktopenv.sf.net/> developer Chase writes, re dtksh:
    | Everything is now completely working, and we are almost ready to
    | add ksh93 as a submodule, but I have one last commit to get rid
    | of some warnings we are facing. nval.h has some of these
    | "compatiblity redefines" that are causing issues whenever we
    | include it (warnings about redefining values) [...].
    
    src/cmd/ksh93/include/nval.h:
    - Replace ancient compatibility redefines by an unconditional
      '#include <hash.h>'; ksh works fine with the "new" hash library.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit d03e948bcdaa105086f7fb02a69df5f05eb9f03f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 17 20:23:39 2020 +0100

    Fix 'command -p' lookup if hash table entry exists (re: c9ccee86)
    
    If a command's path was previously added to the hash table as a
    'tracked alias', then the hash table entry was used, bypassing
    the default utility path search activated by 'command -p'.
    
    'command -p' activates a SH_DEFPATH shell state. The bug was caused
    by a failure to check for this state before using the hash table.
    This check needs to be added in four places.
    
    src/cmd/ksh93/sh/path.c,
    src/cmd/ksh93/sh/xec.c:
    - path_search(), path_spawn(), sh_exec(), sh_ntfork(): Only consult
      the hash table, which is shp->track_tree, if the SH_DEFPATH shell
      state is not active.
    
    src/cmd/ksh93/tests/path.sh:
    - Add regress tests checking that 'command -p' and 'command -p -v'
      still search in the default path if a hash table entry exists for
      the command searched.

commit acf84e9633f03b10da7d674773ca831dc4b9d88e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 16 09:08:07 2020 +0100

    Fix 'command -x' on macOS, Linux, Solaris
    
    'command -x' (basically builtin xargs for 'command') worked for
    long argument lists on *BSD and HP-UX, but not on macOS and Linux,
    where it reliably entered into an infinite loop.
    
    The problem was that it assumed that every byte of the environment
    space can be used for arguments, without accounting for alignment
    that some OSs do. MacOS seems to be the most wasteful one: it
    aligns on 16-byte boundaries and requires some extra bytes per
    argument as well.
    
    src/cmd/ksh93/sh/path.c:
    - path_xargs(): When calculating how much space to subtract per
      argument, add 16 extra bytes to the length of each argument, then
      align the result on 16-byte boundaries. The extra 16 bytes is
      more than even macOS needs, but hopefully it is future-proof.
    - path_spawn(): If path_xargs() does fail, do not enter a retry
      loop (which always becomes an infinite loop if the argument list
      exceeds OS limitations), but abort with an error message.

commit 35ad5e65afef56e9c96946fc8f9014217476cdf7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 16 04:49:18 2020 +0100

    sh/name.c: rm ancient binary compat overrides
    
    Four libast hash functions/macros (which ksh93 doesn't actually use)
    were overridden with the following comment:
    /*
     * These following are for binary compatibility with the old hash library
     * They will be removed someday
     */
    This has been there for decades, and I just received word that they
    cause problems for the dtksh (CDE) developers as dtksh does call
    hashlook().
    
    src/cmd/ksh93/sh/name.c:
    - Remove 'hashscope', 'hashfree', 'hashname' and 'hashlook'
      compatibility overrides.

commit e875616618844a99bc8b077660a252cf17c0d571
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 15 21:37:46 2020 +0100

    shell.3: fix glitch; add missing SH_PRIVILEGED doc

commit 85eb2f735b37c8122e49c9e8fe3ca50af9d599d5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 14 17:19:57 2020 +0100

    tests/leaks.sh: rm minor editing glitch

commit 56805b25af24f454cdd477609bcddc984628bc01
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 13 23:29:27 2020 +0100

    Fix leak and crash upon defining functions in subshells
    
    A memory leak occurred upon leaving a virtual subshell if a
    function was defined within it. If this was done more than 32766
    (= 2^15-2 = the 'short' max value - 1) times, the shell crashed.
    Discussion and reproducer: https://github.com/ksh93/ksh/issues/114
    
    src/cmd/ksh93/sh/subshell.c: table_unset():
    - A subshell-defined function was never freed because a broken
      check for autoloaded functions (which must not be freed[*]). It
      looked for an initial '/' in the canonical path of the script
      file that defined the function, but that path is also stored for
      regular functions. Now use a check that executes nv_search() in
      fpathdict, the same method used in _nv_unset() in name.c for a
      regular function unset.
    
    src/cmd/ksh93/bltins/misc.c: b_dot_cmd():
    - Fix an additional memory leak introduced in bd88cc7f, that caused
      POSIX functions (which are run with b_dot_cmd() like dot scripts)
      to leak extra. This fix avoids both the crash fixed there and the
      memory leak by introducing a 'tofree' variable remembering the
      filename to free. Thanks to Johnothan King for the patch.
    
    src/lib/libast/include/stk.h,
    src/lib/libast/misc/stk.c,
    src/lib/libast/man/stk.3,
    src/lib/libast/man/stak.3:
    - Make the stack more resilient by extending the stack reference
      counter 'stkref' from (signed) short to unsigned int. On modern
      systems with 32-bit ints, this extends the maximum number of
      elements on a stack from 2^15-1==32767 to 2^32-1==4294967295.
      The ref counter can never be negative, so there is no reason for
      signedness. sizeof(int) is defined as the size of a single CPU
      word, so this should not affect performance at all.
         On a 16-bit system (not that ksh still compiles there), this
      doubles the max number of entries to 2^16-1=65535.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add leak regression tests for ksh functions, POSIX functions, dot
      scripts run with '.', and dot scripts run with 'source'.
    
    src/cmd/ksh93/tests/path.sh:
    - Add an output builtin with a redirect to an autoloaded function
      so that a crash[*] is triggered if the check for an autoloaded
      function is ever removed from table_unset(), as was done in ksh
      93v- (which crashed).
    
    [*] Freeing autoloaded functions after leaving a virtual subshell
        causes a crashing bug: https://github.com/att/ast/issues/803
    
    Co-authored-by: Johnothan King <johnothanking@protonmail.com>
    Fixes: https://github.com/ksh93/ksh/issues/114

commit 64d04e717b001c58f60c57c472bcf406083eff4d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 13 23:04:29 2020 +0100

    Really stop affecting user command history (re: aff63e38)
    
    The fix was incomplete because some tests have to unset HISTFILE,
    which reverted them to using ~/.sh_history by default.
    
    src/cmd/ksh93/tests/shtests:
    - Instead of setting HISTFILE, set HOME to the temporary directory
      $tmp, so nothing will write to the real user directory and the
      default history file is $tmp/.sh_history.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Restore HISTFILE after a test that requires setting HISTFILE=foo.

commit cadd1a81dc026ea95e6e4dfc49d9f82f22c71aa8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 13 04:48:44 2020 +0100

    printf %#H: tweak writing unreserved chars (re: 8477d2ce)
    
    src/cmd/ksh93/bltins/print.c:
    - If in UTF-8 locale, only bother to check for unreserved char if
      the character is ASCII (< 128), and write unreserved chars with
      a simple stakputc().

commit a11602262535e46918fe9bb605a79b13105f20bc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 13 04:17:29 2020 +0100

    tests/coprocess.sh: fix intermittent false fail on CI (re: 712261c8)

commit 05ac1dbb411ee7c4ad5c6d7ae499e72c12be09f6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 12 10:50:59 2020 -0700

    Fix crash upon running many subshells (#113)
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>
    
    An intermittent crash occurred after running many thousands of
    virtual/non-forked subshells. One reproducer is a crash in the
    shbench fibonacci.ksh test, as documented here:
    https://github.com/ksh-community/shbench/blob/f3d9e134/bench/fibonacci.ksh#L4-L10
    
    The apparent cause was the signed and insufficiently large 'short'
    data type of 'curenv' and related variables which wrapped around to
    a negative number when overflowing. These IDs are necessary for the
    'wait' builtin to obtain the exit status from a background job.
    
    This fix is inspired by a patch based on ksh 93v-:
    https://build.opensuse.org/package/view_file/shells/ksh/ksh93-longenv.dif?expand=1
    https://src.fedoraproject.org/rpms/ksh/blob/f24/f/ksh-20130628-longer.patch
    
    However, we change the type to 'unsigned int' instead of 'long'. On
    all remotely modern systems, ints are 32-bit values, and using this
    type avoids a performance degradation on 32-bit sytems. Making them
    unsigned prevents an overflow to negative values.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/include/jobs.h,
    src/cmd/ksh93/include/nval.h,
    src/cmd/ksh93/include/shell.h:
    - Change the types of the static global 'subenv' and the subshell
      structure members 'curenv', 'jobenv', 'subenv', 'p_env' and
      'subshell' to one consistent type, unsigned int.
    
    src/cmd/ksh93/sh/jobs.c,
    src/cmd/ksh93/sh/macro.c:
    src/cmd/ksh93/sh/name.c:
    src/cmd/ksh93/sh/nvtype.c,
    src/cmd/ksh93/sh/subshell.c:
    - Updates to match new variable types.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Show wrong exit status in message on failure of 'wait' builtin.

commit f485fe0f8d0d6296c79db98a1d56ed66128a8ca2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 11 14:12:48 2020 +0100

    rm redundant hardcoded default paths (re: aa4669ad)
    
    As of aa4669ad, astconf("PATH") is implemented as a hardcoded AST
    configuration variable that always has a value, instead of one that
    falls back on the OS. Its value is now obtained from the OS (with a
    fallback) at configure time and not at runtime. This means that any
    fallback for astconf("PATH") is now never used.
    
    src/cmd/ksh93/data/msg.c,
    src/cmd/ksh93/include/shell.h:
    - Remove e_defpath[]. (The path "/bin:/usr/bin:" made no sense as a
      default path anyway, as the final empty element is wrong: default
      utilities should never be sought in the current working dir.)
    
    src/cmd/ksh93/sh/path.c,
    src/lib/libast/path/pathbin.c:
    - abort() if astconf("PATH") returns null.
    
    src/lib/libast/comp/conf.tab: PATH:
    - If no 'getconf' utility can be found, use a fallback path that
      finds more utilities by also searching in 'sbin' directories.
      On some systems, this is needed to find chown(1).
    
    src/cmd/ksh93/sh.1:
    - Update doc re default path.

commit 34d145bb880bf4f6a24e1c143811f77a015e949b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 11 08:58:40 2020 +0100

    shtests: -l: make sure radix point is '.'
    
    Using the bin/shtests -l/--locale option to run the regression
    tests in your own locale broke the tests if you're in a locale that
    uses ',' as the radix point, like my nl_NL.UTF-8, unless
    LC_NUMERIC=C was exported manually. Let's automate that fix.
    
    src/cmd/ksh93/tests/shtests: --locale:
    - If LC_ALL was set, copy it to LANG and unset all LC_* vars.
      This allows overriding the radix point with LC_NUMERIC if needed.
    - If '1.0' is not a valid shell arithmetic expression, export
      LC_NUMERIC=C to fix it.

commit e01801572da15f81d05e47883001f9a31b23f695
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 11 07:08:44 2020 +0100

    printf %H: fix/reduce encoding into entities (re: 8477d2ce)
    
    The &nbsp; entity is not valid in XML, only in HTML. Since we must
    be compatible with both, it can't be used. Thanks to Andras Farkas
    for the bug report.
    
    In addition, the generation of numeric entities for unprintable
    characters was only valid while processing UTF-8 text while in a
    UTF-8 locale. In all other conditions it produced invalid results.
    This is not worth trying to fix.
    
    Discussion:
    https://groups.google.com/d/msgid/korn-shell/CAA0nTRta%3DPbOYduyBv%3DXCzumTcUCU8Lki%3DQQf2O8Erk2BFvO1g%40mail.gmail.com
    
    src/cmd/ksh93/bltins/print.c:
    - Remove conversion to &nbsp; entity.
    - Remove conversion of non-graph characters to numeric entities.
      Convert only the 5 semantically meaningful characters: < > & " '
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/string.c:
    - We don't need sh_isprint() in print.c anymore, so turn it back
      into a static function.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update and trim regression tests.

commit 61437b2728cc879f46c772de94b803bff880a956
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 11 01:02:31 2020 +0100

    Fix crash, take three (re: e805c7d9, 33858689)
    
    The current fix appears to be only partially successful in
    eliminating the intermittent crash, and also breaks '-o notify'
    during the 60-second $TMOUT grace period. This replaces it.
    
    The root cause appears to be that the state of job control becomes
    somehow inconsistent when running external commands in a command
    substitution expanded from the $PS1 prompt. The job_unpost() or
    (sometimes) the job_list() function intermittently crash. These are
    called if the SH_TTYWAIT state is active:
    https://github.com/ksh93/ksh/blob/88e8fa67/src/cmd/ksh93/sh/jobs.c#L463-L469
    Temporarily deactivating the SSH_TTYWAIT state while expanding
    PS{1..4} prompts appears to fix the problem reliably.
    
    It is quite possible that this fix merely masks a bug in the job
    control system, but testing has shown that it stops ksh crashing
    without side effects, so I'm calling it good for now.
    
    Thanks to Marc Wilson for many hours of persistent testing.
    
    src/cmd/ksh93/sh/jobs.c:
    - Revert changes made in 33858689 and e805c7d9.
    
    src/cmd/ksh93/sh/io.c: io_prompt():
    - Save SH_TTYWAIT state and turn it off while expanding prompts.
    
    Resolves: https://github.com/ksh93/ksh/issues/103
    Resolves: https://github.com/ksh93/ksh/issues/112

commit 8477d2ce2254c53adaaa9f7bd71ed0e2478669e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 10 22:15:53 2020 +0100

    printf: Fix HTML and URI encoding (%H, %#H)
    
    This applies a number of fixes to the printf formatting directives
    %H and %#H (as well as their equivalents %(html)q and %(url)q):
    1. Both formatters have been made multibyte/UTF-8 aware, and no
       longer delete multibyte characters. Invalid UTF-8 byte sequences
       are rendered as ASCII question marks.
    2. %H no longer wrongly encodes spaces as non-breaking spaces
       (&nbsp;) and instead correctly encodes the UTF-8 non-breaking
       space as such.
    3. %H now converts the single quote (') to '%#39;' instead of
       '&apos;' which is not a valid entity in all HTML versions.
    4. %#H failed to encode some reserved characters (e.g. '?') while
       encoding some unreserved ones (e.g. '~'). It now percent-encodes
       all characters except those 'unreserved' as per RFC3986 (ASCII
       alphanumeric plus -._~).
    
    Prior discussion:
    https://groups.google.com/d/msgid/korn-shell/ce8d1467-4a6d-883b-45ad-fc3c7b90e681%40inlv.org
    
    src/cmd/ksh93/include/defs.h:
    src/cmd/ksh93/sh/string.c:
    - defs.h: If compiling without SHOPT_MULTIBYTE, redefine the
      mbwide() macro (which tests if we're in a multibyte locale) as 0.
      This lets the compiler optimiser do the work that would otherwise
      require a lot of tedious '#if SHOPT_MULTIBYTE' directives.
    - string.c: Remove some now-unneeded '#if SHOPT_MULTIBYTE' stuff.
    - defs.h, string.c: Rename is_invisible() to sh_isprint(), invert
      the boolean return value, and make it an extern for use in
      fmthtml() -- see below. If compiling without SHOPT_MULTIBYTE,
      simply #define sh_isprint() as equivalent to isprint(3).
    - defs.h: Add URI_RFC3986_UNRESERVED macro for fmthtml() containing
      the characters "unreserved" for purposes of URI percent-encoding.
    
    src/cmd/ksh93/bltins/print.c: fmthtml():
    - Remove kludge that skipped all multibyte characters (!).
    - Complete rewrite to implement fixes described above.
    - Don't bother with '#if SHOPT_MULTIBYTE' directives (see above).
    
    src/cmd/ksh93/data/builtins.c:
    - sh_optprintf[]: %H: Add single quote to encoded chars doc.
    - Edit credits and bump version date.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update and tweak old regression tests.
    - Add a number of new tests for UTF-8 HTML and URI encoding, which
      are only run when running tests in a UTF-8 locale (shtests -u).

commit aff63e382da5870b199df1d34e56731b6b7b676c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 10 19:04:01 2020 +0100

    Stop 'ksh -i' unit tests affecting user command history
    
    Several regression tests invoke an "interactive" shell using 'ksh
    -i'. This records all the commands tested in the shell's history
    file. By default, that is the user's history file, ~/.sh_history.
    As ksh continuously synchronises history among instances, a ksh
    user who ran the regression tests ended up with a number of
    mysterious extra commands in their command history.
    
    src/cmd/ksh93/tests/shtests:
    - Before running any tests, set and export HISTFILE to a new
      history file in the temporary files directory.

commit 5312a59d5a75b0c8edf9d83de09bc0437b26203d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 10 00:02:23 2020 +0100

    Skip '.' and '..' when globbing patterns like .*
    
    There are convincing arguments why including '.' and '..' in the
    result of pathname expansion is actively harmful. See:
    https://www.austingroupbugs.net/view.php?id=1228
    https://github.com/ksh93/ksh/issues/58#issuecomment-653716846
    
    pdksh, mksh and zsh already skip these special traversal names
    in all cases. This commit makes ksh act like these shells.
    
    Since passing '.' and especially '..' as arguments to commands like
    'chmod -R' and 'cp -r' may cause harm, this change seems likely to
    fix more legacy scripts than it breaks. I'm unaware of anyone ever
    having come up with a concrete use case for the old behaviour.
    
    This change also fixes the bug that '.' and '..' failed to be
    ignored as documented if FIGNORE is set.
    
    src/lib/libast/misc/glob.c: glob_dir():
    - Explicitly skip any matching '.' and '..' in all cases.
    
    src/cmd/ksh93/tests/glob.sh:
    - Add test_glob() tests for '*' and '.*'.
    
    src/cmd/ksh93/sh.1: File Name Generation:
    - Update to match new behaviour.
    
    Resolves: https://github.com/ksh93/ksh/issues/58

commit be5ea8bbb27cd39c2451e49b9d080ed40ba3f4e5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 8 23:57:57 2020 +0100

    redirect: check args before executing redirections (re: 7b82c338)
    
    The 'redirect' builtin command did not error out before executing
    any valid redirections. For example, 'redirect ls >foo.txt' issued
    an "incorrect syntax" error, but still created 'foo.txt' and left
    standard output permanently redirected to it.
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - If we have redirections (io != NULL), and the command is
      SYSREDIR, then check for arguments and error out if there are
      any, before calling sh_redirect() to execute redirections.
      (Note, the other check for arguments in b_exec() in bltins/misc.c
      must be kept, as that applies if there are no redirections.)
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - Edit comments to better explain what the flag values do.
    
    src/cmd/ksh93/bltins/misc.c:
    - Add a dummy b_redirect() function declaration "for the dictionary
      generator" as has historically been done for other builtins that
      share one C function. I'm not sure what that dictionary generator
      is supposed to be, but this also improves greppability.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Fix misleading "I/O redirection arguments" term. I/O redirections
      are not arguments at all; no argument parser ever sees them.
    
    src/cmd/ksh93/tests/io.sh:
    - Test both conditions that should make 'redirect' produce an
      "incorrect syntax" error.
    - Test that any redirections are not executed if erroneous
      non-redirection arguments exist.
    
    src/cmd/ksh93/tests/builtins.sh:
    - "... should show usage info on unrecognized options" test:
      Because 'redirect' now refuses to process redirections on error,
      the error message was not captured. The fix is to run the builtin
      in a braces block and add the redirection to the block.

commit e805c7d9b15dab373d23749f6a2c777e8cd5126a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Aug 7 21:09:01 2020 +0100

    Fix crash: do not list job if in 60 sec grace period (re: 33858689)
    
    The crash in job_list() or job_unpost() could still occur after the
    previous patch if a signal was being handled after $TMOUT was
    exceeded and the 60-second grace period was entered.
    
    It *should* work to add a general check for !sh_isstate(SH_GRACE).
    We know that the SH_GRACE state is set immediately after printing
    the 60 second grace period warning message:
    https://github.com/ksh93/ksh/blob/9de65210/src/cmd/ksh93/sh/io.c#L1869-L1870
    (and that the crashes occur upon re-evaluating the $PS1 prompt
    after setting the SH_GRACE state). We know that the SH_GRACE state
    is not turned off again until either the user enters a line:
    https://github.com/ksh93/ksh/blob/9de65210/src/cmd/ksh93/sh/main.c#L474
    or the shell times out after the grace period:
    https://github.com/ksh93/ksh/blob/9de65210/src/cmd/ksh93/sh/io.c#L1861
    The SH_GRACE state flag is not used or changed in any other context
    (verified with grep -rn SH_GRACE src/cmd/ksh93). So, logically,
    this should suffice to make sure the crash stays gone.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - Do not list jobs when the SH_GRACE state (the 60 second timeout
      grace period after TMOUT was exceeded) is active.
    - Keep the previous check for job control just to be sure, and
      because it makes sense.
    
    Fixes: https://github.com/ksh93/ksh/issues/103 (again)

commit 9de65210c61581c50f92b84f6cf0df19f5c63046
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Aug 6 18:53:25 2020 -0700

    Add ${.sh.pid} as an alternative to $BASHPID (#109)
    
    This variable is like Bash's $BASHPID, but in virtual subshells
    it will retain its previous value as virtual subshells don't fork.
    Both $BASHPID and ${.sh.pid} are different from $$ as the latter
    is only set to the parent shell's process ID (i.e. it isn't set
    to the process ID of the current subshell).
    
    src/cmd/ksh93/include/defs.h:
    - Add 'current_pid' for storing the current process ID at a valid
      memory address.
    - Change 'ppid' from 'int32_t' to 'pid_t', as the return value from
      'getppid' is of the 'pid_t' data type.
    
    src/cmd/ksh93/data/variables.c,
    src/cmd/ksh93/include/variables.h,
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/sh/xec.c:
     - Add the ${.sh.pid} variable as an alternative to $BASHPID.
       The process ID is stored in a struct before ${.sh.pid} is set
       as environment variables are pointers that must point to a
       valid memory address. ${.sh.pid} is updated by the _sh_fork()
       function, which is called when ksh forks a new process with
       sh_fork() or sh_ntfork().
    
    src/cmd/ksh93/tests/variables.sh:
    - Add ${.sh.pid} to the list of special variables and add three
      regression tests for ${.sh.pid}.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Update the PATH forking regression test to use ${.sh.pid} and
      remove the TODO note.

commit f9fdbfc9e92c5f57a36578d1f5595b3dfeacfeaa
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Aug 6 16:50:11 2020 -0700

    Fix a large number of typos and other problems (#110)
    
    Most of these fixes are for typos and extra whitespace at the
    end of lines. These are the notable changes:
    - Fixed a compatibility issue with how asterisks are displayed
      using certain fonts. Bug report: https://github.com/att/ast/issues/764
    - Fixed a bug in the man page that caused searches for the '|'
      character to fail. Bug report: https://github.com/att/ast/issues/871
    - Removed a duplicate description of 'set -B' from the man
      page. Bug report: https://github.com/att/ast/issues/789
    - Added documentation for options missing from the ksh man
      page (applies to 'hist -N', 'sleep -s', 'whence -q' and
      many of ulimit's options). Bug reports:
      https://github.com/att/ast/issues/948
      https://github.com/att/ast/issues/503#issuecomment-386649715
      https://github.com/att/ast/issues/507#issuecomment-507924608
    - Applied the following ksh2020 documentation fixes:
      https://github.com/att/ast/pull/351
      https://github.com/att/ast/pull/352
    - Fixed a minor GCC -Wformat warning in procopen.c by changing
      a sentinel to NULL.

commit 338586896dabb4807ae1badde4c90eada43e26e5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Aug 6 22:46:02 2020 +0100

    Fix crash: do not list jobs if there is no job control
    
    This bug caused an undefined state, which sometimes crashed the
    shell in job_list() or job_unpost(), if $PS1 contains a command
    substitution running an external command and the '-b'/'-o notify'
    shell option is active. So far the only known way to trigger the
    crash is by letting $TMOUT time out the interactive shell. See
    https://github.com/ksh93/ksh/issues/103 for details.
    
    src/cmd/ksh93/sh/jobs.c: job_reap():
    - The check for the SH_NOTIFY option and the SH_TTYWAIT state
      before listing jobs was insufficient. Job control is disabled in
      command substitutions, so also check that job control is active
      before listing jobs.
    
    src/cmd/ksh93/sh.1:
    - Fix TMOUT documentation. The 'read' command in fact only times
      out when reading from a terminal, just like 'select'. Also
      document the extra 60 second grace period when an interactive
      shell prompt reads from a terminal.
    
    Fixes: https://github.com/ksh93/ksh/issues/103

commit 49ae4835747d8cc676fcff9dc32744a839a8fd00
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 5 14:18:22 2020 -0700

    Make liblist an extern to fix dtksh compile (#108)
    
    The liblist variable needs to be an extern for dtksh to build.
    Quote from CDE developer Chase:
    we use an old function that no longer appears in kornshell,
    sh_getliblist, it seems to be replaced by the function sh_getlib,
    which is fine, but it seems to return a "Shbltin_f" type, which I
    can't seem to find any information on what it is. We need the void
    pointer dlsym provides for some widget init stuff, I tried making
    liblist an extern, but it kept giving me an error about libcomp_t
    being undefined.
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/include/shell.h:
    - Fix the compiler error reported above by moving the type definition
      for Libcomp_t to shell.h.
    - Make liblist an extern since findsym.c in dtksh needs it to build.
      The old sh_getliblist function doesn't need to be reintroduced
      since the only purpose it served was to workaround the problem
      of liblist being a static variable. Now that liblist is an extern,
      dtksh fsym can use liblist directly to avoid sh_getliblist.
    
    dtksh findsym.c:
    https://sourceforge.net/p/cdesktopenv/code/ci/2.3.2/tree/cde/programs/dtksh/findsym.c

commit ac8991e5257978a6359c001b7fa227c334fd9e18
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Aug 5 18:22:22 2020 +0100

    Fix shellquoting of invalid multibyte char (re: f9d28935, 8c7c60ec)
    
    This commit fixes two bugs in the generation of $'...' shellquoted
    strings:
    1. A bug introduced in f9d28935. In UTF-8 locales, a byte that is
       invalid in UTF-8, e.g. hex byte 86, would be shellquoted as
       \u[86], which is not the same as the correct quoting, \x86.
    2. A bug inherited from 93u+. Single bytes (e.g. hex 11) were
       always quoted as \x11 and not \x[11], even if a subsequent
       character was a hexadecimal digit. However, the parser reads
       past two hexadecimal digits, so we got:
            $ printf '%q\n' $'\x[11]1'
            $'\x111'
            $ printf $'\x111' | od -t x1
            0000000    c4  91
            0000002
       After the bug fix, this works correctly:
            $ printf '%q\n' $'\x[11]1'
            $'\x[11]1'
            $ printf $'\x[11]1' | od -t x1
            0000000    11  31
            0000002
    
    src/cmd/ksh93/sh/string.c: sh_fmtq():
    - Make the multibyte code for $'...' more readable, eliminating the
      'isbyte' flag.
    - When in a multibyte locale, make sure to shellquote both invalid
      multibyte characters and unprintable ASCII characters as
      hexadecimal bytes (\xNN). This reinstates 93u+ behaviour.
    - When quoting bytes, use isxdigit(3) to determine if the next
      character is a hex digit, and if so, protect the quoted byte with
      square brackets.
    
    src/cmd/ksh93/tests/quoting2.sh:
    - Move the 'printf %q' shellquoting regression tests here from
      builtins.sh; they test the shellquoting algorithm, not so much
      the printf builtin itself.
    - Add regression tests for these bugs.

commit e53177abcaf022f25bf4770248a66125de5c3896
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 5 10:14:30 2020 -0700

    Fix unset method in multidimensional arrays (#105)
    
    A segfault happens when an array with an unset method
    is turned into a multidimensional array. Reproducer:
    function foo {
        typeset -a a
        a.unset() {
            print unset
        }
        a[3][6][11][20]=7
    }
    foo
    
    src/cmd/ksh93/sh/nvdisc:
    - Fix the multidimensional array unset method crash by
      checking if np->nvenv is an array, since multidimensional
      arrays need to be handled as arrays. This bugfix was
      backported from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/tests/arrays2.sh:
    - Add the reproducer as a regression test for the crash
      with multidimensional arrays.
    
    Bug report on the old mailing list:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01195.html

commit 23f2e23385aca41ba03427f241434096195d4e54
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 5 10:06:16 2020 -0700

    Over-shifting in a POSIX function should cause scripts to exit (#106)
    
    The required longjmp used to terminate scripts was not being run
    when over-shifting in a POSIX function with a redirection. This
    caused scripts to continue after an error in the shift builtin,
    which is incorrect since shift is a special builtin. The
    interpreter is sent into an indeterminate state that causes
    undefined behavior as well:
    $ cat reproducer.ksh
    some_func() {
       shift 10
    }
    
    for i in a b c d e f; do
      echo "read $i"
      [ "$i" != "c" ] && continue
      some_func 2>&1
      echo "$i = c"
    done
    $ ksh ./reproducer.ksh
    read a
    read b
    read c
    /tmp/k[2]: shift: 10: bad number
    c = c
    read d
    /tmp/k[2]: shift: 10: bad number
    d = c
    read e
    /tmp/k[2]: shift: 10: bad number
    e = c
    read f
    /tmp/k[2]: shift: 10: bad number
    f = c
    
    src/cmd/ksh93/sh/xec.c: sh_exec():
    - Do the necessary longjmp needed to terminate the script after
      over-shifting in a POSIX function when the function call has a
      redirection.
    
    src/cmd/ksh93/tests/functions.sh:
    - Add the over-shifting regression test from ksh93v- 2013-10-10-alpha.
    
    Bug report and fix on the old mailing list:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg00732.html

commit 83996d5a8b22a2c53e26f88277551098e148d697
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Aug 5 09:52:21 2020 -0700

    Fix failure to zero pad with 'printf %(%0l)T' (re: 9526b3fa) (#107)
    
    src/lib/libast/tm/tmxfmt.c:
    - Making %l and %k aliases to %_I and %_H caused zero padding with
      %0l and %0k to fail. Fix that by fully implementing %l and %k
      without 'goto push'. This duplicates code from %I and %H, but it
      is necessary for these formats to work correctly when zero padded.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test for manually specifying blank and zero
      padding with sixteen different formats.

commit 07b240d4f945a47a3b35ccf52b9efbe52a337796
Author: Martijn Dekker <mcd@grex.org>
Date:   Mon Aug 3 23:52:41 2020 +0000

    src/cmd/INIT: allow compiling on system with noexec /tmp
    
    Some systems disallow executing files in /tmp and there is nothing
    regular users can do about it. The build would fail with a
    misleading error message about cc being a cross-compiler.
    
    This commit makes the build system consistently use $TMPDIR with
    /tmp as a fallback if that variable is not defined. This allows the
    user to use another temporary directory with execute permission.
    
    The error message in bin/package is also extended to signal the
    possibility of a noexec temp dir.

commit aa4669ad178c749a429358c59b547d249d75fb94
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Aug 4 01:02:05 2020 +0200

    Fix build on Solaris 11.4 (re: d3cd4cf)
    
    It was working on Solaris 11.3, but there were still problems
    building on Solaris 11.4 with GCC (as on the evaluation VM
    downloaded directly from Oracle):
    1. ksh immediately segfaulted. Experimenting with the compiler
       flags Oracle uses revealed that we need to define _XPG6 for ksh
       not to segfault. Why is a mystery.
    2. The default path logic used by 'command -p' and the 'getconf
       PATH' builtin command was still broken: the result did not
       include any of the /usr/xpg?/bin directories where the standard
       POSIX utilities actually live. Testing shows that the result of
       the C language probe 'confstr(_CS_PATH,name,length)' is broken
       on Solaris (it only yields the paths to the historic
       non-standard utilities, defeating the purpose) unless _XPG7 is
       defined; but the latter makes ksh segfault again. So another
       solution is needed.
    
    src/cmd/INIT/package.sh, bin/package:
    - Add another hack to add the -D_XPG6 flag to CCFLAGS if we're
      running SunOS aka Solaris. (I've tried to add a 'cc.sol11' script
      to src/cmd/INIT/ instead, but for some reason that I just don't
      have time to figure out, the INIT system ignores that on Solaris
      with gcc, so this is the only way I could come up with. Any
      patches for less hacky alternatives would be welcome.)
    
    src/lib/libast/comp/conf.sh:
    - Sanitise the code for finding the best 'getconf' utility.
    
    src/lib/libast/comp/conf.tab: PATH:
    - Since the C-languge getconf(_CS_PATH,...) is broken on Solaris
      11.4, replace the C language probe with a shell script probe that
      uses the external 'getconf' utility.
    - To avoid ksh overriding the result of this probe with the result
      of its own getconf(_CS_PATH,...) call, which would make Solaris
      use the wrong value again, specify this as an AST configuration
      entry instead of a POSIX entry. This should be good enough for
      all systems; the OS 'getconf' utility should be reliable and the
      default path value is constant for each OS, so can be hardcoded.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add another 'sleep .1' to the 'sleep -s 31' test as it was still
      intermittently failing on Solaris and possibly other systems.

commit d3cd4cf90657c9b2d795fa5870871cb27e1e669a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 3 08:57:00 2020 +0100

    Fixes to compile on Solaris variants, NetBSD, and NixOS
    
    Solaris, Illumos distributions, and NetBSD need LDFLAGS set to link
    explicitly to libm, otherwise, due to as-yet unknown reasons, the
    src/lib/libdll/features/dll fails to write a valid header file and
    compilation fails due to unknown identifiers such as Dllscan_t.
    This commit adds the flag on those systems.
    
    NixOS is a Linux distro that uses very different paths from the
    usual Unix conventions (though it's POSIX compliant), and the
    regression tests still needed a lot of tweaks to be compatible.
    
    src/cmd/INIT/package.sh, bin/package:
    - On SunOS (Solaris and illumos distros) and NetBSD, add '-lm' to
      LDFLAGS before compiling.
    
    src/cmd/INIT/mamprobe.sh, bin/mamprobe,
    src/cmd/INIT/execrate.sh, bin/execrate:
    - Instead of only in /bin, /usr/bin, /sbin and /usr/sbin, search
      utilities in the path given by the OS 'getconf PATH', and use the
      user's original $PATH as a fallback.
    
    src/cmd/ksh93/tests/*.sh:
    - Miscellaneous portability fixes, mainly elimination of unportable
      hardcoded paths to commands.
    - basic.sh: Remove test for 'time' keyword millisecond precision.
      It was racy and could fail depending on system and system load.

commit 5a7bd2c196b5f1bd22db2153e471c5d09252dbf4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Aug 3 08:31:23 2020 +0100

    Further fix 'command -p' (re: c9ccee86)
    
    This fixes 'command -p' for systems where getconf(1) lives
    somewhere other than in /bin or /usr/bin, i.e. NixOS.
    
    src/lib/libast/comp/conf.tab:
    - To determine the default path value for AST 'getconf PATH' and
      'command -p', compile a small C program to get the correct local
      default path value (_CS_PATH) from the operating system so it
      gets hardcoded in the ksh binary. This eliminates the need to to
      invoke 'getconf PATH' to get this value, which fixes a catch-22
      problem on systems where getconf(1) exists somewhere other than
      /bin or /usr/bin.

commit cba895ed5fe4cf7c4fae25d4be1409eae79249db
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Aug 2 19:24:27 2020 +0100

    tests/subshell.sh: fix backticks test failure report (re: 7f2c8110)

commit b36e081c0837c8e13fa15d5ec067f9ecaede4e75
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Aug 1 14:53:59 2020 +0100

    (k)sh.1: add missing header for Brace Expansion

commit 4144f404ae2ab6b3074b8d999ba0b817f069e269
Author: Marc Wilson <posguy99@gmail.com>
Date:   Fri Jul 31 17:12:45 2020 -0700

    Fix expansion of multibyte character after $1 - $9, $?, etc (#102)
    
    A multibyte character immediately following an expansion of a
    single-character name, e.g. $1 through $9, $?, $-, etc. was
    corrupted when in a UTF-8 locale, e.g.:
    
        $ set -- foo; echo "$1テスト"
        foo?スト
    
    Prior discussion:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg01060.html
    https://bugzilla.redhat.com/show_bug.cgi?id=1256495
    
    src/cmd/ksh93/sh/macro.c:
    - Apply a Red Hat patch by Paulo Andrade that avoids calling
      fcmbget() if backtracking more than one byte might be required.
    
    src/cmd/ksh93/tests/basic.c:
    - Test "テスト" following expansion of "$1", "$?" and "$#".
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 02a14ff9b7c21329e8a58de631f5215952cb4698
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jul 31 09:32:09 2020 -0700

    Fix creation of extra associative array element '0' (#101)
    
    Multidimensional associative arrays are created with an extra array
    member named '0', which is set to no value. Reproducer:
    
    $ typeset -A foo
    $ typeset -A foo[bar]
    $ typeset -p foo
    typeset -A foo=([bar]=([0]='') )
    
    The bugfix prevents nv_setarray from creating the extra '[0]' member
    when an associative array is empty. This bug was discussed on the old
    mailing list:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01574.html
    
    src/cmd/ksh93/sh/array.c:
    - Do not allow the creation of an extra array member when an array
      is empty.
    
    src/cmd/ksh93/tests/arrays.sh:
    - Add a regression test for creating multidimensional associative
      arrays, but use the output from 'typeset -p' instead of fgrep.

commit 70f6d758c0f2fda90bc3d49331397ffd62dca3af
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 30 01:22:11 2020 +0100

    Fix blocked signals after fork(2)ing external command in subshell
    
    When the classic fork/exec mechanism was used (via sh_fork()) to
    run an external command from within a non-forking subshell, SIGINT
    was blocked until that subshell was exited. If a subsequent loop
    was run in the subshell, it became uninterruptible, e.g.:
    
       $ arch/*/bin/ksh -c '(/usr/bin/true; while :; do :; done); exit'
       ^C^C^C^C^C
    
    src/cmd/ksh93/sh/xec.c:
    - sh_fork() did not reset the savesig variable in the parent part
      of the fork when running in a virtual subshell. This had the
      effect of delaying signal handling until exiting the subshell.
      There is no reason for that subshell check that I can discern, so
      this removes it.
          I've verified that this causes no regression test failures
      even when ksh is compiled with -DSHOPT_SPAWN=0 which means the
      classic fork/exec mechanism is always used.
    
    Fixes: https://github.com/ksh93/ksh/issues/86

commit 56fe60280092e30622198fe0773a66f3f143d86e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 29 23:01:28 2020 +0100

    tests/builtin.sh: sleep -s: give more time for fork
    
    src/cmd/ksh93/tests/builtins.sh:
    - Sleep longer after forking a background job to give the OS more
      time to launch it; this will hopefully avoid an intermittent
      regression test failure on the Github CI runners.

commit 3fb04b2807e7bdc62b3f682333c6fd87b1d838af
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 29 22:40:37 2020 +0100

    tests/leaks.sh: Avoid spurious leak results
    
    Due to the mysterious workings of vmalloc(3), occasionally a
    spurious leak result still showed up. The leak is always smaller
    in bytes than the number of test iterations, so it can't be a leak
    in the thing tested.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Run each test N=512 times.
    - Use a 'err_exit_if_leak' function to add a tolerance of N/4 (128)
      bytes to each test result check.
    
    Resolves: https://github.com/ksh93/ksh/issues/100

commit 05081dfc1c6ef18eee06d2a31c3f1cb4bb68d9d7
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 27 05:27:20 2020 -0700

    Fix spurious creation of '=' file (#98)
    
    The following is quoted from Marcin Cieślak [*]:
    When running under FreeBSD /bin/sh (and not ksh) we get spurious
    file named '=' created in the root. This is because the "checksh"
    function runs /bin/sh -c '(( .sh.version >= 20111111 ))' which
    produces a "=" file with /bin/sh as a side effect.
    
    Fixes https://github.com/ksh93/ksh/issues/13
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Fix the creation of a spurious '=' file by making sure the shell
      has support for (( ... )) expressions.
    
    .gitignore:
    - Remove the '=' file entry since it no longer has a purpose.
    
    [*]: https://bsd.network/@saper/103196289917156347

commit af9c2144b85999f9307ce9c0599d864c1eafc9a6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 27 05:23:42 2020 -0700

    Fix `./bin/package host cpu` on FreeBSD (#99)
    
    This bugfix is from Marcin Cieślak's fork of the INIT build
    system. Before this bugfix, running 'bin/package host cpu'
    on FreeBSD would always report one CPU core, even if the CPU
    is multi-core:
    
    $ ./bin/package host cpu
    1
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Correctly report the number of CPUs on FreeBSD by using
      'sysctl -n hw.ncpu'.

commit 81f3a6294a1c5db388d17d020feb642a43b848d9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 27 05:17:37 2020 -0700

    Increase the mamake buffer size to 4096 (#97)
    
    src/cmd/INIT/mamake.c:
    - Fix a rare build error by applying Oracle's patch to increase
      mamake's buffer size[*]. Description from the original patch:
    
      The build of KornShell might spuriously fail
      with the following error.
      ...
      /usr/bin/ksh: line 40: syntax error at line 44: `else unmatched
      mamake [lib/libast]: *** exit code 3 making ast.req
      mamake: *** exit code 139 making lib/libast
    
      The patch increases the buffer size of mamake to avoid
      spurious build failures.
    
      I can't reproduce build error, but this patch should be merged
      anyway because OpenSUSE also increases mamake's buffer size
      in a patch titled 'workaround-stupid-build-system.diff'[**].
      This indicates that the build failure is a heisenbug that can
      occur on at least Linux and Solaris.
    
      [*]: https://github.com/oracle/solaris-userland/commit/7cad9dae7852379b772e7f8bd9b8c2fc17f259df
      [**]: https://build.opensuse.org/package/view_file/shells/ksh/workaround-stupid-build-system.diff?expand=1

commit 69720a557698d84b1692f8836f4d4294924be31b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 27 02:10:19 2020 -0700

    Fix a few cases of missing CCFLAGS and LDFLAGS (#96)
    
    src/*/*/Mamfile,
    src/lib/libast/Makefile:
    - There were a few instances where the CCFLAGS and LDFLAGS were missing
      in the Mamfiles and a Makefile. This commit fixes the problem by merging
      the changes from Debian's blhc.diff patch:
      https://salsa.debian.org/debian/ksh/-/blob/f8fea737c9bdc1cd7cc15b7c006c585b15164875/debian/patches/blhc.diff

commit 6f50ff64977bd4a23e084fc4dda0c60accc3aed1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 26 20:34:08 2020 +0100

    disable 'vmstate' builtin when using system's malloc(3)
    
    Related discussion:
    https://github.com/ksh93/ksh/issues/95#issuecomment-664010969
    
    src/cmd/ksh93/tests/leaks.sh:
    - When ksh is compiled to use the system's malloc(3) instead of AST
      vmalloc(3), the vmstate builtin returns either nothing or zero.
      Detect this as a regression test failure and refuse to run tests.
    - Tweak iterations. Tests don't need 500 or 1000 runs for vmstate.
    
    src/cmd/ksh93/data/builtins.c:
    - Do not compile in vmstate builtin when using system's malloc(3).

commit a2f13c19f2c822a4cb7fc1c700d1f07d7f01f1f9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 25 16:39:12 2020 +0100

    Fix typeset attributes -a, -A, -l, -u leaking out of subshells
    
    If an array or upper/lowercase variable was declared with a null
    initial value within a virtual/non-forked subshell, like:
            ( typeset -a foo; ... )
            ( typeset -A foo; ... )
            ( typeset -l foo; ... )
            ( typeset -u foo; ... )
    then the type declaration leaked out of the subshell into the
    parent shell environment, though without any values that may
    subsequently have been assigned.
    
    src/cmd/ksh93/bltins/typeset.c: setall():
    - When deciding whether to create a virtual subshell scope for a
      variable, use sh_assignok(), which was actually designed for the
      purpose, instead of _nv_unset(). This allows getting rid of a
      tangled mess of special-casing that never worked quite right.
    
    src/cmd/ksh93/tests/arrays.sh:
    - Add regression tests checking that array declarations don't leak
      out of virtual subshells.
    
    src/cmd/ksh93/tests/attributes.sh:
    - Add regression tests for combining the 'export' and 'readonly'
      attributes with every other possible typeset attribute on unset
      variables. This also includes a subshell leak test for each one.
    
    Fixes: https://github.com/ksh93/ksh/issues/88

commit 1bc2c74c7454bbab2c2067fdf205c07a53027f52
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jul 25 18:18:49 2020 -0700

    Fix how unrecognized options are handled in 'sleep' and 'suspend' (#93)
    
    When a builtin is given an unrecognized option, the usage information
    for that builtin should be shown as 'Usage: builtin-name options'. The
    sleep and suspend builtins were an exception to this. 'suspend' would
    not show usage information and sleep wouldn't exit on error:
    
    $ suspend -e
    /usr/bin/ksh: suspend: -e: unknown option
    $ time sleep -e 1
    sleep: -e: unknown option
    
    real    0m1.00s
    user    0m0.00s
    sys     0m0.00s
    
    src/cmd/ksh93/bltins/sleep.c:
    - Show usage information and exit when sleep is given an unknown
      option. This bugfix was backported from ksh2020: https://github.com/att/ast/pull/1024
    
    src/cmd/ksh93/bltins/trap.c:
    - Use the normal method of parsing options with optget to fix the
      suspend builtin's test failure.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add the ksh2020 regression test for getting the usage information
      of each builtin. Enable all /opt/ast/bin builtins in a subshell
      since those should be tested as well (aside from getconf and uname
      because those builtins fallback to the real commands on error).

commit 8b5f11dcd7cfc05ee88d5be89ea1cd973e095b74
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jul 25 11:46:11 2020 -0700

    Add support for multibyte characters to $IFS (#92)
    
    Add support for multibyte characters to $IFS
    
    This commit fixes BUG_MULTIBIFS, which had two bug reports in the ksh2020 branch.
    
    src/cmd/ksh93/sh/macro.c:
    - Backport Eric Scrivner's fix for multibyte IFS characters (slightly modified
      for compatibility with C89). Explanation from https://github.com/att/ast/pull/737:
    
      Previously, the varsub method used for the macro expansion of $param, ${param},
      and ${param op word} would incorrectly expand the internal field separator (IFS)
      if it was a multibyte character. This was due to truncation based on the
      incorrect assumption that the IFS would never be larger than a single byte.
    
      This change fixes this issue by carefully tracking the number of bytes that
      should be persisted in the IFS case and ensuring that all bytes are written
      during expansion and substitution.
    
      Bug report: https://github.com/att/ast/issues/13
    
    - Fixed another bug that caused multibyte characters with the same initial byte
      to be treated as the same character by the IFS. This bug was occurring because
      the first byte of a multibyte character wasn't being written to the stack when
      the IFS delimiter had the same initial byte:
    
      $ IFS=£
      $ v='§'
      $ set -- $v
      $ v="${1-}"
      $ echo "$v" | hd # The first byte should be c2, but it isn't due to the bug
      00000000  a7 0a                                             |..|
      00000002
    
      Bug report: https://github.com/att/ast/issues/1372
    
    src/cmd/ksh93/tests/variables.sh:
    - Add (reworked) regression tests from ksh2020 for the multibyte IFS bugs.
    - Add a regression test for att/ast#1372 based on the reproducer.

commit 8c16f38a8886fdf5e12762a9c0c427e2fd1eb688
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 23 17:20:26 2020 -0700

    Fix an infinite loop related to $_ if ksh is /bin/sh (#90)
    
    The following explanation is mostly taken from Tomas Klacko's report on
    the old mailing list (which also contains a C program reproducer) [*]:
    
    1. When ksh starts a binary, it sets its environment variable "_"
       to "*number*/path/to/binary". Where "number" is the pid of the
       ksh process.
    
    2. The binary forks and the child executes a suid root shell script
       which begins with #!/bin/sh. For this bug to occur, ksh must be /bin/sh.
    
    3. The ksh process interpreting the suid shell script leaves the "_"
       variable as not set (nv_getval(L_ARGNOD) returns NULL) because
       the "number" from step 1 is not the pid of its parent process.
    
    4-5. Because "_" is not set and the script is suid root, an infinite
       loop occurs because when the SHELL environment variable contains
       "/bin/sh" pathshell() returns "/bin/sh". This becomes an infinite
       loop of /bin/sh /dev/fd/3 executing /bin/sh /dev/fd/3.
    
    src/cmd/ksh93/sh/init.c: get_lastarg():
    - Disable the check for if the "number" refers to the process id of
      the parent process.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - Prevent an infinite loop when '$_' is not passed in from the environment.
    
    Solaris applies this bugfix to their version of ksh:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/190-17432413.patch
    
    [*]: https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01680.html

commit 6e515f1d45fe64e8775ba656c288478e732d129e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 23 16:03:57 2020 -0700

    Fix command substitutions run on the same line as a here-doc (#91)
    
    When a command substitution is run on the same line as a here-document,
    a syntax error occurs due to a regression introduced in ksh93u+ 2011-04-15:
    
    true << EOF; true $(true)
    EOF
    syntax error at line 1: `<<EOF' here-document not contained within command substitution
    
    The regression is caused by an error check that was added to make
    the following script causes a syntax error (because the here-document
    isn't completed inside of the command substitution):
    
    $(true << EOF)
    EOF
    
    src/cmd/ksh93/sh/lex.c:
    - Only throw an error when a here-document in a command substitution
      isn't completed inside of the command substitution.
    
    src/cmd/ksh93/tests/heredoc.sh:
    - Add a regression test for running a command substitution on the
      same line as a here-document.
    - Add a missed regression test for using here-documents in command
      substitutions. This is the original bug that was fixed in ksh93u+
      2011-04-15 (it is why the error message was added), but a regression
      test for here-documents in command substitutions wasn't added in
      that version.
    
    This bugfix was backported from ksh93v- 2013-10-10-alpha.

commit f207cd57879ea248f33d84ad9018577b53de3a5a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 22 12:47:04 2020 +0100

    Fix race conditions running external commands with job control on
    
    When ksh is compiled with SHOPT_SPAWN (the default), which uses
    posix_spawn(3) or vfork(2) (via sh_ntfork()) to launch external
    commands, at least two race conditions occur when launching
    external commands while job control is active. See:
    https://bugs.launchpad.net/ubuntu/+source/ksh/+bug/1887863/comments/3
    https://www.mail-archive.com/ast-developers@research.att.com/msg00717.html
    
    The basic issue is that this performance optimisation is
    incompatible with job control, because it uses a spawning mechanism
    that doesn't copy the parent process' memory pages into the child
    process, therefore no state that involves memory can be set before
    exec-ing the external program. This makes it impossible to
    correctly set the terminal's process group ID in the child process,
    something that is essential for job control to work.
    
    src/cmd/ksh93/sh/xec.c:
    - Use sh_fork() instead of sh_ntfork() if job control is active.
      This uses fork(2), which is 30%-ish slower on most sytems, but
      allows for correctly setting the terminal process group.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add regression test for the race condition reported in #79.
    
    src/cmd/INIT/cc.darwin:
    - Remove hardcoded flag to disable SHOPT_SPAWN on the Mac.
      It should be safe to use now.
    
    Fixes https://github.com/ksh93/ksh/issues/79

commit 4e5f24e38ce9d0fcb965122c0f58f079a2016cb9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 22 11:46:54 2020 +0100

    sh/xec.c: remove inactive and broken SHOPT_AMP code
    
    This code has always been completely undocumented since it was
    added sometime between 2002 and 2004[*]. No one (including Google)
    knows what it's for and no one is likely to find out.
    
    Not only that, it doesn't compile. If SHOPT_AMP is defined, then it
    errors out on an undefined function `print_fun` and an undefined
    member `shpath` of 'struct Shell_s'. So it's clear that the code
    had been abandoned by its authors for some time as of 2012.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove vestigial SHOPT_AMP stuff, whatever that was.
    
    [*] Found out by searching multishell ksh93 repo:
        https://github.com/multishell/ksh93/

commit e2d1b593ac466d9149df692acd5d2f6d8feb3e21
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jul 21 22:44:24 2020 -0700

    Merge dtksh patches from one of the CDE developers (#85)
    
    This merges some fixes to support building dtksh with -DBUILD_DTKSH.
    These patches were sent through private email from the CDE developer
    Chase. The reason these patches were submitted is because Chase wishes
    to include ksh in CDE as an up-to-date git submodule. Quote from Chase:
    "... my priority is to get your new version into our code as a git
     submodule, and do it quickly before our code bases differ too widely."
    
    Link to CDE project for anyone interested:
    https://sourceforge.net/projects/cdesktopenv/
    
    Although the patches were privately discussed, there are some public
    emails on the CDE mailing list (links shortened due to long URLs):
    ksh-chaos thread:   https://bit.ly/3hjJ83b
    dtksh alias thread: https://bit.ly/3hkzKfJ
    
    The main fix is for suid_exec, which is now told that /usr/dt is a
    valid directory to run from via preprocessor flags. A patch for
    Shift-JIS was also submitted, but it isn't in this commit because it
    isn't an effective fix for the existing Shift-JIS bugs. I will be
    giving that patch some more testing.
    
    From: Chase <nicetrynsa@protonmail.ch>
    Co-authored by: Johnothan King <johnothanking@protonmail.com>

commit 88e8fa67c69a67972a6c2d1a4c8c54f343f80b23
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 22 05:01:21 2020 +0100

    Avoid crash due to broken optimisation in job locking [OpenSUSE]
    
    This applies ksh93-jobs.dif from OpenSUSE. Source:
    https://build.opensuse.org/package/show/openSUSE:Leap:42.3:Update/ksh
    
    src/cmd/ksh93/sh/jobs.c:
    - jog_init(): Save errno in case close(JOBTTY) fails. If cause of
      failure was interruption by a signal (EINTR), repeat close.
    - job_kill(): Replace Red Hat fix for #35 with nicer OpenSUSE fix
      that doesn't add a goto before declaring variables. Re: ff358f34

commit db72f41f4b1331d4b3122a2e21fb93ce4f2a7c61
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 21 04:02:47 2020 +0100

    Fix subshell file descriptor leak
    
    A file descriptor (at least 3, can't reproduce for 4 and up) opened
    with 'exec' or 'redirect' in a virtual/non-forked subshell survived
    that subshell after exiting it:
    
        $ ksh -c '(redirect 3>&1); echo bug >&3'
        bug
    
    src/cmd/ksh93/sh/io.c:
    - Apply a patch from OpenSUSE (ksh93-redirectleak.dif). Source:
      https://build.opensuse.org/package/show/openSUSE:Leap:42.3:Update/ksh
    
    src/cmd/ksh93/tests/io.sh:
    - Add regression test.
    
    Thanks to Marc Wilson for flagging this up.

commit 0c96f9749b47e6ce61275650c80e1a10c6dbb9aa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jul 21 00:04:33 2020 +0100

    tests/subshell.sh: fix a test for systems without /dev/fd/*
    
    ksh's built-in test, [ and [[ commands treat /dev/fd/* specially:
    e.g. 'test /dev/fd/0' returns true even if it doesn't physically
    exist, as on e.g. HP-UX. However, external commands need it to
    exist physically.
    
    src/cmd/ksh93/tests/subshell.sh:
    - To decide whether to run a test with 'tee', use external 'test'
      command to check if /dev/stdout and /dev/fd/1 actually exist.

commit bc8b36fabafb1638b4a9199203c53cc23ae48991
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 20 19:49:32 2020 +0100

    whence -a/type -a: report both function and built-in by same name
    
    'whence -a' is documented to list all possible interpretations of a
    command, but failed to list a built-in command if a shell function
    by the same name exists or is marked undefined using 'autoload'.
    
    src/cmd/ksh93/bltins/whence.c: whence():
    - Refactor and separate the code for reporting functions and
      built-in commands so that both can be reported for one name.
    
    src/cmd/ksh93/data/builtins.c: sh_optwhence[]:
    - Correct 'whence --man' to document that:
      * 'type' is equivalent to 'whence -v'
      * '-a' output is like '-v'
    
    src/cmd/ksh93/tests/builtins.sh:
    - Test 'whence -a' with these combinations:
      * a function, built-in and external command
      * an undefined/autoload function, built-in and external command
    
    Fixes https://github.com/ksh93/ksh/issues/83

commit 01c25cb14bdd4ffdc4c8e736147d4de46306c21d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 20 16:49:17 2020 +0100

    whence -a: fix spurious 'undefined function' message
    
            $ ksh -c 'whence -a printf'
            printf is a shell builtin
            printf is /usr/bin/printf
            printf is an undefined function
    
    The third line should not appear.
    
    src/cmd/ksh93/bltins/whence.c:
    - Remove faulty extra check for undefined (= autoload) functions.
      This was already handled earlier, on lines 192-193.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression test.
    - For previous 'whence -a' test, don't bother with shell function.
    
    Fixes https://github.com/ksh93/ksh/issues/26

commit b2bdbef561fbb89e0bcfb42778e6610138d8ce04
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 20 15:37:39 2020 +0100

    ksh -i: only print newline on EOF if really interactive
    
    Some regression tests have to be run with the -i option, making the
    shell behave (mostly) as if it is interactive. This causes ksh to
    print a final newline upon EOF (Ctrl+D). This is functional if the
    shell is really interactive, i.e. if standard input is on a
    terminal and we're not running a shell script: it ensures that a
    parent shell's prompt appears on a new line. But for tests like
       ksh -i -c 'testcommands'
    or
       ksh -i <<EOF
       testcommands
       EOF
    it's a minor annoyance. Adding an explicit 'exit' is an effective
    workaround, but we might as well fix it.
    
    src/cmd/ksh93/sh/main.c: exfile(): done:
    - If shell is "interactive", only print final newline if standard
      input is on a terminal and we're not running a -c script.

commit bd88cc7f4f7207b48104e37cca90848adf5cb10c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jul 19 15:42:12 2020 -0700

    Fix two crashes related to kshdb (#82)
    
    This commit fixes two different crashes related to kshdb:
    - When redirect is given an invalid file descriptor, a segfault
      no longer occurs. Reproducer:
      $ ksh -c 'redirect 9>&200000000000'
    
    - Fix a crash due to free(3) being used on an invalid pointer.
      This can be reproduced with kshdb (commands from att/ast#582):
      $ git clone https://github.com/rocky/kshdb.git
      $ cd kshdb
      $ ksh autogen.sh
      $ echo "print hi there" > $HOME/.kshdbrc
      $ ./kshdb -L . test/example/dbg-test1.sh
    
    src/cmd/ksh93/bltins/misc.c: b_dot_cmd():
    - The string pointed to by shp->st.filename must be able to be
      freed from memory with free(3), so duplicate the string with
      strdup(3).
    
    src/cmd/ksh93/sh/io.c: sh_redirect():
    - Show an error message when a file descriptor is invalid to
      fix a memory fault.

commit 36f55f1f857f84c3ca88664b8050853e15350ade
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 19 06:42:53 2020 +0100

    bltins/whence.c: Revert accidentally included test (re: 3613da42)
    
    Some temp debug code that tests a possible fix for #26 accidentally
    snuck in to a completely unrelated commit. Sorry about that.

commit e9c7ac70a73a621a744979ebce6dbea8e5d8829f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 19 06:21:14 2020 +0100

    remove unused 'is an exported alias' message (re: 80d9ae2b)
    
    Commit 80d9ae2b removed the line that set the NV_EXPORT flag on an
    alias when the obsolete ksh88 'alias -x' option was used. But it
    turns out that flag actually did something: it caused 'whence -v'
    to report the alias as an exported alias -- misleadingly, because
    exported aliases have never actually exised in ksh93. Since '-x' no
    longer sets that flag, that message is never printed.
    
    src/cmd/ksh93/data/msg.c,
    src/cmd/ksh93/include/path.h:
    - Remove is_xalias[] = "%s is an exported alias for " message.
    
    src/cmd/ksh93/bltins/whence.c:
    - Remove dead code to check for (formerly) exported alias.

commit 5521c39a9bb856de8a413808dd2c764c9872b890
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 17 22:26:51 2020 +0100

    src/cmd/INIT/cc.darwin*: remove optimisation hacks (re: 37a9c345)

commit 37a9c34515c8c966447f75b10a5205934ca51d7d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 17 21:43:15 2020 +0100

    Optimise for small code by default
    
    My tests with running shbench[*] on ksh binaries compiled by clang
    and gcc yielded no performance difference between compiling with
    '-O2' and '-Os'. So we might as well reduce ksh's size and memory
    footprint by default.
    
    [*] http://fossil.0branch.com/csb/
        https://github.com/ksh-community/shbench
    
    src/cmd/INIT/make.probe:
    - Change default gcc optimisation level from -O2 to -Os.
    - Change default non-gcc optimisation level from -O to -Os.

commit 3613da4240b82023b6861af08b57c2c426248766
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 17 17:13:53 2020 +0100

    Remove unused libcoshell
    
    The coshell(1) command, which is required for libcoshell to be
    useful, is not known to be shipped by any distribution. It was
    removed by the ksh-community fork and hence also by 93u+m (in
    2940b3f5). The coshell facility as a whole is obsolete and
    insecure. For a long time now, the statically linked libcoshell
    library has been 40+ kilobytes of dead weight in the ksh binary.
    
    Prior discussion (ksh2020): https://github.com/att/ast/issues/619
    
    src/lib/libcoshell/*:
    - Removed.
    
    src/cmd/ksh93/*:
    - Remove the SHOPT_COSHELL compiler option (which was enabled) and
      a lot of code that was conditional upon #ifdef SHOPT_COSHELL.
    
    - init.c: e_version[]: Removing SHOPT_COSHELL changed the "J"
      feature identifier in ${.sh.version} to a lowercase "j", which
      was conditional upon SHOPT_BGX (background job extensions).
      But src/cmd/ksh93/RELEASE documents (at 08-12-04, on line 1188):
        | +SHOPT_BGX enables background job extensions. Noted by "J" in
        |  the version string when enabled. [...]
      That is the only available documentation. So change that "j" back
      to a "J", leaving the version string unchanged after this commit.
    
    - jobs.c: job_walk(): We need to keep one 'job_waitsafe(SIGCHLD);'
      call that was conditional upon SHOPT_COSHELL; removing it caused
      a regression test failure in tests/sigchld.sh, 'SIGCHLD blocked
      for script at end of pipeline' (which means that until now, a ksh
      compiled without libcoshell had broken SIGCHLD handling.)
    
    bin/package, src/cmd/INIT/package.sh:
    - Don't export COSHELL variable.

commit fbc6cd42866db7c6dcc46247c99e79076c5172ec
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 17 04:26:17 2020 +0100

    Remove vestigial 3DFS support code (re: f88f302c)
    
    Support for the long-dead 3DFS userland versioning file system was
    already removed from ksh93 (although I'd overlooked some minor
    things), but libast still supported it. This removes that too.
    
    src/lib/libast/include/fs3d.h,
    src/lib/libast/man/fs3d.3,
    src/lib/libast/misc/fs3d.c:
    - Removed.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Remove attempted use of removed vpath builtin.
    
    src/cmd/ksh93/*:
    - Remove minor 3dfs vestiges.
    
    src/lib/lib{ast,cmd,coshell}/*:
    - Remove code supporting 3dfs.

commit 2db9953ae0432d4ba2915ca88240394b68838a87
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 16 21:00:28 2020 -0700

    Fix three bugs in the sleep builtin (#77)
    
    This commit backports the main changes to sh_delay from ksh93v-
    and ksh2020, which fixes the following bugs:
    
    - Microsecond amounts of less than one millisecond are no longer
      ignored. The following loop will now take a minimum of one
      second to complete:
      for ((i = 0; i != 10000; i++)) do
        sleep PT100U
      done
    
    - 'sleep 30' no longer adds an extra 30 milliseconds to the total
      amount of time to sleep. This bug is hard to notice since 30
      milliseconds can be considered within the margin of error. The
      only reason why longer delays weren't affected is because the old
      code masked the bug when the interval is greater than 30 seconds:
      else if(n > 30)
      {
          sleep(n);
          t -= n;
      }
      This caused 'sleep -s' to break with intervals greater than 30
      seconds, so an actual fix is used instead of a workaround.
    
    - 'sleep -s' now functions correctly with intervals of more than
      30 seconds as the new code doesn't need the old workaround. This
      is done by handling '-s' in sh_delay.
    
    src/cmd/ksh93/bltins/sleep.c:
    - Remove the replacement for sleep(3) from the sleep builtin.
    - Replace the old sh_delay function with the newer one from ksh2020.
      The new function uses tvsleep, which uses nanosleep(3) internally.
    
    src/cmd/ksh93/include/shell.h,
    src/cmd/ksh93/edit/edit.c,
    src/cmd/ksh93/sh/jobs.c,
    src/cmd/ksh93/sh/xec.c,
    src/cmd/ksh93/shell.3:
    - Update sh_delay documentation and usage since the function now
      requires two arguments.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test for 'sleep -s' when the interval is greater
      than 30 seconds. The other bugs can't be tested for in a feasible
      manner across all systems:
      https://github.com/ksh93/ksh/pull/72#issuecomment-657215616

commit ea5b25b93a099cc113bc13f90f37125ad2c49500
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 16 14:27:00 2020 -0700

    Fix some formatting errors, typos and other problems (#78)
    
    Some notes:
    - Removed a TODO note that was fixed in commit 43d9fbac.
    - Removed a duplicate note about the '%l' time format in the changelog.
    - Applied the following documentation fixes from Terrence J. Doyle:
      - https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01852.html
      - https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01856.html
    - Fixed strange grammar in one of the error messages.
    - Added missing options for rksh to the synopsis section.
    - Applied a formatting fix from ksh93v- to the man page.
    - Replaced a C99 line comment in src/lib/libast/comp/realpath.c with a
      proper comment that is valid in C89.
    - Prioritize UTC over GMT in the documentation (missed by commit c9634e90).
    - Add some extra information for 'ksh -R file' to the man page. This patch
      is from Red Hat: https://git.centos.org/rpms/ksh/blob/c8/f/SOURCES/ksh-20080202-manfix.patch

commit 03224ae3af95e90a99b7c6e08af2fa26407c8d1b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 16 10:56:49 2020 -0700

    Make the 'history' and 'r' commands builtins (#76)
    
    With this change no more preset aliases exist, so the preset alias
    tables can be safely removed. All ksh commands can now be used
    without 'unalias -a' removing them, even in interactive shells.
    Additionally, the history and r commands are no longer limited to
    being used in interactive shells.
    
    src/cmd/ksh93/bltins/hist.c:
    - Implement the history and r commands as builtins. Also guarantee
      lflag is set to one by avoiding 'lflag++'.
    
    src/cmd/ksh93/Makefile,
    src/cmd/ksh93/Mamfile,
    src/cmd/ksh93/sh/main.c,
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/data/aliases.c:
    - Remove the table of predefined aliases because the last few have
      been removed. During init the alias tree is now initialized the
      same way as the function tree.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Remove the bugfix for unsetting predefined aliases because it is
      now a no-op. Aliases are no longer able to have the NV_NOFREE
      attribute.
    
    src/cmd/ksh93/tests/alias.sh:
    - Remove the regression test for unsetting predefined aliases since
      those no longer exist.
    
    src/cmd/ksh93/data/builtins.c:
    - Update sh_opthist[] for 'hist --man', etc.
    
    src/cmd/ksh93/sh.1:
    - Remove the list of preset aliases since those no longer exist.
    - Document history and r as builtins instead of preset aliases.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 17f81ebedb440ed2297097446499a7016d5428e2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 16 05:57:23 2020 +0100

    Load 'r' and 'history' default aliases on interactive only
    
    These two default aliases are useful on interactive shells. In
    scripts, they interfere with possible function or command names.
    
    As of this commit, these final two default aliases are only loaded
    for interactive shells, leaving zero default aliases for scripts.
    This completes the project to get rid of misguided default aliases.
    
    src/cmd/ksh93/include/shtable.h,
    src/cmd/ksh93/data/aliases.c:
    src/cmd/ksh93/sh/init.c:
    - Add empty alias table shtab_noaliases[] for scripts.
    - Rename inittree() to sh_inittree() and make it external.
    - nv_init(), sh_reinit(): Initialise empty alias tree for scripts.
    
    src/cmd/ksh93/sh/main.c: sh_main():
    - If interactive, reinitialise alias tree for interactive shells.
    
    src/cmd/ksh93/tests/alias.sh:
    - To test default alias removal, launch shell with -i.

commit a42ac7e77a0262cfcb0cfab4ae5015bf963daa9d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 16 04:23:40 2020 +0100

    Fix annoying usage/--help/--man message corruption
    
    In a locale other than C/POSIX, ksh produces corrupted usage
    messages for alternatives, e.g. this output of 'typeset -\?':
    | Usage: typeset [-bflmnprstuxACHS] [-a[type]] [-i[base]] <..CUT..>
    |                [-T[tname]] [-Z[n]] [name[=value]...]
    |    Or:[name[=value]...]
    | typeset[name[=value]...]
    | [[name[=value]...]
    | options[name[=value]...]
    | ] -f [name...]
    
    Correct output is:
    | Usage: typeset [-bflmnprstuxACHS] [-a[type]] [-i[base]] <..CUT..>
    |                [-T[tname]] [-Z[n]] [name[=value]...]
    |    Or: typeset [ options ] -f [name...]
    
    Similar corruption occurs in --help and --man output.
    This bug is ancient: it's already in ksh 1993-12-28 s+.
    
    ksh2020 has this fixed. A 'git bisect' run pinpointed the fix
    to this commit, which fixes the ERROR_translating macro after
    removing the AST-specific locale subsystem:
    https://github.com/att/ast/commit/4abc061e
    But making the same change in ksh 93u+m produced no results
    (probably because we have not removed that subsystem).
    
    However, disabling the use of translation macros in optget.sh
    altogether (replacing them with dummies that were already coded in
    a preprocessor directive fallback for a reduced standalone libast)
    turns out to work. It's not as if there is actually any translation
    anyway, so this effectively fixes this bug.
    
    The actual cause of this bug remains mysterious, but should be
    somewhere in the AST translation and/or locale subsystem.
    
    src/lib/libast/misc/optget.c:
    - Use fallback translation macros.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for output of -?, --?x, --help and --man
      for a usage string with an alternative ("Or:") usage message.
      Before the fix, these failed when running the tests in the
      C.UTF-8 locale (as in 'bin/shtests -u builtins').

commit 8c7c60ec19c4f37ff54c0ff4a4f178a6fcd1f213
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 16 00:59:33 2020 +0100

    shellquoting: rm redundant iswprint() call (re: f9d28935)
    
    A regression test failure was occurring on FreeBSD for
      bin/shtests -u builtins
    because UTF-8 characters were wrongly encoded as bytes in the
    C.UTF-8 locale. The cause is that iswprint() always returns false
    on FreeBSD if the ksh-specific C.UTF-8 locale is active, as the OS
    doesn't support it.
    
    That iswprint() call is redundant anyway; the new is_invisible()
    function now handles this.
    
    src/cmd/ksh93/sh/string.c: sh_fmtq():
    - Remove redundant iswprint() test.

commit 01145a48ddc1a7609153917ac9ca82e87b66c81a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jul 15 15:38:44 2020 -0700

    Handle the escape sequence for the End key (#75)
    
    Many terminals (xterm being one example) give the Home and End keys
    the escape sequences '^[[H' and '^[[F'. The first sequence is
    handled in both editing modes by moving the cursor to start of
    line, but ksh ignored the second sequence.
    
    src/cmd/ksh93/edit/emacs.c,
    src/cmd/ksh93/edit/vi.c:
    - Add case labels for '^[[F' so that in both editing modes the End
      key moves the cursor to the end of the line.

commit 1fbbeaa19df408d85a75cf062847ec26a4589022
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 15 19:52:01 2020 +0100

    Convert default typeset aliases to regular builtins
    
    This converts the 'autoload', 'compound', 'float', 'functions',
    'integer' and 'nameref' default aliases into regular built-in
    commands, so that 'unalias -a' does not remove them. Shell
    functions can now use these names, which improves compatibility
    with POSIX shell scripts.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove default typeset aliases.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/include/builtins.h:
    - Add corresponding built-in command declarations. Typeset-style
      commands are now defined by a pointer range, SYSTYPESET ..
      SYSTYPESET_END. A couple need their own IDs (SYSCOMPOUND,
      SYSNAMEREF) for special-casing in sh/xec.c.
    - Update 'typeset --man'.
    
    src/cmd/ksh93/bltins/typeset.c: b_typeset():
    - Recognise the new builtin commands by argv[0]. Implement them by
      inserting the corresponding 'typeset' options into the argument
      list before parsing options. This may seem like a bit of a hack,
      but it is simpler, shorter, more future-proof and less
      error-prone than manually copying and adapting all the complex
      flaggery from the option parsing loop.
    
    src/cmd/ksh93/sh/parse.c,
    src/cmd/ksh93/sh/xec.c:
    - Recognise typeset-style commands by SYSTYPESET .. SYSTYPESET_END
      pointer range.
    - Special-case 'compound' (SYSCOMPOUND) and 'nameref' (SYSNAMEREF)
      along with recognising the corresponding 'typeset' options.
    
    src/cmd/ksh93/sh.1:
    - Update to document the new built-ins.
    - Since not all declaration commands are special built-ins now,
      identify declaration commands using a double-dagger "\(dd"
      character (which renders as '=' in ASCII) and disassociate their
      definition from that of special built-ins.
    
    src/cmd/ksh93/tests/variables.sh:
    - Adapt a regression test as there is no more 'integer' alias.

commit 45cfecfc1e89c6648a8cf3ebaea7ca535920f69f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 15 05:02:29 2020 +0100

    tests/basic.sh: fix tests to work with xtrace (re: c5820aab)

commit b1a41311235abb6eb977e3ba2eff99cc5cdde591
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 15 04:11:33 2020 +0100

    Millisecond precision for 'times' builtin (re: 65d363fd, 5c677a4c)
    
    Now that we have an iffe feature test for getrusage(3), introduced
    in 70fc1da7, the millisecond-precision 'times' command from the
    last version of ksh2020 can easily be backported.
    
    src/cmd/ksh93/bltins/misc.c:
    - Incorporate ksh2020 'times' command, with a couple of tweaks:
      * Use locale's radix point instead of '.'.
      * Pad seconds with initial zero if < 10.
    
    src/cmd/ksh93/data/builtins.c:
    - Update version date for 'times --man'.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update 'times' test for 3 digits after radix point.

commit c5820aabc957573c773a0ec7b13fa9e066664bf0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 15 01:53:12 2020 +0100

    Fix $TIMEFORMAT zero-decimal and error behaviour (re: 70fc1da7)
    
    The backported 'time' keyword code introduced a bug (shared by
    ksh2020): the $TIMEFORMAT format sequences %0R, %0U and %0S output
    a decimal fraction, acting as %1R, %1U and %1S.
    
    A minor ksh2020 behaviour change that was also backported was that
    the $TIMEFORMAT formatting no longer errored out on encountering an
    invalid identifier, but continued. That behaviour is now reverted.
    
    Neither of these two regressions occurred on older systems that
    have to use times(3) instead of getrusage(2) or gettimeofday(2).
    
    This commit also tweaks a regression test so that it doesn't fail
    if the old times(3) interface is used.
    
    src/cmd/ksh93/sh/xec.c: p_time():
    - (Fix indentation of a for loop.)
    - On modern systems, when outputting the result of $TIMEFORMAT
      format sequences, only print fraction if precision is nonzero.
    - On modern systems, when encountering an invalid format sequence,
      abort formatting in the same way as done for old systems.
    - On old systems, initialise 'n' in a more readable way when used
      as the index for tm[].
    
    src/cmd/ksh93/tests/basic.sh:
    - Don't fail, but issue warning on old systems that use times(3).
      Otherwise, check milliseconds: with the ksh 'sleep' builtin,
      'TIMEFORMAT=%3R; time sleep .002' should always output '0.002'.
    - Change regression test for TIMEFORMAT='%0S%' to check for the
      correct output, '0%', instead of checking for an error message.

commit 70fc1da73eed7cc92007a3c841f71400a38e5769
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jul 14 14:48:04 2020 -0700

    Fix the max precision of the 'time' keyword (#72)
    
    This commit backports the required fixes from ksh2020 for using
    millisecond precision with the 'time' keyword. The bugfix refactors
    a decent amount of code to rely on the BSD 'timeradd' and
    'timersub' macros for calculating the total amount of time elapsed
    (as these aren't standard, they are selectively implemented in an
    iffe feature test for platforms without them). getrusage(3) is now
    preferred since it usually has higher precision than times(3) (the
    latter is used as a fallback).
    
    There are three other fixes as well:
    
    src/lib/libast/features/time:
    - Test for getrusage with an iffe feature test rather than
      assume _sys_times == _lib_getrusage.
    
    src/cmd/ksh93/sh/xec.c:
    - A single percent at the end of a format specifier is now
      treated as a literal '%' (like in Bash).
    - Zero-pad seconds if seconds < 10. This was already done for
      the times builtin in commit 5c677a4c, although it wasn't
      applied to the time keyword.
    - Backport the ksh2020 bugfix for the time keyword by using
      timeradd and timersub with gettimeofday (which is used with
      a timeofday macro). Prefer getrusage when it is available.
    - Allow compiling without the 'timeofday' ifdef for better
      portability.
      This is the order of priority for getting the elapsed time:
      1) getrusage (most precise)
      2) times + gettimeofday (best fallback)
      3) only times (doesn't support millisecond precision)
      This was tested by using debug '#undef' statements in xec.c.
    
    src/cmd/ksh93/features/time:
    - Implement feature tests for the 'timeradd' and 'timersub'
      macros.
    - Do a feature test for getrusage like in the libast time test.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add test for millisecond precision.
    - Add test for handling of '%' at the end of a format specifier.
    - Add test for locale-specific radix point.

commit fc655f1a262f582026a1101b7ed7e96103242c46
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jul 14 14:00:28 2020 -0700

    Restore 'set -b'/'set -o notify' functionality (#74)
    
    'set -b' had no effect; it should cause the shell to notify job
    state changes immediately instead of waiting for the next prompt.
    
    This fixes a regression that was introduced in ksh93t 2008-07-25.
    The bugfix is from: https://github.com/att/ast/pull/1089
    
    src/cmd/ksh93/sh/jobs.c:
    - Save the tty wait state and avoid changing it if TTYWAIT was
      already on to avoid breaking 'set -b'.
      The last 'sh_offstate' is inside of an '#if' directive because it
      is only required when ksh is compiled with SHOPT_COSHELL enabled.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add a regression test for 'set -b' in interactive shells.

commit 39692fc3f65bb2af69e182c7121a747077cad04e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 13 20:58:14 2020 +0100

    tests/pty.sh: a couple of minor tweaks
    
    src/cmd/ksh93/tests/pty.sh:
    - init: Remove superfluous lineno=$LINENO assignments. They aren't
      needed if we avoid alias expansion on the err_exit function call.
    - In the test "vi mode file name completion", append the main
      shell's PID to /tmp/fakehome to make a slightly less insecure
      temporary directory name. Unfortunately we cannot use $tmp as
      that uses $TMPDIR which may cause a false pass. (re: 4cecde1d)

commit 8ad56f90abc37c17c662cc98aeb5a531e18b4925
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jul 13 21:24:14 2020 +0200

    Add FreeBSD stty workaround for pty regression tests
    
    Apparently, on FreeBSD, the stty command does not work correctly
    for setting 'erase' or 'kill' on a pty pseudoterminal. I've no
    idea whether the bug is in FreeBSD stty or in AST pty, but in any
    case, a workaround is needed for the time being.
    
    src/cmd/ksh93/tests/pty.sh:
    - Save terminal state on init; set a trap to restore it on exit.
    - Issue 'stty erase ^H kill ^X' on the real terminal before
      entering pty pseudoterminals.
    
    Resolves #44.

commit 66c955bc8fa6fad4e77a836f76e2542165465e79
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 13 11:10:23 2020 -0700

    Fix a fork bomb when vi is run from a script and sent Ctrl-Z (#73)
    
    This bug was reported on the old mailing list:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg00207.html
    
    A fork bomb can occur when SIGTSTP is sent to the vi editor. Vi
    must be launched from a script run with exec (tested with
    BusyBox vi, nvi and vim):
    $ cat /tmp/foo
    vi /tmp/bar
    echo end
    $ ksh
    $ chmod +x /tmp/foo
    $ exec /tmp/foo
    While in vi, send SIGTSTP using Ctrl-Z
    
    src/cmd/ksh93/sh/fault.c:
    - Only fork after Ctrl-Z if job control is available. The patch
      used checks 'job.jobcontrol' instead of 'SH_MONITOR':
      https://git.centos.org/rpms/ksh/blob/c8/f/SOURCES/ksh-20120801-forkbomb.patch

commit 84e2f6d92fb72cd1a0ddc4fd87c74b5c79711efa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 10 23:01:22 2020 +0100

    tests/leaks.sh: workaround minor variation when run with shcomp
    
    For unknown reasons, the test for a memory leak in 'read -C stat
    <<< "$data"' can show an intermittent minor variation in memory
    usage when run with shcomp on certain versions of macOS.
    
    The reported variations are 48 bytes or 80 bytes. This is too small
    to be the result of an actual memory leak in the tested command;
    it is repeated 500 times so that any real leak should show a
    difference of at least 500 bytes.
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add a tolerance of 128 bytes to get rid of the false failure.
    
    Fixes #70 (hopefully).

commit 778fd6ca2d919358db38076123e5705994e2a524
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 10 18:26:28 2020 +0100

    Fix possible crash due to failure to update shell FD state
    
    This applies ksh-20100621-fdstatus.patch from Red Hat. Not very
    much information is available, so this one is more or less taken
    on faith. But it seems to make sense on the face of it: calling
    sh_fcntl() instead of fcntl(2) directly makes the shell update its
    internal file descriptor state more frequently.
    
    It claims to fix Red Hat bug 924440. The report is currently closed
    to the public: https://bugzilla.redhat.com/show_bug.cgi?id=924440
    
    However, Kamil Dudka at Red Hat writes:
    https://github.com/ksh93/ksh/issues/67#issuecomment-656379993
    | Yes, the summary of RHBZ#924440 is "crash in bestreclaim() after
    | traversing a memory block with a very large size". We did not have
    | any in house reproducer for the bug. The mentioned patch was
    | provided and verified by a customer.
    
    ...and Marc Wilson dug up a Red Hat erratum containing this info:
    https://download.rhn.redhat.com/errata/RHBA-2013-1599.html
    | Previously, the ksh shell did not resize the file descriptor list
    | every time it was necessary. This could lead to memory corruption
    | when several file descriptors were used. As a consequence, ksh
    | terminated unexpectedly. This updated version resizes the file
    | descriptor list every time it is needed, and ksh no longer
    | crashes in the described scenario. (BZ#924440)
    
    No reproducer means no regression test can be added now.
    
    src/cmd/ksh93/sh/io.c,
    src/cmd/ksh93/sh/subshell.c,
    src/cmd/ksh93/sh/xec.c:
    - Change several fcntl(2) calls to sh_fcntl(). This function calls
      fcntl(2) and then updates the shell's file descriptor state.

commit c4236cc2953b99588d91327f3c443abffa685db1
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jul 10 09:52:47 2020 -0700

    Fix type names starting with lowercase 'a' (#69)
    
    Type names that start with a lowercase 'a' cause an error when used:
    
    $ typeset -T al=(typeset bar)
    $ al foo=(bar=testset)
    /usr/bin/ksh: al: : invalid variable name
    
    The error occurs because when the parser checks for the alias
    builtin (to set 'assignment' to two instead of one), only the first
    letter of 'argp->argval' is checked (rather than the entire
    string). This was fixed in ksh93v- by comparing argp->argval
    against "alias", but in ksh93u+m the check can simply be removed
    because it is only run when a builtin has the BLT_DCL flag. As of
    04b9171, the alias builtin does not have that flag.
    
    src/cmd/ksh93/sh/parse.c:
    - Remove the bugged check for the alias builtin.
    
    src/cmd/ksh93/tests/types.sh:
    - Add a regression test for type names starting with a lowercase 'a'.

commit f9d28935bb93fe7336ba8c5eab4231050de2e11e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 10 01:38:13 2020 +0100

    Fix UTF-8 shellquoting for xtrace, printf %q, etc.
    
    This fixes an annoying issue in the shell's quoting algorithm
    (used for xtrace (set -x), printf %q, and other things) for UTF-8
    locales, that caused it to encode perfectly printable UTF-8
    characters unnecessarily and inconsistently. For example:
    
    $ (set -x; : 'aeu aéu')
    + : $'aeu a\u[e9]u'
    $ (set -x; : 'aéu aeu')
    + : 'aéu aeu'
    $ (set -x; : '正常終了 aeu')
    + : '正常終了 aeu'
    $ (set -x; : 'aeu 正常終了')
    + : $'aeu \u[6b63]\u[5e38]\u[7d42]\u[4e86]'
    
    This issue was originally reported by lijo george in May 2017:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01958.html
    
    src/cmd/ksh93/sh/string.c:
    - Add is_invisible() function that returns true if a character is a
      Unicode invisible (non-graph) character, excluding ASCII space.
      Ref.: https://unicode.org/charts/PDF/U2000.pdf
    - Use a fallback in is_invisible() if we cannot use the system's
      iswprint(3); this is the case for the ksh C.UTF-8 locale if the
      OS doesn't support that. Fall back to a hardcoded blacklist of
      invisible and control characters and put up with not encoding
      nonexistent characters into \u[xxxx] escapes.
      Ref.: https://unicode.org/charts/PDF/U2000.pdf
    - When deciding whether to switch to $'...' quoting mode (state=2),
      use is_invisible() instead of testing for ASCII 0-127 range.
    - In $'...' quoting mode, use is_invisible() to decide whether to
      encode wide characters into \u[xxxx] escapes.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression tests for shellquoting Arabic, Japanese and Latin
      UTF-8 characters, to be run only in a UTF-8 locale. The Arabic
      sample text[*] contains a couple of direction markers that are
      expected to be encoded into \u[xxxx] escapes.
    
    [*] source: https://r12a.github.io/scripts/tutorial/summaries/arabic

commit 588a1ff7ca9a634a611c975ff114fdc8c112fc02
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 9 22:59:45 2020 +0100

    Fix spurious warning output in KIA (-R) database file
    
    The ksh -R option creates a cross-reference database that can be
    parsed with a "C Query Language" (CQL) tool.
    See cql-1994.pdf at: http://gsf.cococlyde.org/files
    
    The -R option puts ksh in noexec mode as it parses the script, and
    this can produce warnings as the syntax is parsed. The bug is that
    these warnings can end up in the database file, corrupting it.
    
    This applies a fix from Paulo Andrade, via Siteshwar Vashisht:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01952.html
    
    src/cmd/ksh93/sh/parse.c:
    - Terminate names with a zero character when writing database
      output.
    
    A regression test is not very feasible because the majority of the
    database output consists of cryptic IDs/hashes that vary depending
    on the session and/or system and possibly other things.

commit 69306662344da8172381d3a511f462dced389ff1
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 9 14:12:04 2020 -0700

    Fix a syntax error when ((...)) is combined with redirections (#68)
    
    This bugfix was backported from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/sh/parse: item():
    - The done label is placed after the 'inout' call for handling I/O
      redirections. This causes the command below to produce a syntax
      error because the '>' is not handled as a redirection operator
      after 'goto done':
      $ ((1+2)) > /dev/null
      /usr/bin/ksh: syntax error: `>' unexpected
      Moving the done label fixes the syntax error as 'inout' is now
      called to handle the redirection operator.
    
    src/cmd/ksh93/tests/arith.sh:
    - Add a simple regression test.

commit 361fe1fcc3097568b08d63a5ba3f979eee17c408
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 9 18:34:15 2020 +0100

    Fix hash table memory leak when restoring PATH
    
    There is a bug in path_alias() that may cause a memory leak when
    clearing the hash table while setting/restoring PATH.
    
    This applies a fix from Siteshwar Vashist:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01945.html
    
    Note that, contrary to Siteshwar's analysis linked above, this bug
    has nothing directly to do with subshells, forked or otherwise; it
    can also be reproduced by temporarily setting PATH for a command,
    for example, 'PATH=/dev/null true', and then doing a PATH search.
    
    Modified analysis:
    ksh maintains the value of PATH as a linked list. When a local
    scope for PATH is created (e.g. in a virtual subshell or when doing
    something like PATH=/foo/bar command ...), ksh duplicates PATH by
    increasing the refcount for every element in the linked list by
    calling the path_dup() and path_alias() functions. However, when
    the state of PATH is restored, this refcount is not decreased. Next
    time when PATH is reset to a new value, ksh calls the path_delete()
    function to delete the linked list that stored the older path. But
    the path_delete() function does not free elements whose refcount is
    greater than 1, causing a memory leak.
    
    src/cmd/ksh93/sh/path.c: path_alias():
    - Decrease refcount and free old item if needed.
      (The 'old' variable was already introduced in 99065353, but
      its value was never used there; this fixes that as well.)
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add regression test. With the bug, setting/restoring PATH
      (which clears the hash table) and doing a PATH search 16 times
      causes about 1.5 KiB of memory to be leaked.

commit 5e7d335f2fc9c42b26386c4eea7abe52da5944e5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 9 16:02:15 2020 +0100

    Fix crash when listing indexed arrays with 'typeset -a'
    
    There is a bug in print_scan() function that may cause ksh to crash
    while listing indexed arrays. The crash happens in nv_search() when
    called from print_scan().
    
    This applies a fix from Siteshwar Vashist:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01944.html
    
    src/cmd/ksh93/bltins/typeset.c:
    - Call nv_scan() without the NV_IARRAY flag, even for a null scan.
    
    src/cmd/ksh93/tests/arrays.sh:
    - Add regression test for 'typeset -a' crash and check output.

commit a8f6d6b842c12bfcf2f69cb0301137b263c03895
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 9 15:09:52 2020 +0100

    Fix crash due to double free() when sourcing multiple files
    
    There is a bug in sh_eval() that may cause ksh to crash due to a
    double free() after sourcing multiple files with '.' or 'source'
    if a longjmp is triggered, e.g. by a syntax error.
    
    This applies a fix from Siteshwar Vashist:
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01943.html
    
    src/cmd/ksh93/sh/xec.c: sh_eval():
    - Zero file descriptor io_save after closing it. This prevents a
      double free() after returning from a longjmp.
    
    src/cmd/ksh93/tests/basic.sh:
    - Add reproducer as regression test.

commit ae92cd897e836baf18e0bbe2d6a20964efe3dbd7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jul 9 06:21:42 2020 +0100

    optget.c: proper formatting for '--help | --man' (re: 6916a873)
    
    This shows a better layout in '--man' or '--nroff' output.
    
    src/lib/libast/misc/optget.c:
    - Incorporate the '--help | --man' addition in the printf format
      instead of hardcoding it in the default options string.

commit 9526b3fa08d24adaa48a81bbc1095530d1fb2d5c
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jul 8 21:08:28 2020 -0700

    Fix unexpected output from 'printf %T' with certain formats (#65)
    
    This commit changes the behavior of four date formats accepted
    by 'printf %()T' because the old behavior is not compatible with
    modern implementations of date(1):
    - %k and %l now return a blank-padded hour, the former based on a
      24-hour clock and the latter a 12-hour clock (these are common
      extensions present on Linux and *BSD).
    - %f now returns a date with the format '%Y.%m.%d-%H:%M:%S'
      (BusyBox extension).
    - %q now returns the quarter of the current year (GNU extension).
    
    src/cmd/ksh93/data/builtins.c:
    - Copy the date format documentation from date in libcmd to
      the printf man page (for documenting 'printf %T').
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add four regression tests for the changed date formats.
    
    src/cmd/ksh93/sh.1:
    - Remove inaccurate information about the date formats accepted by
      printf %T'. The KornShell uses a custom version of strftime(3)
      that isn't guaranteed to accepts the same formats as the native
      strftime function.
    
    src/lib/libast/tm/tmxfmt.c:
    - Change the behavior of %f, %k, %l and %q to the common behavior.
      %k and %l are implemented as aliases to %_H and %_I to avoid
      duplicating code.
    
    src/lib/libcmd/date.c:
    - Update the documentation for the AST date command since it is
      also affected by the changes to 'printf %T'.
    
    Fixes #62

commit e70925ce1033790b95e7c48af78a4134ac22dd2e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jul 8 17:09:40 2020 -0700

    Fix memory leak on unset of associative array (#64)
    
    Associative arrays weren't being properly freed from memory, which
    was causing a memory leak.
    
    This commit incorporates a patch and reproducer/regress test from:
    https://www.mail-archive.com/ast-users@lists.research.att.com/msg01016.html
    
    src/cmd/ksh93/sh/name.c:
    - Properly free associative arrays from memory in nv_delete().
    
    src/cmd/ksh93/tests/leaks.sh:
    - Add regression test.

commit bf79131f40c77ae771490ae2d0fed6a442273889
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jul 8 23:23:19 2020 +0100

    Use vmstate for memory leak regress tests (re: ad9a9219)
    
    'ps' does not always give reliable results; on macOS, 'ps' appears
    to produce nondeterministic (i.e. randomly varying) results for
    'vsz' and 'rss', making it unusable for memory leak tests. See:
    https://github.com/ksh93/ksh/pull/64#issuecomment-655094931
    and further comments.
    
    So let's compile in the vmstate builtin so that we can make sure to
    measure things properly. It also reports bytes instead of 1024-byte
    blocks, so smaller leaks can be detected.
    
    To be decided: whether or not to disable the vmstate builtin for
    release builds in order to save about 12K in the ksh binary.
    
    src/cmd/ksh93/data/builtins.c:
    - Add vmstate to the list of builtins that are compiled in.
    
    src/cmd/ksh93/tests/leaks.sh:
    - getmem(): get size using: vmstate --format='%(busy_size)u'
      (Using busy_size instead of size seems to make more sense as it
      excludes freed blocks. See vmstate --man)
    - Introduce a $unit variable for reporting leaks and set it to
      'bytes'; this makes it easier to change the unit in future.
    - Since the tests are now more sensitive, initialise all variables
      before use to avoid false leak detections.
    - The last test seemed to need a few more 'read' invocations in
      order to get memory usage to a steady state before the test.

commit 9a9da2c299a0adcd36b4efd1b1c0ee2883beba7b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jul 6 13:51:44 2020 -0700

    Fix use of strdup on a NULL pointer (#63)
    
    The following set of commands can rarely cause a memory fault
    when auditing[*] is enabled, although most of the time it will
    simply cause ksh to write '(null)' to the auditing file in place
    of a tty name:
    
    $ [ -e /etc/ksh_audit ] || echo "/tmp/ksh_auditfile;$(id -u)" | sudo tee /etc/ksh_audit;
    $ v=$(ksh  2> /dev/null +o rc -ic $'getopts a:bc: opt --man\nprint $?')
    $ cat /tmp/ksh_auditfile
    1000;1593599493;(null); getopts a:bc: opt --man
    
    This happens because strdup is used unconditionally on the pointer
    returned by 'ttyname', which can be NULL if stderr is closed. This
    then causes 'hp->tty' to be set to null, as strdup returns NULL.
    See https://github.com/att/ast/issues/1028
    
    src/cmd/ksh93/edit/history.c:
    - Make strdup duplicate 'notty' instead of NULL to prevent
      crashes.
    
    [*] https://blog.fpmurphy.com/2008/12/ksh93-auditing-and-accounting.html

commit 300cd199872b577769f749c18e19b39f22476725
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 5 19:24:41 2020 +0200

    Fix corrupt UTF-8 char processing & shellquoting after aborted read
    
    If the processing of a multibyte character was interrupted in UTF-8
    locales, e.g. by reading just one byte of a two-byte character 'ü'
    (\303\274) with a command like:
            print -nr $'\303\274' | read -n1 g
    then the shellquoting algorithm was corrupted in such a way that
    the final quote in simple single-quoted string was missing. This
    bug may have had other, as yet undiscovered, effects as well. The
    problem was with corrupted multibyte character processing and not
    with the shell-quoting routine sh_fmtq() itself.
    
    Full trace and discussion at: https://github.com/ksh93/ksh/issues/5
    (which is also an attempt to begin to understand the esoteric
    workings of the libast mb* macros that process UTF-8 characters).
    
    src/lib/libast/comp/setlocale.c: utf8_mbtowc():
    - If called from the mbinit() macro (i.e. if both pointer
      parameters are null), reset the global multibyte character
      synchronisation state variable. This fixes the problem with
      interrupted processing leaving an inconsistent state, provided
      that mbinit() is called before processing multibyte characters
      (which it is, in most (?) places that do this). Before this fix,
      calling mbinit() in UTF-8 locales was a no-op.
    
    src/cmd/ksh93/sh/string.c: sh_fmtq():
    - Call mbinit() before potentially processing multibyte characters.
      Testing suggests that this could be superfluous, but at worst,
      it's harmless; better be sure.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add regression test for shellquoting with 'printf %q' after
      interrupting the processing of a multibyte characeter with
      'read -n1'. This test only fails in a UTF-8 locale, e.g. when
      running: bin/shtests -u builtins SHELL=/buggy/ksh-2012-08-01
    
    Fixes #5.

commit 2624b297fce756861909daea57b9c692e9ec0e2d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jul 5 07:48:01 2020 +0200

    4 typo fixes: be use => be used

commit 1ca9286ab8cc9b14098aeddb0b5623bfb13d6275
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 4 23:31:40 2020 +0200

    tests/pty.sh: disable 'process/terminal group exercise' for now
    
    Apparently, pty doens't handle SIGTSTP correctly:
    https://github.com/att/ast/issues/375
    https://github.com/ksh93/ksh/issues/45#issuecomment-653789092
    
    src/cmd/ksh93/tests/pty.sh:
    - Disable the 'process/terminal group exercise' regression test,
      which depends on correct SIGTSTP handling, until pty can be
      fixed.
    
    Closes #45.

commit b2382efd8b74e09a693a40f44e32c4eae1f67f5d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 4 02:53:15 2020 +0200

    tests/shtests: rm debug command that snuck through (re: d7afb57c)

commit 658bba748e8f6d8c86af84e50c5aa88132b3a9d8
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jul 4 07:57:47 2020 -0700

    Fix 'kill -INFO' on systems that support SIGINFO (#59)
    
    src/cmd/ksh93/data/signals.c:
    - SIGINFO was absent from the table of signals, which caused
      commands like 'kill -INFO $$' to fail even on platforms with
      SIGINFO (such as macOS and FreeBSD). Fix that by adding
      it to the signal table.
    
    src/cmd/ksh93/tests/signal.sh:
    - Add a regression tests for using SIGINFO with the kill builtin.
      The test will only be run if the external kill command supports
      SIGINFO.

commit d7afb57c49803c2194ccad68a34e6827f20e76b5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jul 4 01:28:08 2020 +0200

    shtests: use central temporary directory; add --keep option
    
    This gets rid of repetitive code in test scripts to create their
    own temporary directories. Instead, shtests exports a $tmp to each
    test script that is a subdirectory of its own temporary directory.
    This has the advantage of having all test script temporary
    directories in one hierarchy. Along with a new option to keep
    temporary files, this makes it easy to inspect them if wanted.
    
    This does make the test scripts less self-contained as they now
    depend on a temporary directory being exported as $tmp. But they
    already depended on $SHELL being the shell to test, so they already
    were not quite self-contained.
    
    src/cmd/ksh93/tests/shtests:
    - Add -k/--keep option to keep temporary directory. Make the EXIT
      trap report its location instead of deleting it.
    - For each test, create a subdirectory of $tmp (named after the
      test script plus the tested locale or 'shcomp') and export that
      subdirectory to the test script as its own $tmp.
    - If -k is not given, delete each script's temporary files
      immediately after running it to minimise disk usage.
    
    src/cmd/ksh93/tests/*.sh:
    - Don't make own temp directory.
    - Refuse to run if $tmp is not set.
    - Miscellaneous tweaks.

commit fa70fc3f7709d444566450c2684d143832aae386
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 3 21:52:28 2020 +0200

    tests/pty.sh: misc tweaks
    
    src/cmd/ksh93/tests/pty.sh:
    - Fix race condition in the test "raw Bourne mode literal tab
      characters with wide characters enabled" by adding 'd 10' to add
      a 10-millisecond delay before every write. Thanks to @JohnoKing:
      https://github.com/ksh93/ksh/pull/57#issuecomment-653617531
    - Fix locale for test "raw Bourne mode backslash handling" (should
      be UTF-8, not UTF8) (re: a0dcdeea).
    - Add a few more dummy # err_exit # comments to allow shtests to
      count the number of tests.

commit a0dcdeeadec61acb3de0fa12334491e133e574ba
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jul 3 12:08:00 2020 -0700

    Fix bugs with backslash escaping in interactive vi mode (#57)
    
    This commit fixes the following bugs in the 'vi' editing mode
    backslash escape feature. Ref.: Bolsky & Korn (1995), p. 113, which
    states for \: "Similar to Control+V [...] except that it escapes
    only the next Erase or Kill charactrer".
    
    1. The vi mode now only escapes the next character if the last
       character input was a backslash, fixing the bug demonstrated at:
       https://asciinema.org/a/E3Rq3et07MMQG5BaF7vkXQTg0
    2. Escaping backslashes are now disabled in vi.c if the vi mode is
       disabled (note that vi.c handles raw editing mode in UTF-8
       locales). This makes the behavior of the raw editing mode
       consistent in C/POSIX and UTF-8 locales.
    3. An odd interaction with Backspace when the character prior to a
       separate buffer entered with Shift-C was a backslash has been
       fixed. Demonstration at: https://asciinema.org/a/314833
       ^? will no longer be output repeatedly when attempting to erase
       a separate buffer with a Backspace, although, to be consistent
       with vi(1), you still cannot backspace past it before escaping
       out of it. Ref.:
       https://github.com/ksh93/ksh/issues/56#issuecomment-653586994
    
    src/cmd/ksh93/edit/vi.c:
    - Prevent a backslash from escaping the next input if the previous
      input wasn't a backslash. This is done by unsetting a variable
      named backslash if a backslash escaped a character. backslash is
      set to the result of c == '\\' when the user enters a new
      character.
    - Disable escaping backslashes in the raw editing mode because
      it should not be enabled there.
    
    src/cmd/ksh93/tests/pty.sh:
    - Add some tests for how ksh handles backslashes in each
      editing mode to test for the bugs fixed by this commit.
    
    Fixes #56.

commit 035a4cb3f453271b7ae63bcb53a7963b8dbe4c41
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Thu Jul 2 18:29:07 2020 -0400

    Fix segfault if $PATH contains a .paths directory (#55)
    
    ksh crashed if it encountered a .paths directory in any of the
    directories in $PATH.
    
    Ref: https://bugs.launchpad.net/ubuntu/+source/ksh/+bug/1534855
    
    src/cmd/ksh93/sh/path.c: path_chkpaths():
    - Refuse to read .paths if it's not a regular file
      or a symlink to a regular file.

commit 0c40e7c182d445fb3ad0c98539a2edf6d2d436a3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jul 3 00:06:42 2020 +0200

    INIT/make.probe: change for GCC v10 based on official AST repo
    
    In <https://github.com/att/ast/commit/d2771913>, GCC version 10 was
    specifically special-cased for skipping the -nostartfiles flag
    along with versions 7, 8, and 9. It seems more future-proof to
    specifically include it for versions up to 6 and remove it for any
    version 7 and up.
    
    src/cmd/INIT/make.probe:
    - Remove the -nostartfiles for all version of gcc > 7.

commit db1d539d499afd04234f19dd63b2029713261791
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jul 2 10:40:15 2020 -0700

    Fix ERE repetition expressions in [[ ... =~ ERE{x,y} ]] (#54)
    
    Regular expressions that combine a repetition expression with
    a parenthesized sub-expression throw a garbled syntax error:
    
    $ [[ AATAAT =~ (AAT){2} ]]
    ksh: syntax error: `~(E)(AAT){2} ]]
    :'%Cred%h%Creseksh: syntax error: `~(E)(AAT){2} ]]
    :'%Cred%h%Creseksh: syntax' unexpected
    
    The syntax error occurs because ksh is not fully
    accounting for '=~' when it runs into a curly bracket.
    This fix disables the syntax error when the operator
    is '=~' and adds handling for '(str){x}' (to allow for
    more than one sub-expression). This bugfix and the
    regression tests for it were backported from ksh93v-
    2014-12-24-beta.
    
    src/cmd/ksh93/sh/lex.c:
    - Do not trigger a syntax error for '{x}' when the operator
      is '=~' and add handling for multiple parentheses when
      combined with '{x}'.
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add two tests from ksh93v- to test sub-expressions
      combined with the '{x}' quantifier.

commit ad9a9219f0de1688d57cd75da180a131b7f1225b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jul 1 12:00:58 2020 -0700

    Fix memory leak regression tests by using ps(1) (#50)
    
    src/cmd/ksh93/tests/leaks.sh:
    - This script was never actually running the regression
      tests because 'vmstate' isn't available as a builtin.
      While this can be fixed by adding vmstate to the builtin
      table, that has the downside of increasing the binary
      size of ksh. This commit replaces all usage of 'vmstate'
      with 'ps' and 'awk' as a different way to measure
      memory usage. The memory leaks regression tests are now
      always run.
    - Rename old $n to $N due to new $n interfering with the old
      regression test.
    - Add before and after results for the number of 1024-byte
      blocks leaked in each test.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 120aec25ba1a38a0c4672d9102a342571beb5f0a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jul 1 10:14:10 2020 -0700

    Fix a crash when 'read -u' is given an invalid fd (#53)
    
    File descriptors that are too far out of range will cause the
    read builtin to crash. The following example will generate
    two crashes:
    
    $ ksh -c 'read -u 2000000' || ksh -c 'read -u-2000000'
    
    The fix is to error out when the given file descriptor is out
    of range. This bugfix is from Tomas Klacko, although it was
    modified to use 'sh_iovalidfd' and reject numbers greater
    than 'INT_MAX':
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01912.html
    The question about 'shp->fdstatus[-1]' only applies to ksh93v-
    (ksh93u+ doesn't have any references to 'shp->fdstatus[-1]').
    
    src/cmd/ksh93/bltins/read.c:
    - File descriptors that are out of range should be rejected
      with an error message (like invalid file descriptors that
      are in range). The seemingly redundant check for negative
      numbers is there because out of range negative numbers also
      cause memory faults despite the later 'fd<0' check.
    
    src/cmd/ksh93/tests/io.sh:
    - Add three tests for attempting 'read -u' on various invalid
      file descriptor numbers.

commit 3e140727688b715d571e613fd0e3af8a4f8ee0bb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 30 04:45:02 2020 +0200

    package.sh: clean up FIFO properly  (re: 936802f9)
    
    Not cleaning up the FIFO broke 'grep -r' in the arch directory,
    making it hang forever. So we need a better way of cleaning it up.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Unlink the FIFO early after sleeping a second in the background.
      This works because the named directory entry is only needed to
      establish the pipe, not to keep it going.

commit 8d8a825723ad362500e725ecad389da33a4e8f47
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 30 02:36:13 2020 +0200

    Part-revert GMT->UTC change (re: c9634e90)
    
    To get ksh to prefer UTC over GMT in 'printf %T' output, only the
    change in format[] was needed. The corresponding change in zone[]
    made it prefer UTC for London time, even in summer time, which is
    wrong -- e.g.:
    
    $ LANG=C TZ=Europe/London arch/*/bin/ksh -c 'date; printf %T\\n now'
    Tue Jun 30 01:39:09 BST 2020
    Tue Jun 30 00:39:09 UTC 2020
    
    src/lib/libast/tm/tmdata.c:
    - Revert change in zone[].

commit fa51a5ce3b16a2d5a50d6d3ec392bd765884e2e2
Author: Martijn Dekker <martijn@vslack142.inlv.org>
Date:   Tue Jun 30 01:43:25 2020 +0200

    Fix 'whence -a' regression test (re: 99065353)
    
    The regression test failed on systems where 'chmod' exists at more
    than one location, e.g. Slackware where it's at both /bin/chmod and
    /usr/bin/chmod.
    
    src/cmd/ksh93/tests/builtins.sh: 'whence -a'/tracked aliases test:
    - In the expected value, use modified 'whence -a -p chmod' output
      to get all of the paths to chmod.
    - On failure, report both expected and actual values.

commit 1b5bc1802a97010a0225bd7dba55001475334966
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 29 11:09:20 2020 -0700

    Fix the readonly builtin's scope in functions (#51)
    
    * Fix the readonly builtin's scope in functions
    
    This bug was first reported at https://github.com/att/ast/issues/881
    
    'tdata.sh->prefix' is only set to the correct value when
    'b_readonly' is called as 'export', which breaks 'readonly' in
    functions because the correct scope isn't set. As a result, the
    following example will only print a newline:
    
    $ function show_bar { readonly foo=bar; echo $foo; }; show_bar
    
    The fix is to move the required code out of the if statement for
    'export', as it needs to be run for 'readonly' as well. This bugfix
    is from https://github.com/att/ast/pull/906
    
    src/cmd/ksh93/bltins/typeset.c:
    - Set 'tdata.sh->prefix' to the correct value, otherwise 'readonly'
      uses the wrong scope.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add the regression test from ksh2020, modified to run in a
      subshell.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/sh.1:
    - Add documentation of 'readonly' vs. 'typeset -r' difference:
      'readonly' does not create a function-local scope.
    
    Co-authored-by: Martijn Dekker <martijn@inlv.org>

commit 10b6ba801d5d837916d8518475f087511f16149e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 29 10:08:28 2020 -0700

    Fix memory corruption when a compound variable is unset (#49)
    
    The following set of commands ends with a memory fault under
    certain circumstances because ksh attempts to free memory
    twice, causing memory corruption:
    
    $ testarray=(1 2)
    $ compound testarray
    $ unset testarray
    $ eval testarray=
    
    The fix is to make sure 'np->nvfun' is a valid pointer before
    attempting to free memory in 'put_tree'. This patch is from
    OpenSUSE: https://build.opensuse.org/package/view_file/shells/ksh/ksh93-nvtree-free.dif?expand=1
    
    src/cmd/ksh93/sh/nvtree.c:
    - Do not try to free memory when 'np->nvfun' and 'val'
      are false.
    
    src/cmd/ksh93/tests/comvar.sh:
    - Add a regression test for the double free problem. The
      reproducer must be run from an executable script
      with 'ksh -c'.

commit 5135cf651c03952114132b1efd429a0a45026c37
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jun 28 15:30:27 2020 -0700

    Fix crashes caused by 'typeset -RF' (#47)
    
    Variables created with 'typeset -RF' were being treated as
    short integers, even though they are actually floating point
    values. As a result the following example will cause a crash:
    
    $ typeset -RF foo=1
    $ test "$foo"
    
    This is fixed by checking for 'NV_DOUBLE' with 'nv_isattr',
    which prevents ksh from treating floating point values as
    short integers due to '== NV_INT16P' excluding 'NV_DOUBLE'.
    This bugfix was backported from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/sh/array.c,
    src/cmd/ksh93/sh/name.c,
    src/cmd/ksh93/sh/nvdisc:
    - Avoid treating floating point values as short integers by
      checking for 'NV_DOUBLE' with 'nv_isattr'.
    
    src/cmd/ksh93/tests/types.sh:
    - Add a regression test for the 'typeset -RF' crash. The
      crash cannot be replicated if 'typeset -RF' sets 'foo'
      to zero.

commit c870be9feaae5f514cd5aefbe29790f8f23f77ef
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 27 00:52:17 2020 +0200

    regress: avoid interference from systemwide /etc/ksh.kshrc
    
    ksh, even non-interactive, loads /etc/ksh.kshrc by default. On
    some systems this can be a problem, e.g. OpenBSD, which installs a
    default /etc/ksh.kshrc which is designed for its version of pdksh.
    
    Quoth sh.1:
    
        On systems that support a system wide /etc/ksh.kshrc
        initialization file, if the filename generated by the expansion
        of ENV begins with /./ or ././ the system wide initialization
        file will not be executed.
    
    src/cmd/ksh93/tests/shtests,
    src/cmd/ksh93/tests/builtins.sh,
    src/cmd/ksh93/tests/options.sh,
    src/cmd/ksh93/tests/pty.sh:
    - Instead of emptying or unsetting ENV, ensure it is exported with
      a default value of /./dev/null so we skip loading the system-wide
      profile and load an empty user profile.
    - Where a specific ENV path was required for the tests, prefix it
      with '/.' so it starts with '/./'.

commit bb4745e89702e4291472809f5938080cf7371c6a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jun 26 15:36:29 2020 -0700

    Fix incorrect behavior of 'cd ../.foo' (#46)
    
    The cd builtin was removing '.' from directory names when combined
    with a preceding '../', which caused commands like 'cd ../.local'
    to become 'cd ../local'. This patch fixes the problem by limiting
    the extra handling to leading '..'. The bugfix comes from ksh93v-
    2013-10-10-alpha, although this version is a shortened patch from
    Solaris (as ksh93v- refactored a decent amount of the code for the
    cd builtin).
    
    src/cmd/ksh93/bltins/cd_pwd.c:
    - cd should only check for leading '..', as trying to handle a lone
      '.' only causes problems.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test for this problem based on the test present in
      ksh93v- 2013-10-10-alpha.
    
    Patch from Solaris:
    https://github.com/oracle/solaris-userland/blob/860d27f/components/ksh93/patches/270-23319761.patch

commit eaaa0de74d10415570c1cd24c54c99d4623b5862
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 26 13:35:15 2020 +0200

    tests/builtins.sh: change GMT to UTC before testing (re: c9634e90)
    
    Apparently some systems are still configured to use GMT instead of
    UTC after all. This included our own GitHub CI runner config.
    Oops. This made the previous commit fail to pass the CI test run.
    
    We can't win this one, it's got to be either one or the other.
    UTC is the international standard on which civil time is based.
    GMT is often taken as synonymous for UTC, but in navigation,
    it can differ from UTC by up to 0.9 seconds. Ref.:
    https://en.wikipedia.org/w/index.php?title=Greenwich_Mean_Time&oldid=963422787
    The more ambiguous term should not be the first preference.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Before checking 'printf %T now' output against 'date' output,
      change any ' GMT ' in the latter to ' UTC '.
    
    .github/workflows/ci.yml:
    - Set time zone to UTC, not GMT.

commit c9634e908df2787d439325fefa78ea8109e0e3a7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 26 13:07:51 2020 +0200

    tmdata: prioritise "UTC" over "GMT"
    
    "UTC" is the modern name for what used to be "GMT", but ksh still
    preferred GMT. On systems configured to use the UTC time zone, this
    caused a 'printf %T' regression test failure in tests/builtins.sh
    as the external 'data' utility will prefer UTC these days.
    
    src/lib/libast/tm/tmdata.c:
    - Reorder the name alternatives for UTC/GMT so that UTC is
      the first preference.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Report expected and actual values on 'printf %T' failure.
    
    Related: #6

commit f8114823504b4888a3308f078504c3fbf32b5d87
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 26 12:19:06 2020 +0200

    bin/shtests wrapper: export INSTALLROOT when using other ksh
    
    When specifying another ksh to test using e.g. KSH=/bin/ksh to test
    the system's stock ksh, the pty command was not found because it
    resides in the arch/*/bin directory. The main shtests script bases
    its $PATH on $INSTALLROOT, but does not set INSTALLROOT itself if
    the shell to test is outside the installation hierarchy. Setting it
    would allow the pty.sh regresssion tests to run on a shell
    specified on the command line.
    
    bin/shtests:
    - Set and export INSTALLROOT to our default installation hierarchy
      if it wasn't already set on entry.

commit 8c705bf3b76eeb450cdf344685597a3a7c584319
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 26 07:19:58 2020 +0200

    Fix behaviour of tabs in raw Bourne Shell-like editing mode
    
    When neither '-o emacs' nor '-o vi' is active, there were a couple
    of bugs with entering tab characters:
    1. Tab completion was erroneously left active. The cause of this
       was that raw Bourne edit mode is handled by ed_viread() in vi.c
       on shells with wide character support, instead of the default
       ed_read() in edit.c, and the former failed to check if vi mode
       is active when processing tab characters.
    2. When entering literal tab characters, the cursor was moved to
       the right only one character, instead of the amount of
       characters corresponding to the tab.
    
    src/cmd/ksh93/edit/vi.c: getline():
    - Before processing '\t' (tab) for command completion, check that
      the 'vi' shell option (SH_VI) is active.
    
    src/cmd/ksh93/edit/edit.c: ed_virt_to_phys():
    - When translating literal tabs to on-terminal spaces and when
      recalculating the cursor position, remove erroneous checks for
      SH_VI; this is also needed in raw Bourne mode. According to my
      own testing, this has no effect on emacs mode (knock on wood).
    
    src/cmd/ksh93/tests/pty.sh:
    - Add two regression tests. An odd race condition reveals itself in
      either pty or in ksh's raw/Bourne edit mode; see comment in test.
      Effect is we have to expect either literal tabs or tabs expanded
      to spaces, until that is tracked down and fixed.
    
    Fixes #43.

commit 4cecde1dd3852c6fadd8359d37e1286f46998878
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jun 25 14:08:43 2020 -0700

    Fix buggy completion of ~/some in vi mode (#41)
    
    This commit fixes the bug reported in:
    https://github.com/att/ast/issues/682
    The following sequence fails in vi mode because ksh looks in the
    wrong part of the 'virtual' buffer:
    
    $ touch ~/testfile
    $ ls ~/test<tab>
    
    The fix is to change 'virtual[i]' to 'virtual[last_virt]' in the
    bugged section of code. The other changes are to make sure listing
    files in a directory with something like 'ls /etc/<tab>' calls the
    code for Ctrl+L to preserve 'ls /etc/' rather than try (and fail)
    to complete the directory name, producing 'ls /etc\n/'. This bugfix
    was backported from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/edit/vi.c
     - Backport the bugfix from ksh93v- 2013-10-10-alpha for this
       problem.
    
    src/cmd/ksh93/tests/pty.sh
     - Add a regression test for this issue using pty, adjusted slightly
       for a fake home directory in /tmp.

commit d41ec674c70e889511cf517e123f9a01b4be9e67
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jun 25 08:21:40 2020 -0700

    Fix some errors in the documentation and other minor issues (#42)
    
    Somewhat notable changes in this commit:
    - The 'set +r' bugfix (re: 74b41621) is now documented in the
      changelog.
    - Missing options have been added to the synopsis section of the
      ksh man page.
    - The minor formatting fix from https://github.com/ksh-community/ksh/pull/5
      has been applied to the ksh man page.
    - A few fixes from https://github.com/att/ast/commit/5e747cfb
      have been applied to the ksh man page.
    - The man page fixes from https://github.com/att/ast/pull/353
      have been applied, being:
      - An addition to document the behavior of 'set -H'.
      - A fix for the cd section appending rksh93.
      - A fix for some options being indented too far.
      - Removal of a duplicate section documenting '-D'.
      - Reordering the options for 'set' in alphabetical order.
      - A minor fix for the documentation of 'ksh -i'.

commit 43d9fbac1f7181d5e178250e6df5b2a8860abbb5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 25 14:18:30 2020 +0200

    tests/bracket.sh: disable 'test -N' tests due to noatime mounts
    
    src/cmd/ksh93/tests/bracket.sh:
    - Disable tests for [[ -N ... ]] (test -N ...), because it is
      expected to break on systems where $TMPDIR (or even the entire
      root file system) is mounted with noatime for better performance.
      Ref.: https://opensource.com/article/20/6/linux-noatime
      (It also needs annoyingly long sleep times on older systems with
      a 1-second timestamp granularity.)

commit 2315f6687a16b20f8b50b7a6c8bd134034b618ed
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 24 19:38:09 2020 +0200

    Add regress test for fixed BUG_KUNSETIFS (re: 6f0e008c, 7b994b6a)
    
    Modernish is no longer detecting BUG_KUNSETIFS, as I've just
    discovered. Always nice when bugs spontaneously vanish...
    
    A 'git reset HEAD~1'/recompile/retest loop reveals this bug was
    fixed by 6f0e008c, as later modified by 7b994b6a.
    
    So, let's make sure it stays fixed.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add a couple of regression tests for BUG_KUNSETIFS presence,
      detection and known workaround, based on the same in modernish.
      Ref.: https://github.com/modernish/modernish/blob/3ddcbd13/lib/modernish/cap/BUG_KUNSETIFS.t
            https://github.com/modernish/modernish/blob/3ddcbd13/lib/modernish/tst/isset.t#L204-L222

commit 43c09c2d6f2a09af105f22ebca90e0a4c241a85b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 24 16:40:28 2020 +0200

    tests/pty.sh: disable 137(C) because it actually tests vi(1)
    
    Testing the behaviour of an external editor, even the standard one,
    is outside the scope of the ksh regression tests.
    
    src/cmd/ksh93/tests/pty.sh:
    - Disable a test that invoked vi(1) and that failed, either
      intermittently or consistently, on too many systems because
      whatever vi(1) is installed locally doesn't write the string
      "/tmp/" exactly as and/or when expected.

commit 5c677a4c6c652356f88216f3996676331f27cc08
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 24 13:43:49 2020 +0200

    Refactor the new 'times' builtin; zero-pad seconds (re: 65d363fd)
    
    The output format is now identical to mksh's except for
    the locale-dependent radix point ('.' or ',').
    
    src/cmd/ksh93/bltins/misc.c:
    - Output format tweak: pad seconds with initial zero if < 10.
    - Use "too many operands" (e_toomanyops) error msg from 3ba4900e
      if there are operands, instead of "bad syntax" (e_badsyntax).
    - Consolidate repetitive calculating and printing code
      into print_times().
    - Get rid of some excessive variables.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update regression tests to match the above.
    
    src/cmd/ksh93/data/builtins.c:
    - Update sh_opttimes[] version string.

commit 57ff4676ebec8572108dd5ab04c6f8d634df02fc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 24 07:47:57 2020 +0200

    Fix very silly bug in times builtin (re: 65d363fd)
    
    Well, that's what I get for backporting code without properly
    checking it over. There was an elementary math error in how the
    times builtin calculated seconds:
            utime_sec = utime - utime_min;
    which could cause output such as "1m98.38s" or "3m234.77s".
    
    src/cmd/ksh93/bltins/misc.c: b_times():
    - Use fmod(), i.e. floating point modulus, to calculate seconds.

commit d8fe061f4cff90d15e4d8ff4ba2af91d9b932764
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 24 00:51:40 2020 +0200

    shtests: count nonexistent tests as errors (re: c2eabc57)
    
    When a nonexistent test script was given as an argument to
    shtests, this was not counted as an error and shtests exited
    successfully (with status 0).
    
    src/cmd/ksh93/tests/shtests:
    - Increase total error count if a test script is not found.

commit 0aa9e03f55f7846c47530d466a7a65d35684cb48
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jun 23 15:02:16 2020 -0700

    Fix process substitution combined with redirection (#40)
    
    The code for handling process substitution with redirection was
    never being run because IORAW is usually set when IOPROCSUB is
    set. This commit fixes the problem by moving the required code
    out of the !IORAW if statement. The following command now prints
    'good' instead of writing 'ok' to a bizzare file:
    
    $ ksh -c 'echo ok > >(sed s/ok/good/); wait'
    good
    
    This commit also fixes a bug that caused the process ID of the
    asynchronous process to print when the shell was in interactive
    mode. The following command no longer prints a process ID,
    behaving like in Bash and zsh:
    
    $ echo >(true)
    /dev/fd/5
    
    src/cmd/ksh93/sh/args.c:
     - Temporarily turn off the interactive state while in a process
       substitution to prevent the shell from printing the PID of
       the asynchronous process.
    
    src/cmd/ksh93/sh/io.c:
     - Move the code for process substitution with redirection into
       a separate if statement.
    
    src/cmd/ksh93/tests/io.sh:
     - Add two tests for both process substitution bugs fixed by this
       commit.
    
    src/cmd/ksh93/tests/shtests:
     - Update shtests with a patch from Martijn Dekker to use
       pretty-printing for the output from the times builtin (if it
       is available).
    
    Fixes #2

commit 14632361423993069a34421946a993c95f6f6d60
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Tue Jun 23 03:22:14 2020 -0400

    Fix test failures in CI build, disable Mac build (#39)
    
    .github/workflows/ci.yml:
    - Disable Mac build as the GitHub runners appear to be broken
      (e.g. SIGCHLD fails, unlike on real Macs) and tend to hang.
    - For the Linux build:
      - Set GMT timezone for 'printf %T' tests in builtins.sh.
      - Set the ulimit for open files to 1024 as the subshell.sh tests
        need a lot of open files.
      - As the runners lack the POSIX standard /dev/tty device, use the
        script command to provide a fake /dev/tty for the bracket.sh
        tests that use 'test -t $fd'.
        Ref.: https://github.com/actions/runner/issues/241

commit c1994b87f19995fcc52079322ac6e26cde70d4be
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 22 16:27:05 2020 -0700

    Fix nested functions ignoring prefixed variable assignments (#37)
    
    This commit fixes the bug described in att/ast#32. The fix and
    following explanation is from att/ast#467:
    
    While copying variables from function's local scope to a new scope,
    variable attributes were not copied. Such variables were not marked
    to be exported in the new function. For e.g.
    
    function f2 { env | grep -i "^foo"; }
    function f1 { env | grep -i "^foo"; f2; }
    foo=bar f1
    
    prints 'foo=bar' only once, but it should print be twice.
    
    src/cmd/ksh93/sh/xec.c:
     - When variables from the local scope of a function are copied into
       the scope of a nested function, the attributes of the variables
       need to be copied as well.
    
    src/cmd/ksh93/tests/functions.sh:
     - Add regression tests from ksh2020 to check environment variables
       passed to functions.

commit e0b326ae15bf327b8a2969d3b6829e52b77c881e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 22 15:55:51 2020 -0700

    Fix a test failure for `printf %T now` on Linux (#38)
    
    src/cmd/ksh93/tests/builtins.sh:
     - The output of 'printf %T now' and the external 'date'
       command aren't guaranteed to be the same unless $LC_ALL
       is set to 'C'. Set LC_ALL in these command substitutions
       to fix a spurious test failure on Linux.

commit 85165ee5e1a513a8ba5fa7bf8c7cac665d020a36
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Mon Jun 22 18:53:26 2020 -0400

    Continous integration builds using Github actions (#36)
    
    * Configuration for continous integration builds using Github actions
    for Linux and MacOS.
    
    * Enable tests during CI build
    
    * Updated CI step labels

commit ff358f3464bce5a2ec18e642cf5886afc5259f9e
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 22 10:11:19 2020 -0700

    Fix a crash when 'kill %%' and 'kill %+' are run (#35)
    
    Ksh was trying to use the 'pw' variable as a valid pointer even
    when it was NULL. This is fixed by doing the error check for
    'pw' before doing anything else in 'job_kill'.
    
    This bugfix is from Red Hat:
    https://git.centos.org/rpms/ksh/blob/44e0a643a93492b1f6beebbf6ffcfd453d9ab8f2/f/SOURCES/ksh-20130214-fixkill.patch
    
    Fixes #34

commit 3ba4900e9c40d07a29c715a406a7f7d572e295b1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 22 14:59:24 2020 +0200

    Make 'stop' and 'suspend' regular built-ins
    
    The 'stop' and 'suspend' default aliases are now converted into
    regular built-in commands so that 'unalias -a' does not remove
    them, 'suspend' can do some sanity checks, and something like
            cmd=stop; $cmd $!
    will now work.
    
    src/cmd/ksh93/bltins/trap.c:
    - b_kill(): Incorporate 'stop' functionality, which is simply
      setting the same flag and variable as '-s STOP' would have done.
    - b_suspend(): Add simple builtin function that sends SIGSTOP to
      the main shell. Check for no operands, and refuse to suspend a
      login shell (which would leave the user stuck with no way out).
      Also check that 'kill' succeeds; if we're in an asynchronous
      subshell, it is possible the main shell no longer exists.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove "stop" and "suspend" default aliases. (Why were these
      conditional upon SIGTSTP when they actually issued SIGSTOP?)
    
    src/cmd/ksh93/include/builtins.h,
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/data/msg.c:
    - Add declarations of "stop" and "suspend" regular built-ins.
    - Add option strings (AST manual/--man pages) for them.
    - Add e_toomanyops ("too many operands") reusable error message for
      b_suspend(). Other new commands may want this at some point.
    
    src/cmd/ksh93/sh.1:
    - Remove "stop" and "suspend" default aliases.
    - Document "stop" and "suspend" regular built-in commands.

commit add82e1984118eabc6b3cd8b85927b17c4cdaf68
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sun Jun 21 21:51:44 2020 -0400

    Cosmetic fix to README.md (#33)

commit 54da7fc2022b461bb825953747b6da24983a3234
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sun Jun 21 19:59:55 2020 -0400

    Fix 'bin/package clean' deleting entire git repo (#32)
    
    This appears to be originating from:
    
    2755         *)      if      test ! -d $INSTALLROOT
    2756                 then    INSTALLROOT=$PACKAGEROOT;
    
    where INSTALLROOT=PACKAGEROOT and 'clean' deletes everything under
    INSTALLROOT thus deleting the entire git repo. This only applies when
    there's no arch/$HOSTTYPE directory due to the condition above.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Delete arch/$HOSTTYPE as stated in the documentation
      for the clean action instead of $INSTALLROOT.

commit de2b4a6f975c753f63f38fa5bbf095e9e4f4780e
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sat Jun 20 20:47:11 2020 -0400

    edit/edit.c: fix compiler warnings (#31)
    
    This fixes compiler warnings for implicit-ints:
    warning: return type defaults to 'int' [-Wimplicit-int]
     1854:     sh_tcgetattr(int fd, struct termios *tty)
     1863:     sh_tcsetattr(int fd, int cmd, struct termios *tty)
    
    cmd/ksh93/edit/edit.c:
    - Set the return type explicitly to int and align with the prototype
      declared in include/terminal.h.

commit 9d428f8f5e16224d8c4a1648faa94ab0573c56d7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 20 23:39:42 2020 +0200

    Fix erroneous fork after 'readonly PATH' in subshell (re: 102868f8)
    
    After making PATH readonly in a virtual subshell (without otherwise
    changing it, so the subshell is never forked), then the main shell
    would erroneously fork into a background process immediately after
    leaving the virtual subshell. This was caused by a bug in the
    forking workaround that prevents changes in PATH in a virtual
    subshell from clearing the parent shell's hash table.
    
    src/cmd/ksh93/sh/name.c: nv_putval():
    - If we're either setting or restoring PATH, do an additional check
      for the NV_RDONLY flag, which means the function was told to
      ignore the variable's readonly state. It is told to ignore that
      when restoring the parent shell state after exiting a virtual
      subshell. If we don't fork then, we don't fork the parent shell.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add regression test verifying that no forking happens when making
      PATH readonly in a subshell.
    
    Fixes #30.

commit bd3e2a800124138bd56b9b9042d7319f80641ee2
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jun 20 10:08:41 2020 -0700

    Fix unreliable behavior when special vars are readonly or unset (#27)
    
    src/cmd/ksh93/data/variables.c:
     - Running 'unset .sh.lineno' creates a memory fault, so fix that
       by giving it the NV_NOFREE attribute. This crash was happening
       because ${.sh.lineno} is an integer that cannot be freed from
       memory with free(3).
    
    src/cmd/ksh93/sh/init.c:
     - Tell _nv_unset to ignore NV_RDONLY when $RANDOM and $LINENO are
       restored from the subshell scope. This is required to fully
       restore the original state of these variables after a virtual
       subshell finishes.
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/sh/subshell.c:
     - Disabled some optimizations for two instances of 'sh_assignok' to
       fix 'readonly' in virtual subshells and '(unset .sh.level)' in
       nested functions. This fixes the following variables when
       '(readonly $varname); enum varname=' is run:
    
       $_
       ${.sh.name}
       ${.sh.subscript}
       ${.sh.level}
    
       The optimization in question prevents sh_assignok from saving the
       original state of these variables by making the sh_assignok call
       a no-op. Ksh needs the original state of a variable for it to be
       properly restored after a virtual subshell has run, otherwise ksh
       will simply carry over any new flags (being NV_RDONLY in this case)
       from the subshell into the main shell.
    
    src/cmd/ksh93/tests/variables.sh:
     - Add regression tests from Martijn Dekker for setting special
       variables as readonly in virtual subshells and for unsetting
       special variables in general.
    
    Fixes #4

commit ee698e89d55e1b8b7883740bf6874c51f8270aa8
Author: Anuradha Weeraman <anuradha@weeraman.com>
Date:   Sat Jun 20 07:42:53 2020 -0400

    Fix compiler warning in INIT/ratz.c (#28)
    
    src/cmd/INIT/ratz.c:
    - Fix build warning:
    
      src/cmd/INIT/ratz.c:4741:2: warning: case label value exceeds maximum value for
       type
       4741 |  case 0241:
            |  ^~~~
    
      The character literal in the switch expression was being treated
      as a signed char while the case label 0241 is greater than 127,
      resulting in this warning.

commit 99065353b38715f1533379d549568630537a5f76
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Fri Jun 19 05:01:55 2020 -0700

    Fix 'whence -a' to print correct path for tracked alias (#25)
    
    'whence -a' bases the path for tracked aliases on the user's
    current working directory if an enabled ksh builtin of the same
    name is also available. The following example will claim 'cat'
    is in the user's current working directory:
    
    $ whence -a cat
    cat is a tracked alias for /usr/bin/cat
    $ builtin cat
    $ whence -a cat
    cat is a shell builtin
    cat is /usr/bin/cat
    cat is a tracked alias for /current/working/directory/cat
    
    This patch from ksh2020 fixes this problem by properly saving the
    path of the tracked alias for use with 'whence -a', since
    'path_pwd' (as implied by the function's name) only gets the users
    current working directory, not the location of tracked aliases.
    Ref.: https://github.com/att/ast/issues/1049
    
    This bug was originally reported by David Morano about two decades
    ago to the AST team: https://github.com/att/ast/issues/954
    
    src/cmd/ksh93/bltins/whence.c:
     - Print the actual path of a tracked alias, path_pwd doesn't
       have this functionality.
    
    src/cmd/ksh93/include/name.h:
     - Add 'pathcomp' for saving the value of tracked aliases.
    
    src/cmd/ksh93/sh/path.c:
     - Save the value of tracked aliases for use by whence.
    
    src/cmd/ksh93/tests/builtins.sh:
     - Add a regression test for using 'whence -a' on tracked
       aliases with a builtin equivalent.

commit 876da711c0e6f7f73f5f8f232ebfdb77a09dc57b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 18 12:12:15 2020 +0200

    data/builtins.c: fix typo in 'getopts' usage message

commit 57af42d968c5bd08693008bb426365153b8d5624
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 18 11:46:59 2020 +0200

    data/builtins.c: tweaks for {exec,redirect} --man (re: 7b82c338)
    
    src/cmd/ksh93/data/builtins.c:
    - sh_optexec[], sh_optdirect[]: Move paragraphs on exit behaviour
      to the EXIT STATUS section, where people would look for them.
    - sh_optexec[]: Since we modified b_exec() to support 'redirect',
      add "ksh93" to the credits to avoid blaming AT&T for our changes.

commit 8b51d12f4b6eae265112c3cfd67e84dabc08cb31
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 18 03:40:29 2020 +0200

    data/builtins.c: cosmetic fix in comment

commit 3e3f6b0f12dd846956e388b27c6afa749f9651bf
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 18 02:48:51 2020 +0200

    Restore #22 'unset -f' fix minus segfault (re: b7932e87, 97511748)
    
    Applying the fix for 'unset -f' exposed a crashing bug in lookup()
    in sh/nvdisc.c, which is the function for looking up discipline
    functions. This is what caused tests/variables.sh to crash.
    Ref.: https://github.com/ksh93/ksh/issues/23#issuecomment-645699614
    
    src/cmd/ksh93/sh/nvdisc.c: lookup():
    - To avoid segfault, check that the function pointer nq->nvalue.rp
      is actually set before checking if nq->nvalue.rp->running==1.
    
    src/cmd/ksh93/sh/xec.c,
    src/cmd/ksh93/tests/functions.sh:
    - Uncomment the 'unset -f' fix from b7932e87.
    
    Resolves #21 (again).

commit 975117485c9c52a2d94bcf1eb7ae7f44088a3302
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 17 21:01:55 2020 +0200

    Part revert #22 to undo memory fault (re: b7932e87)
    
    The fix in sh/xec.c, which was backported from the ksh 93v- beta to
    delay the actual removal of a running function that unsets itself,
    caused a segfault in the variables.sh regression tests (see #23).
    
    src/cmd/ksh93/sh/xec.c:
    - Comment out the backported code pending a correct fix for #21.
      Now both types of functions silently fail to unset themselves
      (unless they're discipline functions).
    
    src/cmd/ksh93/tests/functions.sh:
    - Disable regression tests checking that the function was actually
      unset, pending a correct fix for #21.
    
    Resolves: #23
    Reopens: #21

commit b7932e87b637b885423aafcd63108d04f0c204c6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jun 17 10:26:43 2020 -0700

    Fix two problems with 'unset -f' behavior (#22)
    
    src/cmd/ksh93/sh/name.c:
     - Correct the check for when a function is currently running
       to fix a segmentation fault that occurred when a POSIX
       function tries to unset itself while it is running.
       This bug fix was backported from ksh93v-.
    
    src/cmd/ksh93/sh/xec.c:
     - If a function tries to unset itself, unset the function
       with '_nv_unset(np, NV_RDONLY)' to fix a silent failure.
       This fix was also backported from ksh93v-.
    
    src/cmd/ksh93/tests/functions.sh:
     - Add four regression tests for when a function unsets itself.
    
    Resolves #21

commit 746ce736715a7637dfa10a62fe51fb8c01a27cbb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 17 17:04:04 2020 +0200

    regress: don't count temp dir creation as test (re: 2318de32)
    
    Note that shtests simply does a 'grep -c err_exit' and substracts 1
    to count the number of regression tests in a test script. Not all
    test scripts make temp dirs, so subtracting 2 instead won't do.
    
    src/cmd/ksh93/tests/*.sh:
    - Escape the err_exit call in the routine to create a temporary
      directory so that it is not counted as a regression test.
      That bypasses the alias, so we have to pass $LINENO manually.

commit 9ff692c2bbecf1c1e8d9e43eb608295c73a5f323
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 17 15:43:16 2020 +0200

    regress: count tests and report line numbers (re: 7b994b6a)
    
    Four added tests did not correctly report their line numbers
    upon failure and were counted as one, because the err_exit
    alias/function pair was called from a shell function.
    
    Note that shtests simply does a 'grep -c err_exit' to count the
    number of regression tests in a test script.
    
    src/cmd/ksh93/tests/subshell.sh:
    - check_hash_table():
      - Take line number as 1st argument.
      - Quote a character in err_exit to bypass the alias when calling
        it, so we can pass on the argument for the line number. This
        also stops this helper function from being counted as a test.
    - When calling check_hash_table(), pass $LINENO.
    - Add dummy err_exit comments to have the tests counted.

commit fae8862c53929a097223641409f214137cc3c4b9
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jun 16 14:58:05 2020 -0700

    Fix assignments preceding 'command <special builtin>' (#19)
    
    Ksh was not checking for `command` when running a special builtin,
    which caused preceding invocation-local variable assignments to
    become global. This is the reproducer from the att/ast#72:
    
    $ foo=BUG command eval ':'
    $ echo "$foo"
    
    This no longer prints 'BUG', as ksh now makes sure the command builtin
    is not running a special builtin before making invocation-local
    variable assignments global.
    
    src/cmd/ksh93/sh/xec.c:
     - Backport the bugfix for BUG_CMDSPASGN from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/tests/builtins.sh:
     - Add a regression test based on the reproducer in att/ast#72.

commit c258a04f7abebc97a9dad22b4ab7846264137cd6
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jun 16 14:44:02 2020 -0700

    Implement a portable fix for SIGCHLD crashes (#18)
    
    As previously reported in rhbz#1112306 (https://bugzilla.redhat.com/show_bug.cgi?id=1112306),
    ksh may crash when receiving SIGCHLD because GCC's optimizer will fail to generate
    `addl` and `sub` instructions to increment and decrement `job.in_critical` in the
    `job_subsave` function. This bug *does* occur in GCC 10 with `-O2`, but not `-O1`;
    it doesn't appear this bug has been fixed. As a reference, here is the relevant
    debug assembly output of `job_subsave` when KSH is compiled with `CCFLAGS` set to
    `-g -O1`:
    
    0000000000034c97 <job_subsave>:
    
    void *job_subsave(void)
    {
       34c97:       53                      push   %rbx
            struct back_save *bp = new_of(struct back_save,0);
       34c98:       bf 18 00 00 00          mov    $0x18,%edi
       34c9d:       e8 34 4a 0a 00          callq  d96d6 <_ast_malloc>
       34ca2:       48 89 c3                mov    %rax,%rbx
            job_lock();
       34ca5:       83 05 3c 50 13 00 01    addl   $0x1,0x13503c(%rip)        # 169ce8 <job+0x28>
            *bp = bck;
       34cac:       66 0f 6f 05 4c 5a 13    movdqa 0x135a4c(%rip),%xmm0        # 16a700 <bck>
       34cb3:       00
       34cb4:       0f 11 00                movups %xmm0,(%rax)
       34cb7:       48 8b 05 52 5a 13 00    mov    0x135a52(%rip),%rax        # 16a710 <bck+0x10>
       34cbe:       48 89 43 10             mov    %rax,0x10(%rbx)
            bp->prev = bck.prev;
       34cc2:       48 8b 05 47 5a 13 00    mov    0x135a47(%rip),%rax        # 16a710 <bck+0x10>
       34cc9:       48 89 43 10             mov    %rax,0x10(%rbx)
            bck.count = 0;
       34ccd:       c7 05 29 5a 13 00 00    movl   $0x0,0x135a29(%rip)        # 16a700 <bck>
       34cd4:       00 00 00
            bck.list = 0;
       34cd7:       48 c7 05 26 5a 13 00    movq   $0x0,0x135a26(%rip)        # 16a708 <bck+0x8>
       34cde:       00 00 00 00
            bck.prev = bp;
       34ce2:       48 89 1d 27 5a 13 00    mov    %rbx,0x135a27(%rip)        # 16a710 <bck+0x10>
            job_unlock();
       34ce9:       8b 05 f9 4f 13 00       mov    0x134ff9(%rip),%eax        # 169ce8 <job+0x28>
       34cef:       83 e8 01                sub    $0x1,%eax
       34cf2:       89 05 f0 4f 13 00       mov    %eax,0x134ff0(%rip)        # 169ce8 <job+0x28>
       34cf8:       75 2b                   jne    34d25 <job_subsave+0x8e>
       34cfa:       8b 3d ec 4f 13 00       mov    0x134fec(%rip),%edi        # 169cec <job+0x2c>
       34d00:       85 ff                   test   %edi,%edi
       34d02:       74 21                   je     34d25 <job_subsave+0x8e>
       34d04:       c7 05 da 4f 13 00 01    movl   $0x1,0x134fda(%rip)        # 169ce8 <job+0x28>
    
    When `-O2` is used instead of `-O1`, the `addl` and `sub` instructions for
    incrementing and decrementing the lock are removed. GCC instead generates a
    broken `mov` instruction for `job_lock` and removes the initial `sub` instruction
    in job_unlock (this is also seen in Red Hat's bug report):
    
           job_lock();
           *bp = bck;
      37d7c:       66 0f 6f 05 7c 79 14    movdqa 0x14797c(%rip),%xmm0        # 17f700 <bck>
      37d83:       00
           struct back_save *bp = new_of(struct back_save,0);
      37d84:       49 89 c4                mov    %rax,%r12
           job_lock();
      37d87:       8b 05 5b 6f 14 00       mov    0x146f5b(%rip),%eax        # 17ece8 <job+0x28>
    ...
            job_unlock();
      37dc6:       89 05 1c 6f 14 00       mov    %eax,0x146f1c(%rip)        # 17ece8 <job+0x28>
      37dcc:       85 c0                   test   %eax,%eax
      37dce:       75 2b                   jne    37dfb <job_subsave+0x8b>
    
    The original patch works around this bug by using the legacy `__sync_fetch_and_add/sub`
    GCC builtins. This forces GCC to generate instructions that change the lock with
    `lock addl`, `lock xadd` and `lock subl`:
    
           job_lock();
      37d9f:       f0 83 05 41 6f 14 00    lock addl $0x1,0x146f41(%rip)        # 17ece8 <job+0x28>
      37da6:       01
    ...
           job_unlock();
      37deb:       f0 0f c1 05 f5 6e 14    lock xadd %eax,0x146ef5(%rip)        # 17ece8 <job+0x28>
      37df2:       00
      37df3:       83 f8 01                cmp    $0x1,%eax
      37df6:       74 08                   je     37e00 <job_subsave+0x70>
    ...
      37e25:       74 11                   je     37e38 <job_subsave+0xa8>
      37e27:       f0 83 2d b9 6e 14 00    lock subl $0x1,0x146eb9(%rip)        # 17ece8 <job+0x28>
    
    While this does work, it isn't portable. This patch implements a different
    workaround for this compiler bug. If `job_lock` is put at the beginning of
    `job_subsave`, GCC will generate the required `addl` and `sub` instructions:
    
           job_lock();
      37d67:       83 05 7a 5f 14 00 01    addl   $0x1,0x145f7a(%rip)        # 17dce8 <job+0x28>
    ...
            job_unlock();
      37dbb:       83 e8 01                sub    $0x1,%eax
      37dbe:       89 05 24 5f 14 00       mov    %eax,0x145f24(%rip)        # 17dce8 <job+0x28>
    
    It is odd that moving a single line of code fixes this problem, although
    GCC _should_ have generated these instructions from the original code anyway.
    I'll note that this isn't the only way to get these instructions to generate.
    The problem also seems to go away when inserting almost anything else inside
    of the code for `job_subsave`. This is just a simple workaround for a strange
    compiler bug.

commit 764acefaf171f10924b850dd4942665d74419b04
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jun 16 04:21:42 2020 -0700

    `read -r -d` should not ignore `-r`
    
    This bug was previously reported in att/ast#37.
    Ksh ignores `-r` when `read -r -d` is run because when
    the bit for `D_FLAG` is set, the bit for `R_FLAG` is unset
    as a side effect of setting `D_FLAG`. The following set
    of commands fails to print a backslash:
    
    $ printf '\\\000' | read -r -d ''
    $ echo $REPLY
    
    The fix for this bug is to set `D_FLAG` with `D_FLAG + 1`,
    which prevents `R_FLAG` from being unset. This bugfix
    has been backported from ksh93v- 2013-10-10-alpha.
    
    src/cmd/ksh93/bltins/read.c:
     - Set `D_FLAG` with `D_FLAG + 1` to prevent the bit for
       `R_FLAG` from being unset.
    
    src/cmd/ksh93/tests/builtins.sh:
     - Add the regression test for `read -r -d` from ksh93v-.

commit ad349c7668f21741f361b89a18826f7a21e18599
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 16 04:51:06 2020 +0200

    silence macro redefinition warnings (re: 7003aba4)
    
    src/cmd/ksh93/bltins/test.c,
    src/cmd/ksh93/sh/arith.c,
    src/cmd/ksh93/sh/streval.c:
    - #undef ERROR_exit before redefining it, so clang stops nagging.

commit a9de50bf79318a2522fd77142df073df2080336a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 20:07:05 2020 +0200

    Apply simple optimisation for ${ subshare; } (re: 3d38270b)
    
    Running shbench after undoing the incorrect subshell optimisation
    showed that the performance of ${ subshare; }-type command
    substitutions went down very slightly, but consistently.
    
    The main purpose of using this ksh-specific type of command
    substitution vs. a normal one is performance. Thus, it *is*
    appropriate to eke every last bit of performance out of it that
    we can, provided correctness is completely preserved.
    
    It is also a type of command substitution where every change is
    supposed to be shared with the main shell environment; only command
    output is captured in a subshell-like fashion.
    
    Thus, on the face of it, it would be a logical optimisation for
    sh_assignok() to avoid bothering with saving a subshell context for
    variables if we're in a subshare.
    
    Lo and behold, applying it does not introduce any regress fails.
    
    Here are my average results of the braces.ksh benchmark from
    shbench <http://fossil.0branch.com/csb/tktnew> against stock
    /bin/ksh 93u+ vs. current 93u+m (same compiler flags),
    100 runs pre-optimisation and 100 runs post-optimisation:
    
    Stock /bin/ksh:         Pre-optimisation (at 3d38270b):
    93u+: 0.743 secs        93u+m: 0.739 secs
    
    Stock /bin/ksh:         Post-optimisation (now):
    93u+: 0.744 secs        93u+m: 0.726 secs
    
    The left column shows only a small margin of error with 100 runs;
    the right one shows a very small, but not insignificant difference.
    
    However, these tests were not very rigorous with 100 runs each.
    If anyone wants to do it properly, please report results to
    korn-shell@googlegroups.com. I'm happy enough with this, though.
    
    Thanks to Joerg van den Hoff for providing shbench, without
    which it would not have occurred to me to try this.
    
    src/cmd/ksh93/sh/subshell.c: sh_assignok():
    - Don't bother if we're in a ${ subshare; }.

commit 6916a873c2ead8bd3e0bfa6fa3757ea8a4fb89ec
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 16:56:11 2020 +0200

    optget: display --help and --man in terse usage messages
    
    The fact that every ksh builtin command self-documents with the
    options --help and --man (and others, see 'getopts --man'; but
    these are the essential ones) is poorly known; the information is
    buried somewhere deep in the sh.1 manual page, and is incomplete at
    that. None of the terse usage messages displayed on error point the
    user to these options. So let's fix that.
    
    src/lib/libast/misc/optget.c:
    - Change generic 'options' placeholder, used in all terse usage
      messages, to 'options | --help | --man'.
    
    src/cmd/ksh93/sh.1:
    - Edit documentation of --man/-?, adding documentation on --help
      which was completely undocumented. Refer to 'getopts --man' for
      more advanced info.
    - Separate these from the (important) documentation on special
      builtins using a paragraph break.

commit 7f2c81103b4c0eb27084ad33ec7a68e10df898cc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 12:32:57 2020 +0200

    regress: avoid backporting a cmd subst bug from beta
    
    ksh 93v- beta introduced a regression with nested command
    substitutions: backticks nested in $( ) result in misdirected
    output. This has never been in 93u+, but since we're often
    backporting things, let's avoid backporting this bug. It is also
    useful if this shows up when running our bin/shtests against the
    actual beta by adding a SHELL=... argument.
    Ref.: https://github.com/att/ast/issues/478
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add reproducer submitted by the reporter as a regression test.

commit 503a596a3e1bbc562d2aee5707f6609307f42e6a
Merge: ef1621c1 3d38270b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 15:44:50 2020 +0100

    Merge pull request #16 from JohnoKing/fix-optimized-variables
    
    Remove a buggy optimization for variables in subshells
    
    Fixes #15

commit 3d38270b323dbb78d62772995143c7a001217893
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 15 06:43:37 2020 -0700

    Remove a buggy optimization for variables in subshells
    
    This bug was originally reported by @lijog in att/ast#7 and has been
    reported again in #15. KSH does not save the state of a variable if it
    is in a newer scope. This is because of an optimization in sh_assignok
    first introduced in ksh93t+ 2010-05-24. Here is the code change in that
    version:
    
                    return(np);
            /* don't bother to save if in newer scope */
    -       if(!(rp=shp->st.real_fun)  || !(dp=rp->sdict))
    -               dp = sp->var;
    -       if(np->nvenv && !nv_isattr(np,NV_MINIMAL|NV_EXPORT) && shp->last_root)
    -               dp = shp->last_root;
    -       if((mp=nv_search((char*)np,dp,HASH_BUCKET))!=np)
    -       {
    -               if(mp || !np->nvfun || np->nvfun->subshell>=sh.subshell)
    -                       return(np);
    -       }
    +       if(sp->var!=shp->var_tree && shp->last_root==shp->var_tree)
    +               return(np);
            if((ap=nv_arrayptr(np)) && (mp=nv_opensub(np)))
            {
    
    This change was originally made to replace a buggier optimization.
    However, the current optimization causes variables set in subshells
    to wrongly affect the environment outside of the subshell, as the
    variable does not get set back to its original value. This patch
    simply removes the buggy optimization to fix this problem.
    
    src/cmd/ksh93/sh/subshell.c:
     - Remove a buggy optimization that caused variables set in subshells
       to affect the environment outside of the subshell.
    
    src/cmd/ksh93/tests/subshell.sh:
     - Add a regression test for setting variables in subshells. This
       test has to be run from the disk after being created with a here
       document because it always returns the expected result when run
       directly in the regression test script.

commit ef1621c18f38e57a32ab6aef8c85cc2bc632b9b6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 09:03:44 2020 +0200

    Make 'source' a regular built-in
    
    The 'source' alias is now converted into a regular built-in command
    so that 'unalias -a' does not remove it, and something like
            cmd=source; $cmd name args
    will now work.
    
    This is part of the project to replace default aliases that define
    essential commands by proper builtins that act identically (except
    you now get the actual command's name in any error/usage messages).
    
    src/cmd/ksh93/data/aliases.c:
    - Remove 'source' default alias.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/include/builtins.h:
    - Define 'source' regular builtin with extra parser ID "SYSSOURCE".
      Same definition as '.', minus the BLT_SPC flag indicating a
      special builtin. This preserves the behaviour of 'command .'.
    - Update sh_optdot[] to include info for 'source --man'.
      (Note that \f?\f expands to the current command name.
      This allows several commands to share a single --man page.)
    
    src/cmd/ksh93/sh/parse.c:
    - In the two places that SYSDOT is checked for, also check for
      SYSSOURCE, making sure the two commands are parsed identically.
    
    src/cmd/ksh93/sh.1:
    - Remove 'source' default alias.
    - Document 'source' regular builtin.

commit b7f48e8a100fc63d6b7b28b82c986cb60d1427fe
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 15 02:52:50 2020 +0200

    Revert job locking patch (re: 07cc71b8, 58560db7)
    
    This reverts the patch for the job_lock and job_unlock macros.
    
    As I said in 58560db7, this is very probably a workaround for an
    optimiser bug in certain versions of GCC, at least 2017 versions.
    
    In the version I committed, that workaround version never gets
    used, because you cannot use #if defined(...) to check for the
    presence of a compiler builtin. Thanks to Johnothan King for
    keeping an eye on my code and pointing that out to me.
    
    What is needed to test for the presence of a compiler builtin is a
    builtin macro called __has_builtin (and it *can* be tested for
    using #if defined...()).. This is a clang invention. It was not
    added to gcc until version 10, which was only released in a first
    stable version just over a month ago.
    Ref.: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66970#c14
          https://gcc.gnu.org/gcc-10/
    
    However, for gcc 10, it seems unlikely the patch is still needed.
    (Although it would certainly be a good idea to test that.)
    
    And for the older gcc versions that do need it, we cannot use
    __has_builtin, which means we need to define a dummy that always
    returns false, so the workaround version is never used.
    Ref.: https://github.com/ksh93/ksh/commit/58560db7#commitcomment-39900259
    
    And we cannot use the workaround version unconditionally either,
    because it would cause build failures on compilers without the
    __sync_fetch_and_add() and __sync_fetch_and_sub() builtins.
    
    Which means the only sensible thing left to do is to revert the
    patch for now.
    
    As far as I can tell at this point, for the patch to return to this
    upstream in a sensible manner, someone would need to:
    
    1. Write a small C program that tests these macros and somehow
       checks for the presence of that optimiser bug. (This is not
       going to come from me; my C-fu is simply not good enough.)
    
    2. Incorporate that into the distribution as a test for iffe.
       (Few know how iffe works, but it's probably not that hard as
       there are plenty of existing tests to use as a template.)
    
    3. Reinsert the workaround version using the macro defined (or not)
       by that iffe test, so that it is only compiled in when using a
       compiler that actually has the bug in question.
    
    Until then, this can just continue to be an OS-specific patch for
    systems with GCC versions that might have that bug.

commit 58560db768e2f5a29512346bc7d36706821fe8fd
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 23:49:07 2020 +0200

    Restore build without __sync_fetch_and_{add,sub} (re: 07cc71b8)
    
    The more I think about it, the more it seems obvious that commit
    07cc71b8 (PR #14) is quite simply a workaround for a GCC optimiser
    bug, and (who knows?) possibly an old, long-fixed one, as the bug
    report is years old.
    
    The commit also caused ksh to fail to build on HP-UX B.11.11 with
    GCC 4.2.3 (hosted at polarhome.com), because it doesn't have
    __sync_fetch_and_add() and __sync_fetch_and_sub(). It may fail on
    other systems. The GCC documentation says these are legacy:
    https://gcc.gnu.org/onlinedocs/gcc/_005f_005fsync-Builtins.html
    
    HELP WANTED: what I would like best is if someone could come up
    with some way of detecting this optimiser bug and then error out
    with a message along the lines of "please upgrade your broken
    compiler". It would probably need to be a new iffe test.
    
    Meanwhile, let's try it this way for a while and see what happens:
    
    src/cmd/ksh93/include/jobs.h:
    - Restore original ksh version of job_lock()/job_unlock() macros.
    - Use the workaround version only if the compiler has the builtins
      __sync_fetch_and_add() and __sync_fetch_and_sub().

commit f95d3105ef160a97f5f59e7dd6029fa417f1adba
Merge: ae25b7f8 07cc71b8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 21:46:32 2020 +0100

    Merge pull request #14 from aweeraman/debian-patches-2
    
    ksh segfaults in job_chksave after receiving SIGCHLD
    
    https://bugs.launchpad.net/ubuntu/+source/ksh/+bug/1697501
    Eric Desrochers wrote on 2017-06-12:
    
    [Impact]
    * The compiler optimization dropped parts from the ksh job
      locking mechanism from the binary code. As a consequence, ksh
      could terminate unexpectedly with a segmentation fault after
      it received the SIGCHLD signal.
    
    [Test Case]
    
    Unfortunately, there is no clear and easy way to reproduce the
    segfault.
    * But the original reporter of this bug can randomly reproduce
      the problem using an in-house ksh script that only works
      inside his infrastructure as follow : "ksh
      <in-house-script.ksh>" and then once in a while ksh will
      segfault as follow :
    
    (gdb) bt
    #0 job_chksave (pid=pid@entry=19003) at /build/ksh-6IEHIC/ksh-93u+20120801/src/cmd/ksh93/sh/jobs.c:1948
    #1 0x00000000004282ab in job_reap (sig=17) at /build/ksh-6IEHIC/ksh-93u+20120801/src/cmd/ksh93/sh/jobs.c:428
    #2 <signal handler called>
    ...
    
    [Regression Potential]
    * Regression risk : low/none expected, the package has been
      highly/intensively tested by a user who run over 18M ksh
      scripts a day on each of their clusters.
    [...]
    * The fix has been written by RH and has been proven to work for
      them for the last 3 years.
    * A test package including the RH fix has been intensively tested
      and verified (pre-SRU) by an affected user with positive
      feedbacks using a reproducer that segfault without the RH
      patch.
    * Test package (pre-SRU) feedbacks :
      https://bugs.launchpad.net/ubuntu/xenial/+source/ksh/+bug/1697501/comments/7
    
    [Other Info]
    * Details about the RH bug :
      - https://bugzilla.redhat.com/show_bug.cgi?id=1123467
      - https://bugzilla.redhat.com/show_bug.cgi?id=1112306
      - https://access.redhat.com/solutions/1253243
      - http://rhn.redhat.com/errata/RHBA-2014-1015.html
      - ksh.spec
        * Fri Jul 25 2014 Michal Hlavinka <email address hidden> - 20120801-10.8
        * job locking mechanism did not survive compiler optimization (#1123467)
      - patch
        * ksh-20120801-locking.patch
    
    Debian bug:
    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867181
    
    [Original Description]
    
    # gdb
    [New LWP 3882]
    Core was generated by `/bin/ksh <KSH_SCRIPT>.ksh'.
    Program terminated with signal SIGSEGV, Segmentation fault.
    #0 job_chksave (pid=pid@entry=19385) at /build/ksh-6IEHIC/ksh-93u+20120801/src/cmd/ksh93/sh/jobs.c:1948
    1948 if(jp->pid==pid)
    
    (gdb) p *jp
    Cannot access memory at address 0xb
    
    (gdb) p *jp->pid
    Cannot access memory at address 0x13
    
    (gdb) p pid
    $2 = 19385
    
    (gdb) p *jpold
    $1 = {next = 0xb, pid = -604008960, exitval = 11124}
    
    The struct is corrupted at some point looking at the next,pid and
    exitval struct members values which isn't valid data.
    
    # assembly code
    => 0x0000000000427159 <+41>: cmp %edi,0x8(%rdx)
    
    (gdb) p $edi ## pid variable
    $1 = 19385
    
    (gdb) p *($rdx + 8) ## jp->pid struct
    Cannot access memory at address 0x13
    --
    
    ksh is segfaulting because it can't access struct "jp" ($rdx)
    thus cannot de-reference the struct member "jp>pid" ($rdx + 8) at
    line : src/cmd/ksh93/sh/jobs.c:1948 when looking if jp->pid is
    equal to pid ($edi) variable.

commit 07cc71b8801a8976c3a9fd509dd4e2a27fc7a0da
Author: Anuradha Weeraman <aweeraman@gmail.com>
Date:   Sun Jun 14 14:19:13 2020 -0400

    ksh segfaults in job_chksave after receiving SIGCHLD
    
    Upstreaming Debian patch:
    
    Prior to this update, the compiler optimization dropped parts from the ksh job
    locking mechanism from the binary code. As a consequence, ksh could terminate
    unexpectedly with a segmentation fault after it received the SIGCHLD signal.
    This update implements a fix to ensure the compiler does not drop parts of the
    ksh mechanism and the crash no longer occurs.
    
    Author: Michal Hlavinka mhlavink@redhat.com
    Origin: Red Hat fix, ksh-20120801-locking.patch
    Bug: https://bugzilla.redhat.com/show_bug.cgi?id=1123467
    Bug-Ubuntu: https://bugs.launchpad.net/bugs/1697501
    Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867181

commit ae25b7f8866953c7be100f7781ecb45cdbd0919d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 20:10:07 2020 +0200

    move read -S regress test to readcsv.sh (re: af0bd6ad)

commit 242d3f768bbbb1a1e900117fd1670df63195942c
Merge: 5498d9ec af0bd6ad
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 18:50:58 2020 +0100

    Merge pull request #12 from JohnoKing/fix-read-s
    
    `read -S` now correctly handles nested double quotes

commit af0bd6ad70bbbf5ad188d270430d91ff6fa863c7
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jun 14 09:28:22 2020 -0700

    `read -S` now correctly handles nested double quotes
    
    Prior to this bugfix, the following set of commands would
    fail to print two double quotes:
    
    IFS=',' read -S a b c <<<'foo,"""title"" data",bar'
    echo $b
    
    This fix is from ksh93v- 2013-10-10-alpha, although it has
    been revised to use stakputc to put the required double quote
    into the buffer for consistency with the ksh93u+ codebase.
    
    src/cmd/ksh93/bltins/read.c:
     - When handling nested double quotes, put the required double
       quote in read's buffer with stakputc.
    
    src/cmd/ksh93/tests/builtins.sh:
     - Add the regression test for `read -S` from ksh93v-.
    
    src/cmd/ksh93/sh.1:
     - Fix a minor formatting error to highlight '-S' in the ksh(1)
       man page.

commit 5498d9ec250a5113f9e26c963758f32d655f0696
Merge: ff01ecda 51f97cf8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 16:54:23 2020 +0100

    Merge pull request #11 from JohnoKing/leap-seconds
    
    Fix two more problems with time zones and epoch handling

commit ff01ecdaba870f52b6aa8d29cc10187aae5c1f95
Merge: a81a6406 49cac9e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 16:43:37 2020 +0100

    Merge pull request #10 from aweeraman/debian-patches-1
    
    Fixes for implicit declaration warnings
    
    This is to upstream some minor fixes for implicit declaration warnings currently in Debian.
    
    Author: Anuradha Weeraman aweeraman@gmail.com
    Reviewed-By: Thorsten Glaser t.glaser@tarent.de
    Last-Update: 2020-02-09

commit a81a64060c44a015a317dd87999e3acead508f92
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 16:49:41 2020 +0200

    sh.1: forgot update after d8eba9d1

commit 49cac9e604bf4e840a8fd5114ede1bfe22a40cb8
Author: Anuradha Weeraman <aweeraman@gmail.com>
Date:   Sun Jun 14 09:55:08 2020 -0400

    Fixes for implicit declaration warnings
    
    Signed-off-by: Anuradha Weeraman <aweeraman@gmail.com>

commit 51f97cf82f65489947bb2b82aee90d4502aef612
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sun Jun 14 06:53:05 2020 -0700

    Fix two more problems with time zones and epoch handling
    
    src/cmd/ksh93/edit/history.c:
     - The `time_t` data type is usually 64-bit, so cast `t` to an
       unsigned long and use the correct format specifier with sfprintf.
    
    src/lib/libast/tm/tmdata.c:
     - Update the leap second array by adding the current leap
       seconds that were absent, being:
    
       2016-12-31+23:59:60  1483228826
       2015-06-30+23:59:60  1435708825
       2012-06-30+23:59:60  1341100824
    
       I couldn't find a proper list of leap seconds in Unix Epoch time,
       so I used an Epoch Converter:
       https://www.epochconverter.com/
       The converter doesn't support leap seconds, so each conversion
       had to be corrected by adding the number of leap seconds required
       (e.g. 1230767999 + 24 = 1230768023, for 2008-12-31+23:59:60 in GMT).

commit 6109f54a5e238645438f5d210b7909777a2a2435
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 10:24:05 2020 +0200

    Fix for no-argument use of 'cd' in .../fun/dirs
    
    'cd' with no argument is supposed to go to your home directory, but
    in this override function it produced an error due to an incorrect
    use of $@ within another parameter substitution, preventing $@ from
    expanding to zero words.
    
    Ref.: https://groups.google.com/d/msgid/korn-shell/781ed34b-6860-5d47-dfe8-be21280a6b31%40inlv.org
    
    src/cmd/ksh93/fun/dirs: _cd():
    - Fix the bug by setting a positional parameter if needed,
      then using a normal and correct "$@" expansion for \cd.
    - While we're here, restore a historic comment about using
      'command' to bypass aliases that exists in the listing of this
      function in the official 1995 KornShell book (pp. 274-276).
      Presumably, that comment was deleted when they decided to add the
      obnoxious and broken default alias command='command ', whenever
      that was. This branch got rid of that default alias in 61d9bca5.

commit d66f2a80d87ae5602faaf14df2447835d4f6c91b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 08:42:07 2020 +0200

    sh.1: default PS1 is "$ ", not "$"

commit 1a6f37dc86f0a951a8da0555b03abb62e833d045
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 06:28:38 2020 +0200

    NEWS: update repo URI

commit 76f7d15a93f4f0d3c6eaa3f4d5e7ec18d901b017
Merge: a739115f d7c94707
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 00:07:51 2020 +0100

    Merge pull request #8 from JohnoKing/fix-freebsd-date
    
    Backport the ksh2020 fix for timezone name determination
    
    Partial fix for #6.

commit a739115ffe0f6e8d412435f5a0ea92c28e72b34c
Merge: 289f56cd 7b994b6a
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 14 00:05:40 2020 +0100

    Merge pull request #7 from JohnoKing/fix-special-vars
    
    Implement a better fix for unsetting special env vars.
    
    See #7 for more explanations and ksh source code history :)

commit d7c94707041c7956c2748d816d5f24fb6d272c44
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jun 13 14:16:08 2020 -0700

    Backport the ksh2020 fix for timezone name determination
    
    This fix for `printf '%T' now` on FreeBSD was written by
    @krader1961. This is from https://github.com/att/ast/pull/591:
    
    On FreeBSD calling tzset() does not guarantee the tzname array will
    be correctly populated. On most systems that works but on FreeBSD you
    have to call localtime() or a related function (e.g., ctime()).
    
    This change also eliminates a potential, very small, memory leak due to
    the strdup()'ed tznames not being freed.
    
    src/lib/libast/tm/tminit.c:
     - Fix timezone name determination on FreeBSD and a memory leak.

commit 7b994b6a7ef6472505f7aebde145cd609ff0a96a
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Sat Jun 13 05:12:10 2020 -0700

    Implement a better fix for unsetting special env vars
    
    The regression this commit fixes was first introduced in ksh93t
    2008-07-25. It was previously worked around in 6f0e008c by forking
    subshells if any special environment variable is unset.
    
    The reason why this problem doesn't occur in ksh93s+ is because in
    that version of ksh sh_assignok never moves nodes, it only clones
    them. The second argument doesn't set NV_MOVE, which makes
    `sh_assignok(np,0)` is similar to `sh_assignok(np,1)`. In ksh93t and
    higher, setting the second argument to zero causes the node to be moved
    with NV_MOVE, which causes the discipline function associated with
    the variable node to be removed when `np->nvfun` is set to zero (i.e.
    NULL). This is why a command like `(unset LC_NUMERIC; LC_NUMERIC=invalid)`
    doesn't print a diagnostic, as it looses its discipline function.
    
    This patch fixes the problem by cloning the node with sh_assignok
    if it is a special variable with a discipline function. This allows
    special variables to work as expected in virtual subshells. The
    original workaround has been kept for the $PATH variable only, as
    hash tables are still broken in virtual subshells. It has been updated
    accordingly to only fork subshells if it detects the variable node
    for PATH. I have added two more regression tests for changing the
    PATH in subshells to make sure hash tables continue working as
    expected with this fix.
    
    src/cmd/ksh93/bltins/typeset.c:
     - Only fork virtual subshells if the PATH will be changed. If a
       variable is a special variable with a discipline function, it
       should be just be cloned, not moved.
    
    src/cmd/ksh93/sh/nvdisc.c:
     - Add a comment to clarify that NV_MOVE will delete the discipline
       function associated with the node.
    
    src/cmd/ksh93/tests/subshells.sh:
     - Add two more regression tests for unsetting the PATH in subshells,
       one for if PATH is being pointed to by a nameref. Condense the
       hash table tests by moving the main test into a single function.

commit 289f56cd4cfd554f9ed2406fb1a6fdb82d53ab4e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 13 01:48:13 2020 +0200

    tests/pty.sh: fix regress fail due to $TMPDIR
    
    Test 137(C) was failing on some systems because $TMPDIR was set and
    the local vi(1) honours it, so that the expected '/tmp/' string was
    never output by vi. For compatibility with vi programs that honour
    $TMPDIR and those that always use /tmp, we must export TMPDIR=/tmp.
    
    src/cmd/ksh93/tests/pty.sh:
    
    - Export TMPDIR=/tmp for test 137(C).
         Note that this exports TMPDIR to the environment for the
      duration of the 'tst' function run because the function was
      defined using the ksh 'function tst { ...; }' syntax.

commit 881a5be07c21941d41ec00b33c916078272c83a1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 20:15:20 2020 +0200

    Remove obsolete docs, keeping official description
    
    The lib/package/ast-open.* are almost entirely obsolete after
    most of the AST utilities were removed to concentrate on ksh93
    development. The only part that is both relevant and not repeated
    elsewhere is AT&T's introductory blurb on ksh93.
    
    README.md:
    - Add the official AT&T ksh93 description from ast-open.html,
      reformatted to Markdown with a couple of added hyperlinks.
    
    lib/package/ast-open.README,
    lib/package/ast-open.html:
    - Removed. (Note that the historic ksh93 changelog in these files
      is also included in src/cmd/ksh93/RELEASE).

commit d600cf61fad228fb0387160e331b310c8c8946c5
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 18:49:53 2020 +0200

    use 'ksh93' org identifier for new/changed builtins
    
    We cannot identify the new builtins as coming from "AT&T Research"
    as they don't. 'ksh community' is accurate but a bit long. Since
    we're now at a GitHub org called ksh93, let's just use that.

commit a5e2fa8db7a4379e11f8215d032adcc8861453d4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 14:42:23 2020 +0100

    README.md: tweak policy

commit 5aea9bbe08f95ca34a84a2f13f264f228fd9be05
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 13:52:51 2020 +0100

    README.md: update NEWS link after transfer to ksh93 org

commit e500479ede114af5ba83054c8aece5feac9698a2
Merge: cd5c181a 017d088c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 12:36:42 2020 +0100

    Merge pull request #1 from JohnoKing/fix-builtin-delete
    
    `builtin -d` should not delete special builtins

commit 017d088c39e6db71538946ae6362d04606242409
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Thu Jun 11 20:18:01 2020 -0700

    `builtin -d` should not delete special builtins
    
    The man page for the builtin command says special builtins cannot
    be deleted. This wasn't the case though, running `builtin -d` on
    a special builtin was deleting it. As an example, the following
    set of commands was ending with 'export: not found':
    
    $ builtin -d export
    $ export foo=bar
    
    This commit backports the bugfix from ksh93v- (2014-12-24-beta),
    which added an error check to prevent special builtins from being
    deleted.
    
    src/cmd/ksh93/sh/nvdisc.c:
     - Add an error check to prevent special builtins from being deleted.
    
    src/cmd/ksh93/tests/builtins.sh
     - Add a regression test for using `builtin -d` on special builtins.

commit cd5c181a39e14b97850901e4aee511fb0d60468f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 12:35:58 2020 +0200

    Restore AST 'pty' pseudoterminal command (re: reboot)
    
    This enables the tests/pty.sh regression tests for the interactive
    shell to work. I've managed to restore these without restoring
    nmake (which would cause unresolved build failures). It involved
    hand-editing the Mamfile originally generated by nmake.
    
    src/cmd/builtin/Makefile:
    - Restored. Even though nmake is not installed, apparently mamake
      still needs the Makefile for the 'install' target to work. This
      will probably need editing if nmake is ever restored.
    
    src/cmd/builtin/Mamfile:
    - Restored and edited by hand to remove the commands to build all
      the utilities except pty, as well as all test targets (pty has no
      test). Most of this was systematically deleting blocks delimited
      by 'make FOO' and 'done FOO generated' until the build stopped
      failing -- a task made so much easier by the build now failing
      gracefully on error (see d0dfb37c). To see the diff, do:
            git diff cc1f2bf8 src/cmd/builtin/Mamfile
    
    src/cmd/builtin/RELEASE:
    - Restored for completeness' sake with all non-pty entries removed.
    
    src/cmd/builtin/features/pty,
    src/cmd/builtin/pty.c:
    - Restored.

commit 802ea67afb095aa2e44ef3bab998066c4a723496
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 11:34:10 2020 +0200

    tests/io.sh: don't abort entire suite on failure
    
    src/cmd/ksh93/tests/io.sh:
    - 16 tests for the 'redirect' builtin used the ((arithmetic
      command)) to check the result. This does not tolerate the result
      being a non-number, such as the empty string, which may occur on
      test failure. So use [[ ... -eq ArithExpression ]] to check these
      results instead; it simply returns false, failing gracefully.

commit d8eba9d11286f8d2167ab6b3077326c8388f579f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 06:57:57 2020 +0200

    Remove 'login' and 'newgrp' builtins: not sane default behaviour
    
    This commit removes the undocumented 'login' and 'newgrp' builtin
    commands. They already stopped blocking shell functions by that
    name by changing from special to regular builtins in 04b91718 (a
    change I forgot to mention in that commit message), but there is
    another obnoxious aspect to these: being glorified hooks into
    'exec', they replaced your shell session with the external commands
    by the same name. This makes argument and error checking
    impossible, so if you made so much as a typo, you would be
    immediately logged out.
    
    Even if that behaviour is wanted by a few, having it as the default
    is user-hostile enough to be called a bug. It also violates the
    POSIX definition of the 'newgrp' utility which explicitly says that
    it "shall create a new shell execution environment", not replace
    the existing one.
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/newgrp.html
    
    Users who do want this behaviour can easily restore it by setting:
            alias login='exec login'
            alias newgrp='exec newgrp'
    
    src/cmd/ksh93/bltins/misc.c:
    - As there is no more 'login' builtin, combine b_exec() and
      B_login() functions, which allows eliminating a few variables.
      Note that most of 'exec' was actually implemented in B_login()!
    
    src/cmd/ksh93/data/builtins.c:
    - Remove "login" and "newgrp" table entries.
    
    src/cmd/ksh93/include/builtins.h:
    - Remove SYSLOGIN parser ID. As this was the first, all the others
      needed renumbering.
    
    src/cmd/ksh93/sh/xec.c:
    - Remove SYSLOGIN parser check that made 'login' and 'newgrp' act
      like 'exec' and replace the shell.

commit 7b82c338da99b91c2f2985a0c6b75186d0d1673d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 04:17:14 2020 +0200

    Make 'redirect' a regular builtin instead of an alias of 'exec'
    
    This commit converts the redirect='command exec' alias to a regular
    'redirect' builtin command that only accepts I/O redirections, which
    persist as in 'exec'. This means that:
    * 'unlias -a' no longer removes the 'redirect' command;
    * users no longer accidentally get logged out of their shells if
      they type something intuitive but wrong, like 'redirect ls >file'.
    
    This should not introduce any legitimate change in behaviour. If
    someone did accidentally pass non-redirection arguments to
    'redirect', unexpected behaviour would occur; this now produces
    an 'incorrect syntax' error.
    
    src/cmd/ksh93/bltins/misc.c: b_exec():
    - Recognise 'redirect' when parsing options.
    - If invoked as 'redirect', produce error if there are arguments.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove redirect='command exec' alias.
    
    src/cmd/ksh93/data/builtins.c:
    - Update/improve comments re ordering.
    - Add 'redirect' builtin entry.
    - sh_optexec[]: Abbreviate redirection-related documentation;
      refer to redirect(1) instead.
    - sh_optredirect[]: Add documentation.
    
    src/cmd/ksh93/include/builtins.h:
    - Add SYSREDIR parser ID, renumbering those following it.
    - Improve comments.
    - Add extern sh_optredirect[].
    
    src/cmd/ksh93/sh.1:
    - exec: Abbreviate redirection-related documentation; refer to
      'redirect' instead.
    - redirect: Add documentation.
    
    src/cmd/ksh93/sh/xec.c:
    - Recognise SYSREDIR parser ID in addition to SYSEXEC when
      determining whether to make redirections persistent.
    
    src/cmd/ksh93/tests/io.sh:
    - To regress-test the new builtin, change most 'command exec' uses
      to 'redirect'.
    - Add tests verifying the exit behaviour of 'exec', 'command exec',
      'redirect' on redirections.

commit 936802f92a33a417da3b3633f91702980d7473d8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 20:58:24 2020 +0200

    Simplify exit status fix, restore interruptability
    
    The exit status fix introduced in cherry-picked commit 22c3a6e1
    introduced a problem: interrupting the build only interrupted the
    main process, and the background job would happily continue.
    
    bin/package, src/cmd/INIT/package.sh:
    - Give up on the idea of a background job and put up with not
      cleaning up the FIFO. It's in a build directory that is going to
      get cleaned up anyway.

commit 7a8a46700cec5ecf08b87944c819a45885c6eefa
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 19:59:51 2020 +0200

    Build on more darwin/macOS versions
    
    src/cmd/INIT/cc.darwin*:
    - Build on ancient Mac OS X gcc versions (darwin 7+, Mac OS X
      10.3+), more recent gcc versions (darwin 11+, Mac OS X 10.7+), as
      well as current clang versions. So there are now three cc.darwin*
      wrapper scripts for these different darwin versions.
    
    bin/package, src/cmd/INIT/package.sh:
    - Differentiate the host ID and pick the correct Darwin script based on
      the detected OS release version.

commit 04b9171858219157c7271a07ba18ebec9a6733c3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 12:43:17 2020 +0200

    POSIX compliance fix: make 'unalias' a regular builtin
    
    Both 'alias' and 'unalias' are specified as regular builtins. Among
    a few other things, that means it ought to be portable to use these
    names for shell functions. But ksh93 disallowed that until now.
    
    src/cmd/ksh93/data/builtins.c:
    - Make 'unalias' a regular builtin by removing the BLT_SPC flag.
    - (same fix for 'alias' was already done in afa68dca)
    - Add the BLT_ENV flag to the 'alias' and 'hash' commands. In
      include/name.h, this flag is commented: "non-stoppable, can
      modify environment". The "non-stoppable" bit seems like a good
      idea: these operations should not be interruptable as that would
      cause an inconsistent state.
    
    src/cmd/ksh93/sh.1:
    - Remove the '-', indicating special builtin, from 'alias' entry.
    - Minor cosmetic fix: space after the '-' for 'unset'.
    
    (cherry picked from commit a4315d7672204acb543010b4d4916b22dcb9cb08)

commit 2da22f4023128f39aa70f57413bccc789de9e59f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 11:34:59 2020 +0200

    data/builtins.c: minor cosmetic 'alias --man' fix (re: d8428a833)
    
    (cherry picked from commit 98be5130d3a46a565d0ad601aac838531765fc43)

commit 80d9ae2b1ce0550877bbf394bfb09b186df3cdac
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 05:23:38 2020 +0200

    Refactor new b_hash(); better hash table clear (re: d8428a83)
    
    The b_hash() function duplicated much of its code from b_alias(),
    while b_alias() retained some code to support being called as
    'hash'. There is no reason why 'hash' and 'alias' can't be handled
    with a single function, as is the case several other builtins. Note
    that option parsing can easily be made dependent on the name the
    command was invoked with (in this case, argv[0]=='h').
    
    The new hash builtin's -r option cleared the hash table by
    assigning to PATH its existing value, triggering its associated
    discipline function (put_restricted() in init.c) which then
    actually cleared the hash table. That's a bit of a hack. It's nicer
    if we can just do that directly. This requires taking a static
    handler function rehash() from init.c, which invalidates one hash
    table entry, and making it available to the builtin.
    
    src/cmd/ksh93/bltins/typeset.c,
    src/cmd/ksh93/include/builtins.h,
    src/cmd/ksh93/include/nval.h,
    src/cmd/ksh93/sh/init.c,
    src/cmd/ksh93/sh/name.c:
    - Merge b_hash() into b_alias().
    - The -x option was still uselessly setting the NV_EXPORT flag.
      Exported aliases were in ksh88 but were removed in ksh93.
    - Rename rehash() handler function from init.c to nv_rehash
      (avoiding a possible conflict with another rehash() in cd_pwd.c)
      and move it to name.c just above nv_scan(), which it's meant to
      be used with. Make it an extern so typeset.c can use it.
    - b_alias(): Replace the PATH assignment by an nv_scan() call to
      clear the hash table directly using the nv_rehash() handler.
    
    src/cmd/ksh93/data/builtins.c:
    - POSIX compliance fix: Remove BLT_SPC (special builtin) flag from
      "alias" definition. 'alias' is specified as a regular builtin.
    - sh_optalias[]: Fix uninformative -t option documentation.
    - sh_opthash[]: Edit for conciseness and clarity.
    
    src/cmd/ksh93/sh.1:
    - Edit the 'alias -t' and 'hash' documentation.
    - Remove the -- prefix from the 'alias' entry, which indicated that
      it was supposed to be a declaration builtin like 'typeset', with
      assignment-arguments expanding tildes and not being subject to
      field splitting. However, my testing shows that 'alias' has never
      actually behaved that way on ksh93. Even adding the BLT_DCL flag
      in data/builtins.c doesn't seem to change that.
    
    (cherry picked from commit afa68dca5c786daa13213973e8b0f9bf3a1dadf6)

commit 74b4162178c8a2347491b9fd3a22d8e6e1b7e831
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jun 10 10:19:41 2020 -0700

    Fix `set +r` so that it cannot unset the restricted option
    
    The ksh man page documents that the restricted option cannot be
    unset once it is set, which means `set +r` should be invalid.
    While this was true for `set +o restricted`, `set +r` was causing
    the restricted option to be unset. The fix for this problem comes
    from one of Solaris' patches, which adds an error check to prevent
    this behavior.
    
    Solaris' patch:
    https://github.com/oracle/solaris-userland/blob/master/components/ksh93/patches/020-CR6919590.patch
    
    src/cmd/ksh93/sh/args.c:
     - Add an error check to stop `set +r` from unsetting the
       restricted option.
    
    src/cmd/ksh93/tests/restricted.sh:
     - Add two regression tests to make sure the restricted option
       cannot be unset.
    
    (cherry picked from commit bef4fee404d8e24b38fce66420c14a39ac4a123e)

commit 9cef2d534a9a3696abc40b790b12e7561e5489f4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 00:19:03 2020 +0200

    shtests: make tests more interruptable with Ctrl+C
    
    Sometimes you have to put ^C on rapid repeat to get out of running
    the tests. This is because each test scripts is launch as a child
    shell (not a subshell) in the foreground, which thus handle the ^C.
    It then exits with a status indicating SIGINT, but the shtest script
    wasn't handling this and just kept going.
    
    src/cmd/ksh93/tests/shtests:
    - For reasons I don't understand yet, interrupting tests with ^C
      tends to make them exit with status 130 (128+2) instead of what
      I would expect for ksh93, 258 (256+2). Not a big deal: POSIX
      specifies that any exit > 128 signifies a signal in any case,
      and 'kill -l' works even on those values. But the checks need
      changing to '> 128'.
    - Check each result for SIGINT, and issue SIGINT to self if found.
    
    (cherry picked from commit d0dfb37c6c71ac7b157060249125e0959130927d)

commit 102868f8507e649970e2a7f58e05ab22d309cf0b
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jun 10 04:00:35 2020 -0700

    Replace the hash alias with a proper builtin
    
    This commit replaces the old hash alias with a proper builtin.
    I based this builtin off of the code alias uses for handling
    `alias -t --`, but with the hack for `--` removed as it has
    no use in the new builtin. `alias -t --` will no longer work,
    that hack is now gone.
    
    While I was testing this builtin, I found a bug with hash tables
    in non-forking subshells. If the hash table of a non-forking
    subshell is changed, the parent shell's hash table is also changed.
    As an example, running `(hash -r)` was resetting the parent shell's
    hash table. The workaround is to force the subshell to fork if the
    hash table will be changed.
    
    src/cmd/ksh93/bltins/typeset.c:
     - Move the code for hash out of the alias builtin into a dedicated
       hash builtin. `alias -t --` is no longer supported.
    
    src/cmd/ksh93/data/aliases.c:
     - Remove the old alias for hash from the table of predefined aliases.
    
    src/cmd/ksh93/data/builtins.c:
     - Fix the broken entry for the hash builtin and add a man page for
       the new builtin.
    
    src/cmd/ksh93/sh.1:
     - Replace the entry for the hash alias with a more detailed entry
       for the hash builtin.
    
    src/cmd/ksh93/sh/name.c:
     - Force non-forking subshells to fork if the PATH is being reset
       to workaround a bug with the hash tree.
    
    src/cmd/ksh93/tests/alias.sh:
     - Add a regression test for resetting a hash table, then adding
       a utility to the refreshed hash table.
    
    src/cmd/ksh93/tests/subshell.sh:
     - Add regression tests for changing the hash table in subshells.
    
    (cherry picked from commit d8428a833afe9270b61745ba3d6df355fe1d5499)

commit d1bd8f89b78d99eb2c0bd70bd3e22f0ab2376a5d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 10 11:25:22 2020 +0200

    shtests: print CPU times used at end (re: ebf71e61)
    
    Since we now have a shiny new POSIX compliant 'times' builtin,
    we might as well use it.
    
    src/cmd/ksh93/tests/shtests:
    - Run 'times' at end of test run.
    - Skip the pretty-printing until #7 is fixed.
    
    (cherry picked from commit 2c27d9fbc239583004ec70377db98627eea5e294)

commit e92faddbf9d3efbee1503edc3cc2994eababd88d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Wed Jun 10 05:16:53 2020 -0700

    Fix 39 spelling errors and a formatting issue
    
    A column of whitespace in the NEWS file was removed for consistent
    formatting. Most of the spelling errors were found with this
    codespell dictionary:
    https://github.com/orbitcowboy/codespell_dictionary
    
    (cherry picked from commit 0e36b17abe5609c461a3e4da7041eb0fdf9991b7)

commit 90fd867171617e997b9917554f8fd3ebfef35986
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 10 07:01:04 2020 +0200

    Update manual after a0e0e29e
    
    An oversight...
    
    src/cmd/ksh93/sh.1:
    - Undocument the fixed ${.sh.subshell} breakage.
    
    (cherry picked from commit 42be8a3c6dd5a76d03e0456d7f53e38536757aa5)

commit 30b111d51a337845061ab34ad4cd4a81ba87fab8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 10 01:34:42 2020 +0200

    TODO: moar update
    
    (cherry picked from commit 3bce00165113ed22e22c99d6347cc8211bea4db1)

commit 12a079ea2bd2adfa73b6663bf09fbd0b9c741f31
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 10 00:06:24 2020 +0200

    TODO: update
    
    (cherry picked from commit 1e6bf87c2c435799034c9d87236939ab8bd61fb9)

commit a1f46d785f267297931b139274d3bc4155d22dd3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 9 21:57:05 2020 +0200

    rm "I/O error" error msg; just keep >0 exit status (re: 9011fa93)
    
    The bug was really that I/O errors in output builtins were
    undetectable by any means. Having a >0 exit status is sufficient.
    Adding an error message risks making existing ksh scripts noisier,
    or even breaking them if they redirect stderr to stdout.
    
    Note to self: in future, implement the minimum change necessary to
    fix bugs, nothing more. The fact that I needed to add four extra
    2>/dev/null to the regression tests should have been a hint.
    
    src/cmd/ksh93/bltins/print.c,
    src/cmd/ksh93/data/msg.c,
    src/cmd/ksh93/include/io.h:
    - Remove "I/O error" message.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Update to check for exit status only.
    
    src/cmd/ksh93/tests/basic.sh,
    src/cmd/ksh93/tests/coprocess.sh:
    - Revert four new '2>/dev/null' to suppress the error message.
    
    (cherry picked from commit 5e17be24d18455b575b6e98bc631c6935ffc795a)

commit b883c7a7f8ed4ed42db21a63991bc5a3d42d0375
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 9 21:16:14 2020 +0200

    remove extra 'isalias' variable (re: 16d5ea9b)
    
    src/cmd/ksh93/bltins/typeset.c: unall():
    - There's no need to keep track of whether we're unsetting an alias
      using a new 'isalias' vaariable, as we can just repeat the check
      for 'troot==shp->alias_tree'.
    
    (cherry picked from commit 68f3ae3acd0d19dd80805049a1c9afc1ae1e75c3)

commit 5d50f825e486fa758b5779fb6941ca766ad5602d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Tue Jun 9 08:31:00 2020 -0700

    The unalias builtin should return an error for non-existent aliases
    
    This commit fixes a bug that caused unalias to return a zero status
    when it tries to remove an alias twice. The following set of commands
    will no longer end with an error:
    
    $ alias foo=bar
    $ unalias foo
    $ unalias foo && echo 'Error'
    
    This commit is based on the fix present in ksh2020, but it has been
    extended with another bugfix. The initial fix for this problem tried to
    remove aliases from the alias tree without accounting for NV_NOFREE. This
    caused any attempt to remove a predefined aliases (e.g. `unalias float`)
    to trigger an error with free, as all predefined aliases are in read-only
    memory. The fix for this problem is to set NV_NOFREE when removing aliases
    from the alias tree, but only if the alias is in read-only memory. All
    other aliases must be freed from memory to prevent memory leaks.
    
    I'll also note that I am using an `isalias` variable rather than the `type`
    enum from ksh2020, as the `VARIABLE` value is never used and was replaced
    with a bool called `aliases` in the ksh2020 release. The `isalias` variable
    is an int as the ksh93u+ codebase does not use C99 bools.
    
    Previous discussion: https://github.com/att/ast/issues/909
    
    - src/cmd/ksh93/bltins/typeset.c:
      Remove aliases from the alias tree by using nv_delete. NV_NOFREE
      is only used when it is necessary.
    
    - src/cmd/ksh93/tests/alias.sh:
      Add two regression tests for the bugs fixed by this commit.
    
    (cherry picked from commit 16d5ea9b52ba51f9d1bca115ce8f4f18e97abbc4)

commit d18469d608ef58f785a0c6a16c488ef5951d3791
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 9 20:11:22 2020 +0200

    bin/package: exit with nonzero status on build failure
    
    Build scripts and the like ought to be able to check the results of
    the build using the exit status of the build command.
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Add global error_status variable to keep track of the highest
      exit status of all commands using capture(). Exit with that.
    - capture():
      * When capturing build output using 'tee', change the regular
        pipe construct (which doesn't preserve the exit status of pipe
        elements except the last one) to a couple of background jobs
        connected with a FIFO (named pipe). This allows getting the
        build's exit status using the "wait" command.
      * Update error_status on every invocation of capture().
    
    (cherry picked from commit 22c3a6e1b32f3ab7eeca45adb76863982dc3e334)

commit 22d6b4527d81f592179af61e8f781702893b3789
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 8 20:06:51 2020 -0700

    Avoid brute-forcing during the build process to prevent failed builds
    
    The default behavior of the package script is to ignore
    errors. This has disastrous effects if any part of ksh
    or libast fails to build due to something like a syntax
    error, as the build will stop long after the first error
    occurred.
    
    This commit removes the -k flag from the $makeflags variable
    in both copies of the package script. This forces the build
    to fail if a compiler error occurs.
    
    bin/package and src/cmd/INIT/package.sh:
     - Remove the -k assignment to $makeflags so that compiler
       errors cause the build to fail.
    
    (cherry picked from commit 87bfaa19f3d336feb7b7bd4f5d4caf8d553f2547)

commit c2eabc57e02a6181e6c9f7814198c6efeb7521f1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue Jun 9 03:09:45 2020 +0200

    shtests: report total errors on terminal and in exit status
    
    Setting the exit status allows build scripts and the like
    to actually detect regression test failures.
    
    src/cmd/ksh93/tests/shtests:
    - Add counter for total number of errors.
    - Report total to stdout at the end.
    - Set the exit status to the total number of errors, up to 125
      (higher statuses have special meanings).
    
    (cherry picked from commit c0dd80b14d4d316b4e9eff4b1b67d4e47f23a6ba)

commit fb652a7e50742b420d6488dfaa907ce2f63a5393
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 23:51:57 2020 +0200

    shtests: fix loose ends
    
    src/cmd/ksh93/tests/variables.sh:
    - Tolerate a bit more time for the SECONDS verification test.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Replace unportable 'head -c 1' by 'dd bs=1 count=1'
    - Remove unnecessary uses of 'whence'.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a regression test for a weirdly specific 'whence' bug exposed
      by the aforementioned unneccessary uses of 'whence', which only
      shows up on my old Power Mac G5 running Mac OS X 10.3. For all I
      know it's a compiler bug, but let's add a more clear failure for
      it here, in case that happens anywhere else.
    
    (cherry picked from commit c3898bd1e6e40874845771d33a5b37220ef0b06e)

commit 712261c89b18c87595db61f377bfd1075160a6e0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 23:02:26 2020 +0200

    shtests: More speedups; also fix xtrace (re: 734e5953)
    
    This reduces a bunch more unnecessarily long sleeps to give
    asynchronous processes time to run, etc. (No, we don't need to be
    compatible anymore with your cool 1985 Intel 80386DX 16 MHz
    battlestation...) Running the test suite is almost tolerable now,
    making me much more likely to actually run the regression test
    suite and catch my own regressions.
    
    In addition, there are various fixes to make the test suite
    compatible with 'set -x' ('set -o xtrace') so that you can now
    actually *use* the documented 'bin/shtests -x' option. Recommend
    combining with '-p' to avoid tracing everything three times.
    
    I've also added a really useful $PS4 trace prompt to shtests that
    traces pretty much everything there is to trace. (It does use
    expansions that modify ${.sh.match}, which affected several tests,
    particularly in tests/substring.sh; for those we need to set a
    temporary simpler $PS4.)
    
    (cherry picked from commit c3a5d47cfe880b526cabb5370ddaced0e8626acd)

commit ba1f2ba9c33c5006bc4c0ced9a9f923eb2c16655
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 8 07:08:40 2020 -0700

    Fix a build error on Linux due to wrong include ordering
    
    This regression was caused by the commit that introduced
    the times builtin. The ordering of the #include directives
    was causing the build to fail on Ubuntu 20.04 and Arch Linux.
    
    src/cmd/ksh93/bltins/misc.c:
     - Move the includes for standard headers to the bottom
       of the includes to fix build failures on Linux.
    
    (cherry picked from commit 3a42b206a0cc71bedc4773ce545435570e862e61)

commit 40d0bdc2876f48d34d9c70162c3d0608f472ddec
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 17:00:49 2020 +0200

    Fix regression in 'return' introduced by 98e0fc94
    
    This fixes two regression test failures in tests/functions.sh.
    
    src/cmd/ksh93/bltins/cflow.c: b_exit():
    - The exit status should of course only be cropped to 8 bits if
      b_exit() will actually exit, not if it returns from a function.
    
    (cherry picked from commit 2d1e7f87551159c942b16de2a98dc72697988d26)

commit b5e52703e9725db591d870bc327b27ae1c47817d
Author: Johnothan King <johnothanking@protonmail.com>
Date:   Mon Jun 8 03:22:51 2020 -0700

    Fix an issue with the up arrow key in Emacs editing mode.
    
    Emacs editing mode is bugged in ksh93u+ and ksh2020. Let's
    say you were to run the following commands after starting
    a fresh instance of ksh:
    
    $ alias foo='true'
    $ unalias foo
    
    If you type 'a' and then press the up arrow on your keyboard,
    ksh will complete 'a' to `alias foo='true'` by doing a reverse
    search for the last command that starts with 'a'.
    Run the alias command again, then type 'u' and press the up
    arrow key again. If ksh is in Vi mode, you will get `unalias foo`,
    but in Emacs mode you will get `alias foo='true'` again.
    
    This bug was occurring because ksh was only doing a reverse search
    based on the first command that was completed using the up arrow.
    All subsequent commands were ignored as ksh was saving the first
    command and only based later searches off of it.
    
    NEWS:
     - Add instructions for reproducing this bug with the up arrow
       key and information about why this bug was happening in the
       first place.
    
    src/cmd/ksh93/edit/emacs.c:
     - Remove a bad check that was preventing ksh from using the
       latest input for reverse search.
    
    (cherry picked from commit 745b065487ad6bac693ec6f44752f96e87f9a63b)

commit 8f90d982801a87090c11634d081a5f15121da86f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 16:12:23 2020 +0200

    tests/signal.sh: slash sleeps by 10 to reduce a long wait
    
    The signal.sh regression tests took over a minute and a half to
    complete, so with the default three runs (for different locales)
    they took about five minutes. Annoying and unnecessary. As ksh
    supports floating point shell arithmetic plus a 'sleep' builtin
    that supports fractional seconds, this is easy to fix.
    
    src/cmd/ksh93/tests/signal.sh:
    - Slash all the 'sleep' arguments and associated factors by a
      factor of 10. Since computers are now hundreds or thousands of
      times faster than they were in the early 1990s, this should be
      plenty safe enough and all the tests should still be valid.
    - Change one unportable direct invocation of /bin/sleep to use the
      builtin.
    
    (cherry picked from commit 734e5953650e9a62048c45eb9a3b827bb9efcfb5)

commit d024d4c895ca78df173d0ee71fa95fbe8089944d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 12:23:37 2020 +0200

    Fix signal handling due to exit status > 256
    
    This fixes two bugs: issuing the 'exit' command with a value > 256
    would cause ksh 93u+ to kill itself with the corresponding signal
    (try 'exit 265' to SIGKILL your interactive shell), and, if the
    last command of a script exits due to a signal, the shell would
    repeat that signal to itself, causing any parent ksh to also be
    killed.
    
    Discussion:
    https://bugzilla.redhat.com/show_bug.cgi?id=1469624
    https://rainbow.chard.org/2017/03/21/ksh-deliberately-segfaults-if-the-last-command-in-a-script-crashes/
    
    This commit is loosely based on a patch applied to the 93v- beta
    and the abandoned ksh2020, but that patch was incomplete & broken:
      $ ksh-2020.0.0 -c 'exit 265'; echo $?
      137
    Expected: 9. Since the exit was *not* due to a signal, the value
    should simply be cropped to the 8 bits supported by the OS.
    
    src/cmd/ksh93/bltins/cflow.c: b_exit():
    - For the 'exit' builtin command, bitwise-AND the argument to
      'exit' with SH_EXITMASK (8 bits, crop to 0-255) before passing it
      on to sh_exit(). This restores the behaviour of <=2011 ksh93
      versions and is in line with all other POSIX shells.
      It also fixes this bogosity:
        $ (exit 265); echo $?                   # non-forked subshell
        265
        $ (ulimit -t unlimited; exit 265); echo $?  # forked subshell
        9
      Forked or non-forked should make no difference at all
      (see commit message a0e0e29e for why).
    
    src/cmd/ksh93/sh/fault.c: sh_done():
    - If the current exit status is equal to the status for the last
      signal that was received from a child process, remove the
      SH_EXITSIG (9th) bit, so that the shell doesn't kill itself.
    - If the shell's last child process exits due to a signal, exit
      with a portable 8-bit exit status (128 + signal number). This
      avoids the exit status being < 128 by being cropped to 8 bits.
    
    src/cmd/ksh93/tests/signal.sh:
    - Add regression test for exit with status > 256.
    - Add regression test verifying the shell no longer kills itself.
    
    (cherry picked from commit 98e0fc94393e175ce6adfee390327c320795bf12)

commit f88f302c381308523e7289f8cf08c7470ef58bb3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 03:28:36 2020 +0200

    Remove code related to long-dead 3DFS research project
    
    This commit gets rid of dead weight related to an obscure early
    1990s Bell Labs versioning file system research project called
    3DFS, which has not existed for decades and for which I have not
    managed to find any evidence that it was ever used outside the lab.
    
    This removes:
    - the SHOPT_FS_3D compile option (which was forced on even when 0)
    - the obnoxious default alias 2d='set -f;_2d' that turned off your
      globbing and then tried to run a nonexistent _2d command
    - undocumented builtins 'vmap' and 'vpath' that only errored out
    - a non-functional -V unary operator for the test and [[ commands
    - some specific code for Apollo workstations (last made in 1997),
      which was inseparably intertwined with the 3DFS code
    
    (cherry picked from commit 20cdf3709f4fb4e468057b534dcee819b1961fb6)

commit 5f8b0512f015fad4ca1eb368b84c2ed9947cd741
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 01:05:27 2020 +0200

    POSIX compliance fix: apply 'set -u' to $!
    
    POSIX requires[*] that expanding any unset parameter other than $@
    and $* is an error when 'set -u'/'set -o nounset' is active.
    However, on ksh93, $! was exempt as well. That is a bug.
    [*] https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_25
    
    src/cmd/ksh93/sh/macro.c:
    - special(): Handle 'set -u' for special parameters if/when it is
      about to return NIL. That code path is currently only possible to
      reach for "$!", but this is future-proof and will do the right
      thing if any other special parameter can ever have no value.
    
    src/cmd/ksh93/tests/options.sh:
    - Add and tweak 'set -u' regression tests.
    
    (cherry picked from commit 75cc7a38cafe3a9929e1ed17d8b952babda22a09)

commit 36da314c9e30d485c48abb7ed3c318b6e56dcb8d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Mon Jun 8 00:01:24 2020 +0200

    POSIX compliance fix: apply 'set -u' to $1, $2, ...
    
    POSIX requires[*] that expanding any unset parameter other than $@
    and $* is an error when 'set -u'/'set -o nounset' is active.
    However, on ksh93, $1, $2, ... were exempt as well. That is a bug.
    [*] https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_25
    
    src/cmd/ksh93/sh/macro.c:
    - varsub(): Backport code for handling 'set -u' for positional
      parameters from the ast 2016-10-01-beta branch.
    
    src/cmd/ksh93/tests/options.sh:
    - Add relevant regression tests.
    
    src/cmd/ksh93/sh.1:
    - Document that $@ and $* are exempt from 'set -u'.
    
    (cherry picked from commit f954c6be0748c4c38a680a75f27564965fbd328e)

commit e2a648b41f3b80d00a4a0698a216ba3cfa2dc7f2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 23:35:17 2020 +0200

    tests/options.sh: fix child shell test by exporting variable
    
    src/cmd/ksh93/tests/options.sh:
    - Pipe hang bugfix test: The child shell has no idea how long to
      sleep for if we don't export the variable telling it so.
    
    (cherry picked from commit ede0960c4ec84f0f934b17072a892a4e40798e97)

commit 781f0a39aaa38f7f8191822bdc29fb181d1f0fe7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 22:51:45 2020 +0200

    Fix parsing of multibyte characters
    
    According to Red Hat, this fixes "a bug on input buffer boundary
    and/or temporary composing buffer of multibyte characters".
    The patch was credited to Paulo Andrade <pandrade@redhat.com>.
    
    To be honest, I don't know how to trigger this bug or what the code
    removed by this fix really does, but this patch is in production
    use at Red Hat, removes some smelly stuff, and is not triggering
    any regression test failures, so I'll just take this one on faith.
    
    https://bugzilla.redhat.com/show_bug.cgi?id=1417886
    https://github.com/att/ast/commit/4fa2020b
    
    src/cmd/ksh93/sh/fcin.c:
    - _fcmbget(): Remove some dodgy-looking buffer-fiddling code that
      is marked as "for testing purposes with small buffers".
    
    (cherry picked from commit 407760fdbddcb7f8ac92b5d1da29d3e09dac0369)

commit 7559f83efff43a0d27933747751a35762e666bbc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 22:29:29 2020 +0200

    Fix ksh hanging in pipes
    
    Under certain conditions, ksh scripts may hang when piped through
    a program that terminates before EOF.
    
    Discussion and reproducer:
    https://bugzilla.redhat.com/show_bug.cgi?id=1457990
    https://www.mail-archive.com/ast-developers@lists.research.att.com/msg01961.html
    
    src/cmd/ksh93/sh/jobs.c:
    - In job_wait(), correctly set the terminal foreground process
      group when resuming a process.
    
    (cherry picked from commit 99ef2ca5309da91fdead74bea00743960d470c6a)

commit 98c1e37d860129450619a589cf5aa8075f4e0d38
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 20:41:04 2020 +0200

    Fix memory corruption while parsing functions
    
    Discussion: https://bugzilla.redhat.com/show_bug.cgi?id=1451057
    
    src/cmd/ksh93/sh/parse.c: funct():
    - Make the savstak variable volatile and always initialise it to
      avoid undefined behaviour.
    
    (cherry picked from commit 5e56b28cd63ec2120c5f70a6e0abf2f8dbb7e7dc)

commit b9f28bc5089f85a39245f50d1036c1d74d832c0e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 17:55:56 2020 +0200

    cleanup: remove pointless no-op 'fc' and 'type' aliases
    
    Both 'fc' and 'type' are already implemented as perfectly
    functional builtins -- in fact they use the exact same C function
    as 'hist' and 'whence', so the behaviour is clearly identical.
    
    Except 'type' was aliased to 'whence -v', but b_whence() contains
    explicit code to activate the v flag if invoked as 'type', so the
    alias is not needed for that either.
    
    It looks like someone decided to implement these aliases as proper
    builtins (as they should be; they are POSIX standard commands and
    'unalias -a' must not get rid of them), but then forgot to remove
    these default aliases (and to update the man page).
    
    I'm not even doing a NEWS entry for this as there is no change in
    behaviour. The only difference is that you now get the correct
    command name in error and usage messages for 'fc' and 'type'.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove fc='hist' and type='whence -v' default aliases.
    
    src/cmd/ksh93/sh.1:
    - Remove those default aliases from the list.
    - Document 'fc' and 'type' builtins.
    
    (cherry picked from commit c73af6a5a36a72c681201c9e9c397f98bbf2a86d)

commit 61d9bca5817a698a81c80cb9f2bdea95b213c8e8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Jun 7 02:36:54 2020 +0200

    POSIX compliance: rm harmful default aliases 'command '/'nohup '
    
    Continuing alias substitution after 'command' (due to the final
    space in the alias) is inherently broken and doing so by default is
    incompatible with the POSIX standard, as aliases may contain
    arbitrary shell grammar.
    
    For instance, until the previous commit, the POSIX standard 'times'
    command was an alias: times='{ { time;} 2>&1;}' -- and so, of
    course, 'command times' gave a syntax error, although this is
    a perfectly valid POSIX idiom that must be supported.
    
    'command' is specified by POSIX as a regular builtin, not an alias.
    Therefore it should always bypass aliases just as it bypasses
    functions to expose standard builtin and external commands.
    
    I can only imagine that the reason for this command='command '
    alias was that some standard commands themselves were implemented
    as aliases, and POSIX requires that standard commands are
    accessible with the 'command' prefix. But implementing standard
    commands as aliases is itself inherently broken. It never worked
    for 'command times', as shown; and in any case, removing all
    aliases with 'unalias -a' should not get rid of standard commands.
    
    Similarly, the default alias nohup='nohup ' is also harmful.
    
    Anyone who really wants to keep this behaviour can just define
    these aliases themselves in their script or ~/.kshrc file.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove default alias command='command '.
    - Remove default alias nohup='nohup '.
    
    src/cmd/ksh93/sh.1
    - Remove the above default aliases from the list.
    - Mention that the 'command' builtin does not search for aliases.
    
    (cherry picked from commit 5cfe7c4e2015b7445da24983af5008035c4b6e1e)

commit 65d363fd3416f9edb7ec494d47733a026ccacf49
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 6 21:25:59 2020 +0200

    POSIX compliance fix: make 'times' a proper builtin
    
    As of this commit, the 'times' command is a POSIX-compliant special
    builtin command instead of an alias that doesn't produce the
    required output. It displays the accumulated user and system CPU
    times, one line with the times used by the shell and another with
    those used by all of the shell's child processes.
    https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_27
    
    This was originally written by Kurtis Rader and is now backported
    and tweaked from the abandoned ksh2020 branch. I chose an earlier
    and simpler version[*1] that uses times(3), with a precision of
    hundredths of seconds, so it outputs the same precision as mksh and
    zsh. Rader later wrote another version[*2] that uses getrusage(2),
    giving it the same millisecond precision as bash. But that required
    adding a feature test and a fallback to the old version, which is
    non-trivial in the old INIT/iffe system. This simpler version is
    enough to gain POSIX compliance and I think it will do very nicely
    in this stable bugfix branch.
    
    [*1] https://github.com/att/ast/pull/1332
    [*2] https://github.com/att/ast/commit/038045f6
    
    src/cmd/ksh93/bltins/misc.c
    - Add b_times() function for 'times' builtin.
    - Note we include <times.h>, not <sys/times.h>, so that we use the
      AST feature-tested version with fallback on systems that need it.
    
    src/cmd/ksh93/data/aliases.c:
    - Remove times='{ { time;} 2>&1;}' builtin alias.
    
    src/cmd/ksh93/data/builtins.c,
    src/cmd/ksh93/include/builtins.h:
    - Add entry for 'times' special builtin.
    - Add --help/--man info for same.
    
    src/cmd/ksh93/sh.1:
    - Update manual page.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add a couple of simple regression tests.
    
    (cherry picked from commit ebf71e619eb298ec1cf6b81d1828fa7cdf6e9203)

commit 3a3776f1df1f58340c44162a6cff56b9eac9d8bc
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 6 16:45:37 2020 +0200

    INIT/cc.darwin: re-suppress redefined macro warnings (re: a1d8ff6f)
    
    Allowing redefined macro warnings was not such a good idea, as the
    Apple compiler flags redefine the _ast_int8_t macro right on the
    command line, producing a warning for every cc invocation.
    
    (cherry picked from commit 929930224f898cb1371471fe554fabb73b31d11f)

commit 778b3da79a01eec25dfdc69279aa2a7c253d94d3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 6 13:34:54 2020 +0200

    manual page: correct conditions under which shell is interactive
    
    Only standard error needs to be on a terminal for a
    shell to be interactive on init, not all output.
    
    See sh_main() in src/cmd/ksh93/sh/main.c, under
    "/* decide whether shell is interactive */".
    
    Also, tcgetattr is not a syscall, so its manual page is
    tcgetattr(3), not tcgetattr(2).
    
    (cherry picked from commit 97f8bdb08650fd63f8e125257a86f5e6035fbdfa)

commit d8a2b4fa6d69ca9e8ec5bfb53c97448c50d1e731
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 6 13:09:33 2020 +0200

    manual page: fix documentation of default path
    
    It didn't mention that the default path is obtained from the
    operating system where available, and that the default string
    documented is only a fallback (which, btw, should never occur on
    modern systems).
    
    See:
    e_defpath[] in src/cmd/ksh93/data/msg.c
    defpath_init() in src/cmd/ksh93/sh/path.c
    
    src/cmd/ksh93/sh.1:
    - Add a mention that the default path is equal to the output of
      ksh's 'getconf PATH' builtin command, unless that fails.
    
    (cherry picked from commit 12b8dc54626a14171d3671a26041733a32e0e07d)

commit 7a421ba57f3f8ef0b716c586adf952402393f636
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat Jun 6 03:40:18 2020 +0200

    INIT: tweak cc.{darwin,freebsd}; add cc.openbsd
    
    (cherry picked from commit a1d8ff6faca522a29161582952e232afc76fd643)

commit 8e97419b0b44977913506d4a029ddc908394a42b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 5 21:39:47 2020 +0200

    Fix ${.sh.subshell} counter to actually count level of subshells
    
    This counter is documented as follows:
    "The current depth for subshells and command substitution."
    
    But before this commit, the actual behaviour was that the counter
    was reset to zero whenever a subshell forked for any reason: a
    pipe, background job, running 'ulimit', redirecting stdout in a
    command substitution, and more. This behaviour was:
    
    1. Not consistent with the documentation. Non-forked (a.k.a.
       virtual) subshells are an internal implementation detail which
       scripts should not have to be concerned with. The manual page
       doesn't mention them at all.
    
    2. Inherently broken. Since a subshell may fork for any number of
       reasons, even mid-run, and those reasons may change with
       bugfixes and further development, scripts have never actually
       been able to rely on the value of ${.sh.subshell}.
    
    So, this commit fixes the counter to count the levels of all
    subshells, both virtual and forked.
    
    src/cmd/ksh93/sh/xec.c: _sh_fork():
    - Increase ${.sh.subshell} whenever we fork.
    
    src/cmd/ksh93/sh/subshell.c:
    - sh_subfork():
      * Fix comment to properly explain what it does. It doesn't
        "create" a subshell, it forks off an existing virtual subshell.
      * Don't zero ${.sh.subshell}. Instead, since sh_fork() increases
        it but we're forking an existing subshell, undo the increase.
    - sh_subshell():
      * Remove 'int16_t subshell' variable. It was unnecessary and
        mostly unused. It was also the wrong type: it was assigned the
        value from shp->subshell which is of type short.
      * Increase and decrease the level of virtual subshells and
        ${.sh.subshell} independently.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression tests for ${.sh.subshell} in virtual and forked
      subshells of several kinds: comsub, parentheses, pipe, bg job.
    - Undo wrong error test count fix from 04b4aef0.
    
    (cherry picked from commit a0e0e29e7e0dbf21e4b3958ae02bde6665fb2696)

commit 6c68b53170f376450eb7613d6abbd027d104ea15
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 5 20:58:41 2020 +0200

    For consistency & greppability: global replace "sub-shell" => "subshell"
    
    (cherry picked from commit 25eeb9bcdc0a23a66765fd3e5d7e36337da65051)

commit 8b07d2a011f7dfe173e869d12ada4dd51e836cde
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 5 16:03:07 2020 +0200

    Fix various crashes by removing invalid memccpy() use
    
    The sfputr() function (put out a null-terminated string) contained
    a use of memccpy() that was invalid and could cause crashes,
    because the buffer it was copying into could overlap or even be
    identical with the buffer being copied from.
    
    Among (probably) other things, this commit fixes a crash in 'print
    -v' (print a compound variable structure) on macOS, that caused the
    comvar.sh and comvario.sh regression tests to fail spectacularly.
    Now they pass.
    
    Issue discovered and fixed by Kurtis Rader in the abandoned ksh2020
    branch; this commit backports the fix. He wrote:
    
    | #if _lib_memccpy && !__ia64 /* these guys may never get it right */
    |
    | The problem is that assertion is wrong. It implies that the libc
    | implementation of memccpy() on IA64 is broken. Which is
    | incorrect. The problem is the AST sfputr() function is depending
    | on what is explicitly undefined behavior in the face of
    | overlapping source and destination buffers.
    | [...] Using memccpy() simply complicates the code and is unlikely
    | to be measurably, let alone noticeably, faster.
    
    Further discussion/analysis: https://github.com/att/ast/issues/78
    
    src/lib/libast/sfio/sfputr.c:
    - Remove memccpy use. Always use the manual copying loop.
    
    (cherry picked from commit fbe3c83335256cb714a4aa21f555083c9f1d71d8)

commit 6f0e008cf7f9d7a6dc4316ac7dddb8eb4212ecc2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 5 15:31:26 2020 +0200

    Fix unsetting special vars in subshells (re: efa31503, 8b7f8f9b)
    
    This fixes (or at least works around) a bug that caused special
    variables such as PATH, LANG, LC_ALL, LINENO, etc. to lose their
    effect after being unset in a subshell.
    
    For example:
    (unset PATH; PATH=/dev/null; ls); : wrongly ran 'ls'
    (unset LC_ALL; LC_ALL=badlocale); : failed to print a diagnostic
    
    This is yet another problem with non-forking/virtual subshells. If
    you forced the subshell to fork (one way of doing this is using the
    'ulimit' builtin, e.g. ulimit -t unlimited) before unsetting the
    special variable, the problem vanished.
    
    I've tried to localise the problem. I suspect the sh_assignok()
    function, which is called from unall(), is to blame. This function
    is supposed to make a copy of a variable node in the virtual
    subshell's variable tree. Apparently, it fails to copy the
    associated permanent discipline function settings (stored in the
    np->nvfun->disc pointer) that gave these variables their special
    effect, and which survive unset. However, my attempts to fix that
    have been unsuccessful. If anyone can figure out a fix, please send
    a patch/pull request!
    Data point: This bug existed in 93u 2011-02-08, but did not yet
    exist in M-1993-12-28-s+. So it is a regression.
    
    Meanwhile, pending a proper fix, this commit adds a safe
    workaround: it forces a non-forked subshell to fork before
    unsetting such a special variable.
    
    src/cmd/ksh93/bltins/typeset.c: unall():
    - If we're in a non-forked, non-${ ...; } subshell, then before
      unsetting any variable, check for variables with internal
      trap/discipline functions, and call sh_subfork() if any are
      found. To avoid crashing, this must be done before calling
      sh_pushcontext(), so we need to loop through the args separately.
    
    src/cmd/ksh93/tests/variables.sh:
    - Remove the 'ulimit' that forced the fork; we do this in C now.
    
    (cherry picked from commit 21b1a67156582e3cbd36936f4af908bb45211a4b)

commit 04722950bb4ac202d62cd7ecdfe94357b73d8451
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 5 04:01:08 2020 +0200

    tests/variables.sh: fix subshell error count, & another xtrace caught in comsub
    
    (cherry picked from commit 04b4aef0cf14d255ee27305f1458b34a1d3b8b6c)

commit b6b8b522a74d1e505dd2172f313a892ee12d3a87
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 22:49:37 2020 +0200

    regress tests: remove use of unportable direct paths to commands
    
    Many tests used direct paths to some commands, mostly /bin/echo and
    /bin/cat. This is unportable (breaks on e.g. NixOS).
    The correct way is to obtain the direct path using 'whence -p'.
    
    There was also one use of '/usr/bin/pstack' in tests/comvario.sh
    that seemed bogus. Apparently this was supposed to analyse a core
    file after a crash. Even on Solaris and Linux, where that command
    exists, the argument is documented to be a PID, not a core file. If
    this ever worked anywhere, then it was system-specific enough to be
    useless here, so I've removed it.
    
    (cherry picked from commit 4563b8bc651cd9cb18dc73f56a041f7ac5534395)

commit 3552a2bafdc0ec4679c32db2eeafea975d87e814
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 20:53:23 2020 +0200

    Restore building on old Mac OS X (Darwin) with GCC (re: e74e98b8)
    
    In making ksh build on new macOS, it stopped building on old Mac OS
    X (old gcc-based Darwin). There is no real reason for this. We can
    just restore the old cc wrapper script and use it if an old gcc
    compiler is detected.
    
    This is only tested on Mac OS X 10.3 on my old Power Mac G5 so far.
    But at least that allows me to test fixes on that platform. Unusual
    platforms sometimes expose corner case bugs...
    
    bin/package, src/cmd/INIT/package.sh:
    - If /usr/bin/cc is GCC, change 'darwin' host name to 'darwin_old'.
      This removes the long-obsolete 'darwin7' host name.
    
    src/cmd/INIT/cc.darwin_old:
    - Restore the old cc.darwin script for darwin_old hosts.
    
    (cherry picked from commit 93d4c6497ea8e9cc9f4977b75d06a673a2229f80)

commit 794d1c8601fcec2c8da6dbefe9444aa669d4132c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 19:44:59 2020 +0200

    shtests: report signal when a test crashes
    
    When a test aborted due to a signal, the >256 exit code signifying
    the signal was incorrectly reported as the number of errors.
    
    src/cmd/ksh93/tests/shtests:
    - For $? > 256, obtain and report the signal name using 'kill -l'.
    
    (cherry picked from commit a7d8ae628e228fc3cadcf977fbffc87b90c7bc53)

commit 21f281a5fac0b30aaf70579dcce3e7c520264d7d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 19:03:24 2020 +0200

    tests/variables.sh: update virtual subshell failure TODO
    
    Namerefs aren't broken in virtual/non-forked subshells after all
    (phew). It is changing the locale that is somehow broken.
    
    src/cmd/ksh93/tests/variables.sh:
    - Pending further investigation, update the TODO and don't fork the
      subshell until actually needed.
    
    (cherry picked from commit efa3150396b383b6a68b2df45eab9005593b2e42)

commit 759157bdb2384b55c42d26f74d39da183c5f24c9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 18:16:49 2020 +0200

    Fix hang in unsetting functions in subshells (re: dde38782)
    
    This fixes a really stupid bug in my own code for unsetting a
    function in a subshell. The algorithm for walking through the
    subshell tree was broken, resulting in an infinite loop if there
    were multiple levels of subshell.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Correct the subshell function tree walk that deletes functions
      from zombie parent scopes.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add a regression test for setting and unsetting identically named
      functions in multiple levels of subshell.
    
    (cherry picked from commit 972a7999c7f16469138daf3d86dfd6c0db3f4879)

commit 1026006db30f94c788b7de89ab69ddf7fc8b81fb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 05:19:59 2020 +0200

    Fix BUG_KBGPID: $! was not updated under certain conditions
    
    The $! special parameter was not set if a background job
    (somecommand &) or co-process (somecommand |&) was launched as the
    only command within a braces block with an attached redirection,
    for example:
            {
                    somecommand &
            } >&2
    With the bug, $! was unchanged; now it contains the PID of
    somecommand.
    
    Ref.: https://github.com/att/ast/issues/1357
    
    src/cmd/ksh93/sh/parse.c: item():
    - When processing redirections following a compound command, always
      create a parent node with the TSETIO (I/O redirection) token.
         Before this commit, if the last command was of type TFORK (and
      the last command only tested as TFORK if the bg job or coprocess
      was the only command in a braces block, because the ksh parser
      optimises away the braces in that case), then the parent node was
      created with the TFORK token instead.
         I have no idea what David Korn's intention was with that, but
      this is clearly very wrong. Creating another TFORK node when
      parsing the redirection caused sh_exec() in sh/xec.c to execute
      the redirection in an extra forked, non-background subshell.
      Since redirections are executed before anything else, this
      subshell is what then launched the background job between the
      braces, so $! (a.k.a. shp->bckpid) was updated in that subshell
      only, and never in the main shell. The extra subshell also
      prevented the background job from being noticed by job control
      on interactive shells.
         So, the fix is simply to remove the broken test for TFORK.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression tests for a bg job and a co-process as the only
      command within a braces block with attached redirection.
    
    (cherry picked from commit ffe5df30e69f7b596941a98498014d8e838861f2)

commit a9351320edf4541bff5af5e8e8ab5ea7c45afb45
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 4 03:42:15 2020 +0200

    tests/variables.sh: fix problems with tracing ('bin/shtests -x')
    
    src/cmd/ksh93/tests/variables.sh:
    - Unset -x in a command substitution that redirects stderr to
      stdout; this caused a spurious failure with tracing active.
    - Execute the nameref tests in a subshell. They modified LINENO, so
      that all the line numbers after this test were traced and/or
      reported as 'foo'.
      . This exposed a bug in namerefs: this is yet another thing that
        is broken in non-forked/virtual subshells! That is for another
        commit. For now, fork the subshell and leave a TODO.
    
    (cherry picked from commit 8b7f8f9b14523a66bdf337612daef2501c2bb5ba)

commit 80126062cc53d8e643b2377c6681d713b713073c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 3 02:39:43 2020 +0200

    tests/bracket.sh: don't test r/w perms as root; fix typos
    
    src/cmd/ksh93/tests/bracket.sh:
    - -r and -w are always true when running as root, so skip these.
    - Fix several typos in the [[ tests (apparent copy/paste errors).
    
    (cherry picked from commit b9325e9753b38f087d0c5501d474f7d1f15c4d36)

commit e1ef18c8efa3fb955c873d4ee29546bbde14d861
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Jun 3 02:11:17 2020 +0200

    tests/builtin.sh: don't use unportable 'seq' (is not on OpenBSD)
    
    (cherry picked from commit c9f6c148bff1fe82cb575d55467f68f2bef939ff)

commit eee47df42337f88f3affd31c84e7e298599baf34
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 31 15:29:15 2020 +0200

    Fix handling of skipped directories when autoloading functions
    
    Fix a bug in autoloading functions. Directories in the path search
    list which should be skipped (e.g. because they don't exist) did
    not interact correctly with autoloaded functions, so that a
    function to autoload was not always found.
    
    Details:
    https://github.com/att/ast/issues/1454
    
    Fix backported (and cleaned up) from:
    https://github.com/att/ast/commit/3bc58164
    
    src/cmd/ksh93/sh/path.c:
    - path_opentype(): Fix the path search loop so that entries marked
      with PATH_SKIP are handled correctly.
    
    src/cmd/ksh93/tests/functions.sh:
    - Add regression test verifying an autoloaded function with a PATH
      that triggered the bug.
      The bug in path_opentype() fixed by this commit may affect other
      scenarios but we know it affects autoloaded functions. Hence the
      test for that scenario.
    
    (cherry picked from commit a27903165775309f4f032de5d42ec1785f14cfbc)

commit 482d1c3dd6206e1953e295164cecd93f045ea28b
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 30 15:55:30 2020 +0100

    fix 24 more typos found with the help of codespell
    
    (cherry picked from commit a92198bc5f196ec1b4a34dc042ff3a594e316ad7)

commit 7003aba487dd61a098464f746a4d2adcdacf4d08
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 30 15:21:30 2020 +0100

    Fix 'test'/'[' exit status >1 on error in arithmetic expression
    
    Fix BUG_TESTERR1A: POSIX non-compliance of 'test'/'[' exit status
    on error. The command now returns status 2 instead of 1 when given
    an invalid number or arithmetic expression, e.g.: [ 123 -eq 123x ]
    
    The problem was that the test builtin (b_test()) calls the generic
    arithmetic evaluation subsystem (sh/arith.c, sh/streval.c) which
    has no awareness of the test builtin. A simple solution would be to
    always make the arithmetic subsystem use an exit status > 1 for
    arithmetic errors, but globally changing this may cause backwards
    compatibility issues. So it's best to change the behaviour of the
    'test' builtin only. This requires the arithmetic subsystem to be
    aware of whether it was called from the 'test' builtin or not. To
    that end, this commit adds a global flag and overrides the
    ERROR_exit macro where needed.
    
    src/cmd/ksh93/include/defs.h,
    src/cmd/ksh93/sh/defs.c:
    - Declare and initialise a global sh_in_test_builtin flag.
    - Declare internal function for ERROR_exit override in test.c.
    
    src/cmd/ksh93/bltins/test.c:
    - Add override for ERROR_exit macro using a function that checks if
      the exit status is at least 2 if the error occurred while running
      the test builtin.
    - b_test(): Set sh_in_test_builtin flag while running test builtin.
    
    src/cmd/ksh93/sh/arith.c,
    src/cmd/ksh93/sh/streval.c:
    - Override ERROR_exit macro using function from test.c.
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add regression test verifying status > 1 on arith error in test.
    
    (cherry picked from commit 5eeae5eb9fd5ed961a5096764ad11ab870a223a9)

commit e902633abe4b0da5de15d296d89e57cc360b66d3
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 29 16:45:55 2020 +0100

    bin/shtests: fix SHELL=/path/to/ksh assignment argument
    
    Passing a SHELL=/path/to/ksh assignment-argument after the
    bin/shtest command (as documented in 'shtest --man') made the
    wrapper script produce inconsistent results: it would launch and
    claim to test the default shell, but src/cmd/ksh93/tests/shtests
    would actually test the shell indicated in the argument.
    
    bin/shtests:
    - Scan arguments for a SHELL= (or KSH=) assignment-argument,
      setting $KSH (and then exporting $SHELL) based on that if found.
    
    (cherry picked from commit 1e78fbbd094dfc84989ecadf06231c6515fb7412)

commit ec888867fd77ba83bb6241957cd0ba0cbb65d61d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 29 08:27:53 2020 +0100

    Fix unsetting aliases in subshells
    
    Aliases can now be correctly unset within subshell environments
    (such as ( ... ), $(command substitutions), etc), as well as
    non-subshell "shared" command substitutions (${ ...; }). Before,
    attempts to unset aliases within these were silently ignored.
    
    Prior discussion: https://github.com/att/ast/issues/108
    
    Subshell alias trees are only referenced in a few places in the
    code, *and* have always been broken, so this commit gets rid of the
    whole notion of a subshell alias tree. Instead, there is now just
    one flat alias tree, and subshells fork into a separate process
    when aliases are set or unset within them. It is not really
    conceivable that this could be a performance-sensitive operation,
    or even a common one, so this is a clean fix with no downside.
    
    src/cmd/ksh93/include/defs.h:
    - Remove sh_subaliastree() definition.
    
    src/cmd/ksh93/sh/subshell.c:
    - Remove salias element (pointer to subshell alias tree) from
      subshell struct.
    - Remove sh_subaliastree() function.
    - sh_subshell(): Remove alias subshell tree cleanup.
    
    src/cmd/ksh93/bltins/typeset.c:
    - b_alias(): If in subshell, fork before setting alias.
    - b_unalias(): If in subshell, fork before unsetting alias.
    - unall(): Remove sh_subaliastree() call.
    
    src/cmd/ksh93/sh/name.c:
    - nv_open(): Remove sh_subaliastree() call.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add regression tests for unsetting or redefining aliases within
      subshells.
    
    (cherry picked from commit 12a15605b9521a2564a6e657905705a060e89095)

commit 047cb3303c7ea80a9cfde74c517b0496093abb65
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri May 29 08:27:20 2020 +0100

    Fix redefining & unsetting functions in subshells (BUG_FNSUBSH)
    
    Functions can now be correctly redefined and unset in subshell
    environments (such as ( ... ), $(command substitutions), etc).
    Before this fix, attempts to do this were silently ignored (!!!),
    causing the wrong code (i.e.: the function by the same name from
    the parent shell environment) to be executed.
    
    Redefining and unsetting functions within "shared" command
    substitutions of the form '${ ...; }' is also fixed.
    
    Prior discussion: https://github.com/att/ast/issues/73
    
    src/cmd/ksh93/sh/parse.c:
    - A fix from George Koelher (URL above). He writes:
      | The parser can set t->comnamp to the wrong function.
      | Suppose that the shell has executed
      |     foo() { echo WRONG; }
      | and is now parsing
      |     (foo() { echo ok; } && foo)
      | The parser was setting t->comnamp to the wrong foo. [This
      | fix] doesn't set t->comnamp unless it was a builtin. Now the
      | subshell can't call t->comnamp, so it looks for foo and finds
      | the ok foo in the subshell's function tree.
    
    src/cmd/ksh93/bltins/typeset.c:
    - Unsetting functions in a virtual/non-forked subshell still
      doesn't work: nv_open() fails to find the function. To work
      around this problem, make 'unset -f' fork the subshell into its
      own process with sh_subfork().
    - The workaround exposed another bug: if we unset a function in a
      subshell tree that overrode a function by the same name in the
      main shell, then nv_delete() exposes the function from the main
      shell scope. Since 'unset -f' now always forks a subshell, the
      fix is to simply walk though troot's parent views and delete any
      such zombie functions as well. (Without this, the 4 'more fun'
      tests in tests/subshell.sh fail.)
    
    src/cmd/ksh93/sh/subshell.c: sh_subfuntree():
    - Fix function (re)definitions and unsetting in "shared" command
      substitutions of the form '${ commandlist; }' (i.e.: if
      sp->shp->subshare is true). Though internally this is a weird
      form of virtual subshell, the manual page says it does not
      execute in a subshell (meaning, all changes must survive it), so
      a subshell function tree must not be created for these.
    
    src/cmd/ksh93/tests/subshell.sh:
    - Add regression tests related to these bugfixes. Test unsetting
      and redefining a function in all three forms of virtual subshell.
    
    (cherry picked from commit dde387825ab1bbd9f2eafc5dc38d5fd0bf9c3652)

commit 6e90d4d76c0eae52dae64664e73397a42579741f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 24 23:39:02 2020 +0100

    tests/path.sh: if root, skip tests involving unreadable scripts
    
    These always fail when running as root, as root can access files
    regardless of permission bits.
    
    (cherry picked from commit a821fe13906ac8ef56162bebd7c3e976b973f91c)

commit 62f8e744f1113215e0388e7ed175fb59784a6dc8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 21 22:27:54 2020 +0100

    tests/variables.sh: minor fix in failure error msg
    
    (cherry picked from commit bdcbcf42415aaf120a4e3a98fd4af1f8b810018f)

commit 593a5a8b7f272c2488c8a800820ae990942946e7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 21 14:27:51 2020 +0200

    Patch vulnerability CVE-2019-14868
    
    Certain environment variables were interpreted as arithmetic
    expressions on startup, leading to code injection.
    
    Ref.:
    https://bugzilla.redhat.com/show_bug.cgi?id=1757324
    https://github.com/att/ast/commit/c7de8b641266bac7c77942239ac659edfee9ecd2
    
    (cherry picked from commit ee6b001d0611ad2e00b6da2c2b42051995c0a678)

commit c1dae413d265f288866ac62ddda940e8678c31ee
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 21 01:16:48 2020 +0200

    shtests: don't require specifying .sh extension for test script
    
    It was annoying me that I always had to type out the .sh in
    'shtests builtins.sh', etc. to execute a specific regression test
    script. All the test scripts end in .sh, so this is superflous.
    
    src/cmd/ksh93/tests/shtests:
    - Add .sh to test script arguments if not already present.
    
    (cherry picked from commit d780e701fbf6f27b6e79f88542a3175bf5dd85e9)

commit e999f6b169f06554dcaa7bfc2ce6c6087d4f7eba
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 20 23:42:00 2020 +0200

    Fix truncating of files with <>;file combined with <#pattern
    
    The issue with truncating files was caused by out-of-sync streams.
    Details and discussion: https://github.com/att/ast/issues/61
    
    src/cmd/ksh93/sh/io.c: sh_iorestore():
    - To be safe, sync all streams before restoring file descriptors.
    
    src/cmd/ksh93/tests/io.sh:
    - Add two regression tests for truncating files with this
      combination of redirections.
    - The second test, which invokes a -c script, is disabled for now
      as this triggers another corner case bug involving the SH_NOFORK
      optimisaton for -c scripts. That fix is for another commit.
    
    (cherry picked from commit 18fb64840365c2ff4608188e5487bd79d08f67d1)

commit a638e724d09ae19254ff09b6dcfde5b1ca3be59c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 20 18:56:49 2020 +0200

    INIT/cc.darwin: revert inadvertent change in SHOPT_SPAWN
    
    (cherry picked from commit def69c3315d1d357b3e067a186913991ea2abdf3)

commit 60516872deecc1f4c439c06c56adda84b38a46b7
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 20 16:56:43 2020 +0100

    tests/io.sh: Update after BUG_PUTIOERR and BUG_REDIRIO fixes
    
    src/cmd/ksh93/tests/io.sh:
    - After BUG_REDIRIO was fixed in 29afc16c, '<>' now defaults to
      '0<>' instead of '1<>', as POSIX specifies. Update '<>' to '1<>'.
    - After BUG_PUTIOERR was fixed in 9011fa93, one 'print' command
      with pipe buffering disabled (piped into 'read -n3') printed an
      expected I/O error to standard error. Redirect this to /dev/null.
    
    (cherry picked from commit d4b6510fdf155a3d75a98860a09c0ebedb6c93d2)

commit 952944197f2744affc3e9abab66f467e2ca5f4e6
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 20 15:50:43 2020 +0100

    Fix bugs in testing if a parameter is set
    
    This fixes three related bugs:
    1. Expansions like ${var+set} remained static when used within a
       'for', 'while' or 'until' loop; the expansions din't change
       along with the state of the variable, so they could not be used
       to check whether a variable is set within a loop if the state of
       that variable changed in the course of the loop. (BUG_ISSETLOOP)
    2. ${IFS+s} always yielded 's', and [[ -v IFS ]] always yielded
       true, even if IFS is unset. (BUG_IFSISSET)
    3. IFS was incorrectly exempt from '-u' ('-o nounset') checks.
    
    src/cmd/ksh93/sh/macro.c: varsub():
    - When getting a node pointer (np) to the parameter to test,
      special-case IFS by checking if it has a value and not setting
      the pointer if not. The node to IFS always exists, even after
      'unset -v IFS', so before this fix it always followed the code
      path for a parameter that is set. This fixes BUG_IFSISSET for
      ${IFS+s} and also fixes set -u (-o nounset) with IFS.
    - Before using the 'nv_isnull' macro to check if a regular variable
      is set, call nv_optimize() if needed. This fixes BUG_ISSETLOOP.
      Idea from Kurtis Rader: https://github.com/att/ast/issues/1090
      Of course this only works if SHOPT_OPTIMIZE==1 (the default),
      but if not, then this bug is not triggered in the first place.
    - Add some comments for future reference.
    
    src/cmd/ksh93/bltins/test.c: test_unop():
    - Fix BUG_IFSISSET for [[ -v IFS ]]. The nv_optimize() method
      doesn't seem to have any effect here, so the only way that I can
      figure out is to special-case IFS, nv_getval()'ing it to check if
      IFS has a value in the current scope.
    
    src/cmd/ksh93/tests/variables.sh:
    - Add regression tests for checking if a varariable is set within a
      loop, within and outside a function with that variable made local
      (to check if the scope is honoured). Repeat these tests for a
      regular variable and for IFS, for ${foo+set} and [[ -v foo ]].
    
    (cherry picked from commit a2cf79cb98fa3e47eca85d9049d1d831636c9b16)

commit 2887378ae385d510195c31e4b0421674362be240
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 20 15:49:10 2020 +0100

    INIT/cc.darwin: suppress another annoying compiler warning
    
    src/cmd/INIT/cc.darwin:
    - Since the flags added from Apple's ksh-27.tar.gz Makefile
      explicitly redefine a macro, let's disable the warning on
      redefined macros.
    
    (cherry picked from commit 4b21a0abce8406e82d3afa4a68ef6bb56d98c797)

commit c9ccee86bb9e322b12ff663980bb1fbf2ab7c43c
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 19 15:49:56 2020 +0100

    Fix 'command -p' by fixing initialisation of default PATH variable
    
    'command -p' was broken for non-interactive shells as the variable
    used to store the default system PATH, std_path, was not
    initialised correctly. For instance:
            $ ksh -c 'command -p ls'
            ksh: ls: not found
    This fix by Siteshwar Vashisht is backported from ksh2020.
    Ref.:
    https://github.com/att/ast/issues/426
    https://github.com/att/ast/pull/448
    
    src/cmd/ksh93/sh/path.c:
    - Correctly initialise std_path (the default PATH) when ksh is
      started as a non-interactive shell.
    
    src/cmd/ksh93/sh.1:
    - Fix vague explanation of 'command -p'.
    
    src/cmd/ksh93/tests/path.sh:
    - Add regression test.
    
    (cherry picked from commit a76439d60b70c18cf44d84c1962fcd8df84c947c)

commit f35e7ecd1de7276e463bb8eb25f577da27b35ab0
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 17 13:24:37 2020 +0100

    INIT/cc.darwin: default to -Os (small code) like Apple does
    
    (cherry picked from commit 2210ff9026ca3f05dc88988c72f56eea195753cc)

commit 9f6dd1ea73f61aeb06f18b5b03a668273dcbf507
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 17 10:51:27 2020 +0100

    ksh93/sh.1: say that ${.sh.subshell} only counts virtual subshells
    
    ${.sh.subshell} only counts the nesting level of virtual (non-forked)
    subshell environments relative to the current process, whether that
    is the main shell environment or a real (forked) subshell.
    
    This means ${.sh.subshell} is not sufficient to test if your code
    is running in a subshell environment, so it's important to mention
    this in the manual.
    
    E.g.:
        (echo ${.sh.subshell}; ulimit -t 1; echo ${.sh.subshell}); :
    outputs 1 followed by 0.
    
    (cherry picked from commit 63dad8863fd26bf3aa4d7a1cf60b743f4169f7c4)

commit d10eab988af9082513f595cacf11a2df6eb095d9
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun May 17 10:11:06 2020 +0100

    Regression test suite: bugfix: accurately report number of errors
    
    The number of errors in each tests/*.sh test set is reported using
    its exit code (up to 125). The main test script saves this code in
    $e to report the number of errors. But if a set had errors, $e was
    then erroneously overwritten before reporting the number of errors,
    so it was always 1.
    
    src/cmd/ksh93/tests/shtests:
    - Don't overwrite $e with the exit code of ((e == 0)).
    
    (cherry picked from commit b9ab95488b23167316f5b21f338368c9490ebc50)

commit 75fc493e7d0f6d1d917faeb3f94abc770894ca25
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 16 21:48:33 2020 +0100

    sh/suid_exec.c: fix 2 confusing typos in comments
    
    (cherry picked from commit 6cccaedd91e4309b542b8a17c8318f3bff9511b0)

commit 412cd96dc1c7d4a8748ffde98533f21be0caacf8
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 16 20:59:39 2020 +0100

    fix 5 more typos: incorrect "than"
    
    (cherry picked from commit 7e2e4651d2dd5884dd3ea06fc8df4dc45ec9bfb5)

commit cafe33f048680e9b63e28ed0013c812c13b22863
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 16 20:06:49 2020 +0100

    Fix 'test -t 1' in $(command substitutions)
    
    Standard output (FD 1) tested as being on a terminal within a
    command substitution, which makes no sense as the command
    substitution is supposed to be catching standard output.
        ksh -c 'v=$(echo begincomsub
                    [ -t 1 ] && echo oops
                    echo endcomsub)
                echo "$v"'
    This should not output "oops".
    
    This is one of the many bugs with ksh93 virtual (non-forked)
    subshells. On the abandoned Vashist/Rader ksh2020 branch, this bug
    was fixed by changing quite a lot of code, which introduced and/or
    exposed another bug:
            https://github.com/att/ast/issues/1079
            https://github.com/att/ast/commit/8e1e405e
            https://github.com/att/ast/issues/1088
    That issue was unresolved when the ksh2020 branch was abandoned.
    
    The safer and more conservative fix is simply forcing the subshell
    to fork if we're in a non-forked command substitution and testing
    '-t 1'. It is hard to imagine a situation where this would cause a
    noticable performance hit.
    
    Note that this fix does not affect ksh93-specific "shared"
    non-subshell ${ command substitutions; } which are executed in the
    main shell environment, so that variables survive, etcetera.
    'test -t 1' continues to wrongly return true there, but command
    substitutions of that form cannot be forked because that would
    defeat their purpose.
    
    src/cmd/ksh93/bltins/test.c:
    - Fix 'test -t 1', '[ -t 1 ]' and '[[ -t 1 ]]' by forking the
      current subshell if it is a virtual/non-forked subshell
      (shp->subshell), and a command substitution (shp->comsub), but
      NOT a "shared" ${ command substitution; } (!shp->subshare).
    
    src/cmd/ksh93/tests/bracket.sh:
    - Add two regression tests for this issue, which were adapted from
      the Vashist/Rader ksh2020 branch.
    
    NEWS, src/cmd/ksh93/include/version.h:
    - Update.
    
    (cherry picked from commit b8ef05e457ead65b83417699b8dd8632f855e2fa)

commit b87a7cabc5b482973b7fa014ef099dd32e105214
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 18:33:47 2020 +0100

    tests/locale.sh: fix test that depended on 'od' whitespace output
    
    Different implementations of the 'od' command may legitimately vary
    the whitespace they output between fields. One of the regression
    tests checked 'od' output without tolerating whitespace varieties,
    which is not portable. For example, the BSD 'od' implementation
    outputs more whitespace than the variant used to write the test.
    
    src/cmd/ksh93/tests/locale.sh:
    - In test "incorrect string from printf %q", use 'awk' to eliminate
      whitespace from 'od' output before checking results.
    
    (cherry picked from commit 7aa830bd3a2284f7228ee7189f5671749c3f2682)

commit 49c7a52edd5cab5a2f08e3eecb1f23a9cb44f23d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 18:25:20 2020 +0100

    tests/locale.sh: fix UTF-8 test to use builtin command
    
    This test used an unportable invocation of an external 'join'
    command. The options used were Solaris-specific. Not all OSs
    support UTF-8 in their external utilities so using an external
    utility is not appropriate.
    
    src/cmd/ksh93/tests/locale.sh:
    - Rewrite the 'join test script' to use ksh builtin 'cut' instead.
      This should suffice to check whether the locale is correctly set,
      which is the point of this test.
    
    (cherry picked from commit fb16f33ff1e9d33d5fccc5cf9633d508eb6eecc7)

commit 11226f9edd5daa5474831c4307ff62fafa75a044
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 18:11:17 2020 +0100

    tests/locale.sh: remove unportable test with external 'wc' command
    
    The -C flag to 'wc' is not portable; '-m' is the portable variant.
    However, this whole test is not appropriate here, as it tests the
    external 'wc' utility and not ksh's builtin version -- so any test
    failure represents a bug in the OS and not in ksh.
    
    src/cmd/ksh93/tests/locale.sh:
    - Remove test that counts two € (euro) character using the OS's
      external 'wc' utility. Keep the test that uses builtin 'wc'.
    
    (cherry picked from commit e1b25e0ace85ee6e62734fb236900fe069dccb6e)

commit 2318de328a198733441962c9107642f5d86dd6a2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 17:55:47 2020 +0100

    Regression test suite: get rid of unportable 'mktemp -dt'
    
    The regression test suite used 'mktemp -dt' to create temporary
    directories, but that is not portable, e.g. it does not work on
    macOS, FreebSD or NetBSD. Installing a compatible 'mktemp' in
    another location in $PATH did not work either, as the regression
    test suite resets $PATH.
    
    src/cmd/ksh93/tests/*:
    - Replace many uses of 'mktemp -dt' by a portable and reasonably
      safe way to create a temporary directory.
    
    (cherry picked from commit 71f4c43703e3eff034009b4c8f4110bd32f4e209)

commit 2e7602da2a78f0f25eee305fa6a0159621ec4fd1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 17:41:26 2020 +0100

    Add bin/shtests, convenient wrapper for regression tests
    
    This new wrapper script sets up the correct environment for running
    the ksh93 regression test suite. It allows running the tests
    without AST nmake, which is not maintained in this repository.
    An alternative ksh to test may be passed in the $KSH env var.
    
    bin/shtests:
    - Added. Sets up environment before passing control to
      'src/cmd/ksh93/tests/shtest'. Passes on any options given.
    
    NEWS:
    - Updated.
    
    (cherry picked from commit 14ced94ed83991687c645a09bd2e45a5c2ffe8dc)

commit 93e15a303585df3ecf8184818f2d5ff569ff2ba1
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sat May 16 16:04:35 2020 +0200

    Fix BUG_PUTIOERR: Check for and report I/O error in output builtins
    
    This allows scripts to check for a nonzero exit status on the
    'print', 'printf' and 'echo' builtins and prevent possible infinite
    loops if SIGPIPE is ignored.
    
    sfsync() was already returning a negative value on I/O error, so
    all we need to do is add a check. The stream buffer will need to be
    filled before an I/O error can be detected, but this is the same on
    other shells. See manual page: src/lib/libast/man/sfio.3
    
    Ref.: https://github.com/att/ast/issues/1093
          https://github.com/att/ast/pull/1363
    
    src/cmd/ksh93/bltins/print.c: b_print():
    - Make sure an error result from sfsync() is reflected in the
      output builtin's exit status (exitval).
    - Write an I/O error message (e_io) if the exit status is nonzero.
    
    src/cmd/ksh93/data/msg.c, src/cmd/ksh93/include/io.h:
    - Add the e_io[] error message.
    
    src/cmd/ksh93/tests/builtins.sh:
    - Add I/O error regression test, checking for the correct error
      message and exit status. All three output builtins use the same
      b_print() function so we only need to test one.
    
    src/cmd/ksh93/tests/basic.sh,
    src/cmd/ksh93/tests/coprocess.sh:
    - Redirect stderr on a few 'print' commands to /dev/null; these
      now issue an expected I/O error. This does not cause failures.
    
    NEWS, TODO:
    - Update.
    
    (cherry picked from commit 9011fa933552e483dab460f7dd1593d64e059d94)

commit 846ad932726ec5261464fa19615e1b1f4a27e6cb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu May 14 11:36:16 2020 +0100

    Fix 'print -s -f'
    
    This fix is backported from the Vashisht/Rader ksh2020 branch.
    
    src/cmd/ksh93/bltins/print.c:
    - Fix syncing history when print -s -f is used. For example, the
      following now correctly adds a 'cd' command to the history:
            print -s -f 'cd -- %q\n' "$PWD"
      Ref.: https://github.com/att/ast/issues/425
            https://github.com/att/ast/pull/442
    
    src/cmd/ksh93/include/version.h:
    - Version date bump.
    
    (cherry picked from commit 46ba7ecdc5c14cd73f6cb24b16c50bdc331a000e)

commit e856094ca28a54bc02ab8860d02d6214f7043550
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 13 17:02:38 2020 +0100

    Fix build scripts so ksh compiles on recent macOS (Mac OS X)
    
    This updates the cc.darwin* compiler compatibility wrapper scripts
    and patches bin/package to identify a 64-bit system, allowing ksh
    to build using a simple 'bin/package make' command on at least on
    macOS Mojave (10.14.6). Testing on other macOS versions is invited.
    
    src/cmd/INIT/cc.darwin:
    - Remove obsolete compatibility cruft
    - Update compiler flags:
      * remove obsolete/unneeded -DCLK_TCK=100 (this is already defined
        in the system header i386/limits.h included by time.h)
      * add necessary flags from Apple's Makefile in ksh-27.tar.gz:
        -DSHOPT_SPAWN=0 -D_ast_int8_t=int64_t -D_lib_memccpy
        source: https://opensource.apple.com/tarballs/ksh/
      * add -Wno-unused-value and -Wno-parentheses to suppress excessive
        clang warnings that object to David Korn's coding style.
    - Update linker flags:
      * remove obsolete -Wl,-m
      * add flag from Apple's Makefile: -Wl,-search_paths_first
    
    src/cmd/INIT/cc.darwin.i386,
    src/cmd/INIT/cc.darwin.i386-64:
    - Removed as superfluous (was identical to generic cc.darwin).
    
    bin/package,
    src/cmd/INIT/package.sh:
    - Fix the recognition of a 64-bit system from the output of a 'file
      /bin/sh' command (what an ugly hack... never mind), so that the
      architecture is correctly identified as darwin.i386-64.
    
    (cherry picked from commit e74e98b886a2bc5760166c124412474293f85fd8)

commit 38df54982f148e40ca9cd2cb779df0fe0acf4b81
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 13 15:16:24 2020 +0100

    TODO: add items about broken default aliases
    
    (cherry picked from commit a607aca927b8ffc3ef9210e7f0028cd2eae75c20)

commit eeee77edd1fbffd350f626504208c6e5b2ec8fa2
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 13 15:00:33 2020 +0100

    Fix BUG_REDIRIO
    
    ksh used to redirect standard output by default when no file
    descriptor was specified with the rarely used '<>' reading/writing
    redirection operator. It now redirects standard input by default,
    as POSIX specifies and as all other POSIX shells do. To redirect
    standard output for reading and writing, you now need '1<>'.
    
    Ref.: https://github.com/att/ast/issues/75
          http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_07_07
    
    (cherry picked from commit 29afc16c47824fc79ed092ae7704c525b1db6a0a)

commit 915b2b2e19deaa89e23b2437c2c21f2e15938b9d
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 13 14:19:20 2020 +0100

    Bump version, rename branch: 93u+ => 93u+m
    
    Let's call this series of ksh93 the '93u+m' branch, for 'minor'
    conservative bug fixes from 'modernish'. :)
    
    src/cmd/ksh93/include/version.h:
    - Rename release ID: 93u+ => 93u+m
    - Update release date (2020-05-13)
    
    (cherry picked from commit ea1c7ff8da597ff9057235a53e84c3c4cc944ee4)

commit 3edd751063d1b5a592940b4c184c8565cab667eb
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed May 13 14:17:37 2020 +0100

    Add TODO, documenting currently known shell bugs
    
    (cherry picked from commit b55a910d31df40ce8809833bb913d350cf234a6e)

commit 6a4972069fd9c338e53c6cae48be9d732e37dab4
Author: Martijn Dekker <martijn@inlv.org>
Date:   Thu Jun 11 17:14:31 2020 +0200

    Fix BUG_CASELIT: pattern matching as literal string in 'case'
    
    This fixes an undocumented 'case' pattern matching misbehaviour
    (labelled BUG_CASELIT in modernish) that goes back to the original
    Bourne shell, but wasn't discovered until 2018.
    
    If a pattern doesn't match as a pattern, it's tried again as a
    literal string. This breaks common validation use cases, such as:
    
    n='[0-9]'
    case $n in
    ( [0-9] )  echo "$n is a number" ;;
    esac
    
    would output "[0-9] is a number" as the literal string fallback
    matches the pattern. As this misbehaviour was never documented
    anywhere (not for Bourne, ksh88, or ksh93), and it was never
    replicated in other shells (not even in ksh88 clones pdksh and
    mksh), it is unlikely any scripts rely on it.
    
    Of course, a literal string fallback, should it be needed, is
    trivial to implement correctly without this breakage:
    
    case $n in
    ( [0-9] | "[0-9]")  echo "$n is a number or the number pattern" ;;
    esac
    
    src/cmd/ksh93/sh/xec.c:
    - Remove trim_eq() function responsible for implementing the
      misbehaviour described above.
    
    NEWS:
    - Added. Document this bugfix.
    
    Ref.:
    - The problem: thread starting at
      https://www.mail-archive.com/austin-group-l@opengroup.org/msg02127.html
    - The solution, thanks to George Koehler: comments/commits in
      https://github.com/att/ast/issues/476
    - Modernish BUG_CASELIT bug test & documentation:
      https://github.com/modernish/modernish/commit/b2024ae3
    
    (cherry picked from commit 8d6c8ce69884767a160c1e20049e77bdd849c248
    with some extra edits to NEWS to upate the info for this reboot)

commit c1c7a1bcaf325d35a047a2d132ac7fa595d28145
Author: Martijn Dekker <martijn@inlv.org>
Date:   Tue May 12 23:05:51 2020 +0100

    Correct typo in man page
    
    Description: Correcting typo in man page
    Bug-Debian: https://bugs.debian.org/755486
    Forwarded: no
    Author: Nicholas Bamber <nicholas@peiapt.co.uk>
    Last-Update: 2015-11-01
    (cherry picked from commit 1f4e043f395760a19dc3690b9027551a8c2c66a1)

commit 39a14c1000747e8388bd036a7d8661d122dd4c3e
Author: Martijn Dekker <martijn@inlv.org>
Date:   Sun Mar 1 16:52:45 2020 +0100

    Fix 80 typos in comments
    
    (cherry picked from commit 7dca902a85dc02e5df66f0f45a00d1575e7a0220)

commit 53443bb981a92a53079947fa8a234cdc528790be
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 26 22:49:11 2020 +0100

    Fix 47 typos in user-facing help and error messages
    
    (cherry picked from commit df9b2ea03efdf82c0eb6bb53ed9b128c1513a299)

commit 9c75314c713746859a77aed8c8cbe07a6aae0193
Author: Martijn Dekker <martijn@inlv.org>
Date:   Wed Feb 26 22:20:02 2020 +0100

    Fix 181 typos in user-facing documentation
    
    (cherry picked from commit fe365afb433bb39d4f3a6b68b3fd8e8daf5370c8)

commit 2940b3f5367c127e48f10e23a47b38e8d0b8007f
Author: Martijn Dekker <martijn@inlv.org>
Date:   Fri Jun 12 01:43:13 2020 +0200

    Rebooting 93u+m
    
    This commit reboots ksh 93u+m development with a new fork based off
    the archived official AT&T ast repo, master branch.
    
    README:
    - Removed. Having two READMEs is a botch.
    
    README.md:
    - Imported and edited from the archived fork,
      https://github.com/modernish/ksh -- the newer instructions will
      become applicable as I cherry-pick all the changes from there :)
        - Copy-edits.
        - Added policy and rationale for this 93u+m fork.
        - Incorporated info from old README that is still relevant.
    
    .gitignore:
    - Added.
    
    bin/execrate:
    - Removed. This one keeps changing its license header, causing git
      to show an uncommitted file. It's always re-copied anyway, and
      not for direct invocation, so, exclude and add to .gitignore.
      The source file is: src/cmd/INIT/execrate.sh
    
    src/cmd/*,
    src/lib/*:
    - Remove historical baggage: everything except ksh93 and
      dependencies. This is the same stuff the ksh-community fork
      removed. I wouldn't mind keeping it, but some of this stuff
      causes build failures on macOS (and probably other systems), and
      I need to get on with fixing ksh93.
         Hopefully, we can figure out how to re-add stuff we can use
      later -- particularly the pty command (pseudo-terminal utility
      for scripting interactive sessions) which is needed for
      regression-testing the interactive shell.

commit cc1f2bf81d03c55fd3f9b07854290e180658037b
Merge: 27e72175 2cf1ffd0
Author: Lefteris Koutsofios <lkoutsofios@users.noreply.github.com>
Date:   Mon Feb 24 13:05:57 2020 -0500

    Merge pull request #1473 from lkoutsofios/master
    
    patches to build on freebsd 12

commit 2cf1ffd0f27488e5aa6fc0374a5238dc494ad83b
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Mon Feb 24 12:58:22 2020 -0500

    patches to build on freebsd 12
    - added cc and ar scripts for freebsd12.amd64
    - fix for sfio macro SF_FLAGS also being defined for sendfile(2) in socket.h
    -- fix is to hide the sendfile(2) macro
    - defined _STDFILE_DECLARED to handle FILE macro incompatibility
    - added test in std/features/procfs to deal with freebsd kvm interface
    -- being different from what AST expects (for ps.c)
    - fix for std/banner.c to clean up main() definition
    - changed comment in ar.* scripts to match cc.* scripts

commit 27e72175bde58da31c02b90e4ca179bf84310521
Merge: 82a89f64 a30e7b7f
Author: Lefteris Koutsofios <lkoutsofios@users.noreply.github.com>
Date:   Fri Feb 14 13:08:33 2020 -0500

    Merge pull request #1471 from lkoutsofios/master
    
    added documentation pages from Dave Korn's old web site

commit a30e7b7fa985119df1d118555908e957339213bd
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Fri Feb 14 12:56:21 2020 -0500

    added documentation pages from Dave Korn's old web site

commit 82a89f64a9baba42a0a409c82a1a9faeb24f023e
Author: Lefteris Koutsofios <lkoutsofios@users.noreply.github.com>
Date:   Wed Feb 12 14:03:19 2020 -0500

    Create LICENSE.md
    
    added LICENSE file

commit 31ffc2c1e45717d765b53d7786a596340c8e3505
Merge: 0be82553 8ef0ddbc
Author: Lefteris Koutsofios <lkoutsofios@users.noreply.github.com>
Date:   Wed Feb 12 13:38:21 2020 -0500

    Merge pull request #1469 from lkoutsofios/master
    
    Several fixes to enable AST/KSH to build on several systems

commit 8ef0ddbcd83a5b6bbf616f02d8923ee2ca6c8754
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Wed Feb 12 13:13:41 2020 -0500

    - took the 3d tool out of the build list but kept the code in place
      3d has become too hard to build
      consider using ndfs which has some of the functionality of 3d

commit 4878ac329e1891d68ce2ff8f89bc1ef5382daa12
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Wed Feb 12 13:12:45 2020 -0500

    added missed 'cc' and 'ar' scripts

commit e8b3274a65d422966c65ec72404090cb0929ba9a
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Wed Feb 12 13:09:47 2020 -0500

    C code bug fixes
    
    - fix to buildin.c to prevent compiler from optimizing it out
    - fix to realpath.c to handle case where 'path' is NULL
    
    - fix to emacs.c (I think from dgk)
    
    - fix to file.c (I think from gsf)
    - fix to tail.c (I think from gsf)
    
    - fix to code setting the malloc init hook (for vmalloc)
    
    - changed memcpy to memmove in several places in sfio because src and dst
      might overlap
    
    - fixes to macros like FILE_defined to fix header file issues
    - fixes to expr.h to handle macro definition issue

commit 0b36868c8cf264af7c74f63af27e83839d55e5f4
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Wed Feb 12 12:46:56 2020 -0500

    - added code to install an 'ar' script which appends the U flag to the first
      argument. the semantics for ar were changed to zero out the timestamp of
      each module. nmake relies on the timestamp to tell if the module has changed
    
    - added modified 'cc' scripts for linux to add the -P flag. modern gcc's put
      # lines that confuse nmake
    
    - changed make.probe script to drop -nostartfiles for gcc >= 7.0

commit 0be82553e98be77238577bc0eaafda0f1cf807fe
Author: Gordon Woodhull <gordon@woodhull.com>
Date:   Sat Feb 8 13:39:38 2020 -0500

    document that repo only contains ksh93u+ and v- for #1466

commit 683bccf3bab8545b6334ab7b7c179e08f5eb89fa
Author: Siteshwar Vashisht <svashisht@redhat.com>
Date:   Thu Feb 1 04:13:41 2018 +0100

    Skip adding -nostartfiles flag during compilation
    
    Due to a recent change in gcc, compilation breaks on Fedora rawhide. This
    should be fixed by skipping -nostartfiles flag.
    
    Resolves: rhbz#1540796
    Related: rhbz#1540642

commit 51670c76015b268c3ff28c5838dc838e17beac22
Author: Siteshwar Vashisht <svashisht@redhat.com>
Date:   Tue Aug 1 14:27:50 2017 +0200

    Fix build failures caused by update in glibc
    
    Resolves: rhbz#1477082

commit e79c29295092fe2b2282d134e2b7cce32ec9dcac
Author: Siteshwar Vashisht <svashisht@redhat.com>
Date:   Mon May 15 20:56:58 2017 +0200

    iffe depends on cc -E not inserting newlines between tokens
    
    Thanks to Andreas Schwab <schwab@suse.de> for the patch

commit 3f54fd611f536639ec30dd53c48e5ec1897cc7d9
Author: Lefteris Koutsofios <ek@research.att.com>
Date:   Mon Jan 11 15:54:23 2016 -0500

    Version: 2012-08-01-master
    
    RELEASE notes for src/cmd/3d/RELEASE
    
    12-06-25 change strcpy() within buffer to strcopy()
    12-06-22 sys.tab,utimensat3d.c: add utimensat()
    12-05-25 sys.tab: handle missing getdents64 on linux+gcc-4.4
    12-05-25 syscall3d.c: tweak _exit() logic (really?) to dumped core on recent solaris
    11-12-01 fix fcntl 3rd arg int vs void*
    10-06-01 sync with ast api 20100601
    10-04-10 mkdir3d.c: fix mkdir() intermediate dir logic
    10-01-19 3d.h: increase some path buffer sizes -- these need to be dynamic!
    09-05-15 dll_3d.h: handle dllopen => dlopen
    08-12-04 fs.c: change open(/dev/fd/NN,...) try open(2) first, then dup(2)
    08-06-20 ast_3d.h,ast.c: add libast/misc/setenviron.c
    07-03-26 Makefile: drop -L* from IFFEREFS -- handled by .IFFE.REF.
    07-03-21 lib_3d.h,error.c: handle error_info => *_error_data_
    06-12-04 3d.h: strmode() bsd conflict tweak
    06-11-23 finally get linux to pass regression tests
    06-11-21 fchdir3d: let chdir do the work if fd matches cached path
    06-09-28 3d.sh: used getconf LIBPATH|LIBPREFIX|LIBSUFFIX -- how novel
    06-09-26 3d.h,dir3d.c,dll3d.c: fix strtou*l*l maps for __int64 vs. long long
    06-09-18 strmatch.c,touch.c: add private obsolete api copies
    06-08-27 mkdir3d.c: foloow mkdir -p mode rules for missing intermediates
    05-02-01 3d.sh: IFS may be unset and { ash bsh } don't on startup -- wow
    05-01-01 sys.tab,utimets3d.c: add utimets() intercept
    04-12-15 pathreal.c: "..." should fail if no lower view -- doh
    04-10-01 features/syslib: _exit test now uses SIGKILL (openbsd abort() hangs)
    04-07-26 3d.sh: update runtime docs
             3d.1: drop in deference to the 3d.sh runtime docs
    04-07-20 3d.h: undef _BLD_DEBUG to avoid raw libast symbols
    04-07-19 fs.c,lib.c,open3d.c,vcs_3d.h: { O_RDONLY O_WRONLY O_RDWR } are values
    04-07-19 dir3d.c: rewinddir643d() must call seekdir643d() (not seekdir64())
    04-07-01 3d.tst: TMP => TWD to match regress(1)
    04-06-16 3d.tst: coordinate $TMP with regress(1)
    04-06-14 lib.c: fix fs3d() 2d return value
    04-06-11 3d.tst: fix test and error counts
    04-05-04 open3d.c: create missing lower level dirs for O_CREAT ... file paths
    03-08-15 mount3d.c: change 3d intercept test to handle NiL || ""
    03-06-11 ast.c: add _map_malloc checks for _ast_malloc => malloc
    03-06-05 pathreal.c: fix ancient multiple relative|.. symlink bug
    03-06-04 3d.sh: change `shift $OPTIND-1' to `set x "@"; shift $OPTIND'
    03-03-28 dir3d.c,rmdir3d.c,syscall3d.c: add D_FILENO and D_TYPE ifdefs
    03-03-25 dup3d.c: fix bug that cleared Dir_t pointer just after allocation
    03-03-07 ftruncate3d.c,lseek3d.c,truncate3d.c: check _typ_off64_t
    02-10-18 features/syscall.sh: handle pseudo files in cc -E line syncs
    02-07-17 syscall3d.c: clean up user level intercept code
    02-06-25 open3d.c: fix bug that created 0 mode file with only O_RDWR
    02-06-14 ast_3d.h,cs.c: move fmttime() macro override to cs.c
    02-06-06 dir3d.c: fix rewinddir() bug that did not decrement intercepted count
    02-04-01 Makefile,cs.c,cs_3d.h,ast_3d.h: _WIN32 tweaks
    01-11-26 pathreal.c: empty path is an error
    01-11-16 ftruncate3d.c,truncate3d.c: use lseek3d indirection via sysfunc()
    01-10-31 fchdir3d: add along with state.file[].dir to cache open dir paths
             dir3d.c: add recursive call intercepts
             error.c: add recursive call intercepts
             pathreal.c: add buffer size check
             features/syscall.sh: add bsd syscall __RENAME() checks
             syscall3d.c: check _lib_syscall before using it!
    01-10-30 features/syscall.sh,syscall3d.c: handle -ldl calls back into 3d
    01-09-20 3d.sh: drop extra } in USAGE that emitted -} for --?
    01-07-17 Makefile: don't link 3d dll against ast dll
    01-02-19 close3d: dup reserved fd's higher
    01-02-14 add :VARIANT: to build dll's for CC.DLL.VARIANTS
    01-01-01 dir_3d.h: real readdir must be struct dirent, not dirent64
    00-12-14 3d.sh: fix -c
    00-10-31 ast.c add pathtemp.c
    00-10-19 init.c: initialize _3d_2d
    00-07-17 fix fchown to call MSG_fchown (not MSG_fchown); fixes vim dump!
    00-02-14 3d command long options (finally)
    99-01-01 --- release 4.0 ---
    99-04-01 dll: sfsprintf => _3d_sfsprintf
             check for __*_nc (osf.alpha)
    99-02-14 pathreal: copy to state.path.name if not already there
             rewinddir3d: just call seekdir(p,0); fixes `top' core dump
    99-01-11 lseek3d,syscall3d: add sysfunc() for off_t!=long
    99-01-01 --- release 3.0 ---
    98-02-14 3d.sh: fix _RLD32_LIST => _RLDN32_LIST typo
             pathreal: fix (P_LSTAT|P_READLINK) under pwd bug that did phys on .
             features/syscall.sh: tighten up version __call header grep
             unlink: trap remove() too
             features/syscall.sh: favor strong (_ prefix) name for some arch's
    98-02-06 syscall3d: handle longjmp with cp->active
    98-01-23 features/syscall.sh: check for _xstat vs __xstat
    98-01-01 add readdir64 rewinddir64 seekdir64 telldir64
    97-10-11 fix lefty's virtual dir touch bug -- recursive doubling on stbuf
    97-07-17 CS_INTERFACE=2
    97-04-01 features/syscall.sh: fix __exit() test for new sgi
    96-12-25 handle stat64() implementations on top of _xstat()
             3d.tst must be run under 3d!
             _SCO_STAT_VER tweaks
             sgi _RLD_NEXT_PATHNAME fix for -32 -n32 -64 differentiation
             _*xstat() hacks around proto in *stat3d.c
             add constant casts for long shift counts
             fix pathnext() to report version instance level in state.path.level
    96-11-28 fix rename() to do physical stat on subject path!
    96-02-29 handle syscall loops caused by botched libs like solaris libsocket.so
             generalize name service interface to handle ifs+vcs
             catch acl,facl even if not on local sys
             fix features/syscall.sh bug that set $stdc incorrectly
             use alloca() in execve() if possible
             add 3d.tst and test makefile action
             fix a few important virtual dir / create / append bugs
             fix null dereference in open3d() for state.in_2d
    96-02-14 add NFS acl,facl
    96-02-08 fix 2d bug in link,rename,symlink that generated empty arg 1
    96-01-30 fix features/syscall.sh for compilers that ignore prototypes
    96-01-22 P_TOP only takes effect for files in virtual dir!
    95-11-24 optimize exec $shell to eval in 3d.sh
    95-11-11 don't fs3d_copy opaqued files
    95-10-11 fs3d_mkdir virtual dir fix
             fix 2d virtual dir test in pathreal()
             solaris _rename() != weak rename()
             solaris exit() doesn't call _exit()
             all static data in state
             test state.in_2d in link3d()
             fix opaque.sh that was broken sometime after 91
             linux LD_BIND_NOW not needed with ld.so-1.7.9
    95-07-17 handle irix-5.3 struct stat64 and off64_t
             dlsym(__exit) before dlsym(_exit)
    95-05-09 fix pathcanon() bug that incremented state.path.level too far on ...
             percolate inode metadata changes to the top level too (no more EROFS)
             add P_TOP to truncate() too!
             feature/syscall.sh does not generate #include, up to *3d.c
             spawnveg.c must come after spawnve.c in ast.c
             cspoll.c must come after cs*.c in cs.c
             fix 3d to work like $SHELL if no shared 3d lib found
             fix chdir .. symlink bug that set state.pwd to physical path
             add %n.n.nd to bvprintf
             ignore a few more non-initialization setcwd() errors
    95-01-19 fix undefined var ref for _VER_ hack calls in features/syscall.sh
    95-01-11 access W_OK succeeds if on lower view
    94-12-01 add /#fs/NAME/load to load shared lib fs
             add user system call trap() stack
             VPATH=*::* or VPATH=*:-:* to separate disjoint views
             change trap() to intercept()
    94-07-17 add /#fs/safe
    94-06-01 fix symlink() and link() bug that didn't instantiate virtual dir
             fix [f]statvfs() infinite loop for att hybrids
    94-05-11 merge with the real vcs
             add char*_3d_2d: if _3d_2d!=0&&getenv(_3d_2d)==0 then 2d
             trailing slash in pathreal() interpreted as slash dot (off/w test=010)
    93-05-28 add /#option/limit=n to limit view depth
    93-04-01 --- release 2.0 ---
    93-03-11 change /dev/3d/* to /#*
             remove anno and rpl specific hooks
             add name,monitor,active fs mounts
    92-04-01 --- release 1.1 ---
    92-02-11 change retained mounts to /dev/3d/dev
    92-01-11 add $SHELL and /bin/sh exec() checks to force 3d sh
             fix checklink() to concatenate relative links with original prefix
    91-11-11 --- release 1.0 ---
             add feature/syscall.sh to handle att s5r4, hp snake, sun 4.1
             change umask() 3d state toggle to mount(-,/dev/3d/option/{2d,3d})
             fix creat() virtual dir bug for umteenth time
             link() and rename() now migrate to top instead of EROFS
    
    RELEASE notes for src/cmd/INIT/RELEASE
    
    12-07-17 iffe.sh: add C code NOTE("...") to ammend --verbose output
    12-06-26 iffe.sh: fix "npt foo" to handle function-like macro foo()
    12-06-20 package.sh: use $KSH for rt in "results test"
    12-06-15 Makefile: add PLUGIN_LIB to $INSTALLROOT/bin/.paths and BUILTIN_LIB => PLUGIN_LIB
    12-06-15 package.sh: add PLUGIN_LIB to $INSTALLROOT/bin/.paths and BUILTIN_LIB => PLUGIN_LIB
    12-06-13 package.sh: handle admin.db column output
    12-06-08 iffe.sh: fix 12-06-06 typo
    12-06-06 iffe.sh: check for -l* in reverse and accumulative order (e.g., for -last & -lm)
    12-06-04 package.sh: always check $INSTALLROOT/lib/package/profile
    12-05-31 Makefile: ID=ast; $(INSTALLROOT)/prototyped.h => $(INSTALLROOT)/$(ID)/prototyped.h
    12-05-28 iffe.sh: api foo YYYYMMDD => FOOAPI(rel) test macro
    12-05-24 package.sh: change admin.db comment => owner attributes
    12-04-25 ratz.c: add sear -k option to keep installation tmp dir on exit
    12-04-17 package.sh: skip sh version logic for ``use''
    12-04-17 cc.ibm.risc*: _LARGEFILE64_SOURCE => _LARGE_FILE_API moved to libast/features
    12-04-09 cc.ibm.risc*: speak aixese for _LARGEFILE64_SOURCE
    12-02-29 cc.darwin.i386*: handle default cc vs kernel bittedness
    12-02-29 C+probe: add __TIMESTAMP__ to the nopredefined list
    12-02-29 package.sh: don't assume grep -q or /usr/local/lib in LD_LIBRARY_PATH
    12-02-29 package.sh: fix ksh vs -lcmd compatibility checks
    12-02-23 iffe.sh: checkcc() before checkread() for sensible diagnostics
    12-02-14 package.mk: { --clobber --compare --link=lib*.a* } for --mam=static
    12-02-14 package.mk: export LICENSEFILEDEFAULT instead of LICENSEFILE
    12-02-14 package.sh: handle @(cc|ld).${HOSTTYPE}* intercepts
    12-02-07 package.sh: add { clean clobber } actions
    12-02-02 regress.sh: fix ulimit -c defaults for --nokeep
    12-01-18 regress.sh: add INPUT|OUTPUT|ERROR -e 'filter' to filter before comparison
    12-01-21 package.sh: fix `admin make' bug that created unused $INSTALLROOT/lib
    12-01-21 Makefile: :PACKAGE: license=ast -- oops
    12-01-20 cc.darwin,cc.mvs.390: tmp=/tmp/cc.${USER:-$LOGNAME}.$$.err
    12-01-12 package.sh: add admin make share closure to handle alternate HOSTTYPEs
    11-12-13 iffe.sh: add /*<NOSTDIO>*/ test code comment to disable default #include <stdio.h>
    11-11-11 C+probe: test for .so before .sl
    11-10-26 package.sh: don't forget about *.pkg for admin update
    11-10-18 cc.*-icc: update and add more
    11-10-11 package.sh: handle package make|view when no source installed
    11-09-11 package.sh: count admin '*** termination code' errors
    11-08-31 mamake.c: add -e, ignore use recursive prereq timestamps
    11-08-29 iffe.sh: add ``set stdio try1.h - try2.h ...''
    11-08-29 iffe.sh: trap EXIT => trap 0 for ancient sh
    11-08-11 iffe.sh: handle ancient sort that doesn't have -k
    11-06-01 make.probe: add more /lib64 logic
    11-05-01 package.sh: fix admin ditto to sync LICENSES too
    11-03-25 package.sh: initialize { $SED $TR } before first use!
    11-03-21 package.sh: fix vpath probes
    11-03-17 iffe.sh: fix cleanup to rm $tmp* instead of $tmp*.*
    11-02-24 package.sh: change curl usage to "curl -L ..."
    11-02-11 package.sh,C+probe,make.probe,mamprobe.sh: add ###.*archiac.*###
    11-02-02 Makefile: add :MAPLIB: check for ancient -lw
    11-02-02 make.probe: handle -print-multi-directory => 64 => /usr/lib64 /lib64
    11-02-02 package.sh: HOSTTYPE=*,*cc*[,-*,...] sets CC [ and CCFLAGS ]
    11-02-02 make.probe: handle gcc $ORIGIN link but exec failure -- gee thanks
    11-01-25 cc.hp.ia64: bundled cc is a pile of shaving cream
    11-01-07 iffe.sh: check debug==3 for is_hdr() failure
    10-11-22 ditto.sh: fix timing problem between |& and exec &p
    10-11-10 package.sh: fix cc cross compile check to use checkcc absolute path
    10-10-10 package.sh: list main env vars at start of make action
    10-10-10 ratz.c: tweak widnows delays
    10-09-10 ratz.c: add _SEAR_ARGS for _SEAR_EXEC
    10-09-01 package.sh: fix ratz from source logic
    10-08-25 package.mk: consolidate license file search in .package.licenses.
    10-08-22 ratz.c: run sear bootstrap command detached
    10-08-20 C+probe: version_stamp only if version_flags works
    10-08-17 package.sh: unset makerules *DIR variables in env
    10-08-15 package.sh: "make" action now lists some env values
    10-08-11 mktest.sh: add "DO command ..."
    10-07-27 rt.sh: handle "rt X=Y ..."
    10-06-29 ratz.c: non-option sear args passed to sear_exec()
    10-06-25 iffe.sh: "api" op changed to not do "map-libc" type mappings
    10-06-25 package.sh: "force admin ditto" => no ditto --update option
    10-06-22 C+probe: handle cc that require .[ci] input for version info
    10-06-21 ditto.sh: change default remote access to ssh (about time)
    10-06-12 regress.sh: DISGNOSTICS [ 1 | 0 | pattern ] and fix EXIT for all
    10-06-09 package.sh: add AT&T to usable nmake check
    10-06-06 iffe.sh,iffe.tst: add { api ver } ops
    10-04-22 package.sh: update "html binary|source" NAME/PASSWORD info
    10-04-15 iffe.sh: don't forget candidate headers for hdr|sys!
    10-04-11 WWW.mk: disable man page metarule -- now done by admin-man(1)
    10-02-14 package.sh: $CC verification needs $INSTALLROOT/bin in PATH
    10-02-11 package.sh: fix package admin make report error count
    10-02-02 package.sh: fix write binary bug that did scp on local fs
    10-02-02 package.mk: up to date binary targets must still be in PACKAGE.*.lst
    10-01-01 package.sh: fix premature $INSTALLROOT/bin during cross compile check
    10-01-01 make.probe: handle ['"] in CC.VERSION.STRING
    09-12-04 iffe.sh: add "opt name" to check for name in $PACKAGE_OPTIONS
    09-11-30 mktest.sh: change RESET to STATE.RESET to make it global
    09-11-14 make.probe: use gcc { -print-multi-directory -print-search-dirs }
    09-11-11 package.sh: re-order and combine cc checks
    09-10-27 C+probe,make.probe,probe.win32: add CC.SUFFIX.DEBUG
    09-10-21 iffe.sh,Makefile: test -e is not in ksh88!
    09-10-06 iffe.sh: handle cc -E #error with 0 exit status (sgi)
    09-10-06 package.sh: stub in ar intercept checks -- not used yet
    09-10-06 ar.ibm.risc: add ar intercept because some aix require -Xfoo first!!
    09-09-24 regress.sh: fix UMASK logic to create test support files before umask
    09-08-28 release.c: change docs to mention stdin if no file operands
    09-08-24 package.sh: fix isascii() bug that failed on od(1) trailing space
    09-08-20 make.probe: add CC.SHARED.NAME
    09-08-20 regress.sh: add { JOB CONTINUE EXITED KILL FIFO }
    09-08-11 package.sh: filter lines containing : for package results
    09-07-31 make.probe: add CC.AR.ARFLAGS (for aix ar -xany)
    09-07-31 package.sh,cc.*: fix -dumpmachine to handle 32/64/* bit options
    09-06-24 package.sh: fix admin.db output formatting
    09-05-05 package.sh: export dll hackery environment vars
    09-05-05 package.sh: handle non-identifier hostnames
    09-05-05 mamake.c: pass undefined ${...} identifiers to the shell
    09-05-05 mamake.rt: add macro expansion regression tests
    09-05-01 iffe.sh: fix output initialization *again*
    09-04-28 package.sh: handle admin.db contact field $9
    09-04-15 iffe.sh: add implicit "ini" op to initialize io for subsequent ops
    09-03-31 regress.sh: EXPORT before test => global ENVIRON[]
    09-03-26 package.sh: test fail pattern is 'fail[es]'
    09-03-26 UNIT - ... appends (options) to command line
    09-03-19 TEST.mk: x.tst => x only if x is command target
    09-03-15 regress.sh: add ${MAIN} for base name of main unit
    09-03-10 TEST.mk: add .SOURCE:tests if tests is a dir
    09-03-03 regress.sh: allow command line unit to override UNIT
    09-03-03 mktest.sh: handle IO == $'\n'
    09-02-02 package.sh: delay $INSTALLROOT/bin/.paths generation until mamprobe runs
    09-01-30 cc.mvs.390: c89 balks at [ ()] in -Dname="..."!
    09-01-27 package.sh: add isascii() to use ratz instead of tar
    09-01-20 hurl.sh: add --size=bytes option
    09-01-08 TEST.mk: add test.* prereqs, multiple arg lists with :T=*: binding
    09-01-03 regress.sh: fix UNIT to allow command line override
    09-01-03 mktest.sh: handle TWD
    08-12-24 package.sh: fix cross-compile HOSTTYPE logic
    08-12-15 package.sh,hurl.sh: handle http codes { 301 302 303 }
    08-10-16 make.probe '-fno-stack-protector -fno-stack-protector-all' to cop out!!
    08-09-30 rt.sh: fix ksh93 regression test signal count
    08-09-26 regress.sh: ignore SIGPIPE for SET pipe-input
    08-09-24 package.sh: package only test foo => make --recurse=only recurse tests foo
    08-09-20 make.probe: handle another /usr/bin/file shared lib description
    08-09-20 regress.sh: add --pipefail for SET pipe-input ...
    08-09-17 Makefile: add gdbm1.c for <gdbm-ndbm.h>
    08-09-10 make.probe: add CC.NOPROTECT
    08-08-08 mktest.sh: add --width=width
    08-08-05 dbm.req: favor sleepycat ndbm compatibility
    08-08-04 C+probe: fix stdlib initialization logic
    08-06-24 package.sh: fix $INSTALLROOT/bin/cc intercept time stamp file typo
    08-06-20 TEST.mk: make the localyunit before *.rt => *.tst -- doh
    08-06-20 mktest.sh: prepend $PWD onto PATH for local units -- doh^2
    08-06-11 regress.sh: fix bug that skipped the last test
    08-05-20 regress.sh: add --local to put *.tmp dir in local fs
    08-05-05 regress.sh: add IF command ... ELIF command ... ELSE ... FI
    08-05-01 package.sh: package test => ulimit -c 0
    08-04-28 regress.sh: fix EXPORT quoting
    08-04-28 regress.sh: fix UNIT set check args too
    08-04-24 rt.sh: exit code > 256 => signal termination
    08-04-10 C+probe: change probe_so order to check .so last (macos ld workaround)
    08-04-01 package.sh: handle multiple admin HOSTTYPEs per HOST
    08-03-28 C+probe: add C++ #include <iostream> (no extension) dir probes
    08-03-17 regress.sh: fix trap on EXIT, add terminated note to final tally
    08-02-28 make.probe: fix probe_warn to include ld!
    08-02-02 make.probe: add CC.RUNPATH to match default -L order
    08-01-31 package.sh: check lib64 for LD_LIBRARY_PATH
    08-01-31 iffe.sh: tweak ancient /bin/sh workarounds
    08-01-28 make.probe: darwin ld export dynamic is -force_flat_namespace
    08-01-28 C+probe: handle sgi cc error message but exit 0 botch(es)
    08-01-23 package.sh: fix checksum doc typo
    08-01-09 C+probe: add __FUNCTION__ to the undef (don't check) list
    07-12-14 iffe.sh: add set nooptimize
    07-12-03 package.sh: add LC_ALL=C
    07-11-27 package.sh: fix overaggressive *.md5 cleanup
    07-11-20 iffe.sh: treat exit status >= 250 as normal error with no signal
    07-11-05 package.sh: fix write op error count pattern
    07-11-05 package.mk: fix $(~req) .ver binding
    07-08-11 probe.win32: add cl.exe setuid workaround, CC.VERSION[.STRING]
    07-08-01 package.sh: handle 'package read lcl|tgz'
    07-05-08 regress.sh: execute basename instead of absolute path for short $0
    07-04-27 cc.sgi.mips[34]: for #error to exit non-zero -- a no brainer
    07-04-20 mktest.sh: defer to systems without 'grep -q' -- sigh
    07-04-11 mamprobe.sh: handle $(CC.*) => ${mam_cc_*}, $(...) => ${...}
    07-04-11 make.probe: fix CC.PICBIG probe, default { CC.PIC CC.DLL } to BIG
    07-04-04 iffe.sh: prepend ${tst}${ext} to each .c probe
    07-03-28 package.sh: fix binary tgz architecture type duplication
    07-03-28 package.mk: add binary write PACKAGE.$HOSTTYPE.lst
    07-03-28 iffe.sh: add -F header to mac test
    07-03-23 make.probe: handle file(1) that returns 'archive' for .so
    07-03-22 mamprobe.sh: fix STDED probe for implementations that ignore EOF
    07-03-11 package.sh: add nocopyright and tst => nocopyright
    07-03-11 package.mk: add copyright=0
    07-03-08 C+probe: restore IFS after probe.ini
    07-02-26 mamake.c: expand first of ${mam_lib*} for ${AR}
    07-01-05 package.sh: fix "admin write binary" logic
    07-01-01 iffe.sh: add "cmd" --verbose trace
    07-01-01 iffe.sh: sort => LC_ALL=C sort
    07-01-01 C+probe: LC_ALL=C
    06-12-22 make.probe: lean on gcc -v for stdlib, but preserve /usr/local!
    06-11-23 package.sh: *.md5 are not tarballs -- doh
    06-11-23 iffe.sh: add -F, --features=feature-test-header
    06-11-11 make.probe: favor lib64 over lib for hosttype==*64
    06-10-31 make.probe: add "-ignore-source-dir -iquote" test
    06-10-31 iffe.sh: add status{...} code block
    06-10-11 regress.sh: fix DO to handle {...} (time for regress.tst?)
    06-10-11 package.sh: handle already gunzip'd *.tgz
    06-10-06 iffe.sh: add reference for header content tests
    06-09-27 regress.sh: fix UMASK to do DO too (duh)
    06-09-22 iffe.sh: drop -O for npt tests (for msvc intrinsics)
    06-09-14 cc.darwin: drop -O until gcc 4.* gets its act together
    06-09-11 package.sh: { cc ld ldd } intercepts check ${HOSTTYPE%.*} too
    06-09-08 regress.sh: add PIPE INPUT|OUTPUT for pipe io
    06-09-05 C+probe: add { probe_version version_stamp version_string }
    06-09-05 make.probe: add version stamp comment, CC.VERSION[.STRING]
    06-08-27 regress.sh,mktest.sh: add UMASK
    06-08-25 regress.sh: add -b,--ignore-space,IGNORESPACE
    06-08-25 mktest.sh: add IGNORESPACE
    06-08-24 mktest.sh: handle \000 in data
    06-08-24 regress.sh: handle -f* for INPUT|OUTPUT|ERROR
    06-08-16 package.sh: fix 'install flat' logic
    06-08-11 rt.sh: handle style=shell %K date format
    06-07-17 ratz.c: fix __MVS__ FAR definition
    06-07-17 iffe.sh: "header x.h" -- deprecate "include x.h" for .SCAN.iffe
    06-07-17 package.sh: differentiate urls vs. assignments
    06-06-27 rt.sh: add --failed, --heading
    06-06-27 C+probe,TEST.mk,make.probe,mktest.sh,regress.sh: 'ulimit -c 0'
    06-06-26 cc.darwin.ppc: handle -lcc_dynamic disappearance
    06-06-25 mktest.sh: implement PROG
    06-06-11 Makefile: add -ldbm :MAPLIB:, provide public MAPLIB.mk
    06-05-06 package.sh: add PACKAGE_admin_tail_timeout
    06-05-22 ratz.c: upgrade to zlib-1.2.3
    06-05-09 package.sh: fix admin.db docs
    06-03-11 package.sh: fix `package use - command ...'
    06-03-05 make.probe: work around pedantic bash 3.1 mismatched " in `.`
    06-02-14 package.sh: "results failed test" == "results test failed"
             cc.sgi.*: add _AST_cc_OPTIONS parameterization, -OPT:Olimit=0
             cc.linux.ia64-icc: add for intel cc
    06-02-02 package.sh: freebsd stuck with os version for all arch
    06-02-01 package.mk: fix locale logic (tw -d requires dir arg)
    06-01-31 package.sh: require $CC only for make|test
    06-01-30 package.sh,hurl.sh: use the backwards-compatible --http-passwd
             package.sh: add more pdksh => /bin/sh checks
    06-01-26 package.sh: wget --http-pass => --http-password
             package.sh: fix wget error logic
             hurl.sh: wget --http-pass => --http-password
    06-01-11 package.mk: pass package.license.class to make --mam too
             package.mk: variants=pattern => --variants=pattern
             package.sh: darwin rel<=7 => darwin7.ppc
             package.sh: freebsd rel<=4 => freebsd4
             package.sh: freebsd rel<=5 => freebsd5
    05-12-07 iffe.sh: don't emit <stdio.h> if <sfio.h>|<ast.h> (XXX)
    05-12-05 make.probe: disable readonly.exe core dump via ulimit -c 0
    05-09-22 mktest.sh: add EXEC [ ++NOOUTPUT ++NOERROR ++NOEXIT ]
    05-09-21 mktest.sh: fix --style=shell compare to ignore \r
    05-09-12 TEST.mk: all --force to force %.rt regeneration
    05-09-05 TEST.mk: regenerate from %.rt only if newer, :SAVE: %.tst
    05-08-25 mktest.sh: add
             TEST.mk: add %.rt=>%.tst for mktest
    05-08-18 package.sh: 'package host cpu' now checks $NPROC first
    05-07-17 iffe.sh: add { define extern include print } ops
             iffe.sh: accept output{...}end output on success only -- doh
    05-07-01 package.sh: add TARPROBE for tar B flag probe
    05-06-24 package.sh: fix binary read chmod via *.sum
    05-06-06 package.sh: fix KEEP_HOSTTYPE logic to handle synthesized types
    05-06-01 make.probe: verify that cc_pic works for hosted cc
             cc.lynxos.ppc: make -mshared the default
             package.sh: note $INSTALLROOT/bin/@(cc|ld|ldd) installation
    05-05-25 make.probe: add CC.INCLUDE.LOCAL instead of -I- in CC.DIALECT
    05-05-24 iffe.sh: really fix grouping logic -- with tests this time
             package.sh: pipe/socket configuration mismatches => use /bin/sh
    05-04-28 TEST.mk: add $(TESTS)
    05-04-19 package.sh: package results test uses rt if possible
             iffe.sh: fix 'op var - ... - ...' grouping logic
    05-04-15 rt.sh: handle autom4ate style
    05-04-11 regress.sh: fix unit name when command line unit also specified
             rt.sh: handle all ast package test output formats
             package.sh: fix make docs for options passed to underlying make
    05-04-08 package.sh: cp -p makerules.mo to $OK to preserve mtime
             regress.sh: add "TITLE name" to change TEST output title
    05-04-01 rt.sh: add pretty make test + regress.sh wrapper
    05-03-29 package.sh: test -e path => test -f path -o -d path
    05-03-24 make.probe: fix CC.PICBIG probe to prefer -fPIC over -fpic -- doh
    05-03-19 mamake.c: command line name=var also defines name.FORCE=var
    05-03-11 regress.sh: unset LC_ALL when LC_* EXPORT'd
             package.sh: old make.out saved in circular make.out.[1-9]
             mamake.c: sync with nmake :W=O:
    05-03-01 package.sh: fix flat hierarchy initialization
             package.sh: admin action now properly resets sibling remote logs
             package.mk: relax unknown/unwritten package messages to warnings
             package.sh: handle space in command line name=value
             make.probe: add mvs -Wc,dll,exportall,longname,rent to CC.DLL probe
    05-02-24 package.sh: hosttype *.powerpc => *.ppc
             cc.lynxos.ppc,ldd.lynxos.ppc: add
    05-02-22 mamake.c: fix { -G --debug-symbols -S --strip-symbols } MAMAKEFLAGS bug
    05-02-20 probe.win32: handle /platformsdk mount
    05-02-19 package.sh,package.mk: add write tst for tgz in tst subdir
    05-02-18 package.sh: accept cc -dumpmachine with 0 or 1 -
    05-02-14 package.sh: handle mutiple architectures per host in admin.db
             Makefile,package.sh: honor $INSTALLROOT/bin/.paths overrides
             package.sh: normalize trailing [-_]bits in host type
             iffe.sh: some ksh-compatible shells don't do *(pattern)
    05-02-11 iffe.sh: back out 05-01-11 child process stdin hijack
             cc.lynxos.i386: -dynamic instead of -static default
    05-02-10 package.sh: cyg usr/doc => usr/share/doc
    05-02-08 package.sh: drop -m with pax -- delta bug fixed 2005-02-08
             iffe.sh: work around old bash 0<... redirection bug
    05-02-06 package.mk: source.tgz: update generated files only when they change
    05-02-02 *.sh,*probe: IFS may be unset and { ash bsh } don't on startup -- wow
    05-01-11 package.sh: update setup docs to include authorize+password
             package.mk: fix .source.cyg final directory edit
             package.mk: notice=1 for conspicuous empty NOTICE file
             WWW.mk: fix *-index.html installation
             filter.sh: retain input file suffix in tmp copy
             mamexec.c: fix non-contiguous "exec" bug that skipped lines
             iffe.sh: fix candidate lib test to try grouping subsequent libs
             iffe.sh: fix child process stdin hijack that skipped input lines
             iffe.sh: --shell=osh to force read -r compatibility command
             iffe.sh: chop iffe input leading space before # for KnR compatibility
    05-01-05 package.sh: add ${TAR} ${TARFLAGS} and tar B flag for pipes
             mamake.c: fix makefile scan to ignore lib*.[hH]
             iffe.sh: immunize function/symbol tests from aggressive -O
    04-12-28 WWW.mk: add :WWWPAGE: faq.*.mm index generator
    04-12-21 ratz.c: make sure tmp dir is writable -- doh
    04-12-08 iffe.sh: fix dat test for aggressive -O
    04-12-01 iffe.sh: add `include file' to pull in #define's for `exp'
    04-11-11 package.sh: default MAKESKIP is "*[-.]*"
    04-10-22 ratz.c: change docs to note zlib license
             mamake.c: handle --debug-symbols and --strip-symbols
             package.sh: make (debug|strip)=1 => --(debug|strip)-symbols
             package.mk: add :LICENSE: => package.license.class
             mamake.c: fix recursive order logic
    04-10-18 package.mk: add :LICENSE:, :OMIT: to omit package subdirs
    04-10-11 package.sh: add 'authorize name' and 'password password'
    04-10-01 iffe.sh: double check $static link with ! $static
             Makefile: add BUILTIN_LIB to $INSTALLROOT/bin/.paths
             make.probe: add CC.DIALECT EXPORT={ALL,REF,EXT,DLL}
             package.sh: add BUILTIN_LIB to $INSTALLROOT/bin/.paths
    04-09-21 package.mk: $(init)$(name) is now an implicit prereq
    04-09-09 package.sh: copy makerules.mo to $INSTALLROOT/bin/ok
    04-09-01 package.mk,package.sh: rename *.txt => *.README
             package.mk: add the runtime package type (no *.[ah])
             iffe.sh: fix key test reports
    04-08-26 Makefile: { add m2.c m3.c } -lm tests for { frexp[l] ldexp[l] }
    04-08-11 package.mk: handle HOSTTYPE for solaris > 9
             package.sh: add `checkaout proto' for { make view }
             package.sh: check for { md5sum md5 }
             iffe.sh: add {if|elif|else|endif} test ...
             iffe.sh: add 'exp - expression' and '( expression )'
             iffe.sh: add 'name = test ...' user defined macros
             iffe.sh: add '! test ...' negation
             TEST.mk: add implied { .c .sh } generated prereq
             cc.darwin.ppc: handle 10.3 -dylib mess
    04-08-01 package.mk: let include handle nested requirements -- duh
    04-07-31 package.sh: attempt a second ping before admin assumes host down
    04-07-26 package.sh: fix hp.ia64 HOSTTYPE
    04-07-23 probe.win32: generalize #include dir order search
    04-07-17 regress.sh: add INPUT -x for chmod +x
    04-07-01 regress.sh: TMP => TWD
    04-06-29 regress.sh: put COMMAND in $TWD too
    04-06-21 regress.sh: mkdir -p INPUT and OUTPUT intermediate dirs
             TEST.mk: add :TEST: -- to disable .c .sh search
    04-06-18 TEST.mk: add .SCAN.tst
    04-06-17 regress.sh: TEST returns true if active, false otherwise
             regress.sh: add CD to change test pwd from $TWD
    04-06-16 regress.sh: add TWD for ./unit.tmp override
             regress.sh: DO now flushes previous test
             regress.sh: INPUT and OUTPUT handle -f for printf instead of print
    04-06-11 package.sh: make sure $INSTALLROOT/bin is in front of $PATH
             package.sh: skip nmake if older than 2000-10-31
    04-05-20 package.sh: fix arg vs. package parse with - or '' to disambuguate
    04-05-11 package.sh: package verbose update lists closure for package setup
             package.sh: add src/lib/libardir to nmake proto bootstrap
             regress.sh: probe for rm -u vs. chmod -R u+rwx
    04-05-01 package.sh: $CC must be C, not C++; allow release command on $PATH
    04-04-15 make.probe: check probe_libdir false positives
             package.sh: add lib/package/*.lic src package subdirs
             package.mk: add mamfile=0 to inhibit Mamfile generation
             iffe.sh: config name_DECLARED => HAVE_name_DECL
             iffe.sh: fix mac to handle default value
    04-04-11 iffe.sh: normalize sed [\\\\/] quoting
    04-04-04 package.mk: only checksum generated tarballs
             mamprobe.sh: add STDCHMOD
    04-04-01 C+probe: set export LANG=C for uniform error messages
             make.probe: another CC.STDLIB tweak
             package.sh: fix regress core dump pattern, expand [a-z] match ranges
    04-03-31 Makefile: add intl :MAPLIB: test
             make.probe: fix CC.STDLIB search; drop CC.* path duplicates
    04-03-28 iffe.sh: drop unused exec $stdin<&0 dup
    04-03-25 Makefile: add iconv :MAPLIB:
             package.sh: use ${PING:-ping -c 1 -w 4}, allowing admin.db override
    04-03-24 package.mk: add *.md5 checksum for each *.(c|exe|tgz)
             package.sh: update base change on md5 sum instead of size
             iffe.sh: adjust case label \ and keyword quoting for ancient /bin/sh
    04-03-22 probe.win32: ncc => nld
    04-03-19 CONVERT.mk: change the instructions and old source dir default
             package.mk: fix recurse=list check
             package.mk: add *.md5 checksum for each *.(c|exe|tgz)
             package.sh: fix update base/delta/sync existence check
    04-03-18 iffe.sh: -d2 does not remove core dumps on exit
    04-03-17 package.sh: fix make recurse arg/action order
    04-02-29 package.sh: add regress action to compare current and previous tests
             package.sh: fix sgi.mips[23] HOSTTYPE test for old irix cc
             package.sh: add `export variable ...'
             package.sh: admin action now handles host name with non-id chars
             package.sh: non-numeric M T W in admin.db disables that action
             package.sh: fix admin write binary local vs. shared clash
             cc.hp.pa: add _AST_CC_hp_pa_DEFAULT=+DAportable
             cc.hp.pa64: sync with cc.hp.pa
             cc.ibm.risc: -bnolibpath => -blibpath:/usr/lib:/lib
             probe.win32: sync with make.probe
             make.probe: fix last chance dynamic test
             make.probe: add hp.pa CC.EXPORT.DYNAMIC -Wl,-E
             make.probe: add ibm.risc CC.EXPORT.DYNAMIC -bexpall
             make.probe: move probe_dll_def to the end of probe_dll
             package.mk: capture subcomponent mamfile recursion
    04-02-24 make.probe: strip "..." from cc/ld traces
             iffe.sh: add ``set [no]define'' to disable macro #define/#undef
    04-02-23 make.probe: rework CC.LD search
    04-02-14 make.probe: add CC.EXPORT.DYNAMIC for main dynamic sym export
             make.probe: resurrect CC.PIC with separate semantics from CC.DLL
             make.probe: add CC.SHARED.LD for CC.SHARED linker
             C+probe: clear DISPLAY to stifle interactive windows
    04-02-11 iffe.sh: handle ``siz void*'', add cross{ ... }end
             make.probe: add { CC.AR CC.SIZE }, fix cross command search
             cc.darwin.ppc: change $cc => $CC for old ksh + libast conf bug
    04-02-09 make.probe: drop -nostartfiles from CC.SHARED for C++
    04-02-04 package.sh: fix cross compilation bug that mixed binary formats
    04-02-02 package.sh: package admin now ditto's bin/package too
    04-01-30 cc.sgi.mips3: drop warning 3421
    04-01-11 regress.sh: output label#count for tests in loops
    04-01-05 regress.sh: fix bug that ignored the first SAME
    04-01-04 crossexec.sh: fix typo that did not recognize rcp
    03-12-19 mamake.c: add `foolib:foo:libfoo' to recurse()
    03-10-11 regress.sh: add EXPORT, export COLUMNS=80 for message consistency
    03-09-23 ratz.c: fix tar header number parse bug that skipped to next number
             regress.sh: rm cleanup now handles files matching -*
    03-09-11 iffe.sh: add unnamed { ... } blocks
             regress.sh: add COPY from to, like MOVE but comprison still done
             regress.sh: rm -rfu to handle test dirs w/o u+rwx
    03-08-14 Makfile: add hello.c to the manifest
    03-08-11 package.sh: fix `html binary' generation
    03-06-21 package.sh: fix INITROOT initialization bug
             package.sh: make sure admin logs exists before tail'ing
    03-06-11 probe.win32: fix $(BINDIR) typo that expanded in sh instead of make
             cc.mvs.390: return code 4 yields exit code 3 but its *really* ok
             package.sh: fix onpath function global var conflict
             make.probe: add CC.DIALECT { GNU -dD }
             package.mk: add Mamfile to lcl manifest
    03-06-10 package.sh: fix setup action typo that only checked the INIT package
             package.sh: *.s390x => *.s390-64
    03-06-09 package.mk: add cyg :POSTINSTALL:
    03-06-08 make.probe: fix CC.STDLIB logic
             hurl.sh: add User-Agent identification
             package.sh: tweak source and binary installation instructions
             cc.hp.pa,ld.hp.pa: +-Wl,+cdp,${INSTALLROOT}/lib/: drops abs lib paths
             ldd.hp.pa: add
    03-06-06 package.sh: fix $INSTALLROOT/bin/ldd check
             make.probe: add CC.STDLIB verification
    03-06-04 make.probe: add +forceread +noforceread
    03-05-11 hurl.sh: handle http://host:port/path
    03-05-06 package.sh: fix setup action PACKAGEROOT and INIT logic
    03-05-05 package.mk: fix cygwin tarball names
    03-04-30 package.sh: move (cc|ld|ldd).$HOSTTYPE updates from Makefile
    03-04-27 make.probe: fix mvs CC.PREFIX.SHARED "lib" => ""
             make.probe: add CC.DLL.DIR = $(BINDIR) or $(LIBDIR)
             make.probe: add { CC.LD.LAZY CC.LD.NOLAZY CC.LD.RECORD CC.LD.NORECORD }
             probe.win32: sync with latest CC.*
    03-04-25 mamprobe.sh: add args to `. $makeprobe' for ancient sh
    03-04-23 package.mk: fix dup "covered by" licenses
    03-04-22 probe.win32: CC.DIALECT += "LIBPP -I-" for all cc's
             package.sh: fix admin write binary tarball snarf
    03-04-21 package.mk: package covered *.@(pkg|lic) too
    03-04-15 package.mk: don't generate incremental archives for lcl
             package.mk: add incremental=[source:1 binary:0] archive control
             package.sh: generate $INSTALLROOT/bin/cc wrapper for CC != cc
             package.sh: admin must ditto lib/package/*.@(pkg|lic) too
             mamake.c: ignore time of ignore prereqs
             mamake.c: -D2 lists propagated times
    03-04-11 package.mk: tidy up cyg tarballs
             package.sh: fix old shell clash between get() and $get
    03-04-05 package.mk: restore *.inx generation somehow lost during cyg additions
             package.sh: add pthread_num_processors_np() last resort for cpu count
             package.sh: use `make believe' to accept mamake generated files
             package.sh: handle `make [make-flags] [target ...]'
             mamake.c: ignore -e
    03-03-21 package.mk: fix cyg old make typo
             package.sh: switch to `package setup' instructions
    03-03-19 package.sh: add registry checks for `host cpu'
             package.sh: `results failed' now lists core dump messages
    03-03-17 package.sh: on cygwin verify 'ntsec binmode' in $CYGWIN or die
             Makefile: install gcc wrapper if no cc
             package.mk: add :DETAILS: { :README: :EXPORT: :INSTALL: :TEST: } ops
    03-03-12 package.mk: add :DETAILS: for style-specific details
    03-03-11 package.sh: add beta setup/update support
             TEST.mk: add (TESTCC) prereq for .sh tests
    03-03-07 hurl.sh: add
    03-03-06 iffe.sh: fix lib win32 test cygwin vs native incompatibility
             iffe.sh: change internal stdio.h guard to handle C++ inline vs. macro
    03-03-03 package.sh: check for curl or wget for update
             package.sh: add setup action == update read make
             package.sh: fix packageroot() typo that showed up in non ~user shells
             mamake.c: treat name+=value args like name=value
             mamake.c: add ${var?*|value?match?no-match?}
             mamake.c: fix archive vs. dynamic bind logic
    03-02-28 package.sh: add the "cyg" (cygwin) package type
             package.mk: add "cyg" stubs, :CATEGORY: for category name(s)
    03-02-25 mamake.c: add -D4 system(3) debug trace
    03-02-24 package.mk: change --mismatch to --corrupt=accept
    03-02-14 ratz.c: add _WIN32 setmode([01],O_BINARY) and fopen "rb"/"wb"
    03-02-12 Makefile: handle getconf LIBPATH with host pattern
    03-01-31 package.mk: fix .lic search
    03-01-30 package.sh: handle { INIT ksh nmake } already installed elsewhere
             package.sh: admin handles command outside of $PACKAGEROOT/bin
             Makefile: install $(INSTALLROOT)/lib/make/package.mk
    03-01-28 package.sh: admin remote commands on one line to please syslog
    03-01-23 probe.win32: borland and mingw32 tweaks
    03-01-22 package.sh: fix $CC test to ignore set -x trace -- duh
    03-01-16 ditto.sh: tw --chop on by default
    03-01-14 package.sh: use /bin/cp to copy previous binaries to bin/ok/
             package.sh: admin now initiates remote exec and copy from local host
    03-01-12 package.sh: handle admin "xxx:" default root
    03-01-03 probe.win32: add /usr/include/borland path truncation workaround
    02-12-10 iffe.sh: add <&$nullin >&$nullout to checkread() $cc
    02-12-06 probe.win32: fix inlcude => include typo, add lcc lib
             probe.win32: CC.MAKE.OPTIONS = nativepp=0
    02-12-04 mamake.c: fix ${foo-bar} to expand foo if defined
    02-11-28 probe.win32: add C++ and -I- CC.DIALECT checks
    02-11-26 package.sh: package release now checks for second level files
    02-11-22 package.sh: update action now uses HTTP/1.0
    02-11-21 probe.win32: update the vc include dir test
    02-11-20 make.probe: fix CC.LD.ORIGIN typo that expanded make var
    02-11-13 packahe.mk: fix list.install => list.installed typo
    02-11-12 make.probe: add CC.LD.ORIGIN for a.out origin dir relative dll search
             make.probe: add CC.LD.STRIP for link time a.out strip
             package.sh: fix package_use vs. PACKAGE_USE check
    02-10-24 WWW.mk: fix bug that required a :WWWBIN: assertion to post
    02-10-23 mamake.c: fix unuinitialized time in make()
             ratz.c: fix meter buffer overflow
    02-10-20 package.sh: fix lib/probe/C/make/probe update test
    02-10-18 probe.win32: update for mingw
             make.probe: add bash workaround to SHELLMAGIC test
             package.sh: work around yet another cygwin hassle
    02-10-17 iffe.sh: short circuit id check for *[-+/\\]*
    02-10-08 regress.sh: unset FIGNORE to avoid rm . errors
             package.sh: unset FIGNORE to avoid rm . errors
             package.sh: $CC must at least compile and executable hello world
    02-10-04 package.sh: $INSTALLROOT/lib/package/tgz=>$PACKAGEROOT/lib/package/tgz
             package.mk: $(ED) => $(STDED), $(EDFLAGS) => $(STDEDFLAGS)
             iffe.sh: add identifier checks for tests that (implicitly) require them
             iffe.sh: disambiguate a few --config macros
    02-10-02 iffe.sh: fix shell=bsh `hdr a/b'
    02-09-30 package.sh: handle chmod of -* files
             package.sh: verify that $SHELL is Bourne compatible
             package.sh: tighten PACKAGE_USE logic PATH,LIBPATH,etc. validation
             iffe.sh: fix bug that didn't define mac variable on success
    02-09-22 package.sh: handle admin_action=ditto
             iffe.sh: --config sizeof(foo) macro is SIZEOF_foo
             iffe.sh: fix long.long test so it doesn't defeat uwin "typ long.long"
             mamprobe.sh: convert $("foo") nmake string constants
    02-09-21 mamprobe.sh: "-" info-path writes probe info to stdout
    02-09-11 make.probe: move from nmake src to be part of mamprobe.sh
             mamprobe: generate from mamprobe.beg C.probe make.probe mamprobe.end
             mamake.c: pass cc absolute path to mamprobe
             package.sh: generate mamprobe -- yuk (at least its confined to INIT)
             iffe.sh: lcl,nxt: drop default sys/ check
             ditto.sh: tw --logical by default; add --physical
    02-09-10 package.sh: SHELLMAGIC creeps into package too -- duh and fooey
    02-09-09 ditto.sh: test that remote .profile exists before sourcing
    02-09-06 package.sh: don't ditto nfs junk
             ditto.sh: --show now lists directory ops instead of enumerating all
    02-09-05 ditto.sh: add --remote={rsh|ssh}
             package.sh: add admin [[{rsh|ssh|-}]:]directory
    02-09-02 iffe.sh: change 'print -r --' to 'print -r -' for ksh86 compatibility
    02-09-01 cc.unix.mc68k: add for ancient 3b1
    02-08-22 package.sh: fix component() to test for components -- duh
             Makefile: add LICENSE:.DONTCARE to workaround mam
    02-08-11 iffe.sh: provide defaults for LD_* additions
    02-08-07 ratz.c: change -m to use * instead of non-portable inverse video
    02-07-17 mamprobe.sh: close tmp file in trap before rm for cygwin
             package.sh: fix "type" to handle i1586 (P4)
             package.sh: add the view action
    02-06-28 package.sh: handle multiple packages for release action
    02-06-27 package.sh: catch sol*.sparc=>sol*.sun4 when CC=gcc
    02-06-14 package.sh: fix admin_action to not include qualifiers
             package.sh: fix help/html doc typo
    02-06-11 package.sh: fix ditto update doc to `PACKAGEROOT field matching *:*'
    02-06-07 WWW.mk: change substitute $("\n") to \n
    02-06-06 package.sh: clarify output streams for help/html
    02-05-22 mamake.c: fix executable file check to use (S_IXUSR|S_IXGRP|S_IXOTH)
    02-04-04 package.sh: fix update to differentiate *.sun4 and sun4
    02-03-27 package.sh: yacc/bison warning only if both missing
    02-03-24 mamake.c: all shell actions wrapped with -c to avoid #! problems
    02-03-23 package.sh: recover $PACKAGEROOT/bin/package if not in INIT package
             package.sh: precheck $CC, not `cc'
             package.sh: fix install to use pax -ps to preserve set-uid/gid
             package.sh: fix install to use list.installed for existing files only
    02-03-17 package.sh: fix PAX initialization that was sometimes omitted for read
             package.sh: fix update delta sync fetch
    02-02-14 iffe.sh: fix macro{ }end docs to include "
             iffe.sh: add dfn to extract #define from headers
             iffe.sh: handle nxt #include ok but no line sync
             iffe.sh: drop local header clash logic
             iffe.sh: add -X, --exclude=dir to exclude -I dirs
             iffe.sh: lcl,nxt now generate <...> headers instead of "..."
             package.sh: admin.db root dir matching -* disables host
             package.mk: fix package.src.pat typo -- too many )
             package.mk: add { :COVERS: :DESCRIPTION: :REQUIRES: }
             package.sh: handle { :COVERS: :DESCRIPTION: :REQUIRES: }
             Makefile: move proto.c generation to the proto component dir
    02-02-02 execrate.sh: add for .exe challenged win32 systems/commands
             mamprobe.sh: add STD* commands/flags
             mamake.c: update mamprobe info when older than mamprobe executable
             package.sh: move ed/ex workaround to mamprobe.sh
             package.sh: fix `host type' bug that incorrectly assumed sun4 for sol
             package.sh: add execrate(1) hooks for challenged systems
             package.sh: add check for { cc ar nm yacc/bison } before make
             ratz.c: fix "rb" vs. "r" macro tests
             iffe.sh: add nxt, similar to lcl but defines _nxt_foo for #include
             iffe.sh,package.sh: remove vaibale from sccs,cvs ident strings -- duh
    02-01-24 C+probe: check CC.DYNAMIC to handle cc that accept but ignore -B*
             iffe.sh: handle 'mem struct.a.b'
    02-01-22 iffe.sh: cache (internal) `foo vs. struct foo' test results
             package.sh: uts.370 => uts.390
    02-01-18 package.sh: fix uts hosttype
    02-01-17 package.sh: add 'results failed ...' to list failures only
             package.sh: change ARCH internal var to all_types to avoid env conflict
             iffe.sh: fix hdr/lib precheck that missed some -- ouch
             iffe.sh: fix noexecute test that forgot to check compile first!
    02-01-15 ratz.c: fix path[] type typo
    02-01-01 package.mk: tighten license search
    02-01-08 package.sh: `pwd` => ${PWD:-`pwd`}
             package.mk: expand license file pattern match
    02-01-04 iffe.sh: fix `exp name "value"' bug that duped "value"
             iffe.sh: fix initial <sys/types.h> check to honor --config
    01-12-25 iffe.sh: fix bug where -o file restored old file
    01-12-23 package.mk: uniq the closure lists
    01-12-07 ratz.c: fix --meter to retain paths containing " -- "
    01-11-30 ratz.c: use sear_system() to execute; should work on all windows
    01-11-28 ratz.c: fix sear_rm_r() to check SetCurrentDirectory() status
    01-11-26 ditto.sh: drop n+=v for ksh compatibility
    01-11-21 ditto.sh: add rsync script replacement [hey, it works!]
             package.sh: add [ditto]:directory notation to admin.db
    01-10-31 package.sh: handle *.sum paths with embedded space
             package.sh: change executable() to onpath()
             package.sh: executable([!] foo) replaces test [!] -x foo (.exe hack)
             package.sh: add os2 fix to `host type'
             mamake.c: add .exe hack
             iffe.sh: fix intrinsic function lib test
             mamprobe.sh: update pic probe to match make.probe for linux.ia64
    01-10-30 package.sh: make action skeleton view now checks subdirs
    01-10-20 package.sh: don't recurse into leaf dirs matching $MAKESKIP
             package.mk: tarball package.notice replaces `license accepted' prompt
             package.sh: eliminate `license accepted' prompt
             package.sh: add update to download latest from a url
             package.sh: use builtin arithmetic when we know its ksh
             iffe.sh: unkown -> unknown
    01-10-18 package.sh: convert to YYYY-MM-DD delta releases instead of NNNN
             package.mk: convert to YYYY-MM-DD delta releases instead of NNNN
             ratz.c: fix -m for paths containing \f\n\r\v
    01-10-16 ratz.c: _SEA_* => SEAR_*
             ratz.c: preserve stdin for sear_exec()
             ratz.c: add recursive sear_rm_r() to sear_exec() tmp dir cleanup
    01-10-10 mamprobe.sh: add mam_cc_SHELLMAGIC
             package.sh: add nfs wakeup call to admin to avoid stale file handles
    01-10-04 cc.darwin.ppc: -flat_namespace is not longer the default (huh)
    01-10-01 package make: prepend $INSTALLROOT/bin/ok to PATH
             package read: save cpy of bin/package when reading the INIT package
             mamprobe.sh: allow cc path with optional arguments
    01-09-24 Makefile,package.sh: add $INSTALLROOT/bin/.paths initialization
    01-09-19 package.mk: add recurse to list.package.*
             package.sh: bootstrap build nmake with _BLD_STATIC for _WIN32
    01-09-11 ratz.c: add _SEA_SKIP & _SEA_COMMAND for self extracting archives
    01-09-07 package.mk: fix output capture to not generate files names with spaces
    01-09-07 package.mk: fix delta release number search
    01-08-11 package.mk: handle single gz executable packages (e.g., for ksh)
             package.sh: fix package install to require nmake only if no *.sum
             iffe.sh: drop ancient menu and prompt actions; check ./hdr.h clash
    01-07-17 package: fix use cross compile test to generate files in /tmp
    01-06-27 ratz: handle hard and soft links if possible
    01-06-07 Makefile: fix :MAPLIB: for sco
    01-05-31 crossexec.sh: add
             iffe.sh: add -x crosstype to run crossexec
             iffe.sh: exp test now handles pass{}end fail{}end yes{}end no{}end
             package.sh: add package host canon external-host-type-name
             package.sh: fix `use USER' lookup for shells that support ~USER
             cc.*: add -dumpmachine to dump target HOSTTYPE
    01-05-18 iffe.sh: drop $HOME/tmp/t.sh debug trace -- oops
    01-05-01 mamake.c: scan() now handles :PACKAGE: foo:command
    01-04-26 *.sh: expand [a-z][A-Z][0-9] for non-contiguous character codes
             iffe.sh: fix run *.sh for shells that don't $* across . command
             cc.mvs.390: recode for /bin/sh
    01-04-25 package.mk: include non cc-g variants by default
             package.sh: *[._]* => *?[_.]* for mvs.390 /bin/sh
    01-04-24 TEST.mk: no tests for VARIANT=="DLL"
    01-04-22 package.mk,package.sh: tarball text members are ascii encoded
    01-04-18 package.mk: allow package name to be the same as one of its components
             cc.mvs.390: handle .C .cpp .cxx
             cc.mvs.390: compensate for -o that does not overwrite
    01-04-01 regress: fix SAME that just skipped it -- we should regress regress!
             iffe: fix bug that didn't emit _hdr_foo for internal hdr tests
             iffe: fix lcl bug for cc -E that doesn't emit line syncs
             ratz: add ascii=>ebcdic conversion for text archive members
             mamake: fix buffer overlap bug that clobbered the probe file path
    01-03-17 iffe: handle : separator as first arg
    01-03-15 mamake.c,ratz.c,release.c: add <stdlib.h> and <string.h>
    01-02-26 iffe.sh: fix bug that omitted runtime #define for `mac' op
    01-02-22 cc.ibm.risc: handle SF_CLOSE clash in <sfio.h>
    01-02-14 cc.sgi.mips3,cc.sgi.mips4: handle -mips2 -mips3 -mips4 for cross cc
             C+probe: quote "$cc" when its an argument!
             mamake: execute actions with $SHELL, ignored signals back to default
             package.sh: nmake check error output to /dev/null
             package.sh: fix INIT a.out updates for knr cc
             package.sh: package list now handles large tgz dirs
             package.sh: *-ok executables moved to ok/* for *.dll systems
             iffe.sh: change "exec >&-" to "exec >/dev/null" else linux mkdir fails!
             mamake: handle `bind -lx [dontcare]'
    01-02-12 ratz.c: fix _PACKAGE_ast includes
             package.sh: $HOSTTYPE env overrides if $PACKAGEROOT/arch/$HOSTTYPE/
             package.sh: $CC ^HOSTTYPE=[A-Za-z_0-9.]*$ overrides HOSTTYPE
             iffe.sh: fix dat code that used previous $tmp.exe
             iffe.sh: fix dat code for _DLL imports
    01-02-09 iffe.sh: add copy() for shells with the dissappearing here doc bug
    01-02-08 Makefile: guard against null $(CC.HOSTTYPE)
    01-02-06 Makefile: separate out cc,ld,ldd workarounds (so they will be packaged)
    01-02-02 package.sh: fix package use for $INSTALLROOT != */$HOSTTYPE
             package.sh: create intermediate recursion makefiles when needed
             package.sh: add $SECONDS to the DEBUG trace prompt
    01-01-01 ratz.c: #ifdef for uwin ncc
             iffe.sh,package.sh: check PACKAGE_PATH for local installations
             package.sh: add psrinfo for osf.alpha host cpu
             package.sh: change pax --meter probe; some hang on /dev/tty
             package.sh: fix `install flat ARCH'
             mamake: eliminate loops from scan order
             C+probe: add probe_verbose -V for aix cc=xlc
             cc.ibm.risc,ldd.ibm.risc: add
             package.mk: list refs to top-level licenses only
             package.mk: add local link table to change log html
    00-12-25 package.sh: `no package archives' is a hard error, duh
             package.sh: reorder host type logic for lame shells
             mamake.c: getcwd => getwd for NeXT -- how about posix==default guys
             iffe.sh: really gross workaround for NeXT -lposix stdout null's
             iffe.sh: handle cc -E that insists on compiling
    00-12-15 iffe.sh: ancient sh function call blows $*; call only when $# == 0
             *.sh: `getopts 2>/dev/null` => `(getopts)2>/dev/null` for ancient sh
             package.sh: fix LD_LIBRARY*_PATH initialization
             cc.next.m68k: add for _POSIX_SOURCE and linker multiply defined syms
    00-12-12 ratz: add --meter
             package.sh: a few VPATH fixes
             Makefile: don't override *.mips* cc if -version not accepted
    00-12-11 package.mk: *.inx now contains name=value
    00-12-07 package.sh: handle PC netscape . => _ pathname mangle
             WWW.mk: .tar.gz => .tgz
    00-11-27 package.sh: add checklicense() to do license checks at read time
             package.mk: change component list from preformat to table
    00-10-31 package.mk: *.pkg must assert closure
             package.mk: add cc- variants to list.package.binary
             package.sh: omit dups from package list
             package.sh: invalid arg gives one line Usage
             package.sh: relax checkaout checks for non-owners
             package.sh: package use sets NPROC if not already set or [01]
             proto.c: add $(INSTALLROOT)/include/ast hack
    00-10-26 WWW.mk: add .SOURCE rhs to :WWWPAGE:
    00-10-25 package: fix install
             package.mk: add list.install
    00-10-22 regress: fix VIEW to skip empty dirs
    00-10-19 package.mk: $(PACKAGEROOT)/bin/nmake => $(PACKAGEROOT)/bin/manmake
             iffe: validate #define identifiers
    00-10-18 C+probe: mac os10 additions
             package: add DYLD_LIBRARY_PATH initialization
             add ldd.$(CC.HOSTTYPE)
    00-10-01 iffe: handle -I* -L* options
    00-09-21 mamake: add libxxx and xxx to makefile ordered prereqs
    00-09-19 C+probe: add probe_longlong
    00-09-11 package: drop manmake and $PACKAGEROOT/bin/nmake
    00-09-08 iffe: verfiy that $cc is a C compiler
    00-06-14 mamprobe: fix win32.* probe
             mamake: fix bug that used lower view path for generation
             package: don't clobber $PACKAGEROOT/bin/nmake
    00-06-01 C+probe: fix stdinclude *again*
             package: fix write delta source to use default pax format
             package: add disambiguating bias for sgi.mips3 over sgi.mips4
             package.mk: fix for directory content packages lib ast-locale
    00-05-01 iffe: fix invalid _LIB_ macro identifier
    00-04-11 C+probe: uniq stdinclude and stdlib, fix usrinclude
    00-04-01 regress: fix explicit OUTPUT bug that didn't compare with expected
    00-03-17 package: all archives are .tgz for binary download
             package: $(PACKAGEROOT)/LICENSES/* in source and binary archives
             package: implement install and verify actions
             iffe: add exp, pth file dir ..., fix lib - -lfoo, fix lib - - -la -lb
             iffe: -L* must affect LD_LIBRARY* hacks for .exe tests -- yuk
             package.mk: add *.pkg :INDEX:
    00-03-07 package: add admin action
    00-03-06 makefile: install optional make probe override script C+make+probe.lcl
    00-02-14 --- release 1.0 ---
             ratz: treat "foo/" as a dir, not a regular file
             package: clarify source and binary installation instructions
             package: fix so binary packages can install without cc
             package: "ratz" now a non-archive package (the only one) for bootstrap
             package: handle VPATH=a:b arg
             package.mk: "ratz" package adjustments
             Makefile: use :PACKAGE_INIT: to support binary INIT packages
             WWW.mk: add :WWWALL:
             C.probe: fix .so check that let .dll slip through
             iffe: fix config sh var assignment for HAVE_member_IN_struct
             iffe: fix config sh var assignment for symbol_DECLARED
             package: delay PATH export until dll hack exports complete
             package: don't forget binary package $(INSTALLROOT)/lib(32|64)
             package: add delta change log for source packages
    00-02-10 mamprobe: add mam_cc_DLLBIG
             package: fix spelling typos
             package: add html help output
             package.mk: beef up source and binary help => html
    00-02-08 package: mkdir man/man[138] in the new arch to cover MAM bug
    00-01-28 package,release: add -rcount to release
             package: fix linux "host cpu" and "host rating"
             package: copy *.lic to $PACKAGEBIN for "make" and "write binary"
             package: fix 'release change log' case match
    00-01-24 package: add copyright action
             mamprobe: add -D_BLD_DLL to mam_cc_DLL
    00-01-11 package: tsort for package write
             package: early verification that $CC works
             package: add non-interactive command arg for use action
             proto: fix -C intermediate mkdir()
             mamprobe: unixware.i386 ksh workaround
             C.probe: move hosttype to C.probe (with unixware.i386 workaround)
             WWW.mk: fix mm2html option quoting
             WWW.mk: add .SCAN.mm
             WWW.mk: don't force static=1; grab dll's instead
             *.sh: fix getopts test to handle botched implementations like osf.alpha
             iffe.sh: fix read -r test
    99-12-25 iffe: tweak verbose messages
             iffe: hand code non-optget getopts parse
             iffe: fix bash quoting bug again
             iffe: do test -w . after option parse
             package: fix PACKAGEROOT search
    99-11-19 --- release 0.2 ---
    99-11-19 first working package & friends
    99-10-31 change from lib0ast to INIT; add MAM and package bootstrap
             hostinfo: gobbled by package
    99-10-01 iffe: add --config, yes{...}end no{...}end, fix read -r workaround
    99-09-27 iffe: add --all --verbose, --* set options
    99-09-22 regress: -v disables long line truncation
    99-09-11 WWW.mk: WWWDIR and MM2HTMLINFO are now lists searched in $(HOME)
    99-08-11 hostinfo: fix type sgi.mips4
    99-06-24 WWW.mk: add
    99-06-08 hostinfo.sh: ${TMPDIR:-/tmp}
    99-06-07 TEST.mk: add
    99-06-01 iffe: add `siz type' for _siz_type == sizeof(type)
    99-05-11 hostinfo,iffe,regress,use: long options
    99-05-01 C.probe: fix over aggressive stdinclude, e.g., /usr/include/machine
    99-04-01 hostinfo: sgi.mips? -o32 and -n32 checks
             iffe: check that . is writable
    99-03-17 hostinfo: fix for cc not found
             dl.c,hello.c,m.c: headers in conditionals to force .DONTCARE
             C.probe: extra check for include dirs pulled in by <sys/types.h>
    99-03-03 regress: add `UNIT - ...' for extra args
             Makefile: add (_hosttype_) prereq for cc
    99-01-23 hostinfo: tweak rating, use /proc/cpuinfo if there
    99-01-11 C.probe: shlib before lib, /usr before /
    98-12-25 iffe: work around win32.alpha intrinsic clash with -O
    98-11-11 regress: fix UNIT PATH lookup
    98-11-01 regress: add PROG
    98-10-01 hostinfo: add unixware.*
             use: export PACKAGE_*
    98-08-11 C.probe: add /usr/include check (for sco CC)
             hostinfo: handle uwin uname update
    98-05-01 regress: fix bug sometimes didn't list last test
    98-04-01 hostinfo: add cc path arg
             hostinfo: now works with /bin/sh
             Makefile: strengthed -lm probe
    98-01-23 Makefile: check for -ldl -lm
             C.probe: handle gcc -v -E phony include dirs
             iffe: fix lcl by dropping sort -u -- we need the real first
             iffe: `mem x' to test if x is a non-opaque struct
    98-01-11 $(INSTALLROOT)/lib32 for sgi.mips3
             $(INSTALLROOT)/lib64 for sgi.mips4
             add cc.hp.pa
    98-01-01 cc.sgi.mips*: turn off ld library multiply defined
    97-10-11 regress: add VIEW function for locating data
    97-10-01 Makefile: -ldl test moved to libdll Makefile
    97-08-11 regress: add MOVE
             regress: add SAME
             regress: use getopts
             regress: `EXEC' repeats previous test
    97-07-17 use: tweak PATH and LIBPATH bootstrap order
             iffe: fix lcl bug that botched pathnames with embedded spaces
    97-06-12 iffe: add npt `needs prototype' test
    97-05-09 hostinfo: mvs.* => mvs.390
             Makefile: cc.$(_hosttype_) workaround installed here
             iffe: fix nolink{ ... }end
             iffe: add [no]static{ ... }end for static link test
             C.probe: _probe_PATH => _probe_export which must be eval'd
    97-04-01 use: _RLD_ROOT set too
    97-03-17 mm2html: changed inner loop
             mm2html: handle .if|.ie|.el, .so
             mm2html: handle different man styles
             mm2html: differentiate mm/man in some non-obvious cases
             hostinfo: r5000 is not mips4
    97-02-14 hostinfo: validate type with cc
    96-12-25 C.probe: uwin tweaks
             iffe: use `...` instead of $(...) for alpha /bin/sh
             iffe: fix `typ' divide by 0
             iffe: `lcl' now drops X: prefix
             iffe: +l* -> -l*
             iffe: eval around ${...#%...} for bsd /bin/sh
             use: add sgi.mips LD_LIBRARY<abi>_PATH variants
             use: add -e to list exports
             iffe: lcl leaves leading [a-zA-Z]: for dos
             iffe: fix no{link|output|execute} logic
             C.probe: don't automatically add /usr/include for non-hosted compilers
             C.probe: don't automatically place /usr/include last
             C.probe: check gcc style -v -E for stdinclude usrinclude
    96-11-28 iffe: check BASH_VERSION for IFS botch
             iffe: typ long.xxx only if sizeof(long xxx) != sizeof(xxx)
             hostinfo: fix sgi.mips[234] tests
             hostinfo: fix ncr.i386 tests
    96-10-31 iffe: work around old bsh here doc bug by running separate sh
    96-10-11 iffe: *.iffe and *.iff for iffe src files
             hostinfo: tighten sgi.mips cpu type check
    96-10-01 C.probe: add probe_libdir to catch alpha /usr/shlib
    96-09-17 iffe: fix typ bug that failed for single id types!
    96-08-31 hostinfo: handle recent sgi hinv cpu changes
    96-07-17 make sure sizeof(long xxx)>sizeof(xxx) for typ long.xxx
    96-05-09 C.probe: drop multiple / in stdinclude
    96-02-29 use: package root must have bin and lib subdir
             mm2html: add
             C.probe: probe_members += -whole-archive for gcc
             iffe: add + fix the blasted `...'...\\...'...`
    96-01-31 use: add pkg dir
             hostinfo: add tandem
    96-01-01 hostinfo: windows_nt|windows[0-9][0-9] -> win32
    95-11-24 hostinfo: linux-aout.* for non-elf linux
    95-11-11 use: add aix LIBPATH
    95-10-11 hostinfo: no args prints type
    95-08-11 use: add
    95-05-09 save original PATH in _probe_PATH
             beef up library dir probe
    95-04-01 use c source suffix if it still preserves the dialect
             add hostinfo
             add lib/hostinfo/typemap user type map
             add sol.sun4 cpu count
             fix C.probe to properly handle C/C++ combined compiler drivers
             add NeXT to hostinfo
             bummer: mach has /usr/bin/hostinfo
    95-03-19 fix dialect executable test
    95-03-19 --- release 0.0 ---
    
    RELEASE notes for src/cmd/at/RELEASE
    
    12-02-29 atd.c,atx.c: fix uid/gid sequencing for unix/winix compatibility
    10-06-01 sync with ast api 20100601
    10-03-19 atd.c,atx.c: each job in separate session
    06-10-11 add sfstruse() error checks
    06-09-19 atd.c: sysconf() => astconf()
    06-05-17 crontab.sh: handle empty or nonexistent crontab
    05-06-29 crontab.sh: fix (...) => @(...) syntax error
    02-02-14 atd: add strdup(argv[1]) to workaround argv[1]=>0 mystery
    01-06-18 crontab: clarify the command<=>job relationship
    01-03-28 atd: fix log file rollover infinite loop
    01-02-14 atd: monitor daemon and restart if it dies
    01-01-01 atd: add actual and expected info to atx log messages
    00-09-28 crontab: update USAGE
    00-06-16 atd,atx: use base 36 instead of 64 in job names (now just lower case)
    00-05-22 crontab: clarify crontab jobs w.r.t at(1)
    00-05-09 atd: ": LABEL; command" sets job label to LABEL
             atd: roll over log file to AT_LOG_FILE.old each month
    00-03-14 at,atd: add at.allow and at.deny checks; tweak uwin verifcations
    00-01-22 --- release 1.2 ---
    00-01-22 crontab: fix getopts check
    99-10-11 at,atd: fix job dictionary bugs
    99-08-11 at: fix usage for at+batch
             at.h: add AT_STRICT
    99-06-23 atd: fix job queue handle lookup that dropped jobs
    99-06-23 --- release 1.1 ---
    99-05-09 tweak uwin FAT checks -- how do you get FAT security?
             at,batch,crontab: long options
    99-04-01 crontab.sh: "..." path vars
             the official off-by-one bug of the millenium
    98-07-17 fix bad scanf base 64 format
    98-02-14 get it working
             add -A for admin commands (all entries, all queues)
    97-11-11 atd: use csread(CS_RESTART) to avoid SIGCHLD interrupts
             atd: add state.atxd in.atxd code for systems with incomplete chmod u+s
    97-10-31 fix `at date ...' arg parse bug
    96-05-24 --- release 1.0 ---
    
    RELEASE notes for src/cmd/builtin/RELEASE
    
    12-05-31 od,tr: errno!=EPIPE => !ERROR_PIPE(errno)
    12-02-28 pty.c: change --verbose[=level] to --debug=level
    12-02-11 what.c: fix boyer moore cut n paste bug -- thanks werner
    12-01-26 pty.c: fix --man docs
    10-04-22 dlls.c: fix --path to only list the path -- doh
    10-11-03 od.c: use is[w]print() for printable char check
    10-10-19 od.c: speed up inner loop
    10-09-15 od.c: fix (unsigned char*) (char*) mismatches
    10-09-08 tr.c: handle tr abc '[%*]xyz'
    10-08-04 dlls.c: add -l to list plugin version stamps
    10-06-21 pty.c: add 4 sec timeout for initial handshake -- fix me!!
    10-06-01 od.c: add -c locale checks (and undo some fmtesc() work), add ast -tC1
    10-04-12 pty: fix sfpoll() result read/write bug
    10-04-12 cat.rt: add -v tests
    10-04-11 cmp.rt: add
    10-04-01 pty: add --tty='stty-settings'
    10-03-23 tail.tst: add -f large initial offset test
    10-03-19 pty: add --dialogue
    10-03-15 pty: fix select() fd management
    10-03-07 tail.tst: add partial line -f test
    10-03-05 mktemp.rt: add
    09-09-24 uuencode,uudecode: use uumeth(0) to generate usage method list
    09-08-18 testtail.sh: add fifo tests
    09-08-01 join.tst: TEST 19 for empty field defref bug
    09-05-24 tail.tst: add r combinations
    09-03-31 features/pty,Makefile: add pty.h and -lutil refs for linux -- great, another util library
    09-02-14 join.tst: add a VSC test
    09-02-14 tail.tst: add some VSC tests
    09-02-02 mktemp: add
    09-02-02 tail.tst: update for -b[blocks], +cl, -cl
    09-01-30 pty.c: add <ast_time.h> (for fd_set!! on mvs.390)
    09-01-12 tr.tst: add tests for trailing '-' in source and/or destination sets
    09-01-03 mkfifo.rt: add
    08-10-15 rm.rt: add to test rm -f x x
    08-02-14 look.c: fix operand parse / diagnostic bugs
    08-01-30 expr.tst: add substr * 1 * tests
    07-09-21 cksum.tst: drop sha1, add -r compatibility
    07-02-23 cksum.tst: add -x tw tests
    07-02-07 cksum: handle std => libcmd move
    06-12-12 chmod.rt,mkdir.rt: add absolute mode tests
    06-11-15 cp.tst,ln.tst,mv.tst: add initial regression tests
    06-10-31 global edit to eliminate most non-const static data
    06-10-11 add sfstruse() error checks
    06-08-25 uniq.rt: add initial regression tests
    06-08-23 mkdir.tst: add -p final dir mode tests
    06-07-20 pty.c: add
    06-06-25 chmod.rt,mkdir.rt: add initial regression tests
    06-06-24 dlls.c: add --containing
    06-01-30 od.c: add -tb binary character format
    05-12-06 od.c: handle od() static split buffer overflow
    05-08-07 tr.c: fix a-b- and a-b-c
    05-03-07 od.c: handle -t ...z for --printable
    04-10-01 fmt.tst: update for --optget
    04-09-30 od.c: -v does not accept an offset operand
    04-08-08 uuencode.c: fix -x docs, add -b == --method=binhex
    04-07-22 look.c: access() => eaccess()
    04-07-01 pr.c: add -c and -v via sfio input discipline
    04-05-27 expr.tst: add string and `:' operator tests
    04-04-14 tr.c: char* => unsigned char* to avoid sign extension
    03-10-11 od.c: add --map=ccode, -tm, generate doc from tables
    03-09-18 tail.tst: add header and timeout tests
    03-07-28 expr.tst: add
    03-07-14 fmt.tst: add
    03-06-10 who.c: ctime() arg must be time_t* (linux.s390-64)
    03-05-21 asa.c,asa.tst: add
    03-05-15 join.tst: add -v2 tests
    03-04-05 nl.tst: generate test data file
    03-02-24 nl.c,nl.tst: add
    03-02-14 od.c,tr.c: no error message for EPIPE
    03-02-11 dlls.c: add Dllinfo_t.env
    02-11-14 what.c: stop on < to catch html/xml
             update cmdinit() calls for 4th flag arg
    02-09-11 dlls.c: add --base & --path
    02-09-05 pr.data: eliminate case ignorant file name clashes (for mac os X)
    02-08-30 dlls.c: exit 1 if no matching dll found
    02-08-28 od.c: check and report write errors -- ouch
             dlls.c: add --info
    02-08-23 dlls.c: add
    02-08-19 chown.tst: add chow regression tests
    02-04-15 look.c: add look.tst, fix hang
    02-03-24 uudecode,uuencode: sfopen "rt" for \r\n -- puke
    02-01-24 look.c: drop <strings.h> ref
    01-11-26 what.c: fix doc type, add --matched
    01-10-31 what.c: fix omitted file arg doc
    01-06-06 who.c: fix entry skip logic that listed too many entries
    01-05-31 Makefile: add PACKAGE_OPTIMIZE=space checks
    01-05-29 Makefile: if -lcmd is dll then BUILTINS linked to one a.out
    01-05-21 tr: regcollate() interface update
    01-04-17 date.tst: move from std
    01-04-01 uudecode: fix -o decode-file and add regression test
    01-03-39 uudecode: add --local for UU_LOCAL
    00-12-04 look: add
    00-12-01 what: add RCS ident(1) $Id:
    00-04-01 uuencode: umask 022 for consistent header comparisons
    00-02-14 fmt: move to libcmd
    00-01-06 pr: fix empty field in multi-col output
    99-11-19 pr: -t == -T
    99-10-01 strings: add --long-strings
    99-08-11 mime,strings: fix usage[]
    99-06-25 who: fix printing of data strings with no \0
    99-06-20 who: fix -i
    99-06-17 who: add
    99-06-11 pr: fix date failure logic
    99-06-08 expr.tst: add -- it needs more too
    99-05-21 paste.tst: add -- but it needs more
    99-05-01 mime,strings,what: long options
    99-04-28 uuencode,uudecode: long options, file arg interpretation fix
    99-03-17 od: --swap=0 for testing
             od: allow space and , in --format, --type==--format
    99-03-11 od: add -w number-per-line, long options
             strings: drop debug error(1) call
    99-03-01 tr: fixes for gnu tests, long options
             join.tst,tr.tst: add gnu tests
             cut.tst: create from gnu tests
    99-01-11 tail.tst
    98-12-25 od: fix cform() for fmtesc \"
             uuencode.tst: update for uulib/uu_encode fill bug fix
    98-11-11 uuencode.tst
    98-08-11 uuencode,uudecode: use <uu.h> and -luu
    98-07-01 strings: fix for default format!
    98-06-01 strings: fix offset format with I*
    98-05-29 join.tst: TEST 09
    98-05-18 what: change "%s%-*s" to "%s%-.*s" and fix buffer boundary bug
    98-03-01 tr: fix char class range bugs
             tr.tst: add
    97-10-01 strings: add -m for multibyte
    97-07-17 join: more tests in join.tst
             uudecode: ignore chars after counted limit
             uudecode: add binhex (decode only)
             uudecode: fix posix/ucb uu_decode()! time for uu.tst
    96-12-25 od: add od.tst
             od: off_t -> int_max
    96-11-28 uudecode: fix buffer boundary bug in qp_decode
    96-09-06 tr: fix [A-Z] [a-z] bug
    96-05-09 what: I don't know (third base)
             uuencode: add
             uudecode: add
             tr: add
    96-04-15 od: add
    95-10-11 grab b_* list from cmd.h
             add void* context 3rd arg to b_main()
    
    RELEASE notes for src/cmd/bzip/RELEASE
    
    02-02-14 bzip2.c: fix uwin core dump
    02-01-24 bzip2.c: use _PACKAGE_ast touch(3) instead of <utime.h>
             bzip2.c: fix strstr() loop
    01-01-01 bzip2.c: include bzlib.h first
    99-01-01 package for ast
    
    RELEASE notes for src/cmd/codex/RELEASE
    
    09-04-15 codex.c: add --passfile=file
    08-05-08 codex.c: Codexdisc_t can't be on main()'s stack due to SF_ATEXIT
    06-08-23 codex.tst: add uu boundary and text tests
    04-01-11 doc update
    04-01-01 add --passphrase
    03-12-18 add to ast -- still working on relationship with { -lvcodex -lz -lbz }
    
    RELEASE notes for src/cmd/codexlib/bzip/RELEASE
    
    09-06-26 snarf from libbz sfdcbzip()
    
    RELEASE notes for src/cmd/codexlib/compress/RELEASE
    
    07-09-22 prevent cl_block()'s on multiple sync()'s
    04-02-19 snarf from libz/sfdclzw.c
    
    RELEASE notes for src/cmd/codexlib/gzip/RELEASE
    
    09-06-26 snarf from libz sfdcgzip()
    
    RELEASE notes for src/cmd/codexlib/lzd/RELEASE
    
    03-12-18 first release
    
    RELEASE notes for src/cmd/codexlib/lzh/RELEASE
    
    03-12-18 first release
    
    RELEASE notes for src/cmd/codexlib/sum/RELEASE
    
    04-01-05 codex.tst: add
    03-12-18 first release
    
    RELEASE notes for src/cmd/codexlib/zip/RELEASE
    
    04-01-17 deflate.c: fix last block logic to handle catenation
    03-12-24 first release
    
    RELEASE notes for src/cmd/coshell/RELEASE
    
    10-06-01 sync with ast api 20100601
    08-04-08 event.c: use dbmlib.iffe
    07-10-23 main.c: avoid UOUT CO_SERIALIZE cswrite hangs via O_NONBLOCK
    07-09-25 handle CO_SERIALIZE
    06-10-11 add sfstropen()/sfstruse() error checks
    06-09-19 command.c,cotest.c: sysconf() => astconf()
    06-08-15 shell.c: unset CO_ENV_SHELL
    06-08-11 main.c: handle CO_ENV_MSGFD msgfd != 3
    06-08-11 COSHELL.mk: handle connect=*
    06-08-04 shell.c: handle CO_APPEND for job out|err
    06-06-21 event.c: add --older, --newer, REQ_all
    06-06-18 event.c: add event name pattern match/glob
    06-06-11 event.c,COSHELL.mk: add
    03-03-04 add state.remote=CS_REMOTE_SHELL
    01-12-12 resolve SETSHELL local vs. global conflict -- its both
             ignore attr now really ignores host -- duh
    01-12-11 add global maxidle=0 to ignore idle
             split readonly and user settable values in `g' command output
    00-12-14 shell is per host attribute
    00-02-01 --- release 2.2 ---
    99-06-24 cosh: change exit to return
    99-06-24 --- release 2.1 ---
    97-12-07 update for CS_SVC_SUFFIX
    96-12-25 add constant casts for long shift counts
    96-05-09 coinit(CO_SERVER)
    96-02-29 use <hashkey.h>
    96-01-31 AT&T Research
    96-01-31 --- release 2.0 ---
    95-07-17 add perhost job limit
             all specific misc attr expr to override idle
    95-05-09 convert init script to hostinfo
             fix indirect bug that forgot to poll the command stream!
    95-04-01 change streval() to strexpr()
    95-01-01 don't bias out home host with cpu>1
             add shell=path to set remote shell path
             add debug=level to set debug level as an attribute
             add identify=1 to identify remote command output
             identify="format with %s"
             attributes may be set on the command line
             add COINIT to cosh so .coshrc can check for new coshell
             add state.grace to g output
    94-11-11 csstat() lazy evaluation in expressions
    94-07-17 --- release 1.1 ---
    94-06-11 add disable=secs to disable hosts of jobs killed by SIGKILL
             handle shell quoted space in -r strings
    94-04-01 add per host access=(expression) to control access
             add per host bypass=(expression) to bypass min idle
             add uid, gid, day (monday:1,sunday:7), hour, min to expressions
             add periodic check for share/lib/cs/access for access control
             add grace=n for busy job grace running time
             add scale=n (default == # cpu) load average scale
             add migrate="command" to override default SIGSTOP for hogs
             add profile="command" to override default ". .profile"
    94-03-11 fix pseudo-float and elapsed-time constant operand conversions
             add static minidle to disambiguate from dynamic idle
             fix remote shellopen to work for csh users (there's still some left?)
    94-03-01 fix maxload to be pseudo-float
    93-10-11 add CO_OPT_ACK coexec() ack
             add maxload,percpu,perserver,peruser job limits
    93-03-11 reschedule jobs queued on hung shells
    92-11-11 minor fixes to handle `coshell -' on pipeline
    92-09-26 /dev/tcp/* supported as alternative to /dev/fdp/*
    92-04-01 --- release 1.0 ---
    92-02-29 fix COATTRIBUTES quote bug, handle aaa==bbb@ccc in expressions
    92-02-11 add `noattr' to delete misc attributes
    91-10-11 add COTEMP temp file base to job environment
    91-08-11 jobs queued for shell open now in job table
    91-07-17 add heterogenous pool support
             add % weight for additional cpus
             fix (type@xxx) expression evaluation
    91-03-11 fix handling of down hosts
    91-02-11 add string comparisons to attribute evaluation
             update for new message interface
    91-01-31 add -?
    90-12-11 if . has idle=0 then local bias entry is ignored
    90-11-11 local host not reported down if status missing
    90-10-11 . $ENV after .profile in $COINIT
             add -l <expr> to list hosts matching <expr>
             change CO_{attr,close,open} msgs to CO_server
             add load and up readonly attributes
    90-10-01 libx/cs -> libcs
    90-08-11 check auto=0 file attribute
             fix bug that dropped multiple SHELL job status messages
             arbitrary attributes and C-style attribute expressions supported
             ks <job> and kc <job> added to stop and continue jobs
             signals sent to remote shells use signal name rather than number
             add shell/job label attribute
    90-07-17 add auto=[01] attribute for automatic scheduling pool
             tune scheduling
             add server protocol check (narrows unix-domain socket panic window)
             catch SIGHUP to reconnect connect stream path
    90-07-11 bad rank shells dropped from pool
             more rank tuning
    90-06-01 --- release 0.0 ---
    
    RELEASE notes for src/cmd/cpp/RELEASE
    
    09-01-06 cpp.tst: add macro definition overwrite test
    09-01-05 cpp.tst: add another multiple include guard test
    08-10-31 cpp.tst: add #x and pp:nomultiple tests
    06-05-09 cpp.tst: add pp:externalize tests
             cpp.tst: add compatibility ul numeric qualifier tests
    06-01-11 cpp.tst: update pp:passthrough tests
    05-12-16 cpp.tst: add imake pp:passthrough comment splice test
    05-04-11 cpp.tst: add '"a" #s' catliteral + stringize
    04-10-01 cpp.tst: adjust for hidden line patch
    04-08-11 cpp.tst: adjust for ppproto.c patch
    03-12-12 cpp.tst: add empty macro actual tests
    03-11-25 cpp.tst: add -D-d test
    03-11-12 cpp.tst: add #if expression tests
    03-06-21 cpp.tst: add T_INVALID ? splice bug test
    03-05-19 cpp.tst: add stray SKIPMACRO test
    03-05-18 cpp.tst: add SYS_FUNCTION ungetchr() bug fix test
    03-04-30 cpp.tst: add pp:mapinclude tests
    02-11-07 cpp.c: exit() => return for lame linters
    02-10-10 cpp.tst: add does not end with `newline' tests
    02-05-24 cpp.tst: add TEST 15 pragma space canonicalization tests
    02-03-15 cpp.tst: add TEST 14 for libpp/ppproto.c memory fault fix
    01-10-20 cpp.tst: add pp:splicespace "..." tests
    01-06-01 cpp.tst: add -M* dependency generation tests
    01-02-14 cpp.tst: pp:pragmaexpand pp:catliteral # operator interactions
    01-02-05 cpp.tst: add (finally)
    96-01-31 --- release 2.0 ---
    92-04-01 update for new libpp
    92-04-01 --- release 1.1 ---
    90-10-11 update cpp.1
    88-06-08 update makefile to install Makeinstall.mk ALTPP.LINK links
    88-02-29 redo PP_INITDIR initialization
    87-10-11 update man page
    87-09-18 add ppop(PP_DONE) call
    87-04-24 recode for updated library interface
    87-04-03 add -D-Ttest to enable debugging test code
    87-04-02 add -I-Rfile for PP_READ
             move #include "ppdefault.h" to ppargs.c using PP_READ
             add -D-I[id] to name line sync directive ("line" if id omitted)
    87-03-31 change -Nfilename to -D-Ffilename
    87-03-30 add -D-Llanguage for PP_LANGUAGE,language
             add -D-H for PP_NOHOSTED
             add -I-H for PP_HOSTED
    87-03-24 --- release 1.0 ---
    
    RELEASE notes for src/cmd/cs/RELEASE
    
    10-06-01 sync with ast api 20100601
    06-10-11 add sfstropen()/sfstruse() error checks
    06-06-11 cs.c: switch to csclient()
    02-10-02 tst.c: tmform() => fmttime()
    01-01-01 vcs_src/*: drop old notices, fix signal handler prototype
    00-05-09 mbb: add (message bulletin board service)
    99-09-22 cs: update for CS_MNT_TAIL
    99-05-18 cs,css: long options
    98-05-01 css: add
    97-05-09 imount: add
    96-12-25 cs: fix -i eof logic
    96-02-29 nam protocol change
             add vcs+ifs beta
             drop getdomainname() call
             vcs: use ast equivalents for strstr ftruncate realpath
    95-12-08 add -r raw interactive mode
    95-07-17 add /trust=user when server not in PATH
    95-04-01 start this file
             fix cat server read bug CS_LINE -> CS_EXACT
    
    RELEASE notes for src/cmd/dss/RELEASE
    
    11-09-11 dss.c: its --map=file, not --map --- doh
    11-06-15 dss.c: document '< expr-file' '< file-list-file'
    10-05-21 dss.c: add SEE ALSO \bdss::dss\b(5P) (after libast::optget() fix)
    10-05-11 dss.c: drop --info=style in favor of generic --plugins=style
    10-05-04 dss.c: change -i,--info to -i,--info={man|html|nroff|usage}
    09-07-02 dss.c: fix EXAMPLES typo
    08-07-17 dss.c: tweak self-docs
    06-10-11 add sfstruse() error checks
    03-02-06 dss.c: convert main loop to dssrun()
    03-01-23 dss.c: update stamp to reflect library version 20030123
    03-01-15 dss.c: fix match docs for Cxmatch_t
    02-12-25 dss.c: fix default expression logic -- dsscomp() requires {...} at top
    02-12-24 dss.c: init checks now done by dssbeg()/dssend()
    02-12-17 propagate -ldss changes
    02-12-04 dss.c: dssopen() and method option check before main arg check
    02-12-01 dss.tst: move to method specific source dirs
    02-11-27 dss.c,dss.tst: change --format => --print, --type => --format
    02-11-22 dss.tst,Makefile: redo data file naming
    02-10-18 dss.c: handle DSS_NOOUTPUT after dssbeg()
    02-10-17 dss.c: drop ancient argv[0] method initialization
    02-10-09 dss.tst: add bgp-ipma and flat tests, rename test data files
    02-09-24 bgp.prt,netflow.prt: move to src/lib/libdss/dss-*.prt
    02-09-11 dss.c: add -n, query dssbeg() and dssend() calls, -c matched/total
    02-08-29 move pta to separate source directory
    02-08-11 update --method docs
    02-07-31 dss.c: optout() now handles usage string as well as text
    02-07-19 dss.tst: add text method =~ and !~ tests
    02-06-14 add Dssflags_t arg to dssfopen()
    02-05-29 standalone command source
    
    RELEASE notes for src/cmd/dsslib/RELEASE
    
    11-08-19 add DSS_BASE method flag to handle cx scoping
    02-11-22 */*.c: add unsigned => signed casts for msvc long long => double
    02-11-20 split support libs from libdss main source
             flat: add lazy field recognition
    
    RELEASE notes for src/cmd/dsslib/bgp/RELEASE
    
    12-06-14 bgp.c: document int mvpn.type == route type index
    12-06-13 bgp.c: add "bgp_t mvpn.key" for mvpn route key
    12-05-31 bgp.c: add bgp_t mvpn.<member> support
    12-02-20 bgp.c,bgplib.h: drop unused ip4toip6()
    11-09-11 bgp-mrt.c: fix debug trace offset when bgp messages skipped
    11-08-25 bgp-mrt.c: streamline BGP_best logic and drop Mrtpart_t
    11-08-25 bgp-mrt.c: drop state->v6 and use rp->afi
    11-08-24 bgp-mrt.c: fix MRT_ATTR_MP_REACH_NLRI => STATE_TABLE_DUMP_V2_RIB logic again
    11-08-23 bgp-mrt.c: fix as_path element counts to handle |{a,...}|==1
    11-08-21 bgp-mrt.c: fix "old bgp" vs "new bgp" AS16 vs AS32 logic
    11-08-19 bgp-mrt.c: (dss->test&0x0010) enables payload trace
    11-08-15 bgp-mrt-anonymize.c: first release
    11-08-12 bgp-mrt.c: change most integer indices to macros for readability/debugging
    11-08-11 bgp-mrt.c: first hack at mcast_vpn_*
    11-08-09 bgp-mrt.c: fix typo TABLE_DUMP_V2 bug that set addr instead of src_addr
    11-08-08 bgp-mrt.c: fix TABLE_DUMP.TABLE_IPV6_UNICAST
    11-06-21 bgp-mrt.c: first hack at STATE_TABLE_DUMP_V2_RIB_GENERIC
    11-04-22 bgp-mrt.c: fix bug that didn't set mp announce type
    11-03-31 bgp-mrt.c: retain BGP_TYPE_table_dump for pseudo-announce
    11-03-30 bgp-mrt.c: fix AS_SET allocation logic for AS16 and AS32
    11-03-30 bgp.c: afi/safi default is 1/1
    11-03-29 bgp.c: change "mime" doc refs to the more precise "base64"
    11-03-28 bgp.c: change bgp.originator type from number to ipv4addr_t
    11-03-15 bgp-mrt.c: fix nlri pointer initialization bug
    10-05-25 bgp-mrt.c: mark record type BGP4MP_ET==17 implemented -- doh
    10-02-02 bgp.c,bgp-mrt.c: handle rfc3107
    09-09-28 dss.tst: adjust for ip_t/fv.c fix
    09-03-19 bgp-mrt.c: fix DUMP_V2 ipv6 => as32
    09-03-11 bgp-mrt.c: handle TABLE_DUMP_V2 <13> records
    08-11-13 bgp-mrt.c: handle undocumented BGP4MP <16,20> records
    08-11-12 bgp-mrt.c: forgot to set rp->afi!
    08-08-28 bgp-mrt.c: add afi=1/safi=128 nlri
    08-08-28 bgp.c: add { afi label rd_admin rd_number rd_type }
    08-08-11 bgp.c,bgp-mrt.c: add extended community support
    08-07-16 bgp-mrt.c: fix MP_UNREACH_NLRI parse bug
    08-06-24 bgp-mrt.c: handle ipv6 extensions
    08-01-15 bgp.c,bgp-cisco.c: add { BGP_rib_failure BGP_stale }
    07-12-13 bgp-mrt.c: unknown format: <hex-flag>:<dec-type>:<dec-size>:<mime-encoded-data>;
    07-12-06 bgp.c: add { agg_addr32 agg_as32 path32 path32_len unknown }
    07-09-12 bgp-ipma.c,bgp-mrt.c: <(~0),1> is the value (~0), not a group marker
    07-09-06 dss.tst: add message group and dss {return} tests
    07-09-05 bgp.c: add MESSAGE group bit and message index
    07-08-08 data/bgp.map,bgp-map.dss: add atomic map { NAG AG }
    06-01-25 bgp.h: move to dsslib/ip_t/
    05-03-08 lib.c: add for dssstatic()
    03-04-15 bgp-mrt.c: fix mrt as path segment bug that ignored all but the first!
             dss.tst: add TEST 02 as path segment on rrc08 updates.20030403.2200
             dss.tst: add TEST 10 to check expression signed/unsigned boundaries
    03-02-24 bgp.h: add record size field to account for variable data
    03-02-19 bgp.c: add { cluster_len community_len path_len }
    03-02-11 bgp-mrt.c: change swapget(0,p,n) to BEn() -- 30 sec down to 24 -- wow
    03-01-24 bgp.c: move { as_t aspath_t cluster_t community_t } to the ip_t lib
    03-01-22 bgp.c: add path,community,cluster internalf; DEBUG for buffer debug
    03-01-16 bgp.c: convert to Cxmatch_t
    03-01-15 ire.c,ire.h: replace bgpre.c with general integer list re's
    03-01-13 bgp-mrt.c,dss.tst: fix path attribute parse bug
    03-01-06 bgp.h,bgp-mrt.c: handle all packet types
    03-01-03 bgp-ipma.c,bgp-cisco.c: fix junk skip logic
    02-12-17 propagate -ldss changes
    02-12-01 move bgp specific tests and data to this dir
    
    RELEASE notes for src/cmd/dsslib/fix/RELEASE
    
    03-02-11 Vmbest => Vmlast
    03-01-30 add --stamp=date/version-stamp
    03-01-29 first release
    
    RELEASE notes for src/cmd/dsslib/flat/RELEASE
    
    10-11-12 flat.c: eliminate strict-aliasing puns
    08-08-30 flat.c: work around macos cc struct copy bug
    07-06-05 flat.c: <COUNT>*</> => <COUNT>0</> => 0 or more
    07-01-17 flat.c: don't sfsetbuf() on an active stream!
    06-10-11 flat.c: add sfstruse() error checks
    05-09-16 flat.c: fix <QUOTEALL> q=-1 vs. \xff data bug
    05-05-09 flat.c: literal quote is "" inside "..." for quote+noescape
             flat.c: add <QUOTEALL>
    05-04-18 flat.c: fix escape quote delimiter terminator interactions
    05-04-12 flat.c: fix <WIDTH>constant</> with <WIDTH>variable</>
    05-03-08 lib.c: add for dssstatic()
    04-10-20 flat.c: verify variable field width against maximum width
    04-08-20 flat.c: handle <HEADER><PATTERN> <DELIMITER><MULTIPLE>
    04-06-06 flat.c: flat->record trumps flat->variable
    04-05-31 flat.c: handle mixed fixed/variabled fields
    04-05-27 flat.c: add --emptyspace for empty field value => space
    04-05-26 flat.c: handle <RECORD><FIXED>n</></>
    04-05-25 flat.c: handle fixed width (sort of) flat records with terminator
    04-05-11 flat.c: add header option to generate dynamic query header
    04-05-09 flat.c: handle nested structures with/without non-member value
             flat.c: fix convert ccmap() logic
    03-10-09 flat.c: fix ambiguous key checks
    03-09-23 flat.c: add <PHYSICAL><KEY>{<SPAN>,<ID1>,<ID2>} for maillennium
    03-09-22 flat.c: speed up ccode conversion in flatget()
    03-09-19 flat.c: handle nested <FIELD> structs
    03-08-11 flat.c: add <PRINT>, <KEY>
    03-08-08 flat.c: fix unknown type message; add <BLOCK> and <RECORD>
    03-05-24 flat.c: drop Attribute_t table and use cxattr()
    03-02-11 flat.c: Vmbest => Vmlast
    03-01-29 flat.c: fix binary and buffer output for struct option
    03-01-28 flat.c: update for Cxvariable_t.Cxreference_t
    03-01-23 flat.c: update for void* => Dssrecord_t*
    03-01-21 flat.c: move fundamental type internalf/externalf to libdss
    02-12-24 flat.c: use cxstring() instead of base search
    02-12-18 flat.c: flat convert query working
    02-12-17 propagate -ldss changes
    02-12-05 flat.c: fall back to map on invalid numeric fields
    02-12-04 flat.c: fix convert bug that applied map when not needed
    02-12-03 flat.c: fix void_external() to zero out all bytes
    02-11-28 flat.c: fix non-global swap checks
    02-11-27 flat.c: add [no]binary option
    02-11-25 flat.c: add header and magic support
    02-11-22 flat.c: initial convert implementation
    
    RELEASE notes for src/cmd/dsslib/ip_t/RELEASE
    
    12-06-13 bgp.h: add BGP_key for mvpn route key
    12-05-15 bgp.h: change BGP_PMSI_* to BGP_pmsi
    12-02-24 *sa.omk: clean up standalone old make makefiles
    12-02-24 README-*: bring standalone READMEs up to date
    11-10-06 testiv.c: add { -ip4 -ip6 } options
    11-10-06 ivstr.c,ivfmt.c: add for iv addr size 1..255
    11-10-06 iv-nested.c: fix bug that called nested freef on internal flat intervals
    11-08-11 bgp.h: add mcast vpn definitions
    11-03-02 bgp.h: add packet time usec part
    11-01-21 testiv.c: change to store hop prefix&name in segment data
    10-02-02 bgp.h: add rfc3107 BGP_labels
    10-02-02 ip_t.c: add labels_t -- pairs of 32 bit integers
    09-09-28 fv.c: fix off-by-one bug in fvplo() and fvphi()
    09-09-28 ptfmin.c,ptvmax.c: call fvplo() and fpvhi()
    09-07-28 fv.h,fv.c: add fvplo(), fvphi()
    09-03-19 ip_t.c,itlie.h: elide leading 0.* for 2-tuple external conversion
    09-03-15 pt[v].h,pt[v]open.c: add Pt[v]prefix_t.data, pt[v]insert() returns new prefix
    09-03-15 itlie.h: handle as set marker in last element
    08-08-11 bgp.h,ip_t.c: add extended community type support
    08-07-31 ptvopen.c: fix ptvinsert() interval bug
    08-07-25 ip_t.c: add { %(prefix:C)s %(addr:C)s } for 0x%02x comma-separated value
    08-06-11 add { fv ptv } for ipv6
    08-01-15 bgp.h: add { BGP_rib_failure BGP_stale }
    07-12-06 ip_t.c: add as32 support
    07-12-06 ire,itl: add dots arg for dotted representation
    07-10-25 ptrebit.c: add
    07-09-12 itlie.h: <(~0),1> is the value (~0), not a group marker
    07-09-05 ip_t.c: handle ("1.2.3.4/5" =~ prefix)
    06-10-11 itlie.h: add sfstruse() error checks
    06-01-24 bgp.h: bring over from dsslib/bgp.h
    05-03-08 lib.c: add for dssstatic()
    03-05-21 itlie.h: fix aspath_t external
    03-04-15 itlie.h: fix external() bug that did not re-initialize the separator
    03-02-18 itlie.h: change details to format char and separator string
    03-02-11 ire.c: Vmbest => Vmlast
    03-02-07 ip_t.c: add Cxformat_t.print width hints
    03-01-28 ip_t.c: update for Cxtype_t.Cxmember_t
    03-01-24 ip_t.c: move { as_t aspath_t cluster_t community_t } from bgp
    03-01-20 ip_t.c: fix match message
    03-01-16 ip_t.c: convert to Cxmatch_t
    03-01-15 ip_t.c: prefix matching via =~ and !~ only
    02-12-17 propagate -ldss changes
    02-11-27 ip_t.c: fix Cxunsigned_t/Cxinteger_t casts for lame long double cc
    02-11-22 ip_t.c: don't assume the "bgp" method -- duh
    
    RELEASE notes for src/cmd/dsslib/lookup/RELEASE
    
    10-04-20 first release
    
    RELEASE notes for src/cmd/dsslib/merge/RELEASE
    
    03-02-14 first release
    
    RELEASE notes for src/cmd/dsslib/netflow/RELEASE
    
    08-09-02 netflow.c,flowlib.h: add ipv6 support
    05-06-15 netflow.c: add default {print} format
    04-04-01 data/netflow-sample.dss: append 3 fields
    03-07-24 netflow.c: add sentinel to fields[]
             flowlib.h: hide flow_tool_format
    03-06-04 flow-tool.c: change u_int* typedefs to macros to avoid ibm.risc clash
    03-05-16 flow-tool.c: add flow-tools formats
    03-04-05 netflow-map.dss,ip.map: add
             dss.tst: add netflow-map tests
    03-01-23 update for void* => Dssrecord_t*
    03-01-21 add cxlocation() to errorf messages
    
    RELEASE notes for src/cmd/dsslib/num_t/RELEASE
    
    11-02-02 num_t.c: pow10 => pow_10 to avoid <math.h> clash
    
    RELEASE notes for src/cmd/dsslib/opaque/RELEASE
    
    03-01-23 update for void* => Dssrecord_t*
    03-01-21 add cxlocation() to errorf messages
    
    RELEASE notes for src/cmd/dsslib/sort/RELEASE
    
    11-10-18 first release
    
    RELEASE notes for src/cmd/dsslib/stats/RELEASE
    
    11-09-11 fix %(GROUP)s for the OVERFLOW total
    03-05-05 fix --print OVERFLOW key lookup to return 0/nil value
    03-04-05 avoid possible floating point underflow/overflow
    03-02-19 add `-' field operand to just count records or groups
    03-02-11 add --print=format; Vmbest => Vmlast
    03-02-07 add --count; check variable/type print width hint; allow width overflow
    03-01-24 use cxcast() for group value pretty print
    03-01-08 fix bucket alloc size
    02-12-25 first release
    
    RELEASE notes for src/cmd/dsslib/tests/RELEASE
    
    03-09-22 first release
    
    RELEASE notes for src/cmd/dsslib/text/RELEASE
    
    02-12-17 propagate -ldss changes
    02-11-01 a rudimentary alternative to the flat method
    
    RELEASE notes for src/cmd/dsslib/time_t/RELEASE
    
    09-01-30 handle TMX_FLOAT (mvs.390)
    08-08-22 fix time_t => Time_t typo
    08-08-11 update timestamp_t logic to tmx*()
    
    RELEASE notes for src/cmd/dsslib/validate/RELEASE
    
    03-04-05 avoid possible floating point underflow/overflow
    03-02-11 Vmbest => Vmlast
    03-01-27 keep per field dict of all invalid values for summary
    03-01-26 add unknown map value dictionary
    03-01-21 add cxlocation() to errorf messages
    03-01-11 first release
    
    RELEASE notes for src/cmd/dsslib/xml/RELEASE
    
    10-04-22 fix jsonident(), xmlread(), jsonread(), xmlwrite(), jsonwrite()
    10-04-21 handle json [...,...] array values
    10-04-20 json working
    10-04-12 first release
    
    RELEASE notes for src/cmd/html/RELEASE
    
    12-02-29 mm2html: fix so stack bug that popped one too many
    12-01-11 mm2html: fix \*(Rf to use <SUP>...</SUP>
    12-01-01 htmlrefs: add <SCRIPT src=...> to include list
    11-12-30 mm2html: add .xx faq
    11-09-11 mm2html: add .H n "title" link="href"
    11-08-06 mm2html: use optget() style for .SH and .TP
    11-04-18 htmlrefs: don't symlink .html for --copy (doh)
    10-09-07 use += to append to compond values
    10-06-01 sync with ast api 20100601
    10-05-28 mm2*.sh: use --???MAN=nx for man section titles
    10-04-11 mm2html.sh: headings now internal anchors by default
    10-01-31 mm2html.sh: handle bsd mandoc
    10-01-25 mm2html.sh: handle optget --nroff { .H[01234] .OP }
    10-01-15 mm2html.sh: handle <name>(<number><chars>) references
    09-09-17 mm2bb.sh: .sn now uses expand(1) instead of cat(1)
    09-07-01 mm2html.sh: --frame=foo for man generates side content frame
    09-07-01 mm2html.sh: add redirection hackery to insert html.labels
    09-06-30 mm2html.sh: increase heading level for -o html.labels
    09-05-08 mm2twiki.sh: add for mm => twiki markups
    07-12-11 mm2bb.sh: fix bb list and fill logic, add long name \n[CC...]
    07-12-11 mm2html.sh: add long name \n[CC...]
    07-08-11 mm2bb.sh: --texish for tex style bb markups
    07-04-20 mm2bb.sh: add for mm => bb markups
    07-02-09 mm2html.sh: expand \*(.. rather than escape to \\(*..
    06-10-31 mm2html: fix tager=_top omission bug
    06-10-11 add sfstruse() error checks
    06-05-03 htmlrefs.c: add COPY to avoid e.g. cgi symlinks
    05-10-15 mm2html.sh: add BP name=value parameters
    05-10-10 mm2html.sh: add .CE, .BP *.@(gif|png) ... => <IMG...>
    05-02-22 htmlrefs.c: rel=internal ignored if --external
    05-02-14 mm2html.sh: add .xx linkframe="" for no target=_top
    05-02-01 mm2html.sh: IFS may be unset!
    05-01-11 mm2html.sh: add --top
    04-12-22 mm2html.sh: fix .xx link unverified rm
    04-08-01 htmlrefs.c: symlink only if different mtime
    04-06-18 htmlrefs.c: add -S,--symlink to symlink() rather than copy
    04-04-26 troff2html: handle .ta
    04-04-04 mm2html: .xx link|text separated by tab for table entry urls
    04-02-29 mm2html: .TS box => void lines
    03-08-11 mm2html: handle man .TH args>2
    03-03-25 mm2html: table border size '' => 0
    03-02-06 troff2html.c: fmtquote() FMT_ALWAYS update
    02-10-24 mm2html: viewgraph link target is _top too
    02-10-15 mm2html: ident footer is now a TABLE instead of a DIV
    02-08-30 mm2html: .AL with no args is equivalent to .NL
    02-08-26 mm2html: fix .VL mark indent logic
    02-08-19 mm2html: ignore .fp
    02-06-09 mm2html: expand mailto address pattern match
    02-05-31 mm2html: check .vG arg count before shift
             mm2html: \e => &#0092;
    02-03-17 mm2html: add .SG no-op
             mm2html: check .EX figure# label args
             mm2html: add .so/.sn dir search to .BP
    02-03-15 mm2html: add LC_NUMERIC=C for floating point constants
    02-02-14 mm2html: shorten indentation
    02-01-16 mm2html: handle .so and .xx in getline
             mm2html: .sn and .so look in dir of including file
    01-10-20 htmlrefs: fix <!--INTERNAL--> filter delete detection, GLOB_AUGMENTED
    01-05-09 mm2html: ignore a few more requests
    01-05-04 mm2html: more tbl adjustments from Bruce Lilly
    01-05-02 mm2html: tweak tbl column spacing, handle .TH [N]
    01-05-01 mm2html: tbl fixes
    01-04-27 mm2html: fix .SH,.SH indentation; ignore { .nh .hc .hy }
    01-03-22 mm2html,troff2html: ignore { .hw .lw }
    01-03-01 troff2html: fix bug that treated \*(]? as \*]?
    01-02-28 troff2html: add \n(YR and fix macros for y2k -- oops
    01-01-31 htmlrefs: fix nul char bug in <!--INTERNAL--> filter
    01-01-01 mm2html: fix incorrect \h'... #local refs
             mm2html: append <!--LABELS-->...<!--/LABELS--> for second pass
             mm2html: add .xx [no]index to inhibit or restart index labels
             mm2html: add .xx noFOO, .xx [no]index
             mm2html: .xx begin|end before <BODY> gets copied to <HEAD>
             mm2html: identification trailer aligned right
             htmlrefs: <!--INTERNAL--> in index.html <HEAD> skips file/dir
    00-12-14 mm2html: fix tbl colspan
    00-12-12 mm2html: ignore bgcolor for table with no box
    00-12-07 download: .tar.gz => .tgz
             htmlrefs: add --delete
    00-12-05 mm2html: add .PM
             mm2html: <id@id.id...> => mailto:
    00-11-27 mm2html: --frame is now 1 level instead of 2; no *-body and *-head
             mm2html: add .IS ... .IE indentation
             mm2html: .LR foo (1) generates man link
             htmlrefs: add https support
    00-10-31 htmlrefs: remove if internal filter leaves <= 1 line
    00-05-25 mm2html: add viewgraph outline and navigation
    00-05-11 mm2html: add .vG viewgraph macros
    00-03-04 htmlrefs: add <LINK rel=dynamic>
    00-02-14 htmlrefs: add .htaccess and <LINK> checks
             mm2html: add .xx ref=...
             mm2html: use "..." tag attribute quote instead of '...'
             mm2html: .BL => <UL> square circle disc
    00-02-03 mm2html: fix -o nohtml.ident
    00-01-20 mm2html: fix -o quoted arg parse
             htmlrefs: add --perlwarn for embedded perl constructs
    99-08-11 mm2html,troff2html: add .xx begin=x end=x
             mm2html: handle simple .TS ... .TE; room for improvement
             mm2html: fix <TABLE><TR>...</TR></TABLE> nesting
             mm2html: add SEE ALSO hot links
             mm2html: hot link man name not (section)
    99-05-17 download,html2db,mm2html: long options
    99-05-13 html2rtf: long options
    99-04-01 fix .xx link
             long options, macro search bug fix
    99-01-01 html2rtf: fix </LI> with no <LI> core dump
    98-04-01 add company corporation location meta.* organization
    97-05-09 info tollbar=path for junk before </BODY>
    97-05-01 \h'0...' for hyperlinks
    97-04-01 first release
    
    RELEASE notes for src/cmd/ie/RELEASE
    
    05-02-01 ie.sh: IFS may be unset and { ash bsh } don't on startup -- wow
    04-07-26 ie.sh: update runtime docs
    04-07-23 Makefile: link with static ast libraries
    04-02-29 history.c: use pathtemp() instead of mktemp()
    01-04-25 vi.c: handle implementations with VEOL but not VEOL2
    00-02-14 ie: ie.sh script replaces ie fun
             ie: convert configure/* => features(ielib|options.sh)
    99-11-19 Makefile: fix sh_config.h for 2d -- eventually should use iffe
    98-03-11 workaraound for sgi dllnext() botches
    98-02-02 initial release snarfed from ksh88i source
    
    RELEASE notes for src/cmd/jcl/RELEASE
    
    07-12-07 jcl.rt: add prefix '/' delimiter tests
    07-06-06 JCL.mk: add USR1 USR2 interrupt handlers
    07-02-20 cpy2dss.c: handle POINTER, ignore IS
    06-11-11 jcl.c: fix map vs name=value arg precedence
    06-11-11 JCL.mk: export JCL_AUTO_* instead of via command line
    06-10-11 add sfstruse() error checks
    06-08-15 jcm.mk: add --index=n
    06-08-11 JCL.mk: add JCLGROUP for shared coshell
    06-08-08 JCL.mk: parameterize to JCLROOT=$(PACKAGEROOT)
    06-08-03 jcm.c: fix group base prereq
    06-07-31 JCL.mk: parameterize event db path
    06-06-21 jcm.c,JCL.mk: .EVENT.WAIT and .EVENT.RAISE update
    06-06-11 jcm.c: .EVENT.GET => .EVENT.WAIT, .EVENT.SET => .EVENT.RAISE
    06-05-25 cpy2dss.c: handle PIC -9(3).9(2)
    06-05-22 jcm.c,JCL.mk: add .EVENT.GET .EVENT.SET
    06-05-18 jcl.c: exit code cleanup
    06-05-17 jcl.c: update docs
    06-05-16 jcm.c: add job.base and user 'O' for job.name if specified
    05-09-22 jcm.c: add --initialize=file, handle 'T' card prescan
             jcm.rt: add tests
    05-09-15 cpy2dss.c: ebcdic-m (mvs) now the default
    05-09-12 jcm.c: ~PX0000 => $(JCL_AUTO_PX)0000
    05-08-31 jcl.rt,JCL.mk: add
    05-08-29 jcm.c: add JCL_AUTO prefix to makefile jcl action vars
             jcl.c: add -O, --odate, -R, --rdate, -S, --date
    05-05-31 cpy2dss.c: add typename()
    05-05-09 cpy2dss.c: add <QUOTEALL>
    05-04-18 cpy2dss.c: add --escape, --quote-begin, --quote-end
    05-04-11 cpy2dss.c: handle accumulated fields > fixed record size
             cpy2dss.c: handle --sized --text --variable
    05-02-14 jcl.c: add --import env var precedence over --map definitions
    04-12-23 cpy2dss.c: mark structs and struct arrays for --offsets
    04-12-21 cpy2dss.c: add type field to --offsets
    04-10-31 jcl.tst: add JCL_DD_ALIAS tests
             jcl.c: add -r,--resolve to resolve/map path operands
    04-10-20 cpy2dss.c: add -C,--comp=from:to
    04-09-27 cpy2dss.c: fix OCCURS and structure offsets, add -k,--keep
    04-09-21 jcl.c: add -s,--subdir
    04-09-20 jcl.tst: handle "export JCL_AUTO_JOB=job" change
    04-09-15 jcl.c: fix optset() to honor jcl->roflags
             jcl.tst: add * prefix match tests
    04-08-24 cpy2dss.c: handle REDEFINES => <UNION>, add --offsets
    04-08-06 split cmd/jcl => lib/libjcl + cmd/jcl
    04-06-18 jcl.c: JCL_LISTDATA => JCL_LISTINPUTS|JCL_LISTOUTPUTS
             jcl.c: --list=dd => --list=inputs or --list=outputs
             cpy2dss.c: add --bytemask
    04-06-09 jcl.c: default JCL_MAPFILE is now optional
    04-05-31 cpy2dss.c: fix structure pop logic, add --sized
    04-05-20 cpy2dss.c: fix --variable to *also* emit <VARIABLE>1</>
    04-05-19 cpy2dss.c: fix --variable to emit terminator and width
    04-05-14 cpy2dss.c: add --terminator=char and --variable
    04-05-06 cpy2dss.c: handle nested structs and out of sync level indices
    04-05-04 cpy2dss.c: promote from test area
    04-02-29 jcl.tst: add empty PARM test
    03-11-14 jcm.c: add from control-m experiments
    03-10-20 --map=prefix by default, --map=- to disable
             --map file now a sequence of ops: "map" and "set" for now
    03-10-15 add --map=prefix-map
    03-10-10 more tests
    03-10-08 reliable -x output with regression tests
    03-10-01 first code
    
    RELEASE notes for src/cmd/ksh93/RELEASE
    
    12-08-01  --- Release ksh93u+ ---
    12-08-01  A bug that ignored interrupts for some builtins (e.g. cmdtst::grep)
              that read from stdin has been fixed.
    12-08-01  A bug that interpreted "cd .foo" as "cd foo" has been fixed.
    12-07-30  Added automatic restart for EINTR for ioctl, tcgetattr, and tcsetattr.
    12-07-23  A scoping error with namrefs to compound associative arrays has
              been fixed.
    12-07-20  A bug where builtin -d /path/foo deleted foo has been fixed.
    12-07-18  A bug in which /dev/stdout did not work in command substitution on
              some systems has been fixed.
    12-07-17  A bug in which the restricted option set in a subshell prevented
              some variables from getting restored when the subshell completed
              has been fixed.
    12-07-09  A bug in which the directory is not restored after a subshell changes
              the name of the directory for subshells executed in the same process
              has been fixed.
    12-07-09  A bug in which file descriptors created with {n}< file were not being
              closed has been fixed.
    12-07-09  The 12-04-04 fix for cd .. was not correct causing cd /etc;cd .. to
              remain in /etc.  This has been fixed.
    12-07-02  A bug in which builtin name did now work for builtins found in a
              library added by builtin -f lib has been fixed.
    12-07-02  A bug in the edit modes which <tab> after a directory did not refresh
              the input line has been fixed.
    12-07-02  A bug in which an exit status > 256 corresponding to a signal was
              not returned by a function to indicate a signal exit has been fixed.
    12-06-28  Fix ulimit -a to list (Kibytes) instead of (kbytes).
    12-06-27  Fix unitialized data reference for <CR> as first char in --vi mode.
    12-06-26  The formatting of printf "%q" for multibyte locales has changed to
              output using \u[xxx] format for valid wide characters.
    12-06-25  The size limit for read -N and read -n has been raised to INT_MAX.
    12-06-22  A bug in which an exit trap set in a subshell might not be triggered
              when the last command was a simple executable has been fixed.
    12-06-22  A bug which could cause the shell to hang when a coprocess exits
              while a command inside a command substitution is reading from it has
              been fixed.
    12-06-21 +ksh new accepts for commands of the form for i; <nl> do;...;done
    12-06-19  Tab completion after a / when there is only one match not completes
              with that match rather than generating a menu of matches.
    12-06-19  A bug in which patterns containing {...} where not processed
              correctly inside ${var/pattern/string} has been fixed.
    12-06-18  Code modified to eliminate fts_notify variable.
    12-06-15  Change the .paths plugin/builtin library variable name from
              BUILTIN_LIB to PLUGIN_LIB to prevent new plugin_version() aware
              -lcmd from causing older non-plugin_version() aware ksh to dump core.
    12-06-14  builtin without argument no longer lists .sh.tilde as a built-in.
    12-06-12  For assignments if the form x=(foo bar), foo is only check for an
              alias if it is float, integer, compound, or nameref.
    12-06-12 +The shell supports 64 bit i-nodes even for 32 bit binaries.
    12-06-11  A bug wth >; redirection systems for which vfork() was the same a
              fork() has been fixed.
    12-06-11  A bug in path lookup that ignored buffer boundaries has been fixed.
    12-06-08  typeset -a var and typeset -A var, first unset var when var is
              a compound variable.
    12-06-08  A bug in which running shcomp on a program containg namespace
              could core dump has been fixed.
    12-06-06  A bug in which unset of an associative array of compound variables
              did not completely unset the variable has been fixed.
    12-06-06  A bug in which exporting left or right justfied fields could loose
              the field width has been fixed.
    12-06-06  A bug on Solaris11 in which >; did not work for /dev/null was fixed.
    12-06-05  A race condition which occured when stopping a builtin command
              invoked from a subshell has been fixed.
    12-06-05  A bug with appending elements to an empty indexed array has been
              fixed.
    12-06-04  A bug in which continuing a stopped builtin could cause it to
              terminate has been fixed.
    12-06-04  By default, builtins added at runtime will restore the current
              directory if they are killed or stopped.
    12-06-04  A bug in handling \\ in read has been fixed.
    12-05-31  Use getrlimit64/setrlimit64 on systems that support it.
    12-05-31  Fix 64 bit big-endian arithmentic bug that mishandled nan and inf.
    12-05-31  Handle ECONNRESET like EPIPE.
    12-05-31  Change .paths parse to use only the last BUILTIN_LIB from the top
              and treat BUILTIN_LIB value as a ':' separated list of lib names.
    12-05-29  Fix BUILTIN_LIB binding bug that ignored subsequent lookups.
    12-05-29  shtests: --nocompile omits the compile test and --compile does only
              the compile test.
    12-05-25  A command subsitution containing a here-document that itself contains
              a here-document no longer hangs.
    12-05-24  When the redirection operatory >; is directed to a symlink, it now
              overwrites the file named by the link rather than the link.
    12-05-21 +Added printf formats %(type)q where type can be html, url, pattern,
              ere, or csv.
    12-05-18  A bug with appending elements to an indexed array has been fixed.
    12-05-18  The exit status from getopts --man interactively was 0 instead of 2
              and has been fixed.
    12-05-18  Another bug with SHOPT_EDPREDICT which could cause a core dump has
              been fixed.
    12-05-17  A bug with fixed size arrays which could cause a core dump has been
              fixed.
    12-05-17  A bug in which the here-document <<< $(<file) was not processed
              correctly has been fixed.
    12-05-15  The default value for -L, -R, and -Z when the size was not set was
              incorrectly defaulting to 1 and has been fixed.
    12-05-15  A bug in which a subshell of the form (name=value exec ...) could
              coredump when name is an environment variable and xtrace is on has
              been fixed.
    12-05-15  Fixed a .paths bug in which only the first BUILTIN_LIB assignment worked.
    12-05-14  Arithmetic expressions and subexpressions that are not floating point
              now treat -0 as 0, so that $((-0)) is 0 and $((-0.0)) is -0.
    12-05-11  'unset .sh' now fails with readonly message instead of coredump.
    12-05-11  A bug which left an associative array arr containing one element in
              the wrong state after expanding with ${arr[@]} has been fixed.
    12-05-10  A bug in which typeset -f did not display options that called getopts
              has been fixed.
    12-05-08  Fixed a number of potential bugs uncovered by valgrind.
    12-05-08  A bug in which typeset -b -Z10 var did not initialize var to the
              empty string has been fixed.
    12-05-07  A bug in which the exit value of an interactive shell could be
              affected by the evaluation of the PS1 prompt has been fixed.
    12-05-04  A bug in which x=() was not unsetting the old value of x before
              creating an empty compound variable has been fixed.
    12-05-01  A bug in vi edit mode in which after <ESC>^V, the terminal was not
              restored to insert mode after a character is entered has been fixed.
    12-04-27  A bug in which old attributes were not cleared when assigning a
              value using typeset has been fixed.
    12-04-26 +Enabled multiline editing by default.  set +o multiline can disable.
    12-04-25  The 12-04-17 PATH fix created a new bug which was fixed.
    12-04-25  Fixed a big memory leak problem in which unsetting compound variables
              did not free all the space.
    12-04-25  A bug in which test ! ! ! was treated as an error has been fixed.
    12-04-24  A bug with print -v for a compound variable that contained fixed
              arrays which prevented the output from being used again as input
              has been fixed.
    12-04-23 +kill provides the STKFLT signal on systems that support it.
    12-04-23 +The -L option was added to kill.  The -L option is the same as -l
              except that without arguments the output format is in the form of
              a select menu.
    12-04-23  A bug in which the exit status for an interactive shell was always
              0 has been fixed.
    12-04-20  Entering blank lines interactively no longer resets the exit status.
    12-04-18  A bug in file completion in which the second tab completion on a file
              would list the completion rather than inserting the completion has
              been fixed.
    12-04-18  A bug in which "${arr[@]:i:j}" and "${@:i:j}" generated the empty
              string when i was a valid subscript and j was <=0 rather than
              generating nothing has been fixed.
    12-04-17  A bug in which read -d delim from a terminal did not respond to
              interrupt and did not termrinate when the delimiter was entered
              has been fixed.
    12-04-17  A bug in which a directory in PATH containing a .paths file that
              contains a line with FPATH=dir, where dir does not exist could
              cause the path search to fail has been fixed.
    12-04-16  A bug in which $(trap -p) did not display traps such as ERR and
              DEBUG that are not associated with signals has been fixed.
    12-04-11  A bug in which unsetting a variable did not unset attributes when
              the variable did not have a value has been fixed.
    12-04-11  A bug in which read -A for an array whose index is an enumeration
              type, lost the enumeration type has been fixed.
    12-04-10  Shared libraries loaded from a library named by a BUILTIN_LIB= found
              in a .paths file found in a directory on PATH now add builtins that
              are associated with the directory in PATH containing the .paths file.
    12-04-09  Increased I/O buffer sizes for better performance.
    12-04-09  A bug in which the leading 0 was stripped from $x, when $x contained
              a heximadecimal constant inside an arithmetic expression inside
              a for or while loop.
    12-04-06  Modified namespaces to hand variabes FPATH, PATH, and OPTIND that
              are defined in name spaces appropriately.  This also fixed OPTIND
              and OPTARG processing for functions.
    12-04-04  A bug in which cd .. fails when the current directory has been
              renamed has been fixed.
    12-04-02  Made some namespace changes and added a regression test.
    12-03-30  A bug with namespaces in which PATH and FPATH set in a namespace was
              not restored when leaving the namespace has been fixed.
    12-03-29  A bug in which appending an index array onto an array without elements
              caused the first element to be 1 rather than 0 has been fixed.
    12-03-29  A bug which could cause a core dump when copying a large index array
              has been fixed.
    12-03-28  The shell now generates an error message when the sizes with L, Z, and
              R are > 32767 on 32 bit binaries instead of generating a core dump.
    12-03-28  A bug in left and right justification in which the width of invalid
              characters was not taken as zero has been fixed.
    12-03-26  A bug in which typeset -p ref, when ref is a reference to an index
              array element did not display the subscript has been fixed.
    12-03-23  A bug in lowercase and uppercase fields when expanding ${name:=val}
              when name is the empty string has been fixed.
    12-03-22  A namespace bug in which a type t defined in namespace foo could not
              be referenced outside the namespace as .foo.t has been fixed.
    12-03-22  A bug in name reference scoping in which a name function called from
              another function is pass a name reference to a compound variable
              instance to be created and the compound variable is in the global
              scope.
    12-03-22  A bug in which ${ref[@}} did not behave like ${arr[i][@]} when
              ref is a name reference to arr[i] has been fixed.
    12-03-21  A bug in which assigning a compound variable into arr[i], where
              arr[i] is an array variable did not work correctly has been fixed.
    12-03-21  A bug with multi-dimenstional index arrays in which ${arr[i][j]}
              could generate a bogus error message when i was > 9 has been fixed.
    12-03-21  A bug in which typeset v=foo, typeset -p v[0] generated a core dump
              has been fixed.
    12-03-20  A bug in vi edit mode in which the sequence bar<ESC>0i<ESC>l left the
              cursor on the b rather than the a has been fixed.
    12-03-20  A bug which caused a core dump when defining a type with a field
              as ' integer -a data=([0]=0)' has been fixed.
    12-03-19  Using typeset -a array when array is an associative arry not
              generated an error message.
    12-03-19  typeset +a, typeset +A, and typeset +C not displays the variables
              with the attributes a, A, and C respectively instead of an error.
    12-03-19  A bug in which typeset -pC, typeset -pa, and typeset -pA output all
              variables rather than those of type C, a, or A only has been fixed.
    12-03-18  A bug in which unset foo where foo is a name reference to a compound
              variable defined inside a function is not unset has been fixed.
    12-03-18  A bug with SHOPT_EDPREDICT which could cause a core dump when the
              list of matches became empty has been fixed.
    12-03-15  The assignment, typeset -C foo=(a b c) now generates a syntax
              error since a is not an assignment command.
    12-03-16  A bug in which an unset discipline from a variable defined in a
              subshell is not invoked in the subshell has been fixed.
    12-03-08  The assignment typeset -a (x=1 y=2) now creates an index array
              of two elements rathern than an array of one element which is
              a compound variable.
    12-03-02 +The vi and emacs edit modes now list all the entries in a directory
              when entering a <tab> for completion after a /.
    12-03-02  A bug in which a program that exits with value 12 when called
              from a command substitution in which standard output has been
              redirected caused the shell to hang has been fixed.
    12-03-01  A bug in which the shell could not parse [[ ']' == ~(E)[]] ]]
              has been fixed.
    
    12-02-29  --- Release ksh93u+ ---
    12-02-29  A bug in which ~user expanded first in a subshell prevented it
              from expanding later in a program has been fixed.
    12-02-29  A bug which could lead to a core dump when more that four shared
              libraries were added with the builtin command has been fixed.
    12-02-29  Fixed a few bugs which caused SIGCHLD to be blocked preventing
              background jobs from being reaped until a foreground job was run.
    12-02-27  A bug in which sh -c for a simple command caused a fork() has been
              fixed.
    12-02-27  A timing bug on systems such as AIX that doesn't support vfork()
              that could cause the exist status to get lost has been fixed.
    12-02-22  A private file descriptor that was not close-on-exec for a command
              substitution and has been fixed.
    12-02-14  A bug in which ^Z did not stop a pipeline when the last component
              was a shell built-in has been fixed.
    12-02-14  getconf("PATH") used to initialize ed(1) path.
    12-02-13 +In earlier version read from standard input would fail when called
              from the KEYBD trap.  Now read options -N, -n, and -t should work
              when called from a KEYBD trap.
    12-02-13  If FCEDIT is not set and fc is invoked without the -e option,
              ed will be invoked if found instead of /bin/ed.
    12-02-10  Another bug in the saving and restoring of IFS in a subshell
              that caused a core dump has been fixed.
    12-02-08  A bug in which .sh.fun disciplines could be cleared after a
              function completes has been fixed.
    12-02-08  A bug in job control in which the foregroup process group was not
              set correctly after restarting a stopped pipeline has been fixed.
    12-02-07  A bug in which numbers with leading zeros could be treated as
              octal constants outside of ((...)) has been fixed.
    12-02-06  A bug in arithmetic with compound variables containing multiple
              array elements has been fixed.
    12-02-02  A bug in the ulimit option table was fixed.
    12-01-26  A bug in which a set command that did not change monitor could
              effect the behavior of the monitor when monitor mode is on is fixed.
    12-01-21 +You can now test whether the shell implements a math function using
              typeset -f .sh.math.name, where name is the name of the function.
    12-01-21  A bug in which typeset -L and typeset -R did not handle multibyte
              characters correctly has been fixed.
    12-01-20  A bug that could cause the shell to hang waiting for an incorrect
              job pid has been fixed.
    12-01-19  A memory leak which occured for a nested command subtiution has been
              fixed.
    12-01-17  A bug in which typeset -u PS1 could enable the uppercase attribute
              for some other variables, for exampe, HISTFILE has been fixed.
    12-01-16  A bug in which .sh.match was not correct after a substring match when
              the replacement string contained a substring match has been fixed.
    12-01-12 +Files that are sourced from profile files are now read and executed
              one command at a time so that alias definitions take effect as they
              do for profile files.
    12-01-12  A bug in which whence -p would find a function if one existed and
              there was no command of that name on PATH.
    12-01-11  Change b_* prototype (int, char**, void*) => (int, char**, Shbltin_t*).
    12-01-05  A bug in which read was not terminating for a signal that had a trap
              set has been fixed.
    12-01-01  A timing problem with >; has been fixed.
    12-01-01  A macro expansion memory leak has been fixed.
    11-12-26  A bug in array assignments of the form arr=( $arr[i] ...) in which
              arr was not unset before the assignment has been fixed.
    11-12-20  A number of code changes were made based on the results of errors
              indicated by static code analysis.
    11-12-13  In vi edit mode a lteral <TAB> can now be entered by preceding it
              with a backshash.
    11-12-13  When tab is entered for completion after a ' or ", the ' and "
              characters are no longer deleted.
    11-12-07  A bug in which a program in the current direcotry with a . in the
              name could fail to execute when both PATH and FPATH end with :. has
              been fixed.
    11-12-07  I fixed a bug in which a variable expansion in a large here-document
              could be expanded to a null string.
    11-12-06  An optimization to read was added in the case the the read command
              was redirected from a file.
    11-12-06  Changes were made to make the line limit for read unlimited by
              default.
    11-12-05  A bug in which unsetting an array variable did not completely clear
              the variable in some cases has been fixed.
    11-12-02 +The printf alternative character # when applied to the %q format will
              quote argument in a form suitable for a field in a .csv format file.
    11-12-02 +A -S option was added to read to be able to read .csv format files.
    11-11-28  A bug in which redirection of standard error in a function called from
              command substitution caused standard error to be lost has ben fixed.
    11-11-21  [[ (-n foo) ]] no longer requires a space before (.
    11-11-11  The readonly attribute for a variable now applies to compound
              assignments to that variable.
    11-11-07  Changes were made to reduce the stack size to allow deeper function
              recursion.
    11-10-10 +Added alternate flag to printf %H for encoding of URI's.
    11-10-10  A bug which could lead to a core dump when the shell was invoked
              with more than twenty five open files has been fixed.
    11-10-06  A bug in the scoping of name references in functions called by other
              functions has been fixed.
    11-10-05  A bug in which wait on a pid may return the exit status of an
              earlier background job with that pid instead has been fixed.
    11-09-22  A bug in which a read timed out with TMOUT did not always restore
              the terminal state has been fixed.
    11-09-21  An optimization that allowed the last command in a script to use
              the same process id as the script has been eliminated.
    11-09-21  Added letoctal option that enables the let command to recognize
              octal constants starting with 0.
    11-09-20  A bug in which ${var.} could cause a core dump has been fixed.
    11-09-20  A bug with SHOPT_EDPREDICT when neither vi or emacs was enabled for
              lines beginning with # when in a multibyte locale has been fixed.
    11-09-20  A bug in emacs edit mode with SHOPT_EDPREDICT that would cause
              history searches matching comments lines to generate predictions
              has been fixed.  Only user typed comment lines generate predictions.
    11-09-20  A bug in emacs edit mode with a search that matches a comment line
              that could cause a core dump has been fixed.
    11-09-16  A bug in which a command name ending in .. could cause the shell to
              abort has been fixed.
    11-09-16  The characters ! + - % and @ in file names are no longer escaped with
              file name completion.
    11-09-13  The let command no longer treats numbers starting with 0 as octal
              constants.
    11-09-08  A bug in which printf "%R" could cause a core dump for invalid shell
              patterns has been fixed.
    11-08-09  With set -u, ${var#pattern} reported that var was unset for special
              variables.
    11-08-03  A bug in which the shell did not preserve the exit status for a
              coprocess has been fixed.
    11-08-02  A bug in the saving and restoring of IFS in command substitution that
              caused a core dump has been fixed.
    11-07-21  Modified the 10-08-27 bug fix so that background jobs started in for
              and while loops created interactively generate completion messages.
    11-07-20  I fixed a bug in here documents in which multi-byte characters that
              crossed buffer boundaries were not processed correctly.
    11-06-22  The shell compiler now supports process substitution.
    11-06-22 +Added code to support process substitution on systems that do
              not supply the /dev/fd directory.
    11-06-21  Fixed extraneous jobs Done messages when builtin is at the end of a
              pipeline.
    11-06-20  Fixed two regression tests.
    11-06-20  Fixed a bug introduced on last update.
    11-06-14  A bug with pipefail in which the shell would wait for background
              jobs to complete has been fixed.
    11-06-09  A bug which caused the options.sh regression test to fail on OS390
              Linux has been fixed.  The bug could also have affected other systems.
    11-06-07 +A number of changes to support the still undocuments namespace option
              have been added.
    11-06-06  A bug in which command substitution of eval would hang when it  had
              standard error redirected to standard output has been fixed.
    11-06-01  A bug in case statement fall through (;&) ignoring set -e was fixed.
    11-06-01  A bug in which creating a left or right justified upper or lowercase
              variable with an empty string has been fixed.
    11-06-01  A bug in which the .paths directory wasn't read when a subshell was
              executed before any other command has been fixed.
    11-05-31  The shell now gives an error when a type variable is assigned to
              an array instance when the array has been declared a compound variable
              array.
    11-05-31  A bug in which typeset -m of an array instance did not remove the
              original instance has been fixed.
    11-05-28  A bug in which typeset -m dest=src fails when src and are passed as
              name references was fixed.
    11-05-28  A bug in which typeset -m "c.board[1][i]=el", where el is a compound
              variable core dumps has been fixed.
    11-05-28  Two bugs in the display of arrays of compound variables with print -v
              have been fixed.
    11-05-27  A bug with command substitution with the shift jis locale has been
              fixed.
    11-05-25  A bug in which unset -f foo, called within function foo could cause
              the shell to core dump has been fixed.
    11-05-24  A bug in unsetting arrays of compound variables that could lead to
              a core dump has been fixed.
    11-05-24  A scoping bug in with typeset -m for variables passed as references
              has been fixed.
    11-05-09  A bug in which 'typeset +p array[$i]' in a subshell could cause an
              exception has been fixed.
    11-05-03  Two more scoping bugs with name references and read -C were fixed.
    11-05-03  A potential race condition which occurs when here-documents are
              processed in asynchronous blocks has been eliminated.
    11-05-02  Another scoping bug with name references defined in a function has
              been fixed.
    11-05-02  A bug in which the shell discards saved exit status of a job if it is
              followed by a subshell execution has been fixed.
    11-04-28  The shell now checks for numerical overflows with process ids.
    11-04-28  Another scoping bug with compound variables defined by name references
              inside a function has been fixed.
    11-04-28  A bug which caused a core dump on 32 bit systems with the basic.sh
              regression test has been fixed.
    11-04-27  A scope binding error for name references has been fixed.
    11-04-27  Assignment of compound variable to compound array element by name
              is now working.
    11-04-26  I fixed a bug with SHOPT_FIXEDARRAY compilation that could cause
              an a core dump for not fixed arrays.
    11-04-25  A bug in the references to two dimensional compound arrays has
              been fixed.
    11-04-20  A bug in which a name reference to a multidimentional index array
              index, nameref x=foo[3][4], did not work correctly has been fixed.
    11-04-18  Changes were added to allow fixed size arrays of variable sized
              objects when the SHOPT_FIXEDARRAY compile option defined on 10-09-28.
    11-04-18  A bug in which name references to array elements could fail has
              been fixed.
    11-04-15 +A compile option, SHOPT_2DMATCH, has been added which causes
              .sh.match to be a two dimensional array after ${var//pat/str}
              where the first dimension is the pattern number and the second is
              the match instance.
    11-04-11  A bug in which readonly var, where var is exported could cause var
              to be unset has been fixed.
    11-04-06  A tokenizer bug in which ${x/{3}(\d)/ } would cause in infinite
              loop has been fixed.
    11-04-05  A bug in which ${!x.} could cause a core dump has been fixed.
    11-04-04  A bug in which cleaning out the history file could terminate before
              keeping all the recent history events has been fixed.
    11-03-29  A bug in which ${#array[@]} was 1 rather than 0 after issuing
              typeset array[7] has been fixed.
    11-03-29  The subscript out or range message for fixed arrays has been fixed.
    11-03-29  A bug in which suspend could cause a core dump has been fixed.
    11-03-24  For the showme option added 09-09-09, commands beginning with a ;
              inside an arithmetic for loop, no longer produce syntax errors.
    11-03-18  A bug in _WINIX ~domain/user expansion has been fixed.
    11-03-16  A bug in the pipefail option which could cause a script to hang
              has been fixed.
    11-03-12  The shell no longer treats ${##pattern} as a syntax error.
    11-03-11  A bug in typeset -u on systems that don't supply the towctrans()
              function has been fixed.
    11-03-11  A bug in which a compound assignment of the form var[sub]=(...)
              would evaluate sub for each assignment has been fixed.
    11-03-07  A bug in which reassigning a compound variable to an associative
              array index could incorrectly increase the count of the number
              of elements has been fixed.
    11-03-04 +The tilde expansion on windows has been modified to handle user
              names of the form domain/user so that ~domain/user now expands
              to the home directory of that domain user.
    11-03-03  A bug in which the width of the prompt was calculated incorectly
              which cause the wrong line length for edit commands has been fixed.
    11-03-02  A bug in which a global variables set from within a function inside
              a subshell can leave side effects in parent shell has been fixed.
    11-03-01  A bug in which whence -a could dump core when the first match
              was due to : in PATH and the program was in the current directory.
    11-02-28  A bug in emacs mode with SHOPT_EDPREDICT (added on 10-05-20) which
              disabled prediction on a line starting with # when the cursor was not
              at the end of line has been fixed.
    11-02-28  The output format for compound variables with set has been fixed.
    11-02-25  A bug which could lead to a core dump occurred when a shell script
              without #! is invoked by name from a parent shell that has name
              references defined and the script creates name references of the
              same name.
    11-02-21  The shell now fails with a syntax error when a here-document in a
              command substition is not completed before the closing ), for
              example, $( foobar <<! )
                    here_doc
              !.
    11-02-18  A bug in which the value of $0 in a function defined by name()
              was changed to name has been fixed.
    11-02-17  A bug in which the declaration typeset var[100] did not work
              correctly has been fixed.
    11-02-15  A bug in which [[ -v sh.match ]] did not work correctly has been
              fixed.
    
    11-02-08  --- Release ksh93u  ---
    11-02-08  A bug in which opening standard output after it has been closed with
              exec 1>&- doesn't work has been fixed.
    11-02-07  A bug on some systems for which a command subtitution could hang
              has been fixed.
    11-01-28  A bug in file name completion for files containing both multibyte
              characters shell special characters has been fixed.
    11-01-18  The .sh.match variable now shows elements that do not match as
              as not set rather than an empty string.
    11-01-18  A bug with typeset -m of an array into an element of an indexed
              array has been fixed.
    11-01-13  A bug in handling of arrays of compound variables inside ((...)) which
              reported a syntax error been fixed.
    11-01-10  A bug in arithmetic assignment operators of the form op= for array
              variables when the same array was referenced on the left and the
              right hand side with different indices has been fixed.
    11-01-10  A bug in which the output of time was lost when { time...;} 2>&1
              occurred inside command substition has been fixed.
    11-01-07  [[ -v sh.match[i] ]] was returning false when sh.match[i] was set.
    11-01-05  Added and modified warning messages with sh -n.
    11-01-02  Fixed bugs with typeset -l/-u/-M and arrays.
    10-12-28  Fixed a bug with typeset -l/-u/-M values in arithmetic expressions.
    10-12-26  Fixed a time parsing bug in sleep and localeconv() initialization.
    10-12-23  Prevented the shell from generating a core dump when it sends itself
              a termination signal because the last command terminated with that
              signal.  This prevents a core dump to be overwritten by the shell.
    10-12-22  A bug in the expansion of  ${A[@]} ${B[@]}, introduced in 10-12-01
               when A="" B=B has been fixed.
    10-12-21 +Use MS_3D in b_vpath() for setting win32 WoW mount defaults.
    10-12-17  A bug in the expansion of ${var:i:j} which caused a core dump when
              i > ${#var} has been fixed.
    10-12-16 +sleep now treats . as decimal point even in locales that use comma.
    10-12-16 +typeset -M mapname was added to generalize on toupper and tolowwer
              mapping as provided with wctrans().
    10-12-10  A bug in which typeset -l displayed namespaces as well as lower case
              variables has been fixed.
    10-12-06  A bug in which a pipeline could terminate prematurely for a pipeline
              whose right hand side is a builtin, and whose left hand side ends in
              a simple command that has standard output redirected has been fixed.
    10-12-06  A bug in hexfloat assignments when the right hand side is a string
              variable starting with 0x has been fixed.
    10-12-01  A bug in the expansion of ${$1+"$@"} which causes the last positional
              parameter to disappear when it is empty has been fixed.
    10-12-01  A number of changes were made to reduce the startup time.
    10-11-29  When wait is interrupted by a signal that is caught, it now exits
              with a non-zero exit status.
    10-11-29  When a variable is used directly in an arithmetic expression,
              leading zeros no longer cause the value to be treated as an
              octal constant.  This was true in previous versions for justified
              variables.
    10-11-29  An incorrect warning message was eliminated with the -n option for
              arithmetic expressions with associative arrays.
    10-11-29  Some changes were made to slightly reduces startup time.
    10-11-24  A bug in which a name reference is make to arr[0] when arr is not
              an array has been fixed.
    10-11-23  If a type definition is made without a compound variable assignment it
              produces an error message and no longer shows up as a defined type.
    10-11-22  The handling of \ inside [...] for for shell and ~(E) patterns has
              been fixed.
    10-11-22  A patch was made to pfsh to handle an error case.
    10-11-22 +Modified types defined in namespace so that they do not clash with
              types in other namespaces.  Types can be referenced using
              .namespace.typename.
    10-11-22  A bug which caused functions addressed as .namespace.funct to not
              work has been fixed.
    10-11-22  A bug in which if nr was a name reference to an unset associative
              array subscript, then ${!nr} did not output the subscript correctly
              has been fixed.
    10-11-18  A bug in which shcomp -n was not processing double quotes correctly
              has been fixed.
    10-11-18  Fixed a bug in which typeset -T foo; typeset -T could cause a
              core dump.
    10-11-17  Fixed a bug in which the error message for set -u could come out
              garbelled.
    10-11-17  Modified the parser so that typeset -a var=(...) no longer checks
              the first index for aliases and reserved words.
    10-11-17  A bug in which a subshell command consisted of only a for or until
              command has been fixed.
    10-11-16  Fixed a bug in which typeset -u would display namespace variables
              as well as upper case variables.
    10-11-16  A bug which could cause a core dump when unsetting a type variable
              when there are references to type elements has been fixed.
    10-11-15  A bug which could cause a core dump when unsetting a compound
              array variable when there are references to array subscripts has
              been fixed.
    10-11-15  A bug in which using typeset -m to move an indexed array instance
              to another array could cause the array to display incorrectly has
              been fixed.
    10-11-12  A bug in which the unset discipline function for a type is called
              when the type is initialized has been fixed.
    10-11-12  The sequences \< and \> are now preserved after patterns containing
              ~(E) in ${var/pattern/string} expansions.
    10-11-11  A bug in typeset -m when the variables were compound arrary instances
              has been fixed.
    10-11-10  A bug in output of a compound variable with types containing types
              has been fixed.
    10-11-10  Fixed ``name=value export [-p]'' to list environment.
    10-11-09  shtests resets SIGPIPE to SIG_DFL for all tests.
    10-11-09  Fixed a bug in expansion of $"..." when used in assignments.
    10-11-09  Fixed a getaddrinfo() memory leak that didn't call freeaddrinfo()
              after an interrupt.
    10-11-08  Modified the behavior of set -u so that the shell terminates with
              error message when when var is unset with ${!var} and ${#var}.
    10-11-02  Fix a bug in which a signal received while in a subshell could be
              ignored.
    10-10-26  Fix a bug where terminal interrupt was ignored while in vi/emacs
              edit search mode.
    10-10-26  Fix $'a\0b'c to expand to 'ac'.
    10-10-26  Provide user defined round() if not in <math.h>.
    10-10-26  Fix bug where $((undefined_function(1))) dumped core.
    10-10-22  Provide user defined iszero() if not in <math.h>.
    10-10-22  Fixed a bug with BGX compile option that could cause the shell to
              hang.
    10-10-22  Fixed a bug with user define math function on systems for which
              char is unsigned.
    10-10-21  A bug in which function autoloaded in a function leaves a file open
              has been fixed.
    10-10-20  Modified the behavior of set -u so that the shell terminates when
              when var is unset with ${var op string} when op is #, % or /.
    10-10-20  Fixed a bug with the AUDIT option in which the audit file was not
              not close-on-exec.
    10-10-20 +Made a number of changes and fixes for the NAMESPACE compile option
              which as added on 10-06-09 but some problems still remain.
    10-10-15  Fixed a bug in which arithmetic functions (added on 10-03-24) did
              not work when the function definition was in the same compound
              command in which the function was referenced.
    10-10-13  A bug in which creating an associative array of compound variables
              with no members as an element of a compound variable did not work
              has been fixed.
    10-10-08  A bug in which killing the last command in a function defined
              with function name, terminated the calling script has been fixed.
    10-10-08  A bug which could cause a core dump if IFS is unset inside a function
              has been fixed.
    10-10-07 +To reduce unwanted side effects, invoking typeset without the export
              option and without an assignment now causes the variables to be unset
              if the variable is inherited from the environment.
    10-10-06  The closing brace for ${ command } is now a token no matter what
              character follows it.
    10-10-04  The change for $'...' expansion on 10-08-09 did not expand parameters
              contained in the error message and this has been fixed.
    10-10-04  A bug in which a declaration of indexed array (-a_ in a type
              definition would be displayed as a compound indexed array (-C -a)
              has been fixed.
    10-09-30  The C99 math function ldexp has been added.
    10-09-30  A bug with two dimensional arrays with expansion of the form
              ${ref[0..5]} where ref is a nameref to array[i] has been fixed.
    10-09-29  A bug in which an eval with redirections invoked from a dot script
              would not restore the file has been fixed.
    10-09-29  A bug in which loading a function from FPATH could leave a file
              descriptor open has been fixed.
    10-09-28 +A new compile option SHOPT_FIXEDARRAY has been added and is being
              evaluation.  It allows fixed sized indexed arrays be to defined
              using "typeset array[dim1][dim2]...[dimn]".  Fixed sized arrays
              are used the same way indexed arrays are.  Currently, only fixed
              arrays of fixed objects (float, int, and justifies objects) are
              supported.
    10-09-22  A bug which could cause an exception when a function with static
              variables was redefined has been fixed.
    10-09-21  A bug in the processing of (command&) which created a job in the
              parent process has been fixed.
    10-09-21  A for loop optimization bug with arithmetic expression evaluation
              has been fixed.
    10-09-21  A bug in which a recursive function containing a pipeline could
              lead to an exception fixed after 8 levels of recursion has been
              fixed.
    10-09-18  A bug in which the count of elements in an array was wrong leading
              to an exception has been fixed.
    10-09-13  A bug which occurred when both xtrace and showme options where
              specified in which the xtrace option disabled showme has been fixed.
    10-09-13  A bug in which creating a reference to an array variable with any
              elements could cause subsequent array elements to be treated as
              compound variables has been fixed.
    10-09-09  A bug which caused ((c.ar[x][y])) to be treated as a syntax error
              has been fixed.
    10-09-08  A bug in the processing of references to multidimensional arrays
              in arithmetic expressions has been fixed.
    10-09-08  A bug in the handling of multi-dimensional arrays which caused
              the number of elements in each dimension to be incorrect has
              been fixed.
    10-09-07  The change for messages on 10-08-09 did not handle message in
              assignments and this has been fixed.
    10-09-07  A bug in the indentation of compound variables in arrays when
              output with print -v has been fixed.
    10-09-07  A rare bug with indexed arrays when assigned a null string that could
              cause a core dump has been fixed.
    10-09-03  A number of changes were made for jobs pools.
    10-08-31  typeset -p was modified to output name references after other
              variables so that the output could be used as input.
    10-08-31  A bug with typeset -p in which variables with attributes but
              without attributes were not displayed correctly has been fixed.
    10-08-27 +When running a subshell, the current pool is unset.
    10-08-27  A bug in which jobs started from within for or while lists in
              interactive shells could generate completion messages has been fixed.
    10-08-25  Fixed a couple of bugs related to job pools.
    10-08-24 +[[ -e /dev/xxx/ ]] can be used to check whether special files of
              those names are handled by the shell.
    10-08-24  A bug in the running of a compiled dot script in which only the
              first command was executed has been fixed.
    10-08-23  A bug which sometimes caused a core dump with a configure script
              has been fixed.
    10-08-20  A bug in command substitution which caused a configure script to
              hang has been fixed.
    10-08-19  Eliminated unnecessary ; from output of compound variable with
              typeset -p.
    10-08-17  Fixed a bug in command substitution in which under certain
              circumstances a file whose size is a power of 2 plus one, and the last
              character was not a new-line, could cause memory corruption.
    10-08-13 +Added static discipline functions to type similar to C++ static
              class functions.
    10-08-11  A bug in time when applied to a pipeline in which the shell did
              not wait for all elements of the pipeline to complete has been fixed.
    10-08-11  Restored sh_fmtq() quoting to not quote NAME= in NAME=VALUE.
    10-08-09 +Modified the expansion of message strings, $"...", so that they
              are expanded each time they are referenced rather than expanding
              them when the script is compiled or read in.
    10-08-06 +The process id for jobs in job pools is now of the form poolname.n
              where n is the jobid in that pool.  Commands that accept job names
              or numbers now understand names in this format.
    10-08-05  A bug in which an assignment from within an arithmetic expression
              inside a function would create a local variable has been fixed.
    10-08-04  A bug in the expanding of variables whose names contain multibyte
              characters has been fixed.
    10-08-04  A bug which caused an exception when processing scripts compiled
              with shcomp -n has been fixed.
    10-08-02  Tests using very small buffer sizes uncovered a number of bug most
              connected with here documents which have been fixed.
    10-07-27  The format modifier , used for digit grouping with d and f formats
              has been documented.
    10-07-26  cd '' now produces and error rather than changing to the current
              directory.
    10-07-26  A bug in multi-byte locales which the last character of a
              multi-byte character is a \ or pattern character which could occur
              when the character was the last character of a command substitution
              has been fixed.
    10-07-23  Another bug in the processing of ${var:offset;len} in multi-byte
              locales when len is larger than the number of characters has been
              fixed.
    10-07-23  Many coding changes have been made to eliminate most of the uses
              of global variables in the shell code.
    10-07-22  Fixed a bug in which discipline functions were not being invoked
              when it was invoked as ref.discipline where ref was a name reference
              to an array instance.
    10-07-22  Fixed a bug in which discipline functions were not being invoked it
              was invoked on a two dimensional array, i.e., arr[5][9].discipline.
    10-07-19  Fixed a buffering problem which occurred when running a script with
              ssh and the parent ssh process is killed.
    10-07-14  Modified the parser to treat ((...)) inside [[...]] as ( (...) ) to
              that it is a nested (...).
    10-07-09  A bug in the handling of process substitution inside command
              substitution as part of a pipeline has been fixed.
    10-07-07  A bug in the output for compound variables containing
              multi-dimensional arrays has been fixed.
    10-07-06  ksh now recovers from changes made by bash to the history file without
              loosing history commands.
    10-06-25  A bug in which a large here document containing command substitutions
              of a dynamically loaded function that contained a here document
              could get truncated has been fixed.
    10-06-24  If after executing a script found in FPATH, if a function, builtin,
              or type name corresponding to that script is not defined, the shell
              now outputs an error message and returns value 126.
    10-06-23  Floating point functions that happened to return integer values
              were being treated as if the function returned integers so that
              integer division could be used instead of floating point division.
    10-06-22  Fixed a bug in earlier ksh93u in which an arithmetic assignment to a
              variable in the global scope would instead create a local variable if
              the variable had an attribute but did not have a value.
    10-06-18  Modified trap handling so that if the same signal is received when
              executing the handler, it is deferred until the handler completes.
    10-06-16  Fixed a bug in which ulimit -v was setting the the cpu limit
              on Linux.
    10-06-14 +The command 'typeset -T' now generates the list of type definitions
              in a format that can be used as input to the shell.
    10-06-09  Put in patch from Solaris for output quoting with %q.
    10-06-09 +Made changes to the NAMESPACE compile option so that it now seems
              to work.  With this option, namespace <name> { command;} will
              run command in the namespace .name so that all variables and
              functions created by command are accessible outside the name
              space via .name.var and .name.fun.  Variables and functions that
              are not in the namespace are not modified when running command.
    10-06-07  Change most internal interfaces to take Sh_t* argument.
    10-06-03 +Types can be loaded on first reference by putting definitions in
              PFPATH.
    10-06-03 +The shell is now able to parse commands which use type statements
              before the typeset -T command to define the type executes.
    10-06-03  A bug in the quoting for name reference declarations which did
              not properly handle [ and ] in subscripts for associative arrays.
    10-06-02  A bug in which a discipline function defined by a type instance to
              override the default was not being registered has been fixed.
    10-06-02  A bug in which read -C of an associative array of compound variables
              was not working has been fixed.
    10-06-02  A bug in which the error message for an unset parameter with set -u
              did not contain the name of the variable has been fixed.
    10-06-01  A bug in typeset -m for moving an indexed array instance to a variable
              has been fixed.
    10-06-01  A bug in which caused memory to be freed twice when unset was called
              for an indexed array that had get or set disciplines has been fixed.
    10-06-01  A bug in which the %b format of printf was not preserving NUL bytes
              with \0 has been fixed.
    10-06-01  A bug in the handling of name references to array variables in
              arithmetic expressions has been fixed.
    10-05-28  Fixed bugs in changing attributes for two dimensional arrays.
    10-05-28  Eliminated a few unreferenced variables and a reference to
              uninitialized memory.
    10-05-27  Rewrote the subshell code to avoid using pipes an many cases.
    10-05-24  Fixed a bug which cause an exception when both -l and -s were
              specified with typeset -i.
    10-05-21  Inputting of three dimensional indexed arrays with ( ( (...)...)...)
              was not working and has been fixed.
    10-05-21  A bug in which adding the attributes -Ai to a variable via a name
              reference could cause the value to display incorrectly has been fixed.
    10-05-21  A bug in which using $var inside ((...)) did not work when var was
              a hex float variable.
    10-05-20 +The compile option SHOPT_EDPREDICT has been added.  When this option
              is on, as you type a line beginning with a # the following characters
              are treated as a shell pattern and cause matching lines from the
              history file to be displayed as a numbered list as you type.
              You can scroll up and down this list or you can use <ESC>nTAB
              to make this the current line (n defaults to 1 of omitted) or
              <ESC>n<cr> to execute.
    10-05-20  A bug which caused an exception when multiple levels of composite
              functions in arithemtic expressions has been fixed.
    10-05-19  <<< with an empty string no longer gives an error.
    10-05-19  A bug in arithmetic evaluation when a name reference to an array
              instance was used has been fixed.
    10-05-14  A bug in which the shell treats a valid index array assignment,
              typeset -a x=(foo (x=3;y=4) bar) as a syntax error has been fixed.
    10-05-13  A bug in creating name references to associative array variable
              after a lookup of one of its elements has been fixed.
    10-05-12  Two bugs in the handling of function static type variables in
              subshells have been fixed.  One could cause an exception and the
              other would leave side effects in the parent shell.
    10-05-10  A bug in which static variables in functions were not being saved and
              restored properly when running subshells has been fixed.
    10-05-05  A bug in which print -v did not work correctly when an operand was an
              indexed array element referring to a compound variable has been fixed.
    10-05-05  A change to improve performance by special casing empty string
              assignments to avoid repeated malloc() and free().
    10-05-05  A bug in which creating a name reference to a non-existent associative
              array element would create the array element has been fixed.
    10-05-04  A bug in which name references to static variables in the static
              scope were not found has been fixed.
    10-04-30  Do not use socketpair() on systems that implement ioctl(I_PEEK)
              on pipes.
    10-04-29 +When the current job pool is set, coprocess are run in a job pool.
    10-04-28  A type defined with a member foo that is an associative array without
              elements followed by an expansion ${bar.foo[a]} and an assignment
              bar.foo[a]=b, no longer indicates that ${#bar.foo[@]} has 0 members.
    10-04-27  Another bug in which a nested command substitution could hang if it
              generated too much data has been fixed.
    10-04-26  A type defined with a member that is an indexed array without elements
              would behave as if the 0th element of each instance was defined after
              a non-zero element was specified and this has been fixed.
    10-04-26  A bug in which types defined in a subshell were not undefined when
              the subshell completed has been fixed.
    10-04-23  For file completion in commmand line editing, file names starting
              with # are now escaped so that they are not treated as comments.
    10-04-23  A bug in which ${t.var:=value}, where t is an instance of a type
              variable, could assign value to the type variable rather than to
              the type instance has been fixed.
    10-04-23 +Added &| which can be used in place of | to have portions of a
              pipeline executed in the pool.
    10-04-22 +The .sh.pool variable was added for use with job pools.
    10-04-22  A bug in which a nested command substitution could hang if it
              generated too much data has been fixed.
    10-04-20  A bug which corrupted one byte of memory when read was called with
              reads that did not use a delimiter has been fixed.
    10-04-19  The display of a compound variable with an embedded array with
              attributes was sometimes not working correctly and has been fixed.
    10-04-16  A bug in which attributes were not be propagated to elements in
              an associative array has been fixed.
    10-04-15  A bug which caused scripts containing user defined math functions to
              fail to compile with shcomp has been fixed.
    10-04-15 +Job pools have been added with the SHOPT_COSHELL compilation option.
              A job pool allows a collection of background jobs to run either locally
              or remotely and to be managed as a unit.  The command '& name ...'
              creates or uses a named job pool for subsequent background jobs.
              kill, wait, and jobs allow the pool name as operands.
    10-04-14  A bug in which a coprocess connection could terminate prematurely
              when running a nested subshell has been fixed.
    10-04-12 +Enumeration constants can be used in arithmetic expressions with the
              ==, != and = operators when the left hand side is an enum variable
              and the right hand side is an enumeration constant.
    10-04-07  A bug in which setting the trap on CHLD to ignore could cause
              an incorrect exit status has been fixed.
    10-04-06  A bug in which LINENO was not incremented for a here-document when
              the here-document word was followed by a comment has been fixed.
    10-04-06  The optimization that execs the last process of a script rather
              than creating a new process has been removed when a trap on
              interrupt has been set.
    10-04-06  Unsetting the 'C', 'A' or 'a' typeset attribute now produces an
              error message rather than generating an exception.
    10-04-06  A bug in which .sh.name contained the subscript and .sh.subscript
              was empty in some cases with discipline functions on array instances
              has been fixed.
    10-04-05  A bug in the edit modes where preceding the interrupt character with
              the literal next character did not work has been fixed.
    10-04-05  A bug in the creation of type instances of arrays which could cause
              an exception has been fixed.
    10-03-30  A bug in the display of a compound variable containing an indexed
              array of compound variables has been fixed.
    10-03-24 +Arithmetic functions can be defined using the shell function syntax,
              'function .sh.math.name x y z{...}' , where name is the function name
              invoked within ((...)) and x y z are long double arguments passed
              as name references.  y and z are used for functions with two and
              three arguments respectively.  The value of the function is the value
              of the long double .sh.value variable when the function returns.
    10-03-24  A bug in which integer division was mistakenly used when the
              numerator was a binary operator with the first operand floating
              point and the second integer, e.g. (.1**3)/3, has been fixed.
    10-03-24  The >; file operator was modified so that the temporary file is
              created in the same physical directory as file.
    10-03-23  A warning message was added to sh -n when $var was used inside
              ((...)) instead of var.
    10-03-19  fmin was added to the list of math function on the man page.
    10-03-19  Fixed the return value for unalias when the alias did not
              exist.
    10-03-19  A bug in which the SHLVL variable exported the value it had on
              input rather than the incremented value has been fixed.
    10-03-19  A bug which causes whence -q to go into an infinite loop has been
              fixed.
    10-03-19  Removed space between Stopped message and (SIGTTIN) and (SIGTTOUT).
    10-03-17  Modified profile shell execution so that when builtins that
              correspond to executable have extended attributes, they are
              executed by pfksh instead of being treated as built-ins.
    10-03-16  A bug in whence -a which produced duplicate lines of output has
              been fixed.
    10-03-16  A bug in the handling of process groups in monitor mode for
              command substitutions has been fixed.
    10-03-15  Fixed a bug in which read -u[fd] could cause the shell to core
              dump when fd was greater than open_max.
    10-03-15 +Modified the shell I/O so that the shell will not fail if the
              ulimit for open_max is increased as part of the script.
    10-03-12  A bug in which a here-document containing command substitutions
              that contained here-documents did not process correctly has been
              fixed.
    10-03-12  A bug in which the terminal is not restored to canonical mode
              after read times out when in a multibyte locale with no edit mode
              enabled has been fixed.
    
    10-03-05  --- Release ksh93t+  ---
    10-03-05  A variable unset memory leak has been fixed and tests/leaks.sh
              has been added to verify the fix.
    10-03-04  Documentation, comment, and diagnostic spelling typos corrected.
    10-02-14  Fix sh_getenv() initialization to cooperate with the 3d fs.
    10-02-12  A bug in which the get discipline function was not invoked for
              associative array subscripts for unset array elements has been fixed.
    10-02-12  A bug which could occur if the last line of a script was an eval
              that executed multiple commands has been fixed.
    10-02-02  A buffer overflow in read and another in binary type base64
              encoding were fixed.
    10-01-20  A bug in the evaluation of arithmetic expression in which the
              subscript was evaluated twice for $((foo[x++]++)) has been fixed.
    10-01-19  A workaround for a double-free of a trap in both a subshell and its
              parent has been added.
    10-01-18  A bug in type handling of typeset -H has been fixed.
    10-01-15  The "adding empty subscript" warning now only emitted with -x set.
    10-01-01  A bug in the parser in which '$((case i in i):;esac);:))' was not
              parsed correctly was fixed.
    10-01-01  A bug in the parser in which '$(( 2 , 3.6 ))' dumped core for locales
              with radix char , and thousands separator . has been fixed.
    09-12-28  A bug in the handling of SIGCLD on systems that generated SIGCLD
              while blocked waiting for process to complete has been fixed.
    09-12-24  ast setlocale() reworked to differentiate env var changes from user
              override.
    09-12-18  A bug with the SHOPT_BGX option set which disabled traps for signals
              < SIGCHLD when a trap for a signal > SIGCHLD was set has been fixed.
    09-12-18  A bug where [[ -v var ]] was incorrect for some variables (including
              LC_* vars) has been fixed.
    09-12-15  A bug that produced a syntax error when a multibyte character
              straddled a buffer boundary has been fixed.
    09-12-11  A bug where the subscript of an unset variable was not evaluated has
              been fixed.
    09-12-09  A bug where shcomp dumped core on certain syntax errors has been fixed.
    09-12-07  A bug where a parent shell environment var reset in a subshell removed
              the value in subsequent children of the parent shell has been fixed.
    09-12-04  A bug in which in some cases a trap in a function executed in
              a subshell could trigger twice has been fixed.
    09-12-03  A bug in which SHLVL exported with some attributes could cause
              the shell to abort at startup has been fixed.
    09-12-02  A bug with pipefail in which the shell could hang waiting for the
              writer to complete before the last reader command has been fixed.
    09-11-30  A bug in which a trap could be inherited by the first element of
              a pipeline when the command had more than 63 arguments that did
              not contain any macro expansions has been fixed.
    09-11-19  When read from a terminal was called from with a while or for loop,
              and an edit mode was on, a backspace or erase no longer will
              overwrite the prompt.
    09-11-17 +Change .paths parse to handle BUILTIN_LIB=foo BUILTIN_LIB=foo-1.2.
    09-11-17  Inside a function, typeset foo.bar will bind foo to global variable
              foo if local variable foo does not exist, instead of creating a
              local variable.
    09-11-17  "read -n1" from the terminal has been fixed to read exactly one character.
    09-11-11  Job control now works for subshell commands, (...).
    09-11-11  If set -e is on for an interactive shell errors in special builtins
              now cause the shell to exit.
    09-11-11  A bug in which an interrupt handler processed during the read builtin
              when IFS did not contain a new line has been fixed.
    09-11-09  A bug in which a variable that has been unset in a subshell and then
              exported from that subshell does not show up in the environment
              has been fixed.
    09-11-02  ``,2'' is now a valid numeric constant for locales with
              decimal_point=','.
    09-11-02  A bug where "return" in .profile did not restore the shell state
              has been fixed.
    09-10-31  A bug that corrupted saved exit status when pids wrapped around has
              been fixed.
    09-10-26  A bug in { LANG LC_ALL LC_category } ordering has been fixed in -last.
    09-10-16  A bug where notification to libast that the environment has changed
              has been fixed.
    09-10-12  A bug in which a function loaded in a subshell could leave side
              effects in the parent shell has been fixed.
    09-10-12  A bug in converting a printf %d operand to a number when the operand
              contains multiple subscripts for the same variable has been fixed.
    09-10-09  A bug in the handling of the escape character \ in directory prefixes
              in command completion has been fixed.
    09-10-09  $PATH processing has been changed to delay dir stat() and .paths
              lookup until the directory is needed in the path search.
    09-09-28  Call the ast setlocale() intercept on unset too.
    09-09-24  A bug in which LANG=foo; LC_ALL=foo; unset LC_ALL; did not revert
              LC_CTYPE etc. to the LANG value has been fixed.
    09-09-17  A bug in which unsetting SVLVL could cause a script invoked by
              name without #! to core dump has been fixed.
    09-09-16  A bug in which a pipeline in a here-document could hang when the
              pipefail option was on has been fixed.
    09-09-09  A bug in the processing of line joining in here documents which
              occurred when a buffer began with <escape><new-line> has been fixed.
    09-09-09 +A leading ; with commands in a brace group or parenthesis group
              no longer causes an error.  It now is used for the "showme" option.
    09-09-09  A bug in which a subshell containing a background process could
              block until the background process completed has been fixed.
    09-09-04  A bug in handing ${var[sub]}, where var is a nameref has been fixed.
    09-09-03  A bug which caused an index array to have the wrong number of elements
              when it was converted from a compound variable by adding an another
              element has been fixed.
    09-09-03  Specifying export for a compound variable now generates an error.
    09-09-02  $"..." localizations strings are no longer recognized inside `...`.
    09-09-01  A bug in the for loop optimizer in the handling of type static
              variables has been fixed.
    09-09-01  An error message is not displayed when * and @ are used as subscripts.
    09-09-01  Several bugs in the processing for types that included an associative
              array of another type has been fixed.
    09-09-01  A bug in the tracing of [[ a < b ]] and [[ a > b ]] has been fixed.
    09-08-26  The .sh.file variable was not being set for a script that was run
              by name and didn't start with #! and this has been fixed.
    09-08-25  A bug in which a function called to deeply from command substitution
              did not display an error message has been fixed.
    09-08-24 +When processing profiles, ksh93 now violates the POSIX standard and
              treats &> as a redirection operator similar to bash.
    09-08-23  A bug in the handling of the trap on SIGPIPE that could lead to a
              memory fault has been fixed.
    09-08-21  A bug in the handling of the comma operator in arithmetic expressions
              that could cause a core dump on some systems has been fixed.
    09-08-20  A bug in which a compound variable containing an array of a type
              that doesn't have any elements now expands correctly.
    09-08-19  A bug which disabled function tracing inside a function after
              a call to another function has been fixed.
    09-08-19  A bug in which initializing a compound variable instance to another
              compound variable by name has been fixed.
    09-08-18  A bug in which compound variable instances could be lost after
              an instance that invoked a type method discipline has been fixed.
    09-08-18  A bug in which a discipline function for a type applied to an
              array instance when invoked in a function ignored the subscript
              has been fixed.
    09-08-18  A scoping error with variables in arithmetic expression with
              type variables when reference with a name reference has been fixed.
    09-08-10  Several memory leaks were fixed primarily related to subshells.
    09-08-06  A bug in which setting the trap on CHLD to ignore could cause
              a script to hang has been fixed.
    09-07-08  A bug in the processing of name reference assignments when it
              contained pattern expansions with quoting has been fixed.
    09-06-22 +The default width for typeset -X has been changed so that there
              should be no loss of precision when converting to a string.
    09-06-19  A bug in the printing of array elements for binary variables with
              printf %B has been fixed.
    09-06-19  A bug which caused a core dump with trap DEBUG set with an array
              assignment with no elements has been fixed.
    09-06-19  A bug with read with typeset -b -Z<num> has been fixed.
    09-06-19  Two bugs related to read -b for array variables has been fixed.
    09-06-19  A bug with typeset for compound variables containing arrays of
              compound variables has been fixed.
    09-06-18  A bug in appending a compound variable to a an indexed array of
              compound variables has been fixed.
    09-06-18  A bug which occurs when appending a compound variable to an indexed
              array element has been fixed.
    09-06-18  Setting VISUAL to a value other than one ending in vi or emacs will
              no longer unset the edit mode.
    09-06-17  A bug in typeset -m when moving a local compound variable to a
              global compound variable via a name reference has been fixed.
    09-06-17  A bug in appending to nodes of an array of compound variables when
              addressing them via nameref has been fixed.
    09-06-17  A bug in typeset -p var, when var is an array of compound variables
              in which the output only contained on array element has been fixed.
    09-06-17  The prefix expansion ${!y.@} now works when y is a name
              reference to an element of an array.
    09-06-16  Traps on signals that are ignored when the shell is invoked
              no longer display.  Previously they were ignored as required but
              would be listed with trap -p.
    09-06-12  A bug in vi edit mode in which hitting the up arrow key at the
              end of a line longer than 40 characters which caused a core dump
              has been fixed.
    09-06-11  A bug in which "eval non-builtin &" would create two processes,
              one for the & and another for non-builtin has been fixed.
    09-06-08  When var is an identifier and is unset, ${var} no longer tries to
              run command substitution on the command var.
    09-06-08 +Process substitution arguments of the form <(command) can now be
              used following the < redirection operator to redirect from command.
    09-05-13  A bug in which redirections of the form 2>&1 1>&5 inside command
              substitution could cause the command substitution to hang has been
              fixed.
    09-05-12  To conform with POSIX, the -u option only checks for unset variables
              and subscript elements rather than checking for all parameters.
    09-05-12  A bug which could cause a core dump when a variable whose name
              begins with a . was referenced as part of a name reference inside
              a function has been fixed.
    09-05-01  A bug that caused a core dump when SIGWINCH was received and
              both vi and emacs mode were off has been fixed.
    09-04-22 +Default alias compound='typeset -C' added.
    09-04-15  A bug that caused ${...;} to hang for large files has been fixed.
    09-04-08  A change was made in the -n option which printed out an incorrect
              warning with <>.
    09-04-07  The emacs edit command M-_ and M_. and the vi command _ was fixed
              to handle the case there there is no history file.
    09-04-05  A bug in handling new-lines with read -n has been fixed.
    09-04-05  The ENV variable defaults the the file named by $HOME/.kshrc rather
              then to the string $HOME/.kshrc.
    09-03-31  A bug in which a nested command substitution with redirections could
              leave a file descriptor open has been fixed.
    09-03-24 +ksh now only uses the value of the _ variable on startup if it can
              verify that it was set by the invoking process rather than being
              inherited by some other ancestor.
    09-03-24 +When ksh is invoked without -p and ruid!=euid, and the shell is
              compiled without SHOPT_P_UID or ruid<SHOPT_P_UID, the shell now
              enables the -p option.  The previous version instead set the
              euid to the ruid as it does for set +p.
    09-03-24 +When SHOPT_P_UID is defined at compile time and the shell is started
              without -p and ruid!=euid and ruid>=SHOPT_P_UID then euid is set
              to ruid. A bug that did the wrong test (ruid<SHOPT_P_UID) was fixed.
    09-03-17 +The sleep(1) builtin now accept and ISO 8601 PnYnMnDTnHnMnS
              duration or date(1) compatible date/time operand.
    09-03-10  If a variable that was left or right justified or zero-filled was
              changed with a typeset statement that was left or right justified
              or zero-filled, then the original justification no longer affects
              the result.
    09-03-10  A bug in the handling of traps when the last command in a script
              is a subshell grouping command has been fixed.
    09-03-03  A bug in which an expansion of the form ${!prefix@} could generate
              an exception after the return from a function has been fixed.
    09-02-02  A bug in restricted mode in which the value of ENV could be
              changed from within a function has been fixed.
    09-02-02  A bug in which an erroneous message indicating that a process
              terminated with a coredump has been fixed.
    09-02-02  The exit status when exit was called without an argument from
              a signal handler was incorrect and has been fixed.
    09-02-02  A bug in which a function autoloaded in a subshell could cause
              a core dump when the subshell completed has been fixed.
    09-02-02  A bug in which 2>&1 inside a command substitution wasn't working
              correctly has been fixed.
    09-02-02  A bug in the call stack of arithmetic function with 2 args
              returning int has been fixed.
    09-01-30  A bug in which 'eval print \$0' inside a function was giving the
              wrong value for $0 has been fixed.
    09-01-28  A bug in which a command substitution could return an exit status
              of 127 when the pipefail option is enabled has been fixed.
    09-01-26  ksh93 now generates an error message if you attempt to create
              a global name reference to a local variable.
    09-01-26 +The [[ -v var ]] operator was modified to test for array elements.
    09-01-23 +The redirection operator <>; was added.  It is similar to <>
              except that if the command it is applied to succeeds, the file
              is truncated to the offset at the command completion.
    09-01-23  The default file descriptor for <> was changed to 1.
    09-01-20  A bug in which the exit status specified in an exit trap was
              not used when a process terminated with a signal has been fixed.
    09-01-19  A bug in which a signal whose default action is to terminate
              a process could be ignored when the process is running a sub-shell
              has been fixed.
    09-01-19  A bug in which sending SIGWINCH to a process that reads from a pipe
              could cause a memory fault has been fixed.
    09-01-16 +The -R unary operator was added to [[...]] and test to check whether
              a variable is a  name reference.
    09-01-16 +The -v unary operator was added to [[...]] and test to check whether
              a variable is set.
    09-01-14  The unset built-in was modified to return 0 exit status when
              unsetting a variable that was unset to conform with the POSIX
              standard.
    09-01-14  The unset built-in was modified to continue to unset variables
              after encountering a variable that it could not unset to
              conform to the POSIX standard.
    09-01-14  The parameter expansion ${x+value} no longer expands the value of
              the variable x when determining whether x is set or not.
    09-01-13  A bug in which background jobs and pipelines that were not waited
              for could, in rare instances, cause the shell to go into an infinite
              loop or fail has been fixed.
    09-01-06  A bug in indexed arrays of compound variables in which referencing
              non-existent sub-variable in an arithmetic expression could cause
              the sub-variable to be created has been fixed.
    09-01-05  A bug in which the \ character did not escape extended regular
              expression pattern characters has been fixed.
    08-12-24  A bug in which killing the last element of a pipe did not cause
              a write to the pipe to generate a SIGPIPE has been fixed.
    08-12-19  A bug which could cause command substitution to hang when the
              last element of a pipeline in a command substitution was a built-in
              and the output was more that PIPE_BUFF.
    08-12-18  A bug which occurs when a here documented marker embedded in a
              command substitution occurs on a buffer boundary has been fixed.
    08-12-17  A bug in the output of typeset -p for variables that had attributes
              but did not have a value has been fixed.
    08-12-16  A bug in which a name reference to a name reference variable that
              references an array element has been fixed.
    08-12-16  A bug in which a variable given both the -A and -C attribute along
              with an initial assignment didn't work correctly has been fixed.
    08-12-10  The [[ -t fd ]] test was fixed to handle fd>9.
    08-12-10  A bug where function stack misalignment could cause a bus error
              has been fixed.
    08-12-09  Command completion was changed to use \ to quote special characters
              instead of quoting the argument in single quotes.
    08-12-07  A bug in typeset -m which occurred when the target node was an
              associative array element has been fixed.
    08-12-07  A timing bug on some systems (for example darwin), that could
              cause the last process of a pipeline entered interactively to fail
              with an "Exec format error" has been fixed.
    08-12-04 +SHOPT_BGX enables background job extensions. Noted by "J" in
              the version string when enabled. (1) JOBMAX=n limits the number
              of concurrent & jobs to n; the n+1 & job will block until a
              running background job completes. (2) SIGCHLD traps are queued
              so that each completing background job gets its own trap; $! is
              set to the job pid and $? is set to the job exit status at the
              beginning of the trap. (3) sleep -s added to sleep until the time
              expires or until a signal is delivered.
    08-12-04  The sign of floating point zero is preserved across arithmetic
              function calls.
    08-12-04  A bug that caused print(1) to produce garbled stdout/stderr
              output has been fixed.
    08-12-04  A bug in which printf "%d\n" "'<euro>'" did not output the
              numerical value of the EURO symbol, 8354, has been fixed.
    08-11-24 + /dev/fd* and /dev/std* redirections are first attempted with
              open() to preserve seek semantics; failing that the corresponding
              file descriptors are dup()'d.
    08-11-20  A bug which could cause a core dump if a function compiled with
              shcomp was found has been fixed.
    08-11-20  A bug in which jobs were not cleared from the jobs table for
              interactive shells when the pipefail option is on has been fixed.
    08-11-11  A bug in which a field that was unset in a type definition and later
              set for an instance could appear twice when displaying the variable
              has been fixed.
    08-11-11  A bug in which running a simple command & inside a function would
              not return the correct process id has been fixed.
    08-11-10  A bug in which the exit status of a command could be lost if the pid
              was that of the most recent command substitution that had completed
              has been fixed.
    08-11-10  The maximum depth for subshells has been increased from 256 to 65536.
    08-11-06  A bug which could cause a core dump when the _ reference variable was
              used as an embedded type with a compound assignment has been fixed.
    
    08-10-31  --- Release ksh93t  ---
    08-10-31  Variable scoping/initialization bugs that could dump core were fixed.
    08-10-24  The lexer now accepts all RE characters for patterns prefixed
              with a ksh ~(...) option expression.
    08-10-24 +For ${var/pat/sub} \0 in sub expands to the text matched by pat.
    08-10-18  A bug in array scoping that could dump core has been fixed.
    08-10-10  read -n and -N fixed to count characters in multibyte locales.
    08-10-10  A bug that mishandled _.array[] type references has been fixed.
    08-10-09 +${.sh.version} now contains a concatenation of the following (after
              'Version') denoting compile time features:
                    A       SHOPT_AUDIT
                    B       SHOPT_BASH
                    L       SHOPT_ACCT
                    M       SHOPT_MULTIBYTE
    08-10-09  A bug that caused subshell command substitution with redirection
              to hang has been fixed.
    08-10-08  Output errors, other than to stderr, now result in a diagnostic.
    08-10-08  ksh93 now supports types that contain arrays of other types as
              members.  Earlier versions core dumped in this case.
    08-10-05  A bug which caused the shell to emit a syntax error for an arithmetic
              statement of the form (( var.name[sub] = value)) has been fixed.
    08-10-01  A bug that caused subshell command substitution to hang has
              been fixed.
    08-09-29  When the -p export option of typeset is used with other options,
              only those variables matching the specified options are displayed.
    08-09-29  When the shell reads the environment and finds variables that are
              not valid shell assignments, it now passes these on to subsequent
              commands rather than deleting them.
    08-09-29  A bug in the display of compound variables containing an indexed
              array of compound variables has been fixed.
    08-09-29  A bug in the display of compound variables containing an associative
              array with a subscript containing a . in the name has been fixed.
    08-09-26  A core dump in the subshell environment restore has been fixed.
    08-09-24  $(...) has been fixed to properly set the exit status in $?.
    08-09-23  $(<...) with IFS=$'\n\n' has been fixed to retain all but the last
              of multiple trailing newlines.
    08-09-23  The -p option to typeset when used with other attributes, restricts
              the output to variables with the specified attributes.
    08-09-22  A bug that sometimes lost the exit status of a job has been fixed.
    08-09-21  A bug that retained trailing command substitution newlines in
              cases where the command caused the shell to fork has been fixed.
    08-09-19  type, whence -v, and command -v were fixed to comply with POSIX
              by writing 'not found' diagnostics to the standard error.
    08-09-18  test and [...] were fixed to comply with POSIX in the case
              of test '(' binop ')' where binop is a valid binary test operator.
    08-09-16 +If a method discipline named create is specified when defining a
              type, this function will be called when an instance is created.
    08-09-15 +The variable _ is now set as a reference to the compound variable
              when defining a compound variable or a type.
    08-09-10  The shell now prints an error message when the type name specified
              for an indexed array subscript is not an enumeration type.
    08-09-10  A bug in which a subshell that spawned a background process could
              loose output that was produced after the foreground completed
              has been fixed.
    08-09-10  A timing bug on some systems that could cause coprocesses started by a
              subshell to not clean up and prevent other coprocesses has been fixed.
    08-09-09  The typeset -m option is now able to rename array elements from
              the same array.
    08-09-09  The exit status of 2 from the DEBUG trap causes the next command
              to be skipped.  An exit value of 255 from a DEBUG trap called from
              a function causes the function to return.
    08-09-08  A bug in which a coprocess created in a subshell that did not
              complete when the subshell terminated could prevent a coprocess
              from being created in the parent shell has been fixed.
    08-09-05  An assignment of the form name1=name2 where name1 and name2
              are both compound variables causes name1 to get a copy of name2.
              name1+=name2 causes name2 sub-variables to be appended to name1.
    08-09-05  A bug in which unsetting a compound variable did not unset all
              the sub-variables has been fixed.
    08-09-01  A bug in the subshell cleanup code that could cause SIGSEGV has
              been fixed.
    06-08-26 +The SHLVL variable which is an environment variable used by bash
              and zsh that gets incremented when the shell starts.
    08-08-25 +For an indexed array, a negative subscript now refers to offsets
              from the end so that -1 refers to the last element.
    08-08-24  An alignment error for shorts on 64 bit architectures has been fixed.
    08-08-22  If oldvar is a compound variable, typeset -C newvar=oldvar creates
              newvar as a copy of oldvar.
    08-08-19 +The ALRM signal no longer cause the sleep builtin to terminate.
    08-08-13  When used in an arithmetic expression, the .sh.version variable
              now produces a number that will be increasing for each release.
    08-08-11  A bug in which type instantiation with a compound assignment in
              a dot script in which the type is defined has been fixed.
    08-08-07 +The -m option has been added to typeset to move or rename a
              variable.  Not documented yet.
    08-08-06  A bug in read when used in a loop when a prompt was specified
              when reading from a terminal has been fixed.
    08-08-01  A bug with the pipefail option in which a nested pipeline could
              cause an asynchronous command to block has been fixed.
    08-08-01  A for loop optimizer bug that treats .sh.lineno as an invariant
              has been fixed.
    08-07-30  A bug in which expanding compound variable that had a get discipline
              from with a here document could cause a syntax error has been fixed.
    08-07-18  A bug in which a nameref caused a local variable to be created
              rather than binding to an existing variable in the global scope
              has been fixed.
    08-07-17  A bug which occurred when a nameref was created from within a
              function that was  part of a pipeline has been fixed.
    08-07-14 +The compile option SHOPT_STATS was added. With this option the
              compound variable .sh.stats keeps usage statistics that could help
              with performance tuning.
    08-07-10 +The output of set now always uses a single line for each variable.
              For array variables, the complete set of values is now displayed.
    08-07-09 +The typeset -C option can be used with arrays to indicate that
              each element should default to a compound variable.
    08-07-08 +The %B format now outputs compound variables and arrays.  The
              alternate flag # can be used to cause output into a single line.
    08-07-03  When the window change signal, WINCH, is received, the current
              edit line is redrawn in place.
    08-07-01  A bug in the handling of shared variables when inside an embedded
              type has been fixed.
    08-06-29  A bug in multiline edit mode which occurred when the prompt length
              was three characters or less has been fixed.
    08-06-23  A bug in which the SIGCLD was not be triggered when background
              jobs completed has been fixed.
    08-06-23  _KSH_VERSION added as a name reference to .sh.version.
    08-06-20  type now outputs 'special builtin' for special builtins.
    08-06-19  A couple of bugs in multi-dimensional arrays have been fixed.
    08-06-19  A bug in which a syntax error in a dot script could generated
              a syntax error in the next subsequent command has been fixed.
    08-06-17  Reduced the maximum function call depth to 2048 to avoid exceptions
              on some architectures.
    08-06-16  A bug in which printf "%B" could generate an exception when the
              specified variable was not set has been fixed.
    08-06-16 +When typeset -p is followed by variable names, it now displays
              the attributes names and values for the specific names.
    08-06-14  A bug that could effect the drawing of the screen from multiline
              emacs or gmacs mode when walking up the history file has been fixed.
    08-06-13  A bug in which a compound variable defined in a subshell could
              have side effects into the parent shell has been fixed.
    08-06-13  A number of bugs related to using .sh.level to set the stack from
              for DEBUG traps have been fixed.
    08-06-13 +The .sh.lineno variable has been added.  When .sh.level is changed
              inside a DEBUG trap, the .sh.lineno contains the calling line number
              for the specified stack frame.
    08-06-13  The .sh.level variable has been documented and now works.
    08-06-11 +The -C option has been added to read for reading compound command
              definitions from a file.
    08-06-11 +The . command is now permitted inside a compound command definition.
              The dot script can contain declaration commands and dot commands.
    08-06-09 +Add -C option to typeset so that typeset -C foo, is equivalent
              to foo=().
    08-06-09  Added -n warning message for typeset option orderings that are valid
              with ksh88 but not valid with ksh93, for example Lx5.
    08-06-09  A bug in which the return value for an assignment command containing
              a command substitution with that failed was zero when the assignment
              contained redirections has been fixed.
    08-06-09  A bug in the quoting of $ inside a ERE pattern ~(E)(pattern)
              has been fixed.
    08-06-06  A bug when processing `` command substitution with the character
              sequence \$' has been fixed.
    08-06-02 +When defining a type, the typeset -r attribute causes this field
              to be required to be specified for each instance of the type and
              does not allow a default value.
    08-06-02  Several bugs in which compound variables were modified by
              subshells have been fixed.
    08-05-22 +The ceil function has been added to the math functions.
    08-05-21  A bug in which a name reference defined in a function and passed
              as an argument to another function could cause an incorrect binding.
    08-05-21  A bug in freeing compound variables that are local to functions
              has been fixed.
    08-05-19 +The array expansions ${array[sub1..sub2]} and ${!array[sub1..sub2]}
              to expand to the value (or subscripts) for array between sub1 and
              sub2 inclusive.  For associative arrays, the range is based on
              location in the POSIX locale.  The .. must be explicit and cannot
              result from an expansion.
    08-05-15  The trap on SIGCLD is no longer triggered by the completion of
              the foreground job as with ksh88.
    08-05-14  A bug in the implementation of the editing feature added on
              07-09-19 in emacs mode has been fixed.
    08-05-12  A bug in processing the test built-in with parenthesis has been
              fixed.
    08-05-12  The unset built-in now returns non-zero when deleting an array
              subscript that is not set.
    08-05-08 +Changing the value of HISTFILE or HISTSIZE will cause the old
              history file to be close and reopened with the new name or size.
    08-05-08  When FPATH is changed functions that were found via a path search
              will be searched for again.
    08-05-08  A parser bug in which reserved words and labels were recognized
              inside compound indexed array assignment after a new-line has
              been fixed.
    08-05-07  A bug in getopts when handling numerical option arguments has
              been fixed.
    08-05-07 +The typeset -S option was added for variables outside type
              definitions to provide a storage class similar to C static
              inside a function defined with function name.  When outside
              type definitions and outside a function, the -S option cause
              the specified variable so be unset before the assignment and
              before the remaining attributes are supplied.
    08-05-07  A bug that affected the cursor movement in multiline mode when
              a character was deleted from near the beginning of the any
              line other than the first.
    08-05-01  In multiline edit mode, the refresh operation will now clear
              the remaining portion of the last line.
    08-05-01  A bug in computing prompt widths for the edit modes for prompts
              with multibyte characters has been fixed.
    08-05-01  A bug in the multiline edit mode which could cause the current
              line to be displayed incorrectly when moving backwards from third
              or higher line to the previous line has been fixed.
    08-05-01  A bug in which options set in functions declared with the function
              name syntax were carried across into functions invoked by these
              functions has been fixed.
    08-04-30  A bug which could cause a coprocess to hang when the read end
              is a builtin command has been fixed.
    08-04-30 +The emacs and vi editors have been modified to handle window
              change commands as soon as they happen rather than waiting for
              the next command.
    08-04-28  A bug in which ${!x} did not expand to x when x was unset has been
              fixed.
    08-04-27  A bug in which the assignment x=(typeset -a foo=([0]=abc)) created
              x.foo as an associative array has been fixed.
    08-04-25  A bug in which $# did not report correctly when there were more
              than 32K positional parameters has been fixed.
    08-04-04  Choose the name _ as the sub-variable that holds type or instance
              specific data used by discipline functions.
    08-03-27  A bug in which the terminal group was not given back to the parent
              shell when the last part of a pipeline was handled by the parent shell
              and the other parts of the pipeline complete has been fixed.
              The symptom was that the pipeline became uninterruptable.
    08-03-25  A bug in restricted mode introduced in ksh93s that caused scripts
              that did not use #! to executed in restricted mode has been fixed.
    08-03-25  A bug in which the pipefail option did not work for a pipeline
              within a pipeline has been fixed.
    08-03-24  A bug in which OPTIND was not set correctly in subshells has
              been fixed.
    08-03-24  A bug which could cause a memory exception when a compound variable
              containing an indexed array with only element 0 defined was expanded.
    08-03-20  A bug in which ${!var[sub].*} was treated as an error has been fixed.
    08-03-20  Associative array assignments of the form ([name]=value ...)
              now allow ; as well as space tab and new line to separate elements.
    08-03-18  A buffering problem in which standard error was sometimes
              not flushed before sleep has been fixed.
    08-03-17  A bug in which a signal sent to $$ while in a subshell would be
              sent to the subshell rather than the parent has been fixed.
    08-03-17 + A --default option added to set(1) to handle set +o POSIX semantics.
              set --state added as a long name alias for set +o.
    08-03-14  A bug in which using monitor mode from within a script could
              cause the terminal group to change has been fixed.
    08-03-10  The new ${...} command substitution will treat the trailing }
              as a reserved word even if it is not at the beginning of a command,
              for example, ${ date }.
    08-03-10  If the name of the ENV begins with /./ or ././ then the
              /etc/ksh.kshrc file will not be executed on systems that support
              this interactive initialization file.
    08-03-07  A bug in which ksh -i did not run the ENV file has been fixed.
    08-03-07  A bug in which ulimit did not always produce the same output as
              ulimit -fS has been fixed.
    08-03-04  A bug in multiline mode in emacs and vi mode which could cause the
              cursor to be on the wrong line when interrupt was hit has been fixed.
    08-03-03  The change made in ksh93s+ on 07-06-18 in which braces became
              optional for ${a[i]} inside  [[...]] was restored in the case
              where the argument can be a pattern.
    08-03-03  A bug in which creating a name reference to an associative array
              instance would fail when the subscript contained characters [ or
              ] has been fixed.
    08-02-29 +The redirection operator >; has been added which for non-special
              files, generates the output in a temporary file and writes the
              specified file only of the command has completed successfully.
    08-02-15  A bug in ${var/pattern/string} for patterns of the form ?(*) and +(*)
              has bee fixed.
    08-02-07  A bug in which test \( ! -e \) produced an error has been fixed.
    08-02-14 +The typeset -a option can now optionally be followed by the name
              of an enumeration type which allows subscripts to be enumerations.
    08-02-14 +The enum builtin which creates enumeration types has been added.
    08-02-12  The backoff logic when there are no more processes has been fixed.
    08-02-07  The -X option has been added to typeset.  The -X option creates
              a double precision number that gets displayed using the C99 %a
              format.  It can be used along with -l for long double.
    08-01-31  The -T option to typeset has been added for creating typed
              variables.  Also the -h and -S options have been added to
              typeset that are only applicable when defining a type.
    08-01-31  The prefix expansion operator @ has been added.  ${@name}
              expands to the type of name or yields the attributes.
    07-11-15  A bug in the macro expander for multibyte characters in which
              part of the character contains a file pattern byte has been fixed.
    07-10-03  A bug in which : was not allowed as part of an alias name has been
              fixed.
    07-09-26  A bug in which appending a compound variable to a compound variable
              or to an index array didn't work has been fixed.
    07-09-19  In both emacs and vi edit mode, the escape sequence \E[A (usually
              cursor up, when the cursor is at the end of the line will fetch
              the most recent line starting with the current line.
    07-09-18  The value of ${!var} was correct when var was a reference to an
              array instance.
    07-09-18  The value of ${!var[sub]} was not expanding to var[sub] and this
              was fixed.  It also fixed ${name} where name is a name reference
              to var[sub].
    07-09-18 +It is now legal to create a name reference without an initialization.
              It will be bound to a variable on the first assignment.
    07-08-30 +A discipline function can be invoked as ${x.foo} and is equivalent
              to ${ x.foo;} and can be invoked as x.foo inside ((...)).
    07-07-09  A bug in which typeset -a did not list indexed arrays has been
              fixed.
    07-07-03 +The command substitution ${ command;} has been added.  It behaves
              like $(command) except that command is executed in the current
              shell environment.  The ${ must be followed by a blank or an
              operator.
    
    08-04-17  --- Release ksh93s+  ---
    08-04-17  A bug in which umask was not being restored correctly after a
              subshell has been fixed.
    08-04-15  A bug in which sending a STOP signal to a job control shell started
              from within a shell function caused cause the invoking shell to
              terminate has been fixed.
    08-04-11  A bug which caused $(exec > /dev/null) to go into an infinite loop
              has been fixed.
    08-03-27  A bug in which typeset -LZ was being treated as -RZ has been fixed.
    08-03-06  A bug with ksh -P on systems that support the the profile shell,
              in which it would exit after running a non-builtin has been fixed.
    08-01-31  A bug in which command substitution inside ((...)) could cause
              syntax errors or lead to core dumps has been fixed.
    08-01-17  A bug in which discipline functions could be deleted when invoked
              from a subshell has been fixed.
    08-01-17  A bug in which a command substitution consisting only of
              assignments was treated as a noop has been fixed.
    08-01-17  A bug in which discipline functions invoked from withing a
              compound assignment could fail has been fixed.
    08-01-16  Incomplete arithmetic assignments, for example ((x += )), now
              generate an error message.
    08-01-16  A bug in which a set discipline defined for a variable before
              an array assignment could cause a core dump has been fixed.
    08-01-03  A bug in on some systems in which exit status 0 is incorrectly
              returned by a process that catches the SIGCONT signal is stopped
              and then continued.
    07-12-13  A race condition in which a program that has been stopped and then
              continued could loose the exit status has been fixed.
    07-12-12  Code to check for file system out of space write errors for all
              writes has been added.
    07-12-11  A bug in the macro expander for multibyte characters in which
              part of the character contains a file pattern byte has been fixed.
    07-12-06  A bug in the emacs edit mode when multiline was set that output
              a backspace before the newline to the screen has been fixed.
    07-12-04  A bug in which using <n>TAB after a variable name listing expansion
              in the edit modes would cause the $ to disappear has been fixed.
    07-11-28  A bug in which setting IFS to readonly could cause a subsequent
              command substitution to fail has been fixed.
    07-11-27  A work around for a gcc 4.* C99 "feature" that could cause a job
              control shell to go into an infinite loop by adding the volatile
              attribute to some auto vars in functions that call setjmp().
    07-11-27  A bug in which the shell could read ahead on a pipe causing the
              standard input to be incorrectly positioned has been fixed.
    07-11-27  A bug in which compound variable UTF-8 multibyte values were not
              expanded or traced properly has been fixed.
    07-11-21  A bug where an unbalanced '[' in a command argument was not treated
              properly has been fixed.
    07-11-15  A bug in which compatibility mode (no long option names) getopts(1)
              incorrectly set the value of OPTARG for flag options has been fixed.
    07-11-15  A bug in which "hash -- name" treated "--" as an invalid name operand
              has been fixed.
    07-11-15  typeset now handles "-t -- [-r] [--]" for s5r4 hash(1) compatibility.
    07-11-15  A bug in which the umask builtin mis-handled symbolic mode operands
              has been fixed.
    07-11-15  Bugs in which shell arithmetic and the printf builtin mis-handled the
              signs of { -NaN -Inf -0.0 } have been fixed.
    07-11-15 +The full { SIGRTMIN SIGRTMIN+1 ... SIGRTMAX-1 SIGRTMAX } range
              of signals, determined at runtime, are now supported.
    07-11-15  A bug in which creating an index array with only subscript 0 created
              only a simple variable has been fixed.
    07-11-14  A bug in which appending to an indexed array using the form
              name+=([sub]=value) could cause the array to become an associative
              array has been fixed.
    07-11-14  A bug in which typeset without arguments could coredump if a
              variable is declared as in indexed array and  has no elements has
              been fixed.
    07-11-14  A bug in which creating a local SECONDS variable with typeset in
              a function could corrupt memory has been fixed.
    07-11-14  A bug which could cause a core dump when a script invoked by name
              from a function used compound variables has been fixed.
    07-11-05  A bug in which printf %d "'AB" did not diagnose unconverted characters
              has been fixed.
    07-11-05  printf %g "'A" support added for all floating point formats.
    07-11-01  A bug in which typeset -f fun did not display the function definition
              when invoked in a subshell has been fixed.
    07-10-29  The sleep builtin was fixed so that all floating point constants
              are valid operands.
    07-10-10  A bug in which the locale was not being restored after
              LANG=value command has been fixed.
    07-09-20  A bug in which a nameref to a compound variable that was local
              to the calling function would not expand correctly when displaying
              is value has been fixed.
    07-09-19  A bug which cause cause a core dump if .sh.edchar returned
              80 characters or more from a keyboard trap has been fixed.
    07-09-14  A bug in which could cause a core dump when more than 8 file
              descriptors were in use has been fixed.
    07-09-10  A bug in which creating a name reference to an instance of
              an array when the array name is itself a reference has been fixed.
    07-09-10  The file completion code has been modified so that after an = in
              any word, each : will be considered a path delimiter.
    07-09-06  A bug in which subprocess cleanup could corrupt the malloc() heap
              has been fixed.
    07-08-26  A bug in which a name reference to an associative array instance
              could cause the subscript to be evaluated as an arithmetic expression
              has been fixed.
    07-08-22  A bug in which the value of an array instance was of a compound
              variable was not expanded correctly has been fixed.
    07-08-14  A bug which could cause a core dump when a compound assignment was
              made to a compound variable element with a typeset -a attribute
              has been fixed.
    07-08-08  A bug in which a trap ignored in a subshell caused it to be
              ignored by the parent has been fixed.
    07-08-07  A bug in which the set command would generated erroneous output
              for a variable with the -RZ attribute if the variable name had been
              passed to a function has been fixed.
    07-08-02  A bug in which read x[1] could core dump has been fixed.
    07-08-02  A second bug in which after read x[sub] into an associative array
              of an element that hasn't been assigned could lead to a core dump
              has been fixed.
    07-07-31  A bug in which a pipeline that completed correctly could have
              an exit status of 127 when pipefail was enabled has been fixed.
    07-07-09 +The SHOPT_AUDIT compile option has been added for keyboard logging.
    07-06-25  In vi insert mode, ksh no longer emits a backspace character
              before the carriage return when the newline is entered.
    07-06-25  A bug in which pipefail would cause a command to return 0
              when the pipeline was the last command and the failure happened
              on a component other than the last has been fixed.
    07-06-25  A bug in the expansion of ${var/pattern/rep} when pattern or rep
              contained a left parenthesis in single quotes has been fixed.
    07-06-18  The braces for a subscripted variable with ${var[sub]} are now
              optional when inside [[...]], ((...)) or as a subscript.
    07-05-28  A bug in brace expansion in which single and double quotes did
              not treat the comma as a literal character has been fixed.
    07-05-24  The -p option of whence now disables -v.
    07-05-23  Several bug fixes in compound variables and arrays of arrays
              have been made.
    07-05-15  A bug in which the %B format of printf was affected  by the
              locale has been fixed.
    07-05-14  A bug in which \ was not removed in the replacement pattern with
              ${var/pattern/rep} when it was not followed by \ or a digit has
              been fixed.
    07-05-10  A bug in which ksh -R file core dumped if no script was specified
              has been fixed.  it not displays an error message.
    07-05-07  Added additional Solaris signals to signal table.
    07-04-30  A bug in which a pipeline with command substitution inside a
              function could cause a pipeline that invokes this function to
              hang when the pipefail option is on has been fixed.
    07-04-30 +Added -q to whence.
    07-04-18  A small memory leak with each redirection of a non-builtin has
              been fixed.
    07-03-08  A bug in which set +o output command line options has been fixed.
    07-03-08  A bug in which an error in read (for example, an invalid variable
              name), could leave the terminal in raw mode has been fixed.
    07-03-06  A bug in which read could core dump when specified with an array
              variable with a subscript that is an arithmetic expression has
              been fixed.
    07-03-06  Several serious bugs with the restricted shell were reported and
              fixed.
    07-03-02  If a job is stopped, and subsequently restarted with a CONT
              signal and exits normally, ksh93 was incorrectly exiting with
              the exit status of the stop signal number.
    07-02-26 +M-^L added to emacs mode to clear the screen.
    07-02-26  A bug in which setting a variable readonly in a subshell would
              cause an unset error when the subshell completed has been fixed.
    07-02-19 +The format with printf uses the new = flag to center the output.
    07-02-19  A bug in which ksh93 did not allow multibyte characters in
              identifier names has been fixed.
    07-02-19  A bug introduced in ksh93 that causes global compound variable
              definitions inside functions to exit with "no parent" has been fixed.
    07-02-19  A bug in which using compound commands in process redirection
              arguments would give syntax errors <(...) and >(...) has been fixed.
    07-01-29  A bug which caused the shell to core dump which can occur when a
              built-in exits without closing files that it opens has been fixed.
    07-01-26  A bug in which ~(E) in patterns containing \ that are not inside ()
              has been fixed.
    
    06-12-29  --- Release ksh93s  ---
    06-12-29  A bug in which the value of IFS could be changed after a command
              substitution has been fixed.
    06-12-22 +/dev/(tcp|udp|sctp)/HOST/SEVRICE now handles IPv6 addresses on
              systems that provide getaddrinfo(3).
    06-12-19 +A -v option was added to read.  With this option the value of
              the first variable name argument will become the default value
              when read from a terminal device.
    06-11-20  A bug in which "${foo[@]:1}}" expands a null argument (instead of
              no argument), when foo[0] is not empty has been fixed.
    06-11-16  The discipline functions have been modified to allow each subscript
              to act independently.  Currently the discipline function will not
              be called when called from a discipline function of the same variable.
    06-11-14  A bug which could cause a core dump if a file descriptor for
              an internal file was closed from with a subshell has been fixed.
    06-10-30 +The redirections <# pattern, and <## pattern have been added.
              Both seek forward to the beginning of the next line that contains
              the pattern.  The <## form copies the skipped portion to standard
              output.
    06-10-26 +On systems that support stream control transport, the virtual file
              name /dev/sctp/host/port can now be used to establish connections.
    06-10-26 +The printf modifier # when used with d produces units in thousands
              with a single letter suffix added.  The modifier # when used with
              the i specification provides units of 1024 with a two letter suffix.
    06-10-24  The value of $! is now set to the process id of a job put
              into the background with the bg command as required by POSIX.
    06-10-23  A bug in which the value of $! was affected by a background
              job started from a subshell has been fixed.
    06-10-23  A bug in ${var:offset:len} in multibyte locales has been fixed.
    06-10-15 +The remaining math functions from C99 were added for any system
              that supports them.
    06-10-13  The klockwork.com software detected a few coding errors that
              have been fixed.
    06-10-12  A bug when skipping over `...` with ${x:=`...`} when x is set
              has been fixed.
    06-10-11  A bug in process floating constants produced by the %a format
              of printf has been fixed.
    06-10-06  A bug in which IFS was not being restored correctly in some
              cases after a subshell has been fixed.
    06-10-06  A bug in which pipefail was not detecting some failures in
              pipelines with 3 or more states has been fixed.
    06-10-03  A bug in the processing of >(...) with builtins which could
              cause the builtin to hang has been fixed.
    06-10-03  A bug in the for loop optimizer which causes >(...) process
              substitution to be ignored has been fixed.
    06-09-17 +The -a option was added to typeset for indexed arrays.  This
              is only needed when using the ([subscript]=value ...) form.
    06-09-06 +The showme option was added.  Each simple command not beginning
              with a redirection and not occurring with in the while, until, if,
              select condition can be preceded by a semi-colon which will
              be ignored when showme is off.  When showme is on, any command
              preceded by a colon will be traced but not executed.
    06-08-16 +As a new feature, a leading ~(N) on a pattern has no effect
              except when used for file expansion.  In this case if not
              matches are found, the pattern is replaced by nothing rather
              than itself.
    06-08-11  A bug in the expansion of ${.sh.match[i]:${#.shmatch[i]}} has
              been fixed.
    06-08-10 +The read builtin options -n and -N have been modified to treat
              the size as characters rather than bytes unless storing into a
              binary (typeset -B) variable.
    06-07-27 +When the here document operator << is followed directly by a #
              rather than a -, the first line of the here-document determines
              how much whitespace is removed for each line.
    06-07-26  A bug in the C-shell history (enabled with set -H) in which the
              history event !$ was not processed has been fixed.
    06-07-21  A bug on some systems in which assigning PATH on a command line
              would not take effect has been fixed.
    06-07-20  Add ksh93 and rksh93 as allowable names for ksh binaries.
    06-07-20  Removed the SHOPT_OO compilation option which was only partially
              implemented.
    06-07-20  The ability to use egrep, grep, and fgrep expressions within
              shell patterns has been documented.
    06-07-17  A bug with arithmetic command expressions for locales in which
              the comma is a thousands separator has been fixed.
    06-07-13 +The default HISTSIZE was increased from 128 to 512.
    06-07-13  A multibyte problem with locales that use shift codes has been fixed.
    06-06-23  A number of bug fixes for command, file, and variable completion
              have been mode.
    06-06-20 +Floating point division by zero now yields the constant Inf or -Inf
              and floating functions with invalid arguments yield NaN.
    06-06-20 +The floating point constants Inf and NaN can be used in arithmetic
              expressions.
    06-06-20 +The functions isinf(), isnan(), tanhl() have been added for
              arithmetic expressions.
    06-06-13  Internal change to use ordering for variables instead of hashing
              to speed up prefix matching.
    06-06-13  A window between fork/exec in which a signal could get lost
              and cause a program to hang has been eliminated
    06-06-13  A bug in edit completion with quoted strings has been fixed.
    06-06-07  The restricted options can now be enabled by set as well as on
              the command line.  Once set, it can not be disabled.
    06-06-04  Modified built-in binding so that for systems for which /bin
              and /usr/bin are the same, a builtin bound to /bin will get
              selected when either /bin or /usr/bin is scanned.
    06-06-04 +Added literal-next character processing for emacs/gmacs mode.
              This change is not compatible with earlier versions of ksh93
              and ksh88 when the stty lnext is control-v.  The sequence
              escape-control-v will display the shell version.
    06-05-31 +Modified emacs and vi mode so that entering a TAB after a partial
              TAB completion, generates a listing of possible completions.
              After the second TAB, a number followed by a TAB will perform
              the completion with the corresponding item.
    06-05-19 +Modified arithmetic so that conversions to strings default to
              the maximum number of precision digits.
    06-05-16  Bug fixes for multibyte locales.
    06-05-10  The =~ operator was added to [[...]] and  [[ string ~= ERE ]]
              is equivalent to [[ string == ~(E)ERE ]].
    06-04-25  A bug in the vi edit mode which could cause the shell to core dump
              when switching from emacs mode.
    06-04-17  A bug in which using LANG or LC_ in assignment lists with builtins
              did not restore the localed correctly has been fixed.
    06-04-04  A bug in which discipline functions could not be added to variables
              whose names started with .sh has been fixed.
    06-03-28 +The -s option to typeset was added to modify -i to indicate short
              integers.
    06-03-28  A bug in which variables assignment lists before functions
              defined with function name were not passed on the functions
              invoked by this function has been fixed.
    06-03-28  A bug in which name references defined within a function defined
              with function  name could not be used with compound variables has
              been fixed.
    06-03-27  A bug in which read <&p (print >&p) would cause the coprocess input
              (output) pipe to close before reading from (after writing to)
              it has been fixed.
    06-02-28  A bug in which stopping a job created with the hist builtin command
              would create a job that could not be restarted has been fixed.
    
    06-01-24  --- Release ksh93r  ---
    06-01-24  A bug in which running commands with standard output closed would
              not work as expected has been fixed.
    06-01-23  A bug in which print -u<n> could fail when file descriptor <n> was
              open for writing has been fixed.
    06-01-19  The ?: arithmetic operator fixed to work when the operation after
              the colon was an assignment.
    05-12-24  A bug which could lead to a core dump when elements of a compound
              variable were array elements, i.e. foo=(bar=(1 2)), has been fixed.
    05-12-13  An arithmetic bug in which x+=y+=z was not working has been fixed.
    05-12-13  An arithmetic bug in which x||y was returning x when x was non-zero
              rather than 1 has been fixed.
    05-12-07 +The aliases for integer and float have been changed to use attributes
              -li and -lE to handle long long and long double types.
    05-12-07 +The histexpand (-H) option has been added which allows C-shell
              style history expansions using the history character !.
    05-12-07 +The multiline option was added which changes that way the edit
              modes handle lines longer than the window width.  Instead of
              horizontal scrolling, multiple lines on the screen are used.
    05-12-05  The whence builtin now returns an absolute pathname when the
              command is found in the current directory.
    05-11-29  A bug which caused ksh -c '[[ ! ((' to core dump rather than
              report a syntax error has been fixed.
    05-11-29  A bug when reading fixed length records into typeset -b variables
              which caused a zero byte to terminate the value has been fixed.
    05-11-22 +The ability to seek to an offset within a file has been added
              with the new I/O redirection operators, <#  and >#.  Currently,
              these redirection operators must be followed by ((expr))
              but in a future release, it should be able to used to seek forward
              to the specified shell pattern.  In addition $(n<#) expands to the
              current byte offset for file descriptor n.
    05-11-22 +The .sh.match array variable is now set after each [[ ... ]]
              pattern match.  Previously it was only set for substring matches.
    05-10-17  A bug in which the library path variable could be prefixed
              with a directory when a .path file was not encountered in
              the directory of the executable has been fixed.
    05-09-15  A for/while loop optimizer bug in which $OPTIND was not
              correctly expanded has been fixed.
    05-09-05  A bug in which a history command that invoked a history
              command could go into an infinite loop has been fixed.
    05-08-31 +In the case that IFS contains to adjacent new-lines so that
              new-line is not treated as a space delimiter, only a single
              new-line is deleted at the end of a command substitution.
    05-08-19 +When a tilde substitution expands to the / directory and is
              followed by a /, it is replaced by the empty string.
    05-08-16  A bug in which n<&m did not synchronize m has been fixed.
    05-08-16  A bug in which process substitution  ( <() and >() ) was not
              working within for and while loops has been fixed.
    05-07-24  A bug in which the pattern ~(E)(foo|bar) was treated as a syntax
              error has been fixed.
    05-07-24  A bug in completion with <n>=, where n was the one of the
              previous selection choices has been fixed.
    05-07-21  A bug with multibyte input when no edit mode was specified which
              caused the input line to shift left/right has been fixed.
    05-06-24  A race condition which could cause the exit status to get lost
              on some fast systems has been fixed.
    05-06-21  A bug in which nested patterns of the form {m,n}(pat) would cause
              syntax errors has been fixed.
    05-06-21  A bug in the macro expander has been fixed which could cause a
              syntax error for an expansion of the form ${x-$(...)} when
              x is set and the command substitution contained certain strings.
    05-06-08 +On systems for which echo does not do System V style \ expansions,
              the -e option was added to enable these expansion.
    05-06-08  A bug in which ${var op pattern} to not work when inside an
              arithmetic expression has been fixed.
    05-05-23 +An extension to shell patterns that allows matching of nested
              groups while skipping over quoted strings has been added.
    05-05-18  A bug in which the line number for errors was not correct for
              functions loaded from FPATH has been fixed.
    05-04-18  A bug in which the exit status $? is not set when a trap triggered
              by the [[...]] command is executed has been fixed.
    05-04-08 +Redirection operators can be directly preceded with {varname}
              with no intervening space, where varname is a variable name which
              allows the shell to select a file descriptor > 10 and store it
              into varname.
    05-04-08 +SHOPT_CMDLIB_BLTIN=1 now includes <cmdlist.h> generated table.
    05-04-07 +[[ -o ?option ]] is true if "option" is a supported option.
    05-04-05  A bug in handling file completion with spaces in the names
              has been fixed.
    05-03-25 +The SIGWINCH signal is caught by default to keeps the LINES and
              COLUMNS variables in sync with the actual window size.
    05-03-25 +Building ksh with SHOPT_REMOTE=1 causes ksh to set --rc if stdin is
              a socket (presumably part of a remote shell invocation.)
    05-03-25 +Building ksh with SHOPT_SYSRC=1 causes interactive ksh to source
              /etc/ksh.kshrc (if it exists) before sourcing the $ENV file.
    05-03-25 +{first..last[..incr][%fmt]} sequences added to brace expansions
              when braceexpand is enabled.
    05-03-03  A bug where a SIGCHLD interrupt could cause a fifo open to fail has
              been fixed.
    05-02-25  A bug in which a builtin command run in the background could
              keep a file descriptor open which could cause a foreground
              process to hang has been fixed.
    05-02-24  A bug where builtin library commands (e.g., date and TZ) failed to
              detect environment variable changes has been fixed.
    05-02-22 +The read builtin and word splitting are now consistent with respect
              to IFS -- both treat IFS as field delimiters.
    05-02-22 +The read builtin no longer strips off trailing delimiters that
              are not space characters when there are fewer variables than fields.
    05-02-17  A builtin bug on systems where dlsym(libcmd) returns link-time
              bindings has been fixed.
    05-02-12  A bug in which the lib_init() function for .paths BUILTIN_LIB
              libraries was not called has been fixed.
    05-02-06  A bug on some systems in which moving the write end of a co-process
              to a numbered file descriptor could cause it to close has been fixed.
    05-02-06  A bug in the vi-edit mode in which the character under the cursor
              was not deleted in some cases with the d% directive has been fixed.
    05-02-06  A bug where external builtin stdout/stderr redirection corrupted
              stdout has been fixed.
    05-02-04  A bug where times formatting assumed CLK_TCK==60 has been fixed.
    
    05-01-11  --- Release ksh93q  ---
    05-01-11  A bug in the integral divide by zero check has been fixed.
    05-01-11 +The -l option has been added to read /etc/profile and
              $HOME/.profile, if they exist, before the first command.
    05-01-11  An argument parsing bug that caused `kill -s x -- n' to fail has
              been fixed.
    05-01-11 +The .paths file, introduced in ksh93m, which can appear in
              any directory in PATH, now allows a line of the form 'BUILTIN_LIB=.'
              When a command is searched for this directory, and the full path
              matches the path of the built-in version of the command (listed
              by the 'builtin' command) then the built-in version of the command
              is used.  When ksh is built with SHOPT_CMDLIB_DIR=1 then all libcmd
              functions become builtins with the '/opt/ast/bin/' directory prefix.
    05-01-10  A bug in which a nameref to a compound name caused a core dump has
              been fixed.
    05-01-09  A bug in which some SIGCHLD interrupts (from child processes exiting)
              caused a fatal print/echo error diagnostic has been fixed.
    04-12-24  A bug in which some SIGCHLD interrupts (from child processes exiting)
              corrupted the internal process/job list, sometimes causing the shell
              to hang, has been fixed.
    04-12-01  A bug in which typeset -Fn truncated less than n digits for large
              numbers has been fixed.
    04-11-25  A bug in which standard error could be closed after a redirection
              to /dev/stderr has been fixed.
    04-11-17  A bug in which an expansion of the form ${array[@]:3} could expand
              to ${array[0]} when ${array[3]} was not set has been fixed.
    04-10-22 +The -E or -orc command line option reads ${ENV-$HOME/.kshrc} file.
    04-10-22 +`-o foo' equivalent to `+o nofoo', `-o nobar' equivalent to `+o bar'.
              `--foo' equivalent to `-o foo', `--nofoo' equivalent to `+o foo'
    04-10-05 +The .paths file, introduced in ksh93m, which can appear in
              any directory in PATH, now allows a line of the form
              'BUILTIN_LIB=libname'.  When a command is searched for this directory,
              the shared library named by libname will first be searched for a
              built-in version of the command.
    04-09-03  <<< here documents now handle quotes in the word token correctly.
    04-08-08 +The maximum size for read -n and and read -N was increased from
              4095 to 32M.
    04-08-04 +printf %q was modified so that if an no operand was supplied, no
              no output would be generated rather than a quoted empty string.
    04-08-01 +The -n and -N options of the read builtin has been modified
              when reading variables with the binary attribute so that the
              data is stored directly rather than through assignment.
    04-08-01 +The shcomp command has been modified to process alias commands
              under some conditions.
    04-07-31 +The .sh.match variable added in ksh93l, now works like other
              indexed arrays.
    04-07-08  A loop optimizer bug which occurs when typeset is used in
              a for or while loop inside a function has been fixed.
    04-06-24 +The number of subexpressions in a pattern was increased to 64
              from the current number of 20.
    04-06-17 +The -t option to read was modified to allow seconds to be
              specified as any arithmetic expression rather than just
              an integral number of seconds, for example even -t 'sin(.5)'
              is now valid.
    04-06-16  Two small memory leak problems were fixed.
    04-06-15  A bug in ${var/pattern/"string"} which occurred when string
              contained pattern matching characters has been fixed.
    04-05-08  printf $'%d\n' produced an erroneous error message and has
              been fixed.
    04-05-24  A bug in which an associative array without any elements could
              cause a core dump when a script with an associative array with
              the same name was declared in a script invoked by name has
              been fixed.
    04-05-11  A bug in which an exec statement could close the script that
              is being processed in a script that is run by name causing
              a failure has been fixed.
    04-04-28 +If the first character of assignment to an integer variable was 0,
              the variable had been treated as unsigned.  This behavior was
              undocumented and has been removed.
    04-04-05  A bug in which the positioning of standard input could be incorrect
              after reading from standard input from a subshell has been fixed.
    04-03-30  A bug in the for loop optimizer which in rare cases could cause
              memory corruption has been fixed.
    04-03-29 +The preset alias source='command .' has been added.
    04-03-29  A bug introduced in ksh93p on some systems in which invoked by
              name with #! on the first line would not get the signals handling
              initialized correctly has been fixed.
    04-03-29  A bug introduced in ksh93p in which a HUP signal received by
              a shell that is a session group leader was not passed down to
              its children has been fixed.
    
    04-02-28  --- Release ksh93p  ---
    04-02-28 +The ability to apply an append discipline to any variable has
              been added.
    04-02-14  A bug in which the exportall option (set -a) would cause incorrect
              results for arrays has been fixed.
    04-02-02  A bug in which an exported array would pass more than
              the first element to a script invoked by name has been fixed.
    04-02-02  A bug on some systems in which name=value pairs preceding a script
              invoked by name was not getting passed to the script has been fixed.
    04-01-20  A bug in which an unset discipline function could cause a core
              dump on some systems has been fixed.
    04-01-12  A bug in which a continue or break called outside a loop from
              inside a function defined with name() syntax could affect
              the invoking function has been fixed.
    04-01-08  If a command name begins with ~, only filename completion will be
              attempted rather than pathname completion using the builtin editors.
    04-01-08  A bug in the vi edit mode in which the wrong repeat count on
              multiple word replacements with the . directive has been fixed.
    04-01-06  Backspace characters are now handled correctly in prompt strings.
    04-01-06 +The getopts builtin has been modified to accept numerical
              arguments of size long long on systems that support this.
    04-01-06  A bug in which unsetting all elements of an associative array
              would cause it to be treated as an indexed array has been fixed.
    03-12-15  A bug in which a quoted string ending with an unescaped $ would
              delete the ending $ in certain cases has been fixed.
    03-12-05  A bug in which the shell could hang when set -x tracing a command
              when an invalid multibyte character is encountered has been fixed.
    03-12-05  On some systems, if the KEYBD trap is set, then commands that use
              the meta key were not processed until return was hit.  This
              has been fixed.
    03-12-05  A problem which occurred when the login shell was not a group
              leader that could cause it to fail has been fixed.
    03-12-05  A problem in which a shell could core dump after receiving a signal
              that should cause it to terminate while it was in the process
              of acquiring more space has been fixed.
    03-12-05 +If ENV is not specified, the shell will default to $HOME/.kshrc
              for interactive shells.
    03-11-21  A bug introduced in ksh93o in which the DEBUG trap could get
              disabled after it triggered has been fixed.
    03-11-04  A bug in which using arithmetic prefix operators ++ or -- on a
              non-lvalue could cause a core dump has been fixed.
    03-11-04  A bug in which leading zeros were stripped from variable
              expansions within arithmetic computation to avoid being treated
              as octal constants when they should not have, has been fixed.
    03-10-08  A bug introduced in ksh93o in which a large here document inside
              a function definition could get corrupted has been fixed.
    03-09-22  A bug in which the .get discipline function was not being
              called when a string variable was implicitly referenced from
              within a numerical expression has been fixed.
    03-09-22  A bug in which a script without a leading #! could get executed
              by /bin/sh rather than the current shell on some systems has
              been fixed.
    03-09-12 +To improve conformance with ksh88, leading zeros will be ignored
              when getting the numerical value of a string variable so that
              they will not be treated as octal constants.
    03-09-03 +The builtin kill command now processes obsolete invocations
              such as kill -1 -pid.
    03-09-02  The restriction on modifying FPATH in a restricted shell (sh -r)
              has been documented.
    03-09-02 +The restricted shell (sh -r) has been modified to disallow
              executing command -p.
    03-08-07  A bug in which the KEYBD trap was not being invoked when
              characters with the 8th bit set has been fixed.
    03-08-02  A parser bug introduced in ksh93o which caused the character
              after () in a Posix function definition to be skipped
              when reading from standard input has been fixed.
    03-08-01  A bug in which "${foo#pattern}(x)" treated (x) as if it were
              part of the pattern has been fixed.
    03-08-01 +The command -x option has been modified so that any trailing
              arguments that do expand to a single word will be included
              on each invocation, so that commands like command -x mv * dir
              work as expected.
    
    03-07-20  --- Release ksh93o+  ---
    03-07-20  A bug in which could cause memory corruption when a posix
              function invoked another one has been fixed.
    03-07-15  A bug in which a file descriptor>2 could be closed before
              executing a script has been fixed.
    03-07-15  A parsing error for <() and >() process substitutions inside
              command substitution has been fixed.
    03-07-15  A parsing error for patterns of the form {...}(...) when
              used inside ${...} has been fixed.
    03-07-15  An error in which expanding an indexed array inside a compound
              variable could cause a core dump has been fixed.
    03-07-15  A bug in which on rare occasions a job completion interrupt
              could cause to core dump has been fixed.
    03-06-26  A bug in which process substitution embedded within command
              substitution would generate a syntax error has been fixed.
    03-96-23  A bug in which ${@:offset:len} could core dump when there
              were no arguments has been fixed.
    03-96-23  A bug in which ${X[@]:offset:len} could core dump when X
              was unset has been fixed.
    03-06-22 +The -x option was added to the command builtin.  If this
              option is on, and the number of arguments would exceed ARG_MAX,
              the command will be invoked multiple times with a subset of
              the arguments.  For example, with alias grep='command -x grep,
              any number of arguments can be specified.
    03-06-14  A bug in which could cause a core dump on some systems with
              vi and emacs editors with the MULTIBYTE option has been fixed.
    03-06-06  A bug in which the shell could core dump when a script was
              run from its directory, and the script name a symlink to a file
              beginning with .., has been fixed.
    03-06-05  A bug in which the shell could core dump when a child process
              that it is unaware of terminates while it is calling malloc()
              has been fixed.
    03-06-02 +An option named globstar (set -G) has been added.  When enabled,
              during pathname expansion, any component that consists only of ** is
              matches all files and any number of directory levels.
    03-05-30  A bug in which the PATH search could give incorrect results when
              run from directory foo and PATH contained .:foo:xxx has been fixed.
    03-05-29 +Some changes were made to the code that displays the prompt in edit
              mode to better handle escape sequences in the prompt.
    03-05-27  I added = to the list of characters that mark the beginning of
              a word for edit completion so that filenames in assignments
              can be completed.
    03-05-20  A bug in which read -N could hang on some systems when reading
              from a terminal or a pipe has been fixed.
    03-05-19  A bug in which the output of uname from a command substitution
              would go to the standard output of the invoking command when
              uname was invoked with a non-standard option has been fixed.
    03-05-19  A job control bug which would cause the shell to exit because
              it hadn't take back the terminal has been fixed.  The bug
              could occur when running a function that contained a pipeline
              whose last element was a function.
    03-05-19  A job control timing bug introduced in ksh93o on some systems
              which could cause a pipeline to hang if the first component
              completed quickly has been fixed.
    03-05-13 +The read builtin has been modified so that the builtin editors
              will not overwrite output from a previous incomplete line.
    03-05-13  A bug in which the name of an identifier could have the string
              .sh. prefixed to it after expanding a variable whose name begins
              with .sh. has been fixed.
    03-05-13  A bug in the expansion of $var for compound variables in which
              some elements would not be output when the name was a prefix
              of another name in the compound variable has been fixed.
    03-05-08  The last item in the ksh93o release on 03-01-02 has been
              altered slightly to preserve the leading 0's when the
              preceding character is a digit.  Thus, with typeset -LZ3 x=10,
              $(( 1$x)) will be 1010 whereas $(( $x) will be 10.
    03-04-25  A bug in which if x is a name reference, then nameref y=x.foo
              did not follow x has been fixed.
    
    03-03-18  --- Release ksh93o  ---
    03-03-18 +A -N unary operator was added to test and [[...]] which returns
              true if the file exists and the file has been modified since it
              was last read.
    03-03-18 +The TIMEFORMAT variable was added to control the format for
              the time compound command.  The formatting description is
              described in the man page.
    03-03-06 +A -N n option was added to read which causes exactly n bytes
              to be read unlike -n n which causes at most n bytes to be read.
    03-03-03 +Three new shell variables were added.  The variable .sh.file
              stores the full pathname of the file that the current command
              was found in.  The variable .sh.fun names the current function
              that is running.  The variable .sh.subshell contains the depth
              of the current subshell or command substitution.
    03-03-03 +When the DEBUG trap is executed, the current command line after
              expansions is placed in the variable .sh.command.  The trap
              is also now triggered before each iteration of a for, select,
              and case command and before each assignment and redirection.
    03-02-28 +Function definitions are no longer stored in the history file so
              that set -o nolog no longer has any meaning.
    03-02-28 +All function definitions can be displayed with typeset -f not
              just those stored in the history file.  In addition, typeset +f
              displays the function name followed by a comment containing the
              line number and the path name for the file that defined this function.
    03-02-28  A bug in which the value of $LINENO was not correct when executing
              command contained inside mult-line command substitutions has been
              fixed.
    03-02-19 +Since some existing ksh88 scripts use the undocumented and
              unintended ability to insert a : in front of the % and # parameter
              expansion operators, ksh93 was modified to accept :% as equivalent
              to % and :# as equivalent to # with ${name op word}.
    03-02-14  A bug which could cause a core dump when reading from standard
              error when standard error was a pty has been fixed.
    03-02-14 +The shell arithmetic was modified to use long double on systems
              that provide this data type.
    03-02-09  A bug in which a function located in the first directory in FPATH
              would not be found when the last component of PATH was . and the
              current directory was one of the directories in PATH has been fixed.
    03-02-07 +The trap and kill builtin commands now accept a leading SIG prefix
              on the signal names as documented.
    03-02-05  A bug in the expansion of ${var/$pattern}, when pattern contained
              \[ has been fixed.
    03-02-05  A bug in which .sh.match[n], n>0, was not being set for substring
              matches with % and %% has been fixed.
    03-01-15  A bug in which getopts did not work for numerical arguments specified
              as n#var in the getopts string has been fixed.
    03-01-09  A bug in which using ${.sh.match} multiple times could lead to
              a memory exception has been fixed.
    03-01-06  A bug in the expansion of ${var/pattern/$string} in the case that
              $string contains \digit has been fixed.
    03-01-02 +A -P option was added for systems such as Solaris 8 that support
              profile shell.
    03-01-02  For backward compatibility with ksh88, arithmetic expansion
              with ((...)) and let has been modified so that if x is a zero-filled
              variable, $x will not be treated as an octal constant.
    
    02-12-05  --- Release ksh93n+  ---
    02-11-30  A bug that can show up in evaluating arithmetic statements that
              are in an autoloaded function when the function is autoload from
              another function has been fixed.
    02-11-30  An optimization bug in which an expansion of the form ${!name.@},
              which occurred inside a for or a while loop, when name is a name
              reference, has been fixed.
    02-11-18  A bug in which modifying array variables in a subshell could leave
              side effects in the parent shell environment has been fixed.
    02-11-18  A memory leak when unsetting an associative array has been fixed.
    02-11-14 +The code to display compound objects was rewritten to make
              it easier for runtime extensions to reuse this code.
    02-11-14 +A change was made to allow runtime builtins to be notified when
              a signal is received so that cleanup can be performed.
    02-10-31 +User applications can now trap the ALRM signal.  Previously,
              the ALRM signal was used internally and could not be used
              by applications.
    02-10-31  A bug in which signals received while reading from a coprocess
              for which traps were set was not handled correctly has been fixed.
    02-10-31  A bug in which a file opened with exec inside a subshell could
              be closed before the subshell completed has been fixed.
    02-10-21  A bug in which setting PATH or FPATH inside a function might not
              take effect has been fixed.
    02-10-21  A bug which could cause a core dump when a local SECONDS variable
              is defined in a function has been fixed.
    02-10-15  A bug in which the associate array name operator ${!array[@]}
              could return the same name multiple times has been fixed.
    02-10-15  A bug in which the zero'th element of an associative array was
              not getting set when an assignment was made without a subscript
              specified has been fixed.
    
    02-09-30  --- Release ksh93n  ---
    02-09-30 +The maximum indexed array size was increased to 16Megs.
    02-09-30  A bug which could cause a core dump when changing attributes
              of associative array has been fixed.
    02-09-30  A bug in which exporting an array variable would not export the
              0-th element has been fixed.
    02-09-30  A bug in which an array assignment of the form a=($a ...) would unset
              'a' before the right hand side was evaluated has been fixed.
    02-09-27  A bug in which the error message for ${var?message} when var was
              null or unset did not contain the variable name var has been fixed.
    02-09-27  A bug in which closing file descriptors 0 through 2 could
              cause a subsequent here document to fail has been fixed.
    02-09-14  A bug in whence which occurs when the specified name contained
              a / has been fixed.
    02-09-14  A bug in the parser for strings of the form name$((expr))=value
              has been fixed.
    02-09-14  A for loop optimization bug in which the number of elements in
              an array was treated as an invariant has been fixed.
    02-09-09  A bug in which redirection or closing of a file descriptor between
              3 and 9 could cause a subsequent here document to fail has been
              fixed.
    02-09-09  A bug in which a background job was not removed from the job list
              when a subshell completed has been fixed, for example (prog&).
    02-09-03  A bug in which an assignment of the form name=(integer x=3)
              could be interpreted as an array assignment rather than a
              compound variable assignment has been fixed.
    02-08-19  A command completion bug which occurred on file systems that
              are case insensitive has been fixed.
    02-08-19  A bug which could lead to an exception on some systems (for
              example FREEBSD) which occurred when setting PATH has been fixed.
    02-08-11  A bug in arithmetic rounding in which a value input as a decimal
              string would output as a rounded version of the string has
              been fixed.
    02-08-11  A bug in which the last character could be deleted from shell
              traces and from whence when called from a multibyte locale
              has been fixed.
    02-08-01  A bug which could cause a core dump to occur when a shell script
              is executed while a coprocess is running that has closed the
              output pipe has been fixed.
    02-08-01  A bug in which command completion in multibyte mode could
              corrupt memory for long command lines has been fixed.
    
    02-06-17  --- Release ksh93n-  ---
    02-06-17  A bug in which user defined macros could cause a core dump in
              with MULTIBYTE mode has been fixed.
    02-06-17  A bug in which printf format specifiers of the form %2$s were causing
              a core dump has been fixed.
    02-06-17  A bug in which setting stty to noecho mode did not prevent the
              echoing of characters by ksh when emacs or viraw mode
              was enabled has been fixed.
    02-06-17  A bug in which background job completion could cause the sleep
              builtin to terminate prematurely has been fixed.
    02-06-17  A bug in which the shell could core dump if getopts was called
              when the OPTIND variable contained a negative value has been fixed.
    02-06-10 +The edit mode prompt has been modified to handle escape sequences.
    02-06-10  A bug which occurred for interactive shells in which the builtin
              cat command was used in command substitution on a file whose
              size was larger than PIPE_BUF has been fixed.
    02-06-10  A bug in which the trap on ERR was not being processed when
              set inside a function has been fixed.
    02-06-07  A bug in which function definitions could cause the history count
              to be decremented by one (and even become negative) has been fixed.
    02-06-05  A bug in read in which share mode could be enabled has been fixed.
    02-05-28  A bug which could occur when the last command of a script was
              a case statement and the action selected ended in ;& instead of ;;
              has been fixed.
    02-05-23  A bug with unary + introduced in ksh93k has been fixed.
    02-05-07  A bug in substitutions of the form ${var/pattern/string} in which
              a backslash was inserted in the replacement string when it contained
              a special pattern character has been fixed.
    02-05-01  A bug in the emacs edit mode which occurred in versions compiled
              for multibyte character sets which occurred when a repeated search
              was requested after a long line had been returned for the previous
              search has been fixed.
    02-04-02 +vi and emacs edit modes were modified so that tab completion is
              disabled when invoked from the read built-in.
    
    02-03-26  --- Release ksh93m+  ---
    02-03-26  A bug in which \ was not handled correctly when used in file
              expansion has been fixed.
    02-02-18  A bug in which lines beginning with a # were deleted from here
              documents when the here-document delimiter was followed by
              a comment has been fixed.
    02-12-06  An optimization bug in which ${!x[@]) was treated as invariant in
              a for loop has been fixed.
    02-02-06  A bug in which the ERR trap is not cleared for a script invoked
              by name from within a function has been fixed.
    02-01-08  A bug in which a shell script executed from within a subshell
              could cause this script to have an invalid pointer leading
              to a memory fault has been fixed.
    02-01-07 +Added here documents of the form <<< word (as per zsh) which
              is equivalent to << delim\nword\ndelim.
    02-01-07  A bug in which the first word of a compound assignment,
              x=(word ...), was treated as a reserved word has been fixed.
    02-01-07  A bug in the handling of \ when noglob was enabled and a
              substitution of the form ${word op pattern} occurred in the
              same word has been fixed.
    02-01-07 +A compilation option, CMDLIB_BLTIN in the file OPTION, has
              been added.  When this options is set, all commands implemented
              in libcmd become shell builtin commands by default.
    02-01-07  A bug in which builtin foo, where foo is already a builtin
              would result in the builtin foo getting removed has been fixed.
    02-01-07  A bug which the shell executed a command found in the current
              directory when PATH have no valid directories has been fixed.
    01-11-28  The value of $? was not being set when called with exit.
    01-11-28  If the last command was of the form (...) and a trap on EXIT or
              ERR was set, and the command inside () modified the trap, then
              the original trap wasn't executed.
    01-11-26 +The value for 0 is now preceded by the base number when
              the base was not 10.
    01-11-26 +The default has compilation mode has been changes so that
              viraw mode will always be on.
    
    01-10-31  --- Release ksh93m  ---
    01-10-31  A for loop optimizer bug for subshells contained withing for
              loops has been fixed.
    01-10-16  typeset without arguments no longer outputs variable names
              that do not have any attributes that are set.
    01-10-16  A bug introduced in ksh93l in which assignments specified with
              the exec built-in were not being expanded properly has been
              fixed.
    01-10-11  An optimization bug in which ${!x) was treated as invariant in
              a for loop has been fixed.
    01-10-11  Unsigned integer variables in bases other than 10 are printed now
              expand in that base with the base prefix.
    01-10-10  A number of typos in the self generating man pages for shell
              built-ins have been fixed.
    01-10-04  The self generated man pages for hist and fc were not working
              correctly and have been fixed.
    01-10-03  Yet another optimizer bug in which shell patterns were
              treated as invariants has been fixed.
    01-09-27  Two bugs relating to multibyte history searches and to find
              have been fixed.
    01-09-27  A bug introduced in ksh93k in which the PATH searching was
              not restored after running a command with an assignment list
              has been fixed.
    01-09-26  A bug in which a zero filled field was treated as octal when
              converted to integer has been fixed.
    01-09-26  Yet another bug in the optimization of for loops related to
              recursive functions with break or continue statements has been fixed.
    01-09-25 +The exponentiation operator ** was added to the shell arithmetic
              evaluation.  It has higher precedence than * and is left
              associative.
    01-09-25  The code was modified to use the ast multibyte macros
              and functions for handing multibyte locales.
    01-09-25 +The expansion ${parameter:offset:length} now handles negative
              offsets which cause offsets to be measured from the end.
    01-09-25  Some spelling errors in the documentation were corrected.
    01-09-24 +The /dev/tcp/host/port and /dev/udp/host/port now allow
              the ports to be specified by service name.
    01-09-24 +The change staring with ksh93g in which the the appropriate
              library path variable is prepended with a corresponding library
              directory has been modified.  With the new method, only the
              library path defined in the file named .paths in the directory
              where the executable is found will be modified.  See the
              man page for more details.
    01-09-23 +The .fpath file (see ksh93h) is no longer looked for in each
              directory on the path to locate function directories.  The
              file named .paths is used instead.
    01-09-23  A bug in which IFS was not being restored after being changed in
              a subshell has been fixed.
    01-09-16 +With the vi and emacs edit modes, after a list of command
              or functions is generated with = or M-= respectively,
              any element from the list can be pasted on the command line
              by preceding the = or M-= with a numeric parameter specifying
              the position on the list.
    01-09-16  A bug in ksh93l caused command completion not to find aliases
              and functions.  Command listing from the edit mode was presented
              in reverse order.  This has been fixed.
    01-09-13  Another bug in the optimization of for loops related to subshells
              when traps were set has been fixed.
    01-09-07  A change in ksh93l caused brace expansion to stop working
              and this has been fixed.
    01-09-04  A bug introduced in ksh93k in which an arithmetic statement
              within a function that used name references did not follow the
              reference has been fixed.
    01-09-04  A bug introduced in ksh93l in which export -p did not prefix
              each export with the word export has been fixed.
    01-08-29  A bug in multibyte input which occurred when a partial multibyte
              character was received has been fixed.
    01-08-29  A bug introduced in ksh93l which could cause a core dump
              when an assignment list containing PATH is specified inside
              command substitution has been fixed.
    01-08-09  Another bug in the optimization of for loops in ksh93l caused
              errors in recursive functions using local variables that
              contained for loops has been fixed.
    01-07-27  A bug in which IFS would be unset after a command substitution
              inside a here document has been fixed.
    01-07-26  To conform to the POSIX standard, if you invoked ksh name,
              and name does not contain a /,  it will first try to run
              one in the current directory whether it is executable or not
              before doing a path search for an executable script.  Earlier
              versions first checked for an executable script using the
              PATH variable.
    01-07-23  A bug in which unset -f invoked in a subshell could unset a
              function defined in the parent has been fixed.
    01-07-16  A bug in the optimization of for loops in ksh93l caused
              name references to be treated as invariants has been fixed.
    01-07-09  A bug in which a discipline function applied to a local variable
              could cause a shell exception has been fixed.  Discipline
              functions can only be specified for global variables.
    
    01-06-18  --- Release ksh93l  ---
    01-06-18  A bug in assigning integers larger than can be represented as
              long integers to floating point variables has been fixed.
    01-06-18  A bug in the handling of unsigned integers (typeset -ui) has
              been fixed.
    01-06-04  The evaluation of the PS1 prompt no longer effects the value
              of the $? variable.
    01-06-01  A small memory leak from subshells has been fixed.
    01-05-22  A bug in which attributes for variables that did not have
              values would be lost after a subshell has been fixed.
    01-05-22 +The %R format has been added to convert a shell pattern into
              an extended regular expression.
    01-05-22 +The escape sequences \e, \cX, \C[.collating-element.], and
              \x{hex} have been added to ASCII-C strings and to printf format
              strings.
    01-05-20 +Patterns of the form {n}(pattern) and {m,n}(pattern) are now
              recognized.  The first form matches exactly n of pattern whereas,
              the second form matches from m to n instances of pattern.
    01-05-20 +The shell allows *-(pattern), +-(pattern),  ?-(pattern),
              {m,n}-(pattern}, and @-(pattern) to cause the minimal
              match of pattern to be selected whenever possible rather
              than the maximal (greedy) match.
    01-05-20 +The character class [:word:] has been added to patterns.
              The word class is the union of [:alnum:] and the character _.
    01-05-20 +Inside (...) pattern groups, the \ character is now treated
              specially even when in an enclosing character class.  The
              sequences, \w, \d, \s are equivalent to the character classes
              word, digit, and space respectively.  The sequences \W, \D,
              and \S are their complement sets.
    01-05-20 +The shell now recognizes pattern groups of the form
              ~(options:pattern) where options or :pattern can be omitted.
              Options use the letters + and - to enable and disable options
              respectively.  The option letters g (greedy), i (ignore case)
              are used to cause maximal matching and to cause case
              insensitive matching respectively.  If :pattern is also
              specified, these options are only in effect while this
              pattern is being processed.  Otherwise, these options remain
              in effect until the end of the pattern group that they are contained
              in or until another ~(...) is encountered.  These pattern groups
              are not counted with respect to group numbering.
    01-05-14  When edit completion, expansion, or listing occurs in the
              middle of a quoted string, the leading quote is ignored when
              performing the completion, expansion, or listing.
    01-05-14  A small memory leak from subshells has been fixed.
    01-05-10  A bug in which open files were not restored after a subshell
              that had used exec to replace a file has been fixed.
    01-05-10 +Redirection to a null file name now generates an error message.
    01-05-09  The shell now rejects some invalid parameter substitutions that
              were previously processed in undefined ways.
    01-05-09  A bug in which the output of select was not flushed before the
              read when input did not come from the terminal has been fixed.
    01-05-08  A bug in which job ids would not be freed for interactive shells
              when subshells ran built-ins in the background has been fixed.
    01-05-08 +The FPATH variable now requires an explicit . to cause the
              current directory to be treated as a function directory.
    01-05-08  A bug in read -n when echo mode was disabled has been fixed.
    01-05-07  A bug in which function definitions could be listed as part
              of the history has been fixed.
    01-04-30 +This release uses a new and often much faster pattern matcher than
              earlier releases.
    01-04-30 +An optimizer now eliminates invariant parameter expansions from
              for while and until loops.
    01-04-30 +The variable .sh.match is set after each pattern match (# % or /)
              in a variable substitution.  The variable .sh.match is an
              indexed array with element 0 being the complete match.
              The array is only valid until the next subsequent pattern
              match or until the value of the variable changes which ever
              comes first.
    01-04-30 +A self generating man page has been added to shcomp.  Also,
              shcomp now stops compiling when it finds an exit or exec
              command and copies the remainder so that it can be used
              for standard input.
    01-04-30 +The shcomp command was modified so that it can work in an
              EBCIDIC environment and that binary scripts are portable
              across environments.
    01-04-30  A bug in the handling of a trailing : in PATH has been fixed.
    01-04-30  A bug in which the builtin version of a command would get invoked
              even though the full pathname for the command was specified
              has been fixed.
    01-04-30  A bug in which read would loose the last character when
              reading the last line of a file that did not contain a new-line
              character has been fixed.
    01-04-23  A bug on some systems in which in vi mode the end of file
              character and end of line character could be swapped has
              been fixed.
    01-04-23  A bug on some systems in which invoking a shell script that
              did not have execute permission could set the exit value to
              127 rather than 126 has been fixed.
    01-04-20  A bug in which read -n from a pipe would block if fewer than
              n characters was received has been fixed.
    01-04-09  A bug in which invalid patterns, for example, ) by itself,
              was not treated as a string has been fixed so that if i=')',
              then [[ $i == $i ]] is true.
    01-04-09 +The shell arithmetic now interprets C character constants.
    01-04-09  A bug in which a non-zero return from a function defined
              with the function reserved word did not trigger the ERR
              trap or exit with set -e has been fixed.
    01-04-02  A bug on some systems, in which characters above 127 were
              not displayed correctly in vi or emacs edit mode has been fixed.
    01-04-02  A bug on some systems, introduced in the 'k' point release, in
              which the erase character in viraw mode was moving the cursor
              to the left without erasing the character has been fixed.
    01-04-02  On some systems the wcwith() function was returning a wrong
              value for characters and caused characters to be displayed
              incorrectly from the shell edit modes.  A work around for
              this problem has been added.
    01-03-26  A bug in which valid scripts could produce syntax errors
              when run with locales that considered characters such as "'"
              to be space characters has been fixed.
    01-03-20  A bug in which an syntax error in an arithmetic expression
              entered interactively could cause the shell to go into
              an infinite loop outputting the error message has been fixed.
    01-03-10 +ksh93 accepts -l as a synonym for -L in test on systems for
              which /bin/test -l tests for symbolic links.
    01-03-10  A bug in parsing scripts in which { and } are used in place of
              in and esac in case statements embedded in compound commands
              has been fixed.  Use of { and } for in and esac is obsolete.
    01-03-06  A bug in which an argument of the form foo=bar was not
              being passed correctly to a traced function whose name
              was foo has been fixed.
    01-03-02  Using $(trap -p name) did not print the name of the current
              trap setting for trap name.
    01-02-26  Exported floating point variables gave incorrect results
              when passing them to ksh88.  This has been fixed.
    01-02-25  A race condition in which a coprocess which completed too quickly
              would not allow subsequent coprocesses to start has been fixed.
    01-02-25  The 'g' format specifier is now handled by printf.  It had
              inadvertently been omitted.
    01-02-20  The + was not being displayed during an execution trace
              with the += assignment operator.
    01-02-19  The error message which occurs when the interpreter name
              defined on the #! line does not exist is more informative.
    01-02-19  A bug in which $0 would not be set correctly when a
              script with #! was invoked by full pathname from the
              directory of the script has been fixed.
    01-02-19  A shell script did not always pick up tty mode changes
              made by external commands such as stty which could
              effect the behavior of read.
    01-02-19  The -u, -g, and -k unary tests did not give the correct
              results when used with negation and this has been fixed.
    
    01-02-05  --- Release ksh93k+  ---
    01-02-05  The sequence \<newline> inside $'...' was not incrementing
              the line count and this has been fixed.
    01-02-05 +Modified expansion of "${@-}" so that if no arguments are set
              it results in null string rather than nothing.
    01-02-02  memory leak problem with local variables in functions fixed.
    01-01-25 +allow arithmetic expressions with float%int and treat them
              as ((int)float)%int rather than as an error.
    01-01-19  read -n1 was not working and has been fixed.
    01-01-17 +ksh now handles the case in which a here document in command
              substitution $() is terminated by the trailing ).  Previously,
              a new-line was needed at the end of the delimiter word.
    01-01-02  A bug in which a KEYBD trap would cause a multi-line token
              to be processed incorrectly has been fixed.
    00-12-10 +Arithmetic integer constants can now have L and U suffices.
    00-12-10  A bug in the processing of arithmetic expressions with compound
              variables when the -n option is on has been fixed.
    00-12-08  A bug in M-f and M-b from emacs mode has been fixed.  This
              bug only occurs when ksh93 is compiled without MULTIBYTE enabled.
    00-11-29  A bug in which jobs -p would yield 0 for background
              jobs run in a script has been fixed.
    00-11-21  A bug in integer arrays in which the number of elements is
              incorrect when the ++ operator is applied to a non-existing
              element has been fixed.  For example, integer x; ((x[3]++)).
    00-11-20  A timing bug in which the shell could reset the terminal
              group to the wrong value in the case that the a new process
              changes the terminal group during startup has been fixed.
    
    00-10-27  --- Release ksh93k  ---
    00-10-27  Using tab for completion now works only when applied
              after a non-blank character at the end of the current line.
              In other case a tab is inserted.
    00-10-27  A bug in the emacs edit mode for ^X^E has been fixed.
              The ^X^E sequence is supposed to invoke the full editor
              on the current command.
    00-10-18  A bug in which expansions of the form ${var//pattern/string}
              did not work correctly when pattern was '/' or "/" has
              been fixed.
    00-10-18 +The output format for indexed arrays in compound variables
              has been modified so that it can be used as input.
    00-10-18  Assignments with name references (typeset -n) will now
              implicitly unreference an existing name reference.
    00-10-17  A bug the += append operator when a single array element
              is appended to a variable that is not an array has been fixed.
    00-10-16  A bug in which the SIGCONT signal was being sent to
              each process will kill -0 or kill -n 0 has been fixed.
    00-10-12 +The arithmetic evaluation portion has been rewritten to
              perform a number of optimizations.
    00-10-10  A bug in which name prefix matching ${!name.*} was not
              checking name to see if it was a name reference has been fixed.
    00-09-26  A bug in the multibyte version in which the width of for
              non-printing characters was not correct has been fixed.
    00-09-12 +Made changes to get multibyte editing work on UWIN for windows
    00-09-12  A bug in which multibyte characters would be displayed incorrectly
              has been fixed.
    00-08-08  Removed build dependency on iswprint() and iswalph().
    00-07-20  In some cases the read builtin would read more than a single
              line from a pipe on standard input and therefore leave the seek
              position in the wrong location.
    00-07-05 +If the directory / is on the path, a / will not be inserted
              between the directory and the file name during path searching
              to avoid searching // for systems that treat this specially.
    00-06-26  A bug in which on rare occasions wait could return before all
              jobs have completed has been fixed.
    00-06-21  A bug in which backspace did not work correctly during the
              R replace directive in vi-mode has been fixed.
    00-06-12 +Added variable name completion/expansion/listing  to the set of
              completions.  Variable name completions begin with $ or "$ followed
              by a letter.
    00-05-09  --- Release ksh93j  ---
    00-05-09  Modified command substitution to avoid using /tmp files when
              run on read-only file systems.
    00-04-17 +Modified printf to handle '%..Xc' and '%..Xs' options where X
              is not an alpha character.  Previous versions core dumped with this.
    00-04-10 +Changes to multibyte editing code were made to use standard
              ISO C functions rather than methods devised before the standard.
    00-04-09  Add %H options to printf to output strings with <"'&\t> properly
              converted for use in HTML and XML documents.
    00-04-07 +Modified getopts builtin to handle \f...\f in usage string
              by invoking specified function.
    00-04-04  Added self generating man pages for bg, fc, fg, disown, jobs,
              hist, let, ., and ulimit.
    00-03-30 +The append operator += has been added and can be used
              for all assignments, strings, arrays, and compound variables.
    00-03-30 +Code was modified in several places to support automatic
              generation of C locale dictionaries.
    00-03-28  A bug in which the set and trap commands invoked with --name
              type arguments would terminate the invoking script  has
              been fixed.
    00-03-27  A bug in which the library path variable was not updated
              correctly on some systems as described in the 'g' point
              release has been fixed.
    00-03-07  printf now returns a non-zero exit status when one of
              its arguments cannot be converted to the given type.
    00-03-05  The return value and error message for a command that
              was found on the path but was not executable was set
              incorrectly.
    00-03-05  A prototype for ioctl() was removed from the vi edit mode.
    
    00-01-28  --- Release ksh93i  ---
    00-01-28 +Most of the built-in commands and ksh itself are now
              self documenting.  Running command --man will produce
              screen output.  Running command --html produces the
              man page in html format.
    00-01-28 +The getopts builtin can process command description
              strings to produce man pages.
    00-01-28  A bug in which a script could terminate when getopts
              encountered an error when invoked inside a function
              has been fixed.
    00-01-28  When a symbolic link was specified as the name of
              the script to invoke by name, the value of $0 was
              set to the real file name rather than the link name
              in some cases and this has been fixed.
    00-01-28  A bug in which the precision given as an argument
              to printf was not working has been fixed.
    
    99-03-31  --- Release ksh93h  ---
    99-03-31 +The PATH search algorithm has been modified to look
              for a file named .fpath in each bin directory and if
              found, to search for functions in this directory if
              it cannot find the command in that directory.
    99-03-31 +When performing pathname expansion, the shell checks
              to see whether each directory it reads is case sensitive
              or not, and performs the matching accordingly.
    99-03-31 +The %T format for printing formatted date/time.
    99-03-31 +The emacs and vi modes now handle arrow keys when
              they use standard ANSI escape sequences.
    99-03-31 +The TAB key can be used for completion in emacs and viraw mode.
    99-03-31  A bug in setting .sh.editchar during the KEYBD trap
              for the MULTIBYTE option was fixed in release ksh93h.
    99-03-31  A bug in shcomp for compilation of unary operators with [[...]]
              has been fixed.
    99-03-31  A bug in which the value of $? was changed when executing
              a keyboard trap has been fixed.
    99-03-31  The handling of SIGCHLD has been changed so that the
              trap is not triggered while executing trap commands
              to avoid recursive trap calls.
    99-03-31  A bug in which a local variable in a function declared readonly
              would generated an error when the function went out of
              scope has been fixed.
    99-03-31  A bug in which \<new_line> entered from the keyboard
              with the KEYBD trap enabled has been fixed.
    99-03-31  The error message for a misplaced ((, for example print ((3),
              was often garbled and has been fixed.
    99-03-31  A bug in the KEYBD trap in which escape sequences of the form
              <ESC>[#~ were not being handled as a unit has been fixed.
    99-03-31  A bug in which ksh would consider expressions like [[ (a) ]]
              as syntax errors has been fixed.
    99-03-31  A function defined as foo() without a function body
              was not reported as a syntax error.
    99-03-31  A bug in which ksh could run out of file descriptors when
              a stream was repeatedly opened with exec and read from
              has been fixed.
    
    98-04-30  --- Release ksh93g  ---
    98-04-30 +The pipefail option has been added.  With pipefail
              enabled, a pipeline will not complete until all
              commands are complete, and the return value will
              be that of the last command to fail, or zero if
              all complete successfully.
    98-04-30 +The name-value pair library uses the cdt library rather
              than the hash library.  This change should be transparent
              to applications.
    98-04-30 +On the U/WIN version for Window 95 and Windows NT,
              when a directory beginning with a letter followed by
              a colon is given to cd, it is assumed to be an absolute
              directory
    98-04-30 +When an executable is found on a given path,
              the appropriate library path variable is prepended
              with a corresponding library directory.
    98-04-30  A bug in which a name reference could be created to
              itself and later cause the shell to get into an infinite
              loop has been fixed.
    98-04-30  A bug in shcomp relating to compound variables was fixed.
    98-04-30  A bug introduced in ksh93e in which leading 0's in -Z
              fields caused the value to be treated as octal for arithmetic
              evaluation has been fixed.
    98-04-30  A bug when a name reference with a shorter name than
              the variable it references was the subject of a compound
              assignment has been fixed.
    98-04-30  A bug which in which assignment to array variables in
              a subshell could effect the parent shell has been
              fixed.
    98-04-30  read name?prompt was putting a 0 byte at the end of the
              prompt on standard error.
    98-04-30  A bug in [[ string1 > string2 ]] when ksh was run with -x
              has been fixed.
    98-04-30  A bug in which the escape character was not processed
              correctly inside {...} when brace expansion is enabled
              has been fixed, for example {\$foo}.
    98-04-30  A bug in line continuation in here-documents has been
              fixed.
    98-04-30  The default base when not specified with typeset -i is
              10 in accordance with the documentation.  Previously,
              the value was determined by the first assignment.
    98-04-30  A parsing bug in which a # preceded alphanumeric
              characters inside a command substitution caused
              a syntax error to be reported has been fixed.
    98-04-30  A bug in which a decimal constant represented as 10#ddd
              where ddd was more than five digits generated a syntax
              error has been fixed.
    98-04-30  A bug in here document expansion in which ${...} expansions
              were split across buffer boundaries has been fixed.
    98-04-30 +The sh_fun() function now takes third argument which
              is an argument list for the invoked discipline function
              or built-in.
    98-04-30 +A callback function can be installed which will give
              notification of file duplications and file closes.
    98-04-30  When ksh is compiled on systems that do not use fork()
              current option settings where not propagated to sub-shells.
    
    97-06-30  --- Release ksh93f  ---
    97-06-30 +Hostnames in addition to host addresses can be given in
              /dev/tcp/host/port virtual file names.
    97-06-30  File name completion and expansion now quotes special
              characters in file names from both emacs and vi edit modes.
    97-06-30  An empty for list behave like a for list with null expansions.
              It produces a warning message with sh -n.
    97-06-30 +The code has been modified to work with EBCDIC as well as ASCII.
    97-06-30  A bug which would cause the secondary prompt to be
              displayed when a user entered a literal carriage
              return has been fixed.
    97-06-30  A bug which caused ksh read -s name to core dump was
              fixed.
    97-06-30  A bug with the expansion of \} and \] inside double
              quoted strings that also contained variable expansions
              has been fixed
    97-06-30  Changes in the ksh93e point release caused autoload
              functions invoked from within command substitution
              to fail.  This has been fixed.
    97-06-30  A bug in the processing of here-documents that could
              prevent variable substitution to occur after $(...) command
              substitution for long here documents has been fixed.
    97-06-30  A bug caused by a race condition that could cause SIGTERM
              to be ignored by a child process has been fixed.
    97-06-30  A bug which prevented the startup of a coprocess immediately
              after killing a running coprocess has been fixed.
    97-06-30  ulimit foobar, where foobar is not an arithmetic
              expression, now gives an error message as it did with ksh88
              instead of setting the file size limit to 0.
    97-06-30  A bug which could cause an interactive shell to terminate when
              the last process of a pipeline was a POSIX function was fixed.
    97-06-30  A bug which could cause command substitution of a shell script
              to core dump has been fixed.
    97-06-30  A security hole was fixed in suid_exec.
    97-06-30  Arithmetic functions such as pow() that take more than
              one argument, did not work if arguments other than the
              first contained parenthesized sub-expression.
    97-06-30  The error message from a script containing an incomplete
              arithmetic expression has been corrected.
    97-06-30  A bug which caused a core dump on some machines when
              the value of a name reference contained a positional
              parameter and the name reference was not defined inside
              a function has been fixed.
    97-06-30  Arithmetic expressions now correctly handle hexadecimal
              constants.
    97-06-30  A bug in which integer variables could be expanded
              with a leading 10# when declared with typeset -i
              multiple times has been corrected.
    97-06-30  A bug in which IFS wasn't correctly restored when
              set within command substitution has been fixed.
    97-06-30  The _ character is now considered as part of a word
              with the M-f and M-b emacs directives as it was in ksh88.
    97-06-30  A bug in brace pattern expansions that caused expressions
              such as {foo\,bar,bam} to expand incorrectly have been fixed.
    
    96-07-31  --- Release ksh93e  ---
    96-07-31 +The math functions, atan2, hypot, fmod, and pow were added.
    96-07-31 +When a shared library is loaded, if the function lib_init()
              is defined in the library, it is invoked the first time that
              the library is loaded with builtin -f library.
    96-07-31  The k-shell information abstraction database option, KIA,
              has been revamped.
    96-07-31  Empty command substitutions of the form $() now work.
              whence -v foo now gives the correct result after calling
              builtin -d foo.
    96-07-31  A bug in right to left arithmetic assignment for which
              the arithmetic expression (( y = x = 1.5 )) did not
              yield 1 for y when x was declared typeset -i was fixed.
    96-07-31  printf has been fixed to handle format  containing \0
              and/or \0145 correctly.  In addition, characters following
              %b in the format string are no longer displayed when
              the operand contains \c.
    96-07-31  A bug in printf that could cause the %E format to
              produce unnormalized results has been fixed.
    96-07-31  A bug which causes some arithmetic expressions to be
              incorrectly evaluated as integer expressions rather
              that floating point has been fixed.
    96-07-31  Functions defined inside a subshell no longer remain
              defined when the subshell completes.
    96-07-31  The error message from sh -c ';echo foo' has been
              corrected.
    96-07-31  The format for umask -S has been changed to agree
              with the specification in the POSIX standard.
    96-07-31  A bug that caused side effects in subscript evaluation
              when tracing was enabled for subscripts using ++ or --
              has been fixed.
    96-07-31  To conform to the Posix standard getopts has been changed
              so that the option char is set to ? when it returns with
              a non-zero exit status.
    96-07-31  The handling of \} inside ${name...} has been fixed so
              that the \ quotes the }.
    96-07-31  A bug that caused the read builtin to resume execution
              after processing a trap has been fixed.
    96-07-31  [[ -s file ]] has been fixed so that if file is open
              by ksh, it is flushed first.
    96-07-31  In some cases attributes and sizes for non exported
              variables weren't being reset before running a script.
    96-07-31  The value of TMOUT was affected by changes make to
              it in a subshell.
    96-07-31  The jobs command did not reflect changes make by
              sending the CONT signal to a command.
    96-07-31  The error message for ksh -o unknown was incorrect.
    96-07-31  Functions invoked as name=value name, did not use
              values from the calling scope when evaluating value.
    96-07-31  A bug in which the shell would reexecute previously
              executed code when a shell script or coprocess was
              run in the background has been fixed.
    96-07-31  A bug in which an empty here-document would leave
              a file descriptor open has been fixed.
    96-07-31  A bug in which $(set -A array ...) would leave a
              side effect has been fixed.
    96-07-31  A discipline function for a global variable defined
              within a function defined with the function keyword,
              incorrectly created a local variable of the same name
              and applied the discipline to it.
    
    95-08-28  --- Release ksh93d  ---
    95-08-28  The \ character was not handled correctly in replacement
              patterns with ${x/pattern/replace}.
    95-08-28  A bug with read in which the line did not end with
              a new-line has been fixed.
    95-08-28  A bug in file name generation which sometimes
              appended a . for filenames that ended in / has
              been fixed.
    95-08-28 +If a process is waited for after a status has
              been returned by a previous wait, wait now
              returns 127.
    95-08-28  A bug with hist (fc) -e which prevented a command
              to re-executed after it had been edited has been fixed.
    95-08-28  A bug which prevented quoting from removing the meaning
              of unary test operators has been fixed.
    95-08-28  A bug with typeahead and KEYBOARD traps with the
              MULTIBYTE option set has been fixed.
    95-08-28 +Builtin functions can take a third argument which is
              a void*.
    95-08-28  The nv_scan() function can restrict the scope of a walk
              to the top scope.
    
    95-04-31  --- Release ksh93c  ---
    95-04-31  The expansion of "$@" was incorrect when $1 was the null
              string.
    95-04-31  A bug which could incorrectly report a syntax error in
              a backquoted expression when a $ was preceded by \\
              has been fixed.
    95-04-31  A bug which prevented the shell from exiting after
              reporting an error when failing to open a script
              has been fixed.
    95-04-31  A bug that could lead to memory corruption when a
              large here document that required parameter or command
              substitution was expanded has been fixed.
    95-04-31  A bug that could cause a core dump on some systems
              after ksh detected an error when reading a function
              has been fixed.
    95-04-31  A bug which could cause a coprocess to hang when
              reading from a process that has terminated has been fixed.
    95-04-31  A bug which caused a script to terminate when set -e
              was on and the first command of and && or || list
              failed has been fixed.
    95-04-31  A bug with here documents inside $(...) when the delimiter
              word is an identifier has been fixed.
    95-04-31  A bug which caused $0 to display the wrong value when
              a script was invoked as an argument to the . command
              and the eval command has been fixed.
    95-04-31  A bug that could cause the built-in sleep to hang
              has been fixed.
    95-04-31  A bug introduces in 12/28/93b which caused the backslash
              to be removed when it was followed by digit inside double
              quotes in some instances has been fixed.
    95-04-31  A bug which could cause a core dump if ksh was invoked with
              standard input closed has been fixed.
    95-04-31  A bug which could cause a core dump if typeset -A was
              specified for an existing variable has been fixed.
    95-04-31  Variables that were unset but had attributes such as readonly
              and export were not listed with readonly, export and typeset.
    95-04-31  Several problems with signals have been fixed.
    95-04-31  A bug which prevented ulimit -t from working has been fixed.
              Also, a bug in which failed ulimits could cause a core dump
              has also been fixed.
    95-04-31  A bug in expansion of the form ${name/#pattern/string} and
              ${name/%pattern/string} has been fixed.
    95-04-31  A bug which caused read -r on a line that contained only
              blanks to get a non-null value has been fixed.
    95-04-31  A bug introduced in the 'a' point release in which
              ${x='\\'} expanded to \ when x was unset has been fixed.
    95-04-31  A bug which prevented a trap on EXIT from being executed
              when the last command in a script was a function invocation
              has been fixed.
    95-04-31  A bug which caused an interactive shell ignore input when
              standard error was redirected to a file with exec,
              and then restored with exec 2>&1 has been fixed.
    95-04-31  An interactive shell turns on monitor mode even when
              standard error has been redirected to a file.
    95-04-31  A bug which could cause standard input to be incorrectly
              positioned for the last command of a script has been fixed.
    95-04-31  A bug in the edit modes which allowed walking back in
              the history file for more than HISTSIZE commands has
              been fixed.
    95-04-31  A bug which could cause a core dump if variable TMPDIR was
              changed between two command substitutions has been fixed.
    95-04-31. A bug which prevented a trap on EXIT from being cleared
              has been fixed.
    95-04-31  A bug fixed for the v directive in vi MULTIBYTE has been
              fixed.
    95-04-31  Code to for IFS handling of multibyte characters has
              been added.
    95-04-31  The displaying of multibyte strings in export, readonly,
              typeset, and execution traces has been fixed.
    95-04-31  Variables inside functions are now statically scoped.
              The previous behavior was never documented.
    95-04-31  Variables inside functions are now statically scoped.
              The previous behavior was never documented.
    95-04-31  A few changes have been made to the name-value library
              that affect built-ins that use disciplines.  The
              changes allow disciplines to be shared by variables
              and should make it possible to add new disciplines
              without recompilation.
    95-04-31 +The name-value library interface has undergone significant
              change for this revision.  See the new nval.3 man page.
    
    94-12-31  --- Release ksh93b  ---
    94-12-31 +Variables inside functions are now statically scoped.
              The previous behavior was never documented.
    94-12-31 +If IFS contains two consecutive identical characters belonging
              to the [:space:] class, then this character is treated as
              a non-space delimiter so that each instance will delimit
              a field.  For example, IFS=$'\t\t' will cause two consecutive
              tabs to delimit a null field.
    94-12-31 +The getopts command has a -a name option that specifies a
              name that will be used for usage messages.
    94-12-31  A bug which caused unset RANDOM to dump core has been
              fixed.
    94-12-31  A bug which prevented return for terminating a profile
              or ENV file has been fixed.
    94-12-31  A bug which prevented standard input from being
              directed to /dev/null for background jobs when
              monitor mode was turned off has been fixed.
    94-12-31  Statements of the form typeset -options var[expr]=value
              did not perform substitutions on expr as expected.
    94-12-31  A bug which prevented the shell from sending a HUP
              signal to some background jobs that were not disowned
              has been fixed.
    94-12-31  A bug which allowed a script to trap signals that are
              ignored at the time that the shell was invoked by exec
              has been fixed.
    94-12-31  A bug which could cause a core dump when a discipline
              function was unset within a discipline was fixed.
    94-12-31  The typeset builtin now accepts a first argument of
             + or - for compatibility with ksh88.
    94-12-31  For compatibility with ksh88, the results of expansions
              of command arguments will treat the extended character
              match characters ()|& as ordinary characters.
    94-12-31  A bug which caused read to fail on a file that was
              open for read/write with <> when the first operation
              was print or printf has been fixed.
    94-12-31  When a job is suspended, it is put on the top of
              the job list as required by the POSIX standard.
    94-12-31  The value of OPTARG when an option that required
              an argument but didn't have one was incorrect in the
              case the the option string began with a :.
    94-12-31  A bug which caused the terminal to get into a bad
              state with some KEYBD traps in vi-mode has been fixed.
    94-12-31  A bug which caused an invalid trap to cause a script
              to terminate, rather than just return an error, has
              been fixed.
    94-12-31  Backreferencing sub-expressions in patterns and replacement
              strings now works.
    94-12-31  A bug in chmod which caused the -R option to fail has
              been fixed.
    94-12-31 +More signal names have been added for Solaris
    
    94-06-30  --- Release ksh93a  ---
    94-06-30  An expansion bug which causes portions of a word after
              a $((...)) expansion that contains a nested $var expansion
              to be lost has been fixed.
    94-06-30  A bug that caused a core dump when a script that did not
              have PWD set and did a cd inside command substitution
              has been fixed.
    94-06-30  A bug which caused a core dump on some machines when
              the LANG variable was assigned to has been fixed.
    94-06-30  A bug which incorrectly handled set disciplines that
              performed arithmetic evaluation when the discipline
              was called from the arithmetic evaluator has been fixed.
    94-06-30  A bug caused by an EXIT trap inside a function that
              was executed in a subshell was fixed.
    94-06-30  If foo is a function, and not a program, then command foo
              now reports that foo isn't found rather than invoking foo.
    94-06-30  The previous version incorrectly listed -A as an
              invocation option.  The -A option is only for set.
    94-06-30  A bug was fixed which caused ksh to loop when execution trace
              was enabled and the PS4 prompt required command substitution.
    94-06-30  A bug which could cause the job control switch character
              to be disabled when a script that enabled monitor mode
              terminated was fixed.
    94-06-30  A bug in the macro expansion global replacement operator //,
              when the pattern began with a [ or +( has been fixed.
    94-06-30  A bug which prevented ~ expansion from occurring when
              it was terminated with a colon inside an assignment
              has been fixed.
    94-06-30  A bug in the dot command which prevented autoload functions
              from working has been fixed.
    94-06-30  A bug which caused a variable to be unset if the
              its value were expanded inside a set discipline has
              been fixed.
    94-06-30  Whence -a now longer reports that a defined function
              is undefined.
    94-06-30  A bug on some systems in which $0 would be incorrect
              in scripts invoked by name has been fixed.
    94-06-30  Here documents with an empty body now work.
    94-06-30  A bug which disabled argument passing and resetting
              of options for a script invoked by name inside a
              function has been fixed.
    94-06-30  A bug in which an EXIT trap set the caller of a function
              would be executed if a command called inside a function
              was not found has been fixed.
    94-06-30  A bug which allowed a script to trap signals that are
              ignored at the time that the shell was invoked has
              been fixed.
    94-06-30  A bug which caused 2<&1- when applied to a shell built-in
              to leave standard input closed has been fixed.
    94-06-30  A bug which caused the shell to incorrectly parse
              $() command substitutions with nested case statements
              has been fixed.
    
    RELEASE notes for src/cmd/kshlib/cmdtst/RELEASE
    
    12-05-11 grep.c,xargs.c: add [--plugin?ksh] to differentiate from standalone commands
    12-05-07 grep.c: add case 'y': to *really* ignore --color
    12-05-03 grep.c: add -Y, --color -- ignored for GNU compatibility
    12-05-03 grep.c,xargs.c: b_*() prototype context arg changed to Shbltin_t* for -lcmd compatibility
    12-04-20 grep.c: always enable FTS_META (to disable pure FTS_PHYSICAL)
    12-04-11 grep,xargs: fix first round of beta test bugs (interrupts, pwd)
    12-03-30 grep,xargs: first release for beta testing
    
    RELEASE notes for src/cmd/kshlib/codex/RELEASE
    
    10-05-25 add lib_init() to add "codex" builtin when library loaded
    07-09-22 add plugin
    
    RELEASE notes for src/cmd/kshlib/dbm/RELEASE
    
    12-01-09 Makefile: build after ksh93
    07-08-26 precursor to dbm_t
    
    RELEASE notes for src/cmd/kshlib/dbm_t/RELEASE
    
    07-09-07 dbm.c,dbm.rt: first release
    
    RELEASE notes for src/cmd/kshlib/dss/RELEASE
    
    08-06=09 sync with ksh93t api
    07-09-17 move from dsslib/sh and get working with ksh93s+
    07-05-09 update for lib_init(flags,context) context arg
    07-03-19 update nv_setref() calls
    04-02-29 fix bugs exposed by $(CC.EXPORT.DYNAMIC)
    04-02-14 add ksh93:command prereq for -lshell
    04-01-30 install as ksh plugin
    
    RELEASE notes for src/cmd/kshlib/open/RELEASE
    
    07-09-11 move from src/cmd/ksh93/shopen
    
    RELEASE notes for src/cmd/mailx/RELEASE
    
    12-06-05 spam.c: fix insider() domain check that skipped pure domain with not host
    12-04-13 cmd1.c: fix empty list null pointer deref
    12-02-29 add headfake boolean option to fake 'From ' line in saved message
    11-09-11 add sender=/address/head/pattern/[&|]/head/pattern/...
    11-07-17 fix message list to apply mimeview() to part 0 (main message body)
    10-09-08 fix edited To: in message to override command line recipients
    10-06-01 sync with ast api 20100601
    09-06-09 names.c,vars.c: fix alias expansion cross-dictionary bug
    09-05-15 proc.c,quit.c: add buffer checks to filetemp()
    08-11-04 spam.c: fix 0-terminated overrun in usermatch() -- wow
    08-02-12 local.c: favor fcntl() lock over flock() for N(otan)FS
    08-01-15 cmd3.c: add `if f?path' so old Mail doesn't carp
    07-02-06 cmd2.c: "S name" => .../From/name
    06-10-11 data.c: ARG_MAX => private ARGMAX
    06-10-11 add sfstropen()/sfstruse() error checks
    06-06-24 fio.c: fix nul count scan bug
    06-04-17 head.c,spam.c: catch and normalize inventive subject spaces
    05-03-28 main.c: add -r address; add L variable attribute
    05-02-17 head.c: CONTENT_type PART_text trumps CONTENT_encoding binary
    05-02-08 local.h: blankline=>allblanks (lynxos libc symbol hijack)
    04-08-17 head.c: handle Content-Type: message
    04-07-22 lex.c: access() => eaccess()
    04-04-15 spam.c: add spamtest mask names, fix spam() ordering
    04-03-25 mailx.h: shquote=>shellquote to avoid netbsd clash in <stdlib.h>!!
    04-03-17 spam.c: fix usermatch() loop
    04-01-28 data.c: k,K are now autoprint (like d)
    04-01-22 data.c: K is alias for mark; omitted mark defaults to nospam
             list.c: addr- shorthand for addr-$
    04-01-20 data.c: k is alias for mark; omitted mark defaults to spam
    04-01-16 main.c: mark -f option value optional
    03-12-10 spam.c: fix word match bug that matched prefixes instead of full word
    03-11-20 main.c: optget() if _PACKAGE_ast -- finally
    03-11-14 add spamsubhead=1 to edit spam subject heading list
    03-01-17 add shquote() to quote popen pathnames; fix save to -f core dump
    02-12-12 imap.c: handle no-name attachments
    02-12-11 head.c: application of DeMorgan's law proves Murphy's
    02-12-04 local.h: include FEATURE/lcl from lcl.iffe to avoid local.h clash
    02-11-22 head.c: convert unfriendly attachment path name characters to '_'
    02-10-31 imap.c: drop obsolete RFC2060 FETCH args
    02-10-20 spam.c: test=0x0060 for Authentication-Warning: checks
    02-10-16 spam.c: test=0x0010 to verify From: in domain matches Received: hosts
    02-10-08 mailx: fix a few strncopy() size off-by-ones
    02-10-01 mailx: fix ancient buffer overflows by comitting to ast -- bye bsd
    02-09-22 local.c: honor MAIL if its a regular file
    02-09-08 add spambody to catch mail filter warnings embedded in message bodies
    02-09-07 head.c: fix bug that retained mime boundary from previous message
    02-09-04 head.c: add call to isdate() to verify ishead() dates
    02-09-03 handle \r\n => \n on input
    02-08-28 vars.c: fix ${domain} initialization
    02-08-21 spam.c: test=0x0004 for X-Authentication-Warning
             send.c: disable interpolation "-- " signature test
    02-06-07 spam.c: delay lower priority tests until all headers seen
    02-05-31 imap.c: error messages to stderr -- duh
    02-03-17 spam.c: add spamtest=bitmask: 0x0001: content-type==text/html
    02-01-31 data.c: clarify imap var docs
    02-01-30 local.iffe: add to handle no <termios.h> and ftruncate()
    02-01-24 ifdef { SIGTSTP SIGTTOU SIGTTIN }
    02-01-16 properly update References: in replies
    01-10-15 `get attachment dir' copies attachment to dir
    01-04-01 add state.var.hostname for smtp HELO
             add fmtident() to initialize state.version
    01-01-01 fix map bug that retained alias after expansion
             smtp: add domain to RCPT TO: if omitted
    00-11-27 add Date: and From: to smtp
    00-09-21 drop leading */ from user name
    00-05-09 add cd,pwd,${PWD},${OLDPWD} with ${CDPATH} check
    00-05-04 lex: flush stdout before prompt!
    00-03-17 add -Qn to get status of n most recent messages
             fix imap -NS unread count
             loosen up headerbotch header checks
    00-02-29 handle multiline SMTP responses
    99-07-17 fix imap reply via imap_setinput() omission
             @x.y.z in spam list matches x.y.z domain suffix
             tone down hostmatch(), check unknown in Received:
             fix $MAIL lock by checking syscall return value -- how novel
             add -S, -o justfrom
             add -NS to print info and exit
             spam: Message-Id: <>
             spam: To: suppressed
             spam: strgrpmatch() instead of strcasecmp()
             imap: normalize imap message before send
    98-12-25 "text/enriched" treated like "text/plain"
             PART_text && PART_inline => in the body
    98-11-11 `save +' with `set followup=+From' saves msg in `+From/sender'
    98-06-01 fix header parse for message/rfc822
             add sendmail=smtp://host sendmail=/dev/tcp/host/inet.smtp
    98-02-14 more spam stuff
             to==from==user isn't spam
             Status: header means already scanned (MSCAN)
             spam check in setinput() (either here or in setptr())
             `---*' can separate headers from body
    98-02-07 defined(SFIO_VERSION) insead of defined(printf) for sfio disciplines
    98-01-11 set spam to mark spam candidates X
             set spamlog=file to automatically log spam msgs on quit
             set spamto=addr1,...,addrN for candidate spam recipients
             set spamfrom=addr1,...,addrN for candidate spam senders
             set spamsub=word1,...,wordN for candidate subject word prefixes
             add :!x for messages not matching x
             set local=domain1,...,domainN
             check for nuls in mail file
             set headerbotch treats \n\nReturn-Path: as From line if not in header
    97-11-27 couldn't resist the date
    97-11-11 change fflush() (in stdio.h) to do physical seek to logical position
             this should squash the empty message bug
    97-10-31 replace ferror() checks with checks at the io ops
    97-08-11 ~m with no messages no longer dumps core
             sendmail="<_PATH_SENDMAIL> -oi" to retain `.' lines (least suprise?)
             keep most descriptive content-type
    97-07-17 -t implies SEND mode
             set quiet still lists folder status on startup
             attachments named n-m instead of n:m for fat fs
             if no encoding type and mimeview(encoding) then its an encoding
    97-02-14 [Ss]plit now takes message list arg, Split ignores headers
             no longer dumps for non-empty files with no From
             ~f preserves attachment encoding/boundaries
             text/plain with name="" is now an attachment
             ${MAIL} is default system mailbox
             ${MAIL}/.. is default system mailbox dir
    96-09-06 version 9.6
             set headerbotch to handle mailers that add space between std headers
             set more[=prompt] to enable sfio more discipline (overrides PAGER)
             alias < file (note space around <) to read sendmail alias file for map
             join [messagelist] -- reply with auto ~m ~v
             Join [messagelist] -- Reply with auto ~m ~v
             multipart content converted to print/type/split (attachment) lines
             get attachment-index [path] after print/type decodes attachment to file
             ~g file interpolates content for multipart message
             ~g `uuencode -h -x base64': no header/trailer, base64 encoding
             set fixedheaders="hdr1\nhdr2..." added to outgoing message header
             help [ command | ~ [ command ] set [ variable ] ]
             set MAILCAP; get checks ${MAILCAP} for view command(s), Get doesn't
             mime [ pattern[;] command | < file ] -- add/del/list mime capabilities
             alias case insensitive -- mail addrs and sendmail aliases are anyway
             use <cdt.h>
             use <mime.h>
             mark [messagelist] mark
             folder directories treated as mh folders
             set inbox=+inbox -- SAVE messages not held in this mh folder
             SAVE messages deleted from any mailbox
             cast off_t %ld to (long) -- how do you say long long in portable?
             if displayed message from me then don't ignore To:
             mailbox() attempts all standard places
             retain mime type/encoding in lower case
    96-08-11 version 9.0
             convert to prototyped ANSI C
             all non-shared externs static
             globals into state.*
             internalize mail.help and mail.tildehelp
             alternates: equivalent to: alias alt[i] myname
             split to split messages into numbered files
             blast,Blast to blast message headers and body into name=value list
             if "a" [ == != ] "b"
             ${mode} is readonly with value either "send" or "receive"
             some options are readonly
             some options may only be set on command line
             some options may not ne set while sourcing
             most command line flags have option names
             set all shows unset vars too
    
    RELEASE notes for src/cmd/mam/RELEASE
    
    10-06-01 sync with ast api 20100601
    04-02-29 self-document
    
    RELEASE notes for src/cmd/msgcc/RELEASE
    
    10-10-20 msgcc.sh: add raw type (like str) for ksh -D style strings
    10-06-01 sync with ast api 20100601
    06-11-15 msgcc.sh: date -f x => date +x for ast-base portability
    06-10-11 add sfstruse() error checks
    02-03-11 msgcc: fix merge replacement threshhold logic
             msggen: convert { \a \b \f \n \r \v } back to C escapes
             msgcpp: set pp:modern
    02-02-14 msggen: add -f to list printf format signatures
    01-10-10 msgcc: allow some email forms to pass
    01-06-10 msgcpp: add proper escapes to OMIT pattern
    01-05-29 msgcc: add similar unused message replacement, -M-similar
    01-04-22 msgcc,msggen,msgget: use mcindex()
    01-01-31 ignore ls generation errors
    00-04-20 first release
    
    RELEASE notes for src/cmd/ncsl/RELEASE
    
    99-09-01 add usage[]
    96-10-11 first release
    
    RELEASE notes for src/cmd/nmake/RELEASE
    
    12-06-20 O_cloexec|F_dupfd_cloexec edit
    12-05-22 bind.c,dump.c,make.c,mam.c,rule.c: fix --mam=static 3d vs VPATH diffs
    12-05-14 make.c: .IGNORE disables non-file "must"
    12-05-04 option.c: add 'set --global...set --noglobal' scoping for :OP: makefiles
    12-05-03 Makerules.mk: don't use ``grep -q'' until sun/oracle gets on board
    12-04-20 option.c,load.c,Makerules.mk: add Op option .mo reread prereqs
    12-03-22 Makerules.mk: .BIND.-l% in STDLIB dir with only CC.SUFFIX.ARCHIVE => -lfoo
    12-03-22 bind.c: add .BIND.-l% --debug=3 trace
    12-03-22 expand.c: SORT_qualified '!' and SORT_first '>' no longer mutually exclusive
    12-02-29 Makerules.mk: fix ``lhs :MAKE: rhs'' logic for lhs and rhs makefile
    12-02-29 option.c: fix regress option doc typo
    12-02-20 Makerules.mk: update for astlicense() { since start source }
    12-02-14 Makerules.mk: ignore MAKE_OPTIONS for --mam
    12-02-14 Makerules.mk: add LICENSEFILEDEFAULT
    12-02-14 Makerules.mk: add PWD edit ala MAKEPATH to PAXFLAGS
    12-02-07 metarule.c: fix read string past terminator bug
    12-02-02 Makerules.mk: add [[ a || b ]] to the $SHELL -n compatibility test
    12-01-30 Makerules.mk: fix .INSTALL* to better handle 'text file busy'
    12-01-26 SCCS.mk: add to rule install list
    12-01-21 --- release 5.7 ---
    12-01-21 internal tmfmt() must use user format on special times too
    12-01-09 Makerules.mk: fix .MAMEDIT. to elide -[DI]-*
    11-12-13 option.c: fix off by 1 undermalloc
    11-12-13 Makerules.mk: fix MAKE_OPTIONS to peoperly handle --*=* options
    11-11-01 Makerules.mk: omit .TARGETs from manifest
    11-10-28 command.c: expand .EXPORT values at export time -- doh
    11-10-10 Makerules.mk: parameter (PROTO) (PROTOFLAGS) -- doh
    11-09-11 parse.c: fix ``local ( A B ... ) 1'' that did not declare B
    11-09-09 Makerules.mk: check $PACKAGE_foo and then $FOO_HOME
    11-09-07 debug-package.mk: add
    11-08-31 mam.c,option.c: add state.mam.hold, set mam=[no]hold
    11-08-30 object.c: drop OLD_header_t.version union for old cc
    11-08-28 Makerules.mk: add $(ARHYPHEN) for ancient sun4-vintage ar(1)
    11-08-25 Makerules.mk: change obsolete name=value option timeout to 20121221
    11-08-11 Makerules.mk: fix :READONLY: typo
    11-05-09 Makerules.mk: add .SOURCE.h : $(INSTALLROOT)/include
    11-05-09 fix .LIST.PACKAGE.LICENSE to include .'d def files
    11-03-03 rules.win32.mk: add %.rc -DRCWOW=...
    11-03-02 Makerules.mk: fix :LIBRARY: --plugin=foo --static to generate the plugin!
    11-02-11 add '### .*archaic.* ###' test for %.sh install to diable sh -n check
    11-02-02 --- release 5.6 ---
    11-02-02 command.c: fix .AFTER prereq bug that executed target twice
    11-02-02 Makerules.mk: add :LIBRARY: --static --private
    11-02-02 Makerules.mk: fix mam %.req to check for $INSTALLROOT/lib/lib/%
    11-01-21 expand.c: fix active() non-terminating loop for joint targets
    11-01-21 Makerules.mk: add "::" (.OPTIONS.$(<)) : .PARAMETER
    11-01-18 Makerules.mk: handle sh patterns on rhs of :MAKE:
    11-01-11 Makerules.mk: handle .INSTALL.COMMON - - -
    11-01-04 rules-win32.mk: add 32/64 conditionals for c++ mangle compatibility
    10-11-12 Makerules.mk: add .MAM.STATE.VARS. for FOO=BAR => -DFOO=BAR in mamake!
    10-11-12 command.c: fix .AFTER .FORCE .REPEAT infinite loop -- wow
    10-11-10 object.c: fix old_header.version puns for strict-aliasing
    10-10-20 Makerules.mk: fix .SHARED.LIST. to honor top level .MULTIPLE
    10-10-20 msgcat.mk: ksh -D strings => raw string
    10-08-24 bind.c: glob_diropen() gs->name absolute path
    10-08-23 bind.c: drop GLOB_NOCHECK so *.notthere => empty
    10-08-15 mam.c: fix joint target make-done imbalance
    10-07-17 option.c: expand external.old for execve() -- doh
    10-06-21 Makerules.mk: use CC.SUFFIX.DEBUG instead of .pdb
    10-06-21 Makerules.mk: add "idxxx ... id=id :LIBRARY: ..." to preserve _BLD_id==1
    10-06-17 Makerules.mk,Scanrules.mk: finally a general solution to -I- vs prefix-include?
    10-06-01 ast api 20100601
    10-06-01 Makerules.mk: :PACKAGE: --latest --api=YYYYMMDD|latest FOO:YYYYMMDD
    10-05-25 pkg-X11.mk: add CC.STDLIB.BASE checks for PACKAGE_X11_LIB
    10-04-15 command.c: update to latest cowait() api
    10-03-11 object.c: fix rare 0 complink compile bug
    10-03-11 option.c: handle delayed option quoting if needed
    10-03-10 expand.c: add '-' to order prereq token char set
    10-03-09 read.c: fix ancient makefile cpp comment check that missed /**...
    10-03-04 Makerules.sh: LC_ALL=C for %:%.sh $SHELL -n to avoid 1.2 arith syntax errors
    10-02-24 rule.c: add .GETOPTS and b_getopts() builtin for optget()
    10-02-14 Makerules.mk: add .INSTALL.COMMON. directory arg
    10-02-14 bind.c: add bind_p "- ..." and "... ..." virtual logic
    10-02-14 debug.mk: set --nonativepp -- doh
    10-02-14 make.c,metarule.c: change metget() prereqs arg to active frame
    10-02-14 expand.c,make.c,metarule.c: .IMPLICIT metarules not applied to implicit prereqs
    10-02-02 Makerules.mk: fix LICENSEINFO search to check $(.PACKAGE.)-foo.lic
    10-01-19 Makerules.mk: fix .RECURSE to handle install or .INSTALL
    10-01-01 --- release 5.4 ---
    10-01-01 parse.c: ['"] following # always ignored
    09-12-09 Makerules.mk: .EXPORT => .SCRIPT, internal.exported => internal.script
    09-12-09 Makerules.mk: .EXPORT now adds vars to coshell coexport(3) list
    09-12-04 Makerules.mk: rename PACKAGE_OPTIMIZE=foo to PACKAGE_OPTIONS=optimize-foo
    09-11-13 Makerules.mk: fix .req logic for virtual -lfoo
    09-10-28 command.c: disable *** error status message for .FAILURE targets
    09-10-27 parse.c,make.c: a - b : .JOINT => b:.DONTCARE (b optionally generated)
    09-10-27 Makerules.mk: install .pdb if it exists in .lib dir
    09-10-09 --- release 5.4 ---
    09-10-07 bind.c: makerule(path) == makerule(base) && !alias && terminal => drop path
    09-10-06 Makerules.mk: add '-' prefix to ARFLAGS for posix portability
    09-10-05 Makerules.mk: consult REQUIRE libs for CC.DLL targets
    09-09-28 Makerules.mk: retract: if -lfoo binds to CC.STDLIB dir then bind to -lfoo
             (it makes a difference for some cc!)
    09-09-22 Makerules.mk: CC='' or --cctype=- or --cctype=0 => no C probe
    09-09-22 Makerules.mk: if -lfoo binds to CC.STDLIB dir then bind to -lfoo
    09-09-22 main.c: missing default makefile diagnostic is warning if --errorid
    09-09-09 Makerules.mk: fix CC.AR.ARFLAGS logic
    09-09-01 Makerules.mk: handle { libfoo.a foolib.a foo.a } prereqs
    09-08-20 Makerules.mk: add :LIBRARY: name=soname and CC.SHARED.NAME logic
    09-08-20 Makerules.mk: add :PACKAGE: --soname[=-n], -n to drop n suffixes in soname
    09-07-31 Makerules.mk: add CC.AR.ARFLAGS
    09-05-05 scan.c: reject implicit prereq names containing space
    09-03-24 Makerules.mk: --option[=value] compatibility with option[=value] until 2011
    09-03-02 Makerules.mk: use $(-recurse:/:/ /G:N=[0-9]*:O=N) for recursion limit
    09-02-02 Makerules.mk: reset :PACKAGE: pkg:noinstall for each pkg
    09-01-09 Makerules.mk: fix .TGZ to handle large manifests
    09-01-09 Makerules.mk: :: foo.man[=N] installs in man/manN/foo.N (default 1)
    09-01-06 bind.c: fix 2d .SOURCE* cross product virtual+dir bug
    08-12-08 Makerules.mk: -lfoo/bar => bar plugin for foo
    08-12-08 expand.c: handle -lfoo/bar prereqs
    08-11-11 Makerules.mk: add %.pl => % for perl scripts
    08-11-11 rules-win32.mk: rc requires native path to .rc file
    08-11-04 bind.c: handle non-3d VPATH for absolute dirs in .SOURCE*
    08-10-24 Makerules.mk: fix install --link=* to handle directories
    08-10-24 command.c: work around another gcc code generation bug -- ouch
    08-10-16 Makerules.mk: fix :NOOPTIMIZE: to cooperate with :NOPROTECT:
    08-09-24 Makerules.mk: add --recurse=only
    08-09-10 Makerules.mk: add :NOPROTECT:, fix CC.DIALECT=VERSION shared lib bind
    08-08-08 state.c: do not use low res virtual st.st_mtime
    08-08-08 Makerules.mk: always include explicit :: files in manifest
    08-06-06 Makerules.mk: drop -G from _BLD_DEBUG trigger -- doh
    08-05-22 Makerules.mk: $(CC.ARFLAGS) also needs $(CCLDFLAGS)
    08-05-20 tests/test.def: add SET local -- nfs can't keep up
    08-04-28 make.c: fix .ACCEPT to propagate state event time
    08-04-28 option.c: split --regress into --regress={message|sync}
    08-04-28 tests: --regress for all tests, --regress=sync for timing only
    08-04-01 Scanrules.mk: .SCAN.c <nosuffix> => nosuffix : .TERMINAL
    08-03-27 Scanrules.mk: add --ignorecase option to .INCLUDE.SUFFIX.
    08-03-27 scan.c: fix buffer boundary slide bug
    08-02-29 --- release 5.3 ---
    08-02-29 option.c,variable.c: $(-+name) => option value
    08-02-29 expand.c: add :H=O: to reverse token list
    08-02-09 Makerules.mk: fix .SHARED.LIST. to allow multiple explicit lib prereqs
    08-02-02 Makerules.mk: add LDRUNPATH init from $(CC.RUNPATH)
    07-12-15 Scanrules.mk: add "set stdio HEADER" to .SCAN.iffe
    07-11-26 Makerules.mk: handle a.req => -lfoo -lbar, and -la does not exists
    07-10-22 Makerules.mk: initialize (CC.SHARED.LIBS.target) to match .SHARED.LIST.LIBS.
    07-10-18 parse.c: handle .assoc.*%* : .INSERT to insert into assoc list
    07-09-11 Makerules.mk: fix --force-shared docs to match semantics
    07-09-07 scan.c: tweak ANY logic (leading ANY still does not play nice)
    07-09-07 pkg-cobol.mk: handle ``ID. COPY ...''
    07-08-28 bind.c: handle assoc foo=>bar alias
    07-07-31 rule.c,object.c: handle include - f, f missing in .mo, then exists
    07-06-28 Makerules.mk: fix .SHARED.LIST.EXCLUDE. plugin bug (sortlib/vcodex)
    07-06-25 rules-win32.mk: let $(CPP) do the %.rc=>%.res preprocessing
    07-06-21 Makerules.mk: .IGNORE shared only if ! "$(CC.SUFFIX.DYNAMIC)"
    07-06-21 Makerules.mk: flush dir cache after each :MAKE: recursion
    07-06-21 option.c: handle set --option=';foo;sa;...'
    07-06-21 expand.c: handle --recurse=*implicit* and clean up order_*() apis
    07-06-21 expand.c: + ... intermediate makefile dirs in :W: (-Q0x40000000)
    07-06-20 Makerules.mk: add --recurse=leaf to terminate leaf recursion
    07-06-20 Makerules.mk: handle "lhs :ALL:"
    07-06-15 expand.c: add :W: . alias check
    07-06-11 variable.c: foo:bar==1 equiv to bar==; foo : bar=1
    07-06-06 bind.c: fix ancient internal.openfile bug -- wow
    07-06-06 Makerules.mk: add .SHARED.LIST.EXCLUDE. to exclude self
    07-06-06 rule.c: add self to IGNORECHANGE(), only check primary joint
    07-06-01 rules-win32.mk: PACKAGE_LOCAL=
    07-05-25 Makerules.mk: retry package sans version if version fails
    07-05-21 misc.c: invalidate openfile if _WINIX && st_nlink>1
    07-05-09 Makerules.mk: fix %.req logic
    07-04-20 rules-win32.mk: fix PROTOINSTALL sed <ast_*.h> => <ast/ast_*.h>
    07-04-18 Makerules.mk: add :REQUIRE:
    07-03-26 make.h: add state.expall to detect and disable $(...) recursion
    07-03-26 Makerules.mk: fix .IFFE.REF. to handle -l* reqs
    07-03-23 ppcc.sh: handle -G <number>
    07-03-11 Makerules.mk: add --shared as an alternative to CCFLAGS+=$(CC.DLL)
    07-02-23 Makerules.mk: add :PACKAGE: foo:private for +lfoo but not in *.req
    07-02-14 expand.c: tweak :P=D: alias check (-Q0x10000000)
    07-01-11 --- release 5.2 ---
    07-01-09 expand.c: add :P=D: alias check (-Q0x10000000)
    07-01-01 Makerules.mk: add --local-static with dynamic targets now default
    07-01-01 Makerules.mk: cmd+dll installs dll before command compile/link
    06-12-24 expand.c: handle $("":T=ZW) (equivalent to $("":T=R))
    06-12-24 misc.c: fix :F=T: to handle sec[.nsec]
    06-12-22 Makerules.mk: add CC.STDLIB.BASE to differentiate 32 vs 64 arch
    06-12-22 pkg-X11.mk: use CC.STDLIB.BASE
    06-12-15 Makerules.mk: set up PACKAGE rules to search CC.STDLIB -- doh
    06-12-14 rules-win32.mk: add (RC) (RCFLAGS) to %.rc => %.res
    06-12-12 bind.c: handle win32 dir vs. dir.exe => not aliased
    06-12-07 expand.c: add $("<table>":L...) for { FILES RULES VARIABLES }
    06-12-07 expand.c: add :VX: to still expand value
    06-12-07 Makerules.mk: use $("<VARIABLES>":L=CC.+([[:upper:].])) in .MAM.INIT
    06-11-23 Makerules.mk: fix .BIND.-l% for -g only bootstrap
    06-11-15 Makerules.mk: fix :: vs :LIBRARY: ordering bug for .o prereqs
    06-11-11 Makerules.mk: fix :PACKAGE: vs lib64
    06-10-31 Makerules.mk: add $(PROTOINSTALL) to :INSTALLPROTO:, rules-win32.mk
    06-09-28 Makerules.mk: add $(IFFEREFS)
    06-09-15 Makerules.mk: fix .SHARED.DEF.* scope prereq logic
    06-09-01 Makefile: no -O for command.c on darwin (probably gcc 4.0's fault)
    06-08-15 command.c: handle no action but .AFTER|.BEFORE prereqs
    06-08-11 Makerules.mk: .PACKAGE.INIT now checks lib64 for HOSTTYPE==*64
    06-08-11 command.c: pass $(COSHELL) to coopen()
    06-08-07 command.c,parse.c: add 'query - blocked' for blocked jobs
    06-08-02 command.c: cokill(state.coshell,0,0) to kill event jobs
    06-07-31 metarule.c: handle dynamic metarule rhs
    06-07-27 command.c: clear job->cojobs to prevent concurrent use
    06-07-17 Makerules.mk: cc-...~... => cc-...,...
    06-06-21 expand.c: add :Z[=C]: for closure and cycle detection
    06-06-11 command.c: update to use copending() cojobs() cozombie()
    06-05-09 command.c: pass CO_ENV_OPTIONS to coopen()
    06-03-29 Makerules.mk: fix +l* explicit binding override
    06-03-08 Makerules.mk: fix :JOINT: rhs double eval
    06-02-08 pkg-cobol-cobc.mk: drop -g from COBOLFLAGS
    06-01-31 Makerules.mk: fix :PACKAGE: P:static to honor .PACKAGE.P.library
    06-01-25 Makerules.mk: { -ldl -lm } dynamic unless explicitly overridden
    06-01-21 --- release 5.1 ---
             Makerules.mk: fix list.package.binary INSTALLROOT edit
             command.c: add gcc 4.*.* ppc code generation bug workaround
             read.c: handle /dev/* mtime==0
             version.c: fix { VROOT VOFFSET } initialization
    06-01-08 pkg-cobol-*.mk: handle --debug-symbols
    05-12-25 Makerules.mk: fix :LIBRARY: plugin bind for exe/dll
    05-11-22 variable.c: restore $(+...)==$(-...) until 2009
    05-11-07 Makerules.mk: fix :YYPREFIX: to handle YY in new prefix
    05-11-04 Makerules.mk: PACKAGE_p_LIB => PACKAGE_p_INCLUDE
    05-11-03 expand.c: add :H=P: directory prefix sort
    05-11-01 pkg-cobol-*.mk: add :VARARGS:
    05-10-14 pkg-cobol*.mk: add COBOL.PLUGIN.LIBRARIES for mfcobc plugins
    05-10-12 Makerules.mk: handle "foo :LIBRARY: -lfoo" to gen dll from lib
             tests/cc.def: add test version of pkg-cobol.mk
    05-10-11 Makerules.mk: :PACKAGE: foo:bar => .PACKAGE.foo.option.bar:=1
             pkg-cobol-mfcobc.mk: add special char extern demangle
             pkg-cobol-mfcobc.mk: :PACKAGE: cobol:always => .COBOL.INIT
    05-09-15 Makerules.mk: quote .PROBE.SPECIAL return to disable time arith
    05-08-11 rule.c,state.c,tests/attribute.tst: fix .RETAIN
    05-08-08 Makerules.mk: add :A!=.TERMINAL: to .BUILT. -- doh
             tests/recurse.tst: add test for .BUILT. vs .TERMINAL
    05-07-17 Makerules.mk: move cobol specifics to pkg-cobol.mk
             Makerules.mk: add CCSPECIALIZE $(CC.OPTIMIZE) override
             Makerules.mk: add include - + pkg-default.mk
             Makerules.mk: add $(-mam) test for .MAM.INIT in .mo
             Makerules.mk: --mam=static set noreadstate reread strictview
             Makerules.mk: handle package named by root dir: :PACKAGE: /a/b/name
             pkg-cobol.mk: generic cobol package setup
             pkg-cobol-cobc.mk: open source cobol package setup
             pkg-cobol-mfcobc.mk: microfocus cobol package setup
             options.h: OPT_reread is boolean, not numeric
             rule.c: add .FREEZE state.freeze
             tests/recurse.tst: add
    05-05-25 Makerules.mk: use $(CC.INCLUDE.LOCAL) instead of -I- CC.DIALECT
    05-05-18 Makerules.mk: fix --static-link typo
             Makerules.mk: disable .MAMACTION "setv FOO ${FOO}"
             Makerules.mk: add (CC.SHARED.LIBS.*) to capture -l* bind changes
    05-05-11 Makerules.mk: fix --nolib-type to work for referenced libs too
    05-05-05 Scanrules.mk: handle cobol COPY "book" optional quotes
    05-05-01 Makerules.mk: drop -D* from COBOLFLAGS
             Makerules.mk: :PACKAGE: :dynamic => :notype
    05-04-26 Makerules.mk: add COBOLDIALECT
    05-04-20 Makerules.mk: add :P=A: to .LIST.PACKAGE.BINARY VROOT logic
             Makerules.mk: fix PACKAGE_%_LIB logic to handle /usr/%/lib64 etc.
             version.c: fix OLDMAKE to search $(PATH) for { gmake make }
    05-04-15 option.c: fix regress state.start for hi res clock lo res filesystem
             state.c: failed statevar action must set statevar time to 0
             Makerules.mk: change manifest edit op :P=F: => :P=F:T=FR:
    05-04-14 Makerules.mk: drop /usr/common from LCLDIRS, /home from OPTDIRS
    05-04-11 command.c: set internal.openfd FD_CLOEX before coopen()
    05-04-08 parse.c: revisit space indentation [syntax:10]
             object.c: pre-2005-03-01 corruption repair drops 0 prereq list items
    05-04-03 variable.c: fix += vs space inconsistencies [assign:09]
             Makerules.mk: restore $(PACKAGE_LOCAL) -- used in user makefiles
    05-03-31 Makerules.mk: add --lib-type
             object.c: move bound object prereq name to COMP_NSEC
             parse.c: fix assertion/assignment intercept $(%) to be operator name
    05-03-19 Makerules.mk: %.sh chmod only if not already writeable&executable
             Makerules.mk: mam ${-debug-symbols...} defaults to ${CCFLAGS.FORCE}
             make.c: fix optional joint metarule prereq state check
             metarule.c: fix closure ordering bug (metarule:23)
             object.c: don't mark (P_joint|P_target) garbage
             object.c: fix makefile prereq subsecond truncation time check
             object.c: fix makefile .SOURCE.mk prereq change bug (diagnostics:14)
             parse.c: .SPECIAL not interpreted as metarule -- doh
             state.c: triggered state var time now synced after action completes
    05-03-17 state.c: fix statefile() to return non-null for --nowritestate
             state.c: demote "file timestamp subsecond truncation" to --warn
             Makerules.mk: fix .SHARED.LIST. to honor --all-static
             Makerules.mk: _PACKAGE_foo=0 => ignore :PACKAGE: foo
    05-03-11 state.c: handle linux subsecond truncation after state lock inode flush
             expand.c: handle */foo?* : lib/libfoo in :W=O:
    05-03-09 Scanrules.mk: cobol accepts "\T \D COPY ..." !
             rule.c: clarify prereq list change explanations
    05-03-08 Makefile: generate nmake.1 from --nroff + make.1.body + make.1.tail
    05-03-01 object.c: fix compcheck() bug that missed some prereq->complink
             object.c: repair pre-2005-03-01 compcheck() corruption in load()
             Makerules.mk: fix .LIST.PACKAGE.EDIT. , delimiter clash
             Makerules.mk: fix binary .LIST.PACKAGE.EDIT. to retain arch/HOSTTYPE
             Makerules.mk: fix plugin static :LIBRARY: dll install bug
             Makerules.mk: --static-link => _BLD_STATIC_LINK==1
    05-02-28 object.c: reset errno for "object file io" EOF messages
    05-02-22 make.c: fix joint metarule time comparison
    05-02-14 object.c: object option strings must be utf8
    05-02-11 Makerules.mk: check :MAKE: recursion on .
    05-02-08 Makerules.mk: shared lib link now uses ./*.req too
    05-02-06 Makerules.mk: .FIND. lib/package checks $(PACKAGEROOT) first
    05-02-04 Makerules.mk: drop .LIBRARY.CLEANUP. old plugin cleanup
    05-01-01 --- release 5.0 ---
             high resolution time stamps
    04-12-25 Makerules.mk: handle cc-,a=b
             Makerules.mk: check for -I. after -I-
             Makerules.mk: add MVFLAGS=-f for install actions
             Makerules.mk: relax .PACKAGE.INIT. PACKAGE_%_INCLUDE search
             Makerules.mk: fix list.manifest recursion
             Makerules.mk: add experimental --recurse=combine
             Scanrules.mk: assert .LCL.INCLUDE before .PREFIX.INCLUDE :T=G: bind
             msgcat.mk: fix _PACKAGE_ID
             bind.c: disable bindalias() for unbound files -- doh
             misc.c: fix { %C %S } core dump (after a warning!)
             parse.c: drop CON_scan for over all rules; $(...) does it
             parse.c: drop { .ASSERT .ASSIGN } lists, add { .ASSERT. .ASSIGN. }
             state.c: ignore file timestamp subsecond truncation -- willya fix ext3
    04-12-08 Scanrules.mk: add .SCAN.iffe for `include previous-iffe-output'
             Scanrules.mk: fix $(prefixinclude:?...) => $(-prefix-include:+...)
             Makerules.mk: no -g CC.LIB.TYPE (in ar name) if CC.OPTIMIZE also set
             rule.c: don't propagate .DONTCARE .IGNORE to bound rule
             parse.c: association pattern ending in % is appended
             expand.c: fix :P=A: 3d logic to retain pwd prefix -- doh
             expand.c: fix makefile scan to ignore lib*.[hH]
             bind.c: fix bug that missed bind dir for x given explicit d/x (edit#18)
             misc.c,option.c: *,*=* is a target/prereq, not a (scoped) var assignment
    04-12-01 object.c,state.c: tmsleep() on statefile time for 1 sec granularity
    04-11-25 expand.c: handle :T=<op>=<ops>: for all <op>
             command.c: maintain error state for cancelled actions
             command.c: add .AFTER .FAILURE to capture action errors
             Makerules.mk: LEX = $(FLEX) if flex exists
             Makerules.mk: add :YYPREFIX: fallback to previously generated
    04-10-22 Makerules.mk: check for package-pwd in LICENSEFILES
             Makerules.mk: mam ${(debug|strip)...} => ${-(debug|strip)-symbols...}
             Makerules.mk: add $(LICENSECLASS)
             Makerules.mk: add $(package.license.class) pattern for .LIST.PACKAGE.*
             Makerules.mk: add $(.SELECT.EDIT.) for omitting .RECURSE subdirs
             expand.c: fix recursive order logic
    04-10-01 metarule.c: metaget assumes % target for ... : % .NULL (-Q0x08000000)
             scan.c: add \T token match for (\D|\V)
             Makerules.mk: :PACKAGE: --option checked first, "set" by default
             Scanrules.mk: .SCAN.cob COPY has "\T" lead-in instead of " \D"
    04-09-28 expand.c: fix operator separator parse (edit#17)
             option.c: fix $(-c) option flag lookup (option#14)
    04-09-24 option.c: optcheck() after each option table change
    04-09-21 add --option prereq scope with getopt() style "--" terminator
             expand.c: :P=A: now acts like :P=L!:
             Makerules.mk: fix $(-static) => $(-static-link)
             Makerules.mk: /bin/cat.exe => "%.exe : % .NULL"
    04-09-09 expand.c: add :T=QO: (isoption()) and :T=QR: (!!getrule())
             object.c: finally stomp the complist() panic via compcheck()
             object.c: fix loadstring() to detect early EOF
             option.c: add isoption(), --name[[-+&|^]=value]
             option.c: fix set option table format to handle future extensions
             Makerules.mk: drop PACKAGE_LOCAL definition -- not used anywhere
             Makerules.mk: add rules options, syn with options.c
             Makerules.mk: this version incompatible with make < 2004-09-09
    04-09-01 Makerules.mk: add .LIST.PACKAGE.RUNTIME
             Makerules.mk: fix recursive .LIST.PACKAGE.EDIT.
             make.h,options.h,option.c,command.c: add --serialize, state.serialize
             expand.c: sync :W: 2d and 3d logic
             option.c: add --option values subarg for optget(3) value list
             read.c: fix MAKERULES vs. explicit rules statement logic
             variable.c: change $(+) to $(--[name]), add $(-?[name])
    04-08-31 debug.mk: fix -D-d vs -dD logic
    04-08-11 expand.c: :W=O: scans INIT files too -- duh
             expand.c: fix :P=H: sufix checks
             expand.c: handle :P!=S:
             command.c: fix .JOBDONE rule arg (internal#05)
             command.c: fix --targetcontext directory commit logic
             metarule.c: add --targetprefix=prefix to handle source base clashes
             parse.c: fix local ( a ... ) $(%) (statement#10)
             Makerules.mk: fix :PACKAGE_INSTALL: to use .ACCEPT (e.g. for proto)
             Makerules.mk: fix .MAMEDIT. initialization for 2d vs. 3d
             Makerules.mk: YACCFIX now applies proto to y.tab.h
             Makerules.mk: ignore VERSION==- for default output file names
             Makerules.mk: fix :DLL: to work -- wow
             Makerules.mk: fix synthesized rule names to avoid .. canonicalization
             Makerules.mk: fix :PACKAGE: to handle `foo=bar' rhs
             Makerules.mk: add .LIST.PACKAGE.LICENSE
             Makerules.mk: add separateinclude=1 to override CC.DIALECT=-I-
             Makerules.mk: handle --targetprefix
    04-08-10 rules-win32.mk: add :PACKAGE: { atl crt mfc } support -- puke
    04-07-27 msgcat.mk: move :: related files to msg specific action
    04-07-22 tests/*.tst: more test additions
    04-07-17 archive.c: --regress enables ranlib for all archive types
             bind.c: fix binding guess for unbuilt targets
             bind.c: fix overzealous dir HASH prune for 2d views
             bind.c: allow D_source&P_target to inherit lower view (assert#29)
             expand.c: add :T=B..: unbind pre-op
             main.c: move the .INIT trap after candidate state variable freeze
             main.c,read.c: update MAKECONVERT to handle 'file1:file2 action ...'
             make.c: let joint prereq share sibling frame for binding (assert#34)
             make.c: fix require_p loop detection
             object.c: add objectfile() to unify with statefile()
             object.c: fix lower view state var time propagation
             object.c: -nbf file inhibits frozen var check
             object.c: use complink() skip logic in comprule() -- wow
             option.c: --writestate and --writestate can specifiy dir only
             rule.c: add .GLOBAL and internal.global
             state.c: drop leads/lags warning for --regress
             Makerules.mk: handle multiple :LINK: lhs
             Makerules.mk: fix .DO.INSTALL.DIR view logic with .DO.TOP.LEVEL
             Scanrules.mk: add ".ATTRIBUTE.%.h : .SCAN.c" for .PARAMETER files
             Scanrules.mk: .SCAN.sh: add $'...' quotes
    04-06-30 parse.c: pass blank lines at all input levels to preserve numbering
             parse.c: no space indent warning for blank lines
             parse.c,syntax-08: handle quote after expansion in expression
    04-06-28 make.c: preserve joint metarule prereq list order
             diagnostics.tst: add
    04-06-21 Makerules.mk: make options env ignored if MAKE_OPTIONS set
             make.h: add state.import with increment/decrement semantics
             options.h,options.c,variable.c,object.c: add import state option
             parse.c: fix here action parse to honor quotes and nesting
             parse.c: retain blank/hidden action lines for line number consistency
             trap.c: fix functional vs. obsolete virtual interrupt logic
             assert.tst,automatics.tst,interrupts.tst,syntax.tst: add
    04-06-20 dump.c: drop dumprule() trailing ' ' by adding "state" status
             expand.c: skip tst=='F' for :T=XG:
             make.c: maketop() rule rename disabled (what did that do?)
             misc.c: handle %o in printext() -- oops
             misc.c: %t %T calls tmdate() if not a number
             parse.c: D_scope prereqs do not set P_target
             Makerules.mk: if ! "$(CC.DIALECT:N=-I-)" then no -I- -- duh
    04-06-19 implicit.tst: add
    04-06-18 rule.c: add nametype() to unify is*() name type macros
    04-06-17 options.h: add -q, --regress to massage output for testing
             misc.c: add numtime() for mam/regress/trace numeric times
             prereqs.tst: add
    04-06-12 assignment.tst: add
    04-06-11 Makerules.mk: fix per-target +l vs. -l
             nmake.tst: split into attributes.tst edit.tst options.tst
             options.c: recode to pass options.tst
    04-06-10 nmake.tst: initialize in 2d with no VPATH
    04-06-08 Makerules.mk: drop :PACKAGE: nolibrary => -l%:.VIRTUAL
    04-06-06 rule.c: fix associate() .SCAN match
    04-06-04 Makerules.mk: add :PACKAGE: foo:notype bar:type=-p --type=-g
             Makerules.mk: fix .REQUIRE.* to handle libfoo.a etc.
             scan.c: add 'O' option to inhibit scan override warning
             parse.c: debug=7 for active statements, debug=8 for skipped
    04-05-31 Makerules.mk: fix :PACKAGE: version logic
             Makerules.mk: add .FLAGSINIT, called in .MAKEINIT
             Makerules.mk,Scanrules.mk: strip to generic cobol
             expand.h,expand.c: add ^ edit op sep
    04-05-20 Makerules.mk: fix .OFFICIAL to not diff dirs
    04-05-19 parse.c: make the read builtin interruptable
    04-05-18 rule.c: move b_*() builtins here, add b_syscall()
    04-05-11 mam.c: add "bind ..." to match the mam doc
             make.c: add "meta ..." to match the mam doc
             Scanrules.mk: tweak cobol sql scan
             scan.c: fix ancient dup pattern prefix bug
    04-05-06 Makerules.mk: fix CCLD CCLDFLAGS semantics
    04-04-15 expand.c: fix :V: operand check
             expand.c: check var alternation only before first delimiter
             expand.c: add :P=F: to recursively expand dir hierarchies
             expand.c: fix ancient $(...) non-tokenizing edit op bug
             parse.c: fix dup scope prereq value append
             bind.c: check for consistent ../* bound directory rebind
             Makerules.mk: fix :PACKAGE: :noinclude:nolib:noroot
             Makerules.mk: add :P=F: to .MANIFEST.
             Makerules.mk: add :INIT:
             Makerules.mk: drop obsolete MAKESKIP var definition
             Makerules.mk: proto notice generation disabled unless LICENSE=="*=*"
             Makerules.mk: package/PACKAGE.(lic|pkg) on PKGDIRS inhibits "not found"
             Makerules.mk: "test" action checks for gnu "check"
             Makerules.mk: fix recurse action target selection
             Scanrules.mk: fix .INCLUDE.cob to search lower and upper case suffixes
             rules-win32.mk: add SYSDIR
    04-04-14 Makerules.mk,Scanrules.mk: add COBOLIPF,COBOLSQL
    04-04-12 Makefile: add STDCHMOD (for osf.alpha cmd :LIBRARY:)
    04-04-04 bind.c: don't alias 2d directories -- duh
    04-04-01 Makerules.mk: .BIND.+l% checks .REQUIRE.-l% for disable
    04-03-31 expand.c: add :VB: for VAL_BRACE { ... }
             Makerules.mk: fix .SHARED.LIST. again
             Makerules.mk: add :PACKAGE: noCC.* CC.*=value probe overrides
    04-03-30 Makerules.mk: omit -L*/local/* if in CC.STDLIB (00-03-17 repeal)
    04-03-25 pkg-X11.mk: drop openbsd.i386 -lc_r workaround
             Makerules.mk: fix .SHARED.BIND. CC.SUFFIX.STATIC -l* expansion bug
    04-03-17 expand.c: check { :: :LIBRARY: } lhs
             option.c: fixed bug that looped on `-' or `+' arg -- wow
             Makerules.mk: atom arg disables foo => .FOO checks for subsequent args
             Makerules.mk: fix .LIST.PACKAGE.BINARY :P=A: misplacement
             Makerules.mk: fix inappropriate .BIND.-l% CC.SUFFIX.ARCHIVE .IGNORE
             Makerules.mk: fix .SHARED.REF.* to bind before return
             Makerules.mk: :NOTHING: now does `exit 0' -- almost nothing
             Makerules.mk: I not appended to ARFLAGS if .def :LIBRARY: rhs
             pkg-X11.mk: handle /usr/include/X11R* /usr/lib/X11R*, deprecate contrib
    04-02-29 state.c: fix `another make running' message to handle <=0 elapsed time
             Makerules.mk: CC.LD.RUNPATH used only if LDRUNPATH set (. to kick in)
             Makerules.mk: mam ${MAKE} => ${NMAKE}, ${MAKEFLAGS} => ${NMAKEFLAGS}
             Makerules.mk: localize plugin DLLDIR and CC.SHARED.REGISTRY
             Makerules.mk: do not install plugin CC.SUFFIX.SHARED libs
             Makerules.mk: fix CC.SUFFIX.SHARED CC.SUFFIX.ARCHIVE clash
             variable.c: mam $(-): $MAKEFLAGS => ${NMAKEFLAGS}
             nmake.tst: 001 now ebcdic immune
    04-02-14 scan.c: add class identifier match action 'C'
             expand.c: add :P=E: for PATH independent executable name
             expand.c: static mam :P=A: expands ``.'' for pwd
             expand.c: :N=pat: now uses regcomp() instead of strmatch()
             expand.c: :T=F: lstat() (as always) :T>F: pathstat()
             read.c: extend new vs. old makefile type check
             parse.c: add <<'end' ... end for literal actions
             Makerules.mk: let proto -c '' determine .LIST.PACKAGE.* comment style
             Makerules.mk: add $(CC.EXPORT.DYNAMIC) to default cobol LDFLAGS
             Makerules.mk: add $(CC.SHARED.LD) to differentiate -r and $(CC.SHARED)
             option.c: add --writeobject[=file] --writestate[=file]
    04-02-11 Makerules.mk: .LIST.PACKAGE.* generates top view relative paths
             Makerules.mk: add $(CC.AR) for ar
             option.c: fix optget() usage bug that treated --nofoo as --foo
    04-02-02 Makerules.mk: :LIBRARY: plugin static still installs req
             Makerules.mk: fix :PACKAGE: foo:nolibrary
             Scanrules.mk: ignore C++ include <foo> (no suffix)
             object.c: retain reference .IGNORE in state
             option.c: non-0 exit for invalid command line options
             parse.c: don't check D_scope for D_dynamic
             rule.c: add external.order for .ORDER, :W=[OPR]:, :PACKAGE: X:order
             scan.c: null map means ignore; handle |A.IGNORE|
    04-01-30 Makerules.mk: add .LIBRARY.CLEANUP.* to clean up after plugin renam
             Makerules.mk: :PACKAGE_INIT: lhs for pre-installed $(BINDIR) files
    04-01-28 Makerules.mk: add ``lib version plugin=id :LIBRARY: ...''
             expand.c: :W=[OPR]: now favors make if its in the mix
    04-01-22 Makerules.mk: add .PREQUIRE check to ensure up to date *.req
    04-01-20 expand.c: :T=F: includes triggered time==0 targets
    04-01-01 --- release 4.4 ---
    03-12-31 Makerules.mk: $(LDRUNPATH) overrides defaults for CC.LD.RUNPATH
    03-12-19 expand.c: add `foolib:foo:libfoo' to :W=[OPR]:
    03-11-25 Makerules.mk: CC=c++ not found => search for any existing c++ compiler
    03-11-19 Scanrules.mk: default cobol include suffix is .CPY (or .cpy)
    03-09-29 Makerules.mk: fix $(PACKAGES) logic inversion typo (:VARIANT: bug)
    03-09-22 Makerules.mk: don;t clobber $(CATALOG).msg
    03-09-19 Makerules.mk: fix %.sh USAGE_LICENSE quoting
             expand.c: fix :T=E: quoting
    03-09-16 archive.c: inhibit `member newer than archive' for ranlib time skew
    03-08-27 Makerules.mk: honor explicit :MAKE: rhs order
    03-08-11 make.c: change -T0x00300000 to -Q0x00300000 as documented
    03-07-17 archive.c: add arupdate()
             state.c: don't skew sync archives (avoids possible ranlib interference)
    03-06-21 parse.c: fix expr() quote recursion bug
             Makerules.mk: fix .DLL.INSTALL logic
             object.c: add initcode() to initialize the ccode maps early enough
             main.c: add initcode() startup call
    03-06-11 Makerules.mk: reinstate install .a on .dll+.lib systems
             rules-win32.mk: inhibit libast.a install since cc does implicit ast.lib
             Makerules.mk: drop DIALECT==CLOSURE check for new -l* binding
             Makerules.mk: add --mam ${mam_cc_FLAGS} to handle user CCFLAGS override
             Makerules.mk: fix :DLL: to honor CCFLAGS
             Makerules.mk: add -D_BLD_DEBUG to mam CCFLAGS
    03-06-10 debug.mk: add libpp(3) -D-d to %.i rules
    03-06-09 main.c: wait for jobs to finish before making .DONE
             expand.c: change `V edit op value' error to be a warning
             Makerules.mk: fall back to flex if lex not found
    03-06-06 expand.c: add :VFU: to expand unbound internal var names
             Makerules.mk: use .SHARED.LIST. to generate -l* +l* list
    03-06-02 ppcc.sh: -o C++ implies -o PPLD for link time instantiation
    03-05-21 Makerules.mk: fix %.sh=>% :T=E: echo quote bug
    03-05-19 Makerules.mk: runtime check for flex -[oP] and bison -[op]
             Makerules.mk: add strip=1 ala debug=1
    03-05-11 rule.c: fix MAKEPATH=$PWD:$PWD loop
    03-05-09 command.c: add "init TARGET CURTIME" dynamic mam
             command.c: add CURTIME to mam "code TARGET STATETIME CURTIME ..."
    03-05-07 Makerules.mk: add COBOL COBOLFLAGS COBOLMAIN COBOLLIBRARIES .SUFFIX.cob
             Scanrules.mk: add .SCAN.cob, `*( MAIN )*' for main source
             scan.c: add \D (0 or more digits), \V (0 or more variable chars)
    03-04-27 Makerules.mk: don't build dlls in subdir for CC.SUFFIX.SHARED==".x"
    03-04-22 rules-win32.mk: drop :PACKAGE: Xm override -- handled by uwin
    03-04-15 mam.c: output P_ignore attribute
             Makerules.mk: fix the mam .DO.INSTALL to compare before mv to .old!!
    03-04-05 expand.c: add :W=P: for ordered recursive prereqs
             Makerules.mk: add recurse=prereqs
             pkg-X11.mk: add openbsd.* -lc_r pthread workaround
             Makerules.mk: add .PACKAGE.$(P).found:=1 if package lib or header found
             Makerules.mk: optional :PACKAGE: rhs must now be marked :dontcare
             Makerules.mk: pure recursion makefiles make .RECURSE first by default
             Makerules.mk: .NORECURSE inhibits default .RECURSE first
             Makerules.mk: fix .DO.INSTALL directory prereq omission
             Makerules.mk: add .BELIEVE for initialization, e.g., after mamake
             bind.c: fix rebind alias bug
             misc.c: limit `mtime after the epoch' warnings to { S_ISREG S_ISDIR }
    03-03-28 Makerules.mk: eliminate CC.STDINCLUDE before -I- too
    03-03-27 Makerules.mk: add :PACKAGE: *:attributes:*
             pkg-X11.mk: fix CC.REQUIRE.Xm
             rules-win32.mk: add :PACKAGE: Xm:attributes:static
    03-03-21 command.c,object.c: always emit target name for --mam=dynamic
    03-03-19 expand.c: add :W=R: for true :MAKE: recursion order
             state.c: add test 0x00040000 to set failed event to staterule event
             nmake.tst: add first regression tests since 1984 -- yes, I'm ashamed
             Makerules.mk: change :W=O: to :W=R:
             Makerules.mk: use CC.LD.RUNPATH for LDRUNPATH and non-std dirs
             Makerules.mk: drop MAKEDIRS .RECURSE.OFFSET. -- not needed with :W=R:
    03-03-15 Makerules.mk: fix debug=1 to delete $(CC.OPTIMIZE) from CCFLAGS
             expand.c: fix SORT_* comparison function selection
    03-03-11 expand.c: add ~ edit op sep
             expand.c: limit edit op [~!<>=] sep to one occurrence
             expand.c: add :H=[FINUV]: alternative to edit sep overload
             expand.c: add :L~: to use version comparison
             Makerules.mk: use :H=[FINUV]: and :L~:
             Makerules.mk: add pkgconfig(1) .pc file support in :PACKAGE:
             Makerules.mk: fix %.sh=>% :T=E: misquote (ancient!)
    03-03-03 Makerules.mk: .MAM.INIT handles debug=1 for CC.DEBUG vs. CC.OPTIMIZE
             Makerules.mk: add 'test : .DONTCARE .ONOBJECT'
             Makerules.mk: another prefixinclude fix -- my head hurts
             Makerules.mk: pass recursive $(=) by value ( $(=:V) )
             misc.c: fix :F=[LUV]: translation
    03-02-28 Makerules.mk: YACCFIX workaround for bison yytoken addition
             Makerules.mk: include $(LDLIBRARIES) in %.req
             Makerules.mk: fix .BIND.-l% comparison on CC.PREFIX.SHARED
             debug.mk: handle .o scope prereqs
             variable.c: fix $(!) internal.val conflict
    03-02-24 option.c: drop --mismatch alias for --corrupt
    03-02-12 Makerules.mk: handle multiple lhs for :INSTALLDIR:
    03-02-06 pkg-freetype.mk: add
    03-01-31 Makerules.mk: mark .PACKAGE.LIBRARIES. hints .DONTCARE
             Makerules.mk: :PACKAGE: add to .PACKAGE. first, then include pkg-*.mk
    03-01-23 Makerules.mk: more prefixinclude tweaks
    03-01-11 Makerules.mk: CATALOG default is $(.CATALOG.NAME.)
    03-01-10 Makerules.mk: parameterize all silent => $(SILENT)
    02-12-21 --- release 4.3 ---
    02-12-18 Makerules.mk: :NOOPTIMIZE: "..."'d operator arg shenanigans
    02-12-16 Makerules.mk: disable .ARCOPY for linked targets
    02-12-06 Makerules.mk: sync CC.MAKE.OPTIONS,nativepp,prefixinclude logic
    02-12-04 Makerules.mk: fix contorted .so editing for - and  n.n.n versions
             Makerules.mk: parameterize CC/cc suffixes in { .SUFFIX.c .SUFFIX.C }
             Makerules.mk: use { .SUFFIX.c .SUFFIX.C } in :cc: list generation
             Makerules.mk: parameterize fortran suffixes in { .SUFFIX.f .SUFFIX.r }
             Makerules.mk: %.f is now equivalent to %.F
             Scanrules.mk: use { .SUFFIX.c .SUFFIX.C .SUFFIX.f .SUFFIX.r }
             Scanrules.mk: change .SCAN.F to .SCAN.fql -- who cares?
    02-12-03 rule.c: don't .UNBIND M_bind rules (questionable=0x02000000)
    02-12-02 Makerules.mk: prefixinclude=0 if CC.DIALECT has -I-
             make.c: add mutually dependent requirement loop check (for -l loops)
    02-11-28 main.c: don't close error_info.fd in startup
    02-11-21 Makerules.mk: dll version "-" bug that removed the installed dll!
    02-11-20 Makerules.mk: fix :cc: to handle all C source suffixes
    02-11-12 Makerules.mk: handle CC.LD.ORIGIN and CC.LD.STRIP
    02-10-31 main.c: change exit()=>return for pedantic lint
    02-10-28 bind.c: add GLOB_NOTDIR optimization to gl_dirnext
    02-10-25 eliminate a few uninitialized variable references
    02-10-20 Makerules.mk: add :NOTHING: (:ALL: or ...)
    02-10-16 Makerules.mk: fix :MAKE: for rhs files
    02-10-02 state.c: (-Q0x01000000) $(>) use min(r->time,state(r)->time)
             misc.c: tmform() => fmttime(); %K default time format
    02-09-22 Makerules.mk: drop ${mam_cc_STATIC} for +l binding
             expand.c: fix mam $(FOO|BAR) => ${mam_cc_FOO-${mam_cc_BAR}} conversion
    02-09-11 make.probe,probe.win32: move to INIT src to share with mamprobe
             Makerules.mk: add a few more mam_cc_* refs (mamprobe mostly complete)
             Makerules.mk: don't install .a only on .dll+.lib systems
             Makerules.mk: add :PACKAGE: :ignore=dir:, PACKAGE_IGNORE
             Makerules.mk: .PACKAGE.INIT. always initializes .PACKAGE.GLOBAL.
             Makerules.mk: add STDCMP to MAM install action
    02-09-07 Makerules.mk: disable lib REQUIRE closure if from CC.REQUIRE.*
    02-09-05 Makerules.mk: drop .NO.STATIC foo.a => foo-static.a rename
    02-09-01 Makerules.mk: add RMRECURSEFLAGS=-r
             Makerules.mk: assume mkdir -p (handled by INIT install)
    02-08-30 make.c: modified .JOINT siblings now trigger action
    02-08-06 make.h: { setbit shquote } macro rename to appease netbsd -- barf
    02-07-17 make.c,parse.c: allow keepgoing to be set by .QUERY
    02-06-11 Makerules.mk: :F=%(...)S: => :F=%(...)s:
             misc.c: %S %C obsolete warning
             variable.c: fix $(!) that improperly skipped !rule.scan && PREREQS.scan
    02-06-07 state.c: stat() after close() instead of fstat() before for cygwin
    02-06-06 Makerules.mk: fix $(output) to handle -$(VERSION) already in $(PWD)
    02-05-28 probe.win32: updates for { mingw }
    02-05-24 probe.win32: updates for { digital-mars borland lcc }
    02-05-20 expand.c: update to use regsubcomp(),regsubexec()
    02-05-09 expand.c: fix cross() so / X foo generates /foo, not //foo
    02-05-07 archive.c: use <ardir.h>,-lardir for library archives
    02-05-06 probe.win32: add more win32 compilers
    02-04-15 Makerules.mk: fix .DO.INSTALL ln-s to use proper source path
    02-03-29 Makerules.mk: CC.SUFFIX.SHARED==".lib" => CC.SUFFIX.DYNAMIC==".dll"
             make.probe: cygwin CC.PREFIX.SHARED=lib CC.SUFFIX.SHARED=.dll.a
    02-03-27 Makerules.mk: fix .BIND.-l% and .REQUIRE.-l% recursion checks
    02-03-23 Makerules.mk: ensure that _BLD_<variant> is valid identifier
             Makerules.mk: add .LIST.INSTALLED for existing files only
             Makerules.mk: add $(LICENSEFILE) to .FILES.
    02-03-14 variable.c: add label to --mam "setv"
    02-02-14 makerules: add and use CMPFLAGS
             makerules: add win32 ar I flag only when installing .a
             makerules: iffe { CC CCFLAGS LDFLAGS } => { IFFECC ... }
             scan.c,variable.c: .SCAN.IGNORE must ignore state prereqs too
             main.c: fix final message sequence for .ERROR intercept
             state.c,variable.c: fix $(?x) when state(x) exists but rule(x) doesn't
             makerules: add .SHARED.UNIQ. to .COMMAND.o (required by sgi.mips3)
    02-02-02 makerules: mark :VARIANT: target .SPECIAL
             makerules: use STDED & STDEDFLAGS to differentiate from ED=vi
             makerules: drop ED & EDFLAGS
             Makeinstall.mk: add STD* probe with possible execrate(1)
             makerules: inhibit lib/lib closure for CC.DIALECT==CLOSURE
             probe.win32: add CC.DIALECT CLOSURE to inhibit .lib closure
             option.c: -S => -S0
             makerules: fixed .SHARED.UNIQ. to ignore .MULTIPLE -- duh
    02-02-01 makerules: fix .IFFE.REF. for \r\n systems -- barf
    02-01-22 makerules: ARFLAGS += I for CC.DLL on win32.*
    02-01-15 makerules: fix $(CC.PREFIX.DYNAMIC) logic in .BIND.-l%
             makerules: mark $(CC.SUFFIX.DYNAMIC) .SCAN.IGNORE
    02-01-11 makerules: fix $(CC.SUFFIX.LD) prereqs for :LIBRARY: dlls
             make.probe: add .ign to cygwin CC.SUFFIX.LD
    02-01-10 makerules: add proto -e arg to lhs of :INSTALLPROTO:
             probe.win32: add .ign to CC.SUFFIX.LD
    02-01-08 makerules: initialize HOSTCC to $(CC)
    02-01-07 makerules: fix .LIBRARY.STATIC.* binding
    02-01-04 makerules: .REQUIRE.-l% includes pkg-%.mk of lib+prereqs before bind
    01-12-26 makerules: .REQUIRE.-l% includes pkg-%.mk if it exists
    01-12-24 pkg-X11.mk: add CC.REQUIRE.Xaw3d
    01-12-20 makerules: fix .RECURSE.INIT to use only first match of $(MAKEFILES)
    01-12-19 makerules: foo :VARIANT: ... implies _BLD_foo==implies _BLD_foo==1
    01-12-18 makerules: sync .SOURCE.a between .BIND* and .PACKAGE* (again!)
    01-12-15 command.c: fix bug that discarded a running job twice
    01-11-30 command.c: exit 128 silently marks job error but continues
    01-11-25 command.c: add .JOBDONE(target status user sys) .FUNCTION
    01-10-31 makerules: adjust .SOURCE.mk to ensure user specified dir order
             makerules: search MAKERULESPATH for ppcc rather than just MAKELIB
             makerules: delay CC.SHARED.REGISTRY expansion
             bind.c: add debug=14 directory search order trace
             make.probe: fix CC.SHARED.REGISTRY probe typo
    01-10-30 makerules: _BLD_foo==1 only for foo :LIBRARY: source
    01-10-20 makerules: fix --mam bug that didn't parameterize HOSTCC
             makerules: fix .PACKAGE.INIT. and .BIND.-l% to use the same search!
             bind.c: foiled alias still allows bind questionable=0x40
             expand.c: allow all edit op delimiter combinations (e.g., !>, <>)
             make.probe: fix CC.DLL probe for gcc __ia64
    01-10-18 misc.c: clear SFFMT_LONG for %[cCsS] to avoid wide char conversions
    01-10-17 misc.c: add %a %A format, fix unknown format core dump
    01-10-15 makerules: fix .SELECT. bug that improperly dropped .ARCHIVE
    01-10-11 make.probe: fix CC.WARN probe for C++
    01-10-10 Makerules.mk,make.probe: add { SHELLMAGIC CC.SHELLMAGIC }
    01-10-05 make.c: add -Q0x00800000 to disable r->status=FAILED when errors!=0 !!
    01-10-02 makerules: :YYPREFIX: invert case for macro prefix
    01-09-28 makerules: fix .RWD. and .OWD. usage
    01-09-24 fix $(.GETCONF x) builtin
    01-09-19 make.probe: add cygwin dll build probes
             probe.win32: sync with make.probe
             makerules: include debug.mk by default
             makerules: .dll+.lib rule now passes .dll suffix to $(CC.LD)
             make.probe,makerules: add CC.PREFIX.(ARCHIVE|DYNAMIC|SHARED)
             make.probe,makerules: change CC.SYMPREFIX to CC.PREFIX.SYMBOL
             makerules: fix .RECURSE and .ONOBJECT to hit sub :MAKE: levels
    01-09-17 makerules: fix PACKAGE_OPTIMIZE logic
    01-09-11 expand.c: use pathnative() for native fs representation
             openar(): must open with "b" mode
             state.c: open state with "b" mode
    01-09-08 makerules: add *.a prereqs to dll link
    01-09-04 makerules: +l* bind conditioned on .LIBRARY.LIST. for dll builds
    01-08-11 makerules: reference $(CC.DLL.LIBRARIES) last and in link args only
             makerules: +l* in req list now checks .PACKAGE.*.library for -l*
             parse.c: fix `\\\r\n' to act like `\\\n'
             make.h: add FSWINDOWS to include { _WIN32 _UWIN __CYGWIN__ }
    01-07-17 makerules: fix :LIBRARY: to honor LDLIBRARIES
    01-06-21 misc.c: fix strtoll and strtoull macro rename
    01-06-10 makerules: add CC.NATIVE for native objects
    01-06-07 command.c: fix job deadlock bug that improperly broke the loop
    01-05-31 makerules: add option rhs to :DLL:
             makerules: :PACKAGE: add :(optimize|space|time) for PACKAGE_OPTIMIZE
             makerules: add CC.HOSTTYPE != CC.EXECTYPE for IFFEFLAGS
             make.probe: add CC.EXECTYPE
             make.probe: fix { ld nm size strip } search
             make.probe: adjust probe_shared order for linux.arm gcc
             option.c: add --cross to not run generated executables
    01-05-30 make.probe: add CC.NATIVE
    01-05-28 make.probe: add CC.STRIP and CC.STRIP.FLAGS
             makerules: add PACKAGESTRIP check for .LIST.PACKAGE.BINARY
    01-05-26 expand.c: add :T=Y: for mime type
    01-05-09 --- release 4.2 ---
             make.h: isdynamic,isglob,isstatevar: functions to factor out strmatch()
             expand.c: add T=XQ[S[AV]|V[I]] to factor out strmatch() in base rules
             rule.c: speed up associate() by factoring out attributes
    01-05-01 expand.c: order() now handles :PACKAGE: foo:command
    01-04-26 makerules: null out cctype and .CC.PROBE. for --base
             makerules: fix .REQ. bug that missed :LIBRARY: targets
    01-04-25 makerules: add variants=pattern to select cc- variants
             makerules: add .VARIANTS alias for .CC-
             option.c: fix bug that omitted readonly option values in .mo
    01-04-24 makerules: :DLL: sets VARIANT=DLL
    01-04-18 object.c: fix CC_NATIVE!=CC_ASCII buffer overflow
             make.probe,makerules: mvs.390 adjustments for CC.LIB.DLL=symbol
    01-04-01 scan.c: fix * scan match bug that gave up too soon
    01-03-08 printext: handle %*C
    01-02-26 makerules: CC.SUFFIX.STATIC get .ARCHIVE attribute
             makerules: add .NO.ARPROFILE to defer to dll prereqs for dll target
             pkg-X11.mk: check libXmu.sa for openwin
    01-02-14 make.probe,makerules: add CC.DLL.LIBRARIES, CC.DLL.ALTERNATES
             make.probe: linux needs CC.DLL.LIBRARIES=-lc for binary compatibility
             probe.win32: change to CC.STATIC=-Bstatic, dynamic is now the default
             makerules: drop .SCAN.IGNORE for .DO.INSTALL.DIR
             makerules: fix .SHARED.BIND. to pull in dynamic refs
             makerules: change .OFFICIAL diff style to -u
             mam: add `bind -lX [dontcare]' to simplify library binding
             command.c: fix job deadlock bug that used archive before it built
    01-02-07 Scanrules.mk: add .cxx for C++
    01-02-02 makerules: bias package search to viewpath and make installroot
             makerules: *.req can be down the view
    01-01-01 --- release 4.1 ---
             expand: fix :D: to preserve leading / -- how long has this been wrong?
             makerules: fix .PACKAGE.INIT. for dir == /
             makerules: $(PACKAGE_PATH) is list of default package root dirs
             makerules: add recurse=list to list recursion order and exit
             makerules: _BLD_DLL==1 when building dll's
             makerules: link dll with static -l*
             makerules: check =l% bound dir in .REQUIRE.-l% PACKAGE_%_LIB
             expand: eliminate loops from :W=O:
             parse: add exit [code]
             bind: eliminate dups for 2d glob
    00-12-25 makerules: add header arg to :YYPREFIX:
             makerules: add :T=AF: for .ARCOPY
             probe.win32: add cc path *and* args to first line to avoid hash clash
    00-12-18 ppcc: check for old bash
    00-12-15 makerules: handle uwin $(CC.DLL) => -D_BLD_DLL change
    00-12-14 main: initialize version with fmtident()
    00-12-12 makerules: bias :PACKAGE: search for $(INSTALLROOT)
             make: use stat() instead of access() for better NFS behavior
    00-12-11 makerules: _BLD_DLL only for _DLL lib members
    00-12-03 debug.mk: add %.inc for -H include nesting
    00-10-31 option: --corrupt={accept|error|ignore}, --mismatch => --corrupt
             makerules: req file must be seen at of before the lib
             makerules: fix AWK and NAWK default definitions
             makerules: physical=1 => 2d iff in 3d
             pkg-tcl.mk: add CC.DLL, don't clobber TCLROOT
             makerules: define _PACKAGE_foo in .PACKAGE.INIT.
             makerules: add .VIEW to .MAMEDIT and .MAMACTION
    00-10-28 makerules: drop MAKEFILES filter on .SELECT. (why was it there?)
    00-10-26 make.c: fix .JOINT sync bug
             makerules: add $(PACKAGES expr) and :VARIANT: rhs expr
             expand.c: add :T=F[BCFLPR]: to test file type
             makerules: cut down the number of --mam -L options for .req
    00-10-25 makerules: set +x => set -
             makerules: add set - to .req MAM action for zsh
    00-10-24 makerules: add :PACKAGE: name:lib=lib:include=include name:command
             makerules: add :VARIANT: to cc-%
    00-10-18 C+probe: mac os10 additions
             add cc.darwin.ppc for max os10
    00-10-16 object.c: don't compile makefile prereqs if state.base
    00-10-12 misc.c: add %x and %X formats to printf extension
    00-10-04 makerules: fix bug that passed -I- to non--I- CC
    00-10-03 makerules: add :YYPREFIX:
    00-09-21 expand.c: add libxxx and xxx to makefile ordered prereqs
    00-09-07 makerules: handle rhs a=b in :LIBRARY:
    00-08-11 archive.c: add aix <bigaf> archive format
             bind.c: add glob() gl_intr check
    00-07-17 makerules: fix $(cctype) freeze in makerules.mo
    00-06-20 makerules: mam_lib_* always checks lib/lib/* file
    00-06-19 makerules: generate dll in lib.so/libNN.dll
    00-06-01 main,state: a few _UWIN tweaks for W98 FAT
    00-05-31 shquote: fix for `foo == bar'
    00-05-26 option: fix scanargs() bug that skipped some targets before options
    00-05-22 makerules: drop .ORIGINAL.ALL
    00-05-11 makerules: add :PACKAGE: { a b } to pick first of a b (thanks Dr. ek)
    00-05-01 makerules: add $(STDCAT) initialization
    00-04-01 makerules: add skeleton=1 to mkdir virtual directories in 2d
             makerules: add CATALOG and ERROR_CATALOG
    00-03-17 make.probe: fix CC.NMEDIT to grab only external text symbols
             makerules: add :NOOPTIMIZE:
             makerules: allow N.Ntag :LIBRARY: versions (and dll.custom)
             makerules: insert $(*FLAGS_DEFAULT) on *FLAGS
             makerules: don't omit -L*/local/* even if in CC.STDLIB
             parse.c: `unknown operator' now a warning
    00-03-07 pkg-X11.mk: add -lXaw candidate required libraries
    00-03-06 add probe.lcl check
    00-02-14 --- release 4.0 ---
    00-02-10 Makerules: add CC.DLLBIG, :PACKAGE_INIT:
             Makerules: add .ARCHIVE.OMIT. to .ARCLEAN.LIST.
             Makerules: adjust :PACKAGE: search for X11 => X
             Makerules: add .COMMON.SAVE to .LIST.PACKAGE.* source actions
             Makerules: fix setv PACKAGE dirs
             Makerules: add $(PACKAGE_LOCAL) and package_local=arch cmd prefix
             Makerules: apply %.X>% for `f :: b.X'
             state.c: add local skew test for touch(3) { utime(2) or utimes(2) }
             make.c: don't apply metarule if lhs has dir and metarule doesn't
    00-02-08 believe if state.believe>0 and  view level >= (state.believe-1)
             pkg-X11.mk: add PACKAGE_X11_VERSION=6 for X11R6 installations
             pkg-X11.mk: add -ldnet_stub for osf.alpha
             Makerules: fix .REQUIRE.-l%
    00-01-31 Makerules: add $(CC.SUFFIX.LD) in .SHARED.REF.lib
    00-01-25 Makerules: add _MAKE_PROBE_WORKAROUND_ for broken cc -G like sco.i386
    00-01-11 Makerules,probe.win32: -Bwhole-archive + -Bstatic -- whew!
             Makerules: make $(LICENSEFILES) for --mam
             Makerules: add $(DICTIONARY) to USAGE_LICENSE
             make.probe: hosttype now in C.probe
             expand: fix :P=L: path buffer overrun
    99-11-11 expand: add :P=W: for astlicense()
             expand: :P=N: null input generates null (not '')
             bind: fix 2d globv() and bindfile() by adding state.view[].root - wow
             bind: fix 2d :P=L=*:
             mam: capture important empty exec make-done pairs
             main: make sure external.pwd is valid
             Makerules: iffe --static=x => iffe -S x
             Makerules: explicit :INSTALL: inhibits :: install
             Makerules: add MM2HTML
             Makerules: install cc- => cc-install
             Makerules: add .MAM.CCFLAGS to handle .CC.NOOPTIMIZE
             option.c: clean up --errorid
             option.c: add set readonly for state.readonly hook
             Makerules: use set readonly for INSTALLROOT and PACKAGEROOT
             make.probe: sco CC.WARN=-w3
             make.probe: CC.MEMBERS => CC.LIB.ALL CC.LIB.DLL CC.LIB.UNDEF
             expand: add :U[!]: for uniq [file equality] list
             Makerules: IFFEFLAGS initialized in .MAKEINIT
             rule: make sure PWD and VPATH are both logical or physical
             parse: add "x" <|>[=] "y"
             Makerules: add LDLIBRARIES to .SHARED.lib
    99-10-31 Makerules: add :PACKAGE: => :package: if lhs
             Makerules: :MAKE: with no rhs driven by MAKEDIRS and MAKESKIP
             Makerules: add :Q: to "::" assertion scope items (yuk)
             Makerules: add LICENSE hooks, USAGE_LICENSE
             expand.c: add :P=G: to do viewpath glob, :W=O: to order subdir descent
             expand.c: add :O=N:
             expand.c: pretty up :Q:
             expand.c: add :P=V0: for top view logical name of bound file
             rule.c: add globv() for rhs patterns -- strictly . relative down view
             make.probe: fix nmflags logic (for aix -p, portable not)
    99-10-01 Makerules: add %.iffe
             make.c: handle metarule .ACCEPT
    99-07-17 mam.c: outer make...done for virtual joint target
             command.c: fix job deadlock detection
             Makerules: don't pp probe if CC.CC == ""
             Makerules: allstatic=1 for +l propagation, 0 for item only
             Makerules: fix $(.SHARED. ...) usage
             Makerules: :INSTALL*: now handles dir on rhs
             Makerules: add %.cxx
             Makerules: add .ti to clobber list
             Makerules: cc-: `~' => space if specified, otherwise `,' => space
             Makerules: add recurse_enter and recurse_exit
             misc.c: add %[eFfFgG] print formats
             expand.c: generate() lists primary and secondary by default
             Makerules: add .author and PROTOID to PROTOCOPYRIGHT
             Makerules: allow state on :INSTALL*: rhs
             Makerules: .CC.MEMBER: jobs>0 workaround: a bug coverup
             Makerules: add :PACKAGE: debug profile CC.LIB.TYPE
             expand.c: fix putptr(0) base addr switch
             .SCAN.IGNORE: don't block on these - duh
    99-07-17 --- release 3.6 ---
    99-06-24 Makerules: fix .SHARED.ON. test
    99-06-15 make.probe: shlib before others, /var/shlib, -none == ! -all
    99-06-14 Makerules: +lfoo applies to self, not to .req members
    99-05-09 option: separate usage string stream
    99-05-01 main: long options
    99-04-22 Makerules: fix :LIBRARY: for version "-" (no version)
    99-04-01 Makerules: -mam cleanup
             Makerules: %.req version bug fix
             Makerules: :PACKAGE: :nolibrary means it -- don't pull it in
             Makerules: .REQ. fix
             Makerules: fix .req -mam cc script
             expand: regfatalpat() for regcomp() pattern in error messages
             option: first optget() interface -- could be more complete
    99-03-17 Makerules: %.req just binds -- duh
             Makerules: .RECURSE clears .RWD.
             Makerules: handle `lib - :LIBRARY: ...' => no VERSION
             make.probe: CC.DEBUG CC.HOSTTYPE CC.OPTIMIZE CC.STRICT CC.WARN
             main.c: command line scripts done after .MAKEINIT
             main.c: test 0x00020000 to close openfd before coexec
             make.c: D_scope prereqs take effect in make() too
    99-03-01 Makerules: add :P=C: to .MANIFEST.
    99-02-14 make.probe: move some init stuff from C.probe
             make.probe: deal with gcc/ld writing errors to stderr with 0 exit code
             trap: clean up .INTERRUPT interface
             Makerules: :PACKAGE: -l* .MULTIPLE
             Makerules: fix :: :LIBRARY: for cmd and lib by same name
             object.c: retain D_global in load()
             Scanrules: fix .PFX.INCLUDE test
    99-01-23 Makerules: *.req.REQUIRE : .IGNORE
             Makerules: add -f $(MAKEFILE) to .RECURSE $(MAKE) args
             Makerules: .REQUIRE.-l% checks $(PACKAGE_%_LIB)/lib/% first
             Makerules: make :PACKAGE: search picky about version
             Makerules: handle :PACKAGE: -lfoo
             Makerules: PACKAGE_%_VERSION defined
             make.probe: use full path for NM, etc.
             make.probe: libpath not added to CC.STDLIB
    99-01-11 Makerules,make.probe: CC.MEMBERS.UNDEF
             Makerules: fixed .SHARED.lib wrt :PACKAGE:
             make.probe: tweak CC.STDLIB
    98-12-25 Makerules: :LIBRARY: initializes VERSION var if not set
             Makerules: add tgz, tarball; drop update*; pax and tgz recursive
             Makerules: tarball uses VERSION
             Makerules: `:: dir' adds dir to manifest
             Makerules: arch-$(_hosttype_).mk architecture specific additions
             Makerules: $(CC.DLL) uses local *.lib
             expand: add :P=N: for 'native-path'
             expand: :P=S=subdir: to handle recursive manifest
             parse: fix \\n splice bug that activated rules direcive
             rule: .READONLY external support
             bind: (P_readonly|P_terminal) does not get attribute assoc
             bind: add rule_compare() and rule_hash() for case hacks
             option: -o writeobject (on by default)
             expand: regcomp(REG_SHELL) needs REG_LEFT|REG_RIGHT -- duh
             rule: include + "file" to include file as global makefile
             make,rule: fix state.force and P_force for P_dontcare
    98-12-25 --- release 3.5 ---
    98-11-11 expand: :G=x: tokenized
             add ms %.def:%.sym
             make: recheck require_p prereqs
    98-11-01 expand: fix ignorecase bug in :L:
    98-08-11 probe: add probe.ini for arch specific shortcuts
             probe: add opional CC.MAKE.OPTIONS
             Makerules: check CC.MAKE.OPTIONS
             bind.c,scan.c: a few more uwin file path workarounds
             parse.c: readline() now converts \r\n => \n
             variable.c: V_functional looks for "v->name" and ".v->name." rule
    98-07-17 Makerules: check before assuming /usr/lib or /lib
             command.c: fix P_before P_repeat FAILED bug
             Makerules: add .UNBIND to .PACKAGE.LIBRARIES. (must be a better way)
             Makerules: add static=1 to favor lib instead of dll (except for std)
    98-05-26 make.probe: add /usr/lib /lib verification
    98-05-01 rule.c: add .RUN .WAIT for background job control
             rule.c: add .MAKEPROMPT .MAKERUN sequence points
             rule.c: add .RESET to reset rule info to start state
             parse.c: interactive sfpoll sfstdin and state.coshell->msgfp
    98-04-01 expand: plug leak by calling regfree() for :C:
             Makerules: adjust .IFFE.REF. fix to not include package being built
             Makerules: add %.cpp for C++
             scan.c: don't tokenize quoted implicit prereqs!
    98-03-17 Makerules: fix .IFFE.REF. to expand package include dirs
    98-02-14 Makerules: fix .IFFE.REF. to expand required libraries
    98-01-23 Makerules: add _hosttype_ to .MAM.INIT
             Makerules: :PACKAGE: x attempts include - "pkg-x.mk"
             Makerules: handle :LIBRARY: rhs +l*
             pkg-tcl.mk: initial release
    98-01-11 Makerules,probe: add CC.SHARED.REGISTRY and CC.SHARED.REGISTRY.PATH
    97-10-31 Makerules: CC.PIC not that easy to deprecate!
             Makerules: fix -L option for *.req rule
             Makerules: LDRUNPATH unset by default
             Makerules: no CC.SUFFIX.LD to AR
    97-10-11 Makerules: fix :LIBRARY: *.req prerequisites
             probe: fix ld probe, add CC.SUFFIX.LD=".def .exp" for uwin
             make.c: REQUIRE map => - marks rule virtual
    97-08-11 Makerules: .BASE.DATE.FORMAT. for y2k
             Makerules: drop weird xxx.a install in .SHARED.DEF.lib
             Makerules: add $(.sh.) as non-frozen version of $(sh)
    97-07-17 Makerules: move $(MAKELIB) to the front of PACKAGE search
             Makerules: required libraries linked with dll too
             version.c: tighten initdynamic[] loop termination
    97-05-09 Makerules: /usr/local/arch/$(_hosttype_) first in LCLDIRS
             Makerules,make.probe: add mvs.390 dll support
             expand: don't :T=A: if .SCAN.IGNORE
             variable: allow `export name=value'
             Makerules: allow `:MAKE: name=value' => `export name=value'
             Makerules: bias package binding to fully qualified PATH dirs
             Makerules: IFFEFLAGS uses CCLDFLAGS instead of LDFLAGS
             Makerules: don't change -Wl., in cc-% (hack alert)
             Makerules: CC.PIC deprecated for CC.DLL
             Makerules: _INSTRUMENT_ deprecated for _BLD_INSTRUMENT
             Makerules: _TRACE_ deprecated for _BLD_DEBUG
             command: -t attempts to touch fs .o as well as .a/.o
    96-12-25 --- release 3.4 ---
             add CC.LD.DYNAMIC and CC.LD.STATIC to make.probe and makerules
             add .PROBE.LOAD and .PROBE.SPECIAL. to catch/start early probe
             addfile(xxx) for xxx.exe on _WIN32
             bind.c: check for _WIN32 C:/ prefix
             parse.c: -FUNCTIONAL now clears var.functional too
             Makerules: .CC.MEMBERS. fixed for small ARG_MAX systems
             Makerules: OFFICIAL file now in lower view
             Makerules: drop -G* from CC.PROFILE
             Makerules: remove global +lxxx => -lxxx==+lxxx
             archive.c: add `/*/' to SYMDIR_port (for sgi.mips4)
             Makerules: if $(CC.PROFILE) and $(CC.PIC) then don't install .ARCHIVE
             make.c: relax `modifying lower view file' message via dontcare
             Makerules: fix +lxxx MAM bind
             Makerules: fix :LIBRARY: req file generator
             Makerules: fix :PACKAGE: LIBDIR search
             ppcc: install in $(MAKELIB)
             ARG_SCRIPT: fix bug that mishandled `+' and `&' in cmd line targets
             Makerules,probe: add CC.SUFFIX.LD and ldscript for ld scripts
             Makerules: add $(sh command): where has this been hiding
             a:-TARGET now works
             .ARCHIVE not scanned if rule.scan==.SCAN.IGNORE
             :LIBRARY: sets .MAIN.TARGET. too
             make.probe: don't automatically place /usr/lib last
             make.probe: add CC.SUFFIX.LD
             Makerules: handle cc-opt1,-opt2 by splitting options on ,
             bind.c,metarule.c: handle _WIN32 directory ignorecase
             Makerules: add :DLL: .DLL for dll generation
             Makerules: fix .MAKEINIT premature :T=F: that botched .SOURCExVPATH
             object.c: fix to handle 01/24/89 format objects (yes it still works)
             ppcc,makerules: generalize $(CC.DIALECT) option passing
             metarule: case sensitive match for patterns matching `[-+]*'
             archive.c,object.c: (Sfoff_t) for K&R compilers
             MAKEFILES=Nmakefile:nmakefile:Makefile:makefile -- thanks bill
             MAKEARGS=Nmakeargs:nmakeargs:Makeargs:makeargs -- thanks again bill
             probe: add CC.LD.RUNPATH
             makerules: add LDRUNPATH and CC.LD.RUNPATH support
             makerules: tone down PTR prereq scan
             .GETCONF: first builtin function
    96-11-28 ccmaps .mo for ascii/ebcdic compatibility
    96-10-31 outstanding bug reports addressed
             :LIBRARY: defines _BLD_<lib>==1
             use PATH=$(STDDIRS):$PATH to find STDRM etc. in Makerules.mk
             add CC.SUFFIX.DYNAMIC for win32 .dll .lib .a
    96-10-11 metarule rhs prefix dir check even if rhs has prefix questionable=0x8
             alias check path suffix in bindfile questionable=0x10000
             add more instrument guesswork
             .PFX.INCLUDE headers must be .TERMINAL
             fix $(...) bug that let some unselected items slip through
    96-10-01 update make.probe for probe_libdir to catch alpha /usr/shlib
    96-09-09 add CC.PROBEPP to override pp probe info
             add $(INCLUDEDIR) and $(LIBDIR) to .SOURCE* from $(ancestor_list)
    96-08-11 --- release 3.3 ---
    96-07-17 don't pass -D-* to cc in ppcc
             add ``X|external-scan $(%)'' external scan
             clean up makerules/probe readonly
    96-05-31 fix $(".":P=L*) for no views
    96-05-09 make.probe: drop multiple / in stdlib
             try to stat non-readable files
    96-04-22 fix staterule()->scan assignment evaluation order ambiguity in scan.c
    96-02-29 -lxxx binds to +lxxx if +lxxx bound first
             add pkg to OPTDIRS
             cut off botched metaclose recursion unless questionable=0x100
             `.XXX : .USE .IMMEDIATE .ATTRIBUTE' -> `xxx yyy' -> `xxx : yyy'
             fix :PACKAGE: search bug that forced package name to be in root path
             add REGRESS + REGRESSFLAGS
             aliases may produce more than one :P=D: bound dir
             fix nonterminating D_scanned loop in scan()
             handle -L* on :LIBRARY: rhs
    96-02-14 $(CC.SUFFIX.COMMAND) appened only if no suffix
             :PACKAGE: xxx:version=n.m:static:dynamic:nolibrary:noinstall:
    96-02-07 archive scan handles multiple port|rand meta entries
             rescan check on (s|alt)&P_force
             scan A action can now set (.+) or clear (-) attributes
    96-01-31 :PACKAGE: libs now .DONTCARE
             fix touch bug that kept the blasted libast conf*.[ch] out of date
    96-01-01 AT&T Research
             uwin Makerules.mk and make.probe tweaks
             :I<: for literal intersection, otherwise pathname intersection
             convert to <regex.h>
             condition LN on _feature_=ln
    95-12-08 fix :LIBRARY: -lxxx probe
             add uwin dll to make.probe and :LIBRARY:
             BINED -> ED
    95-11-24 . :INSTALLDIR: does not add to all or man
    95-11-11 installed CC.SUFFIX.SHARED are now readonly
             CC.SUFFIX.SHARED==CC.SUFFIX.OBJECT expands -l*
             CC.SUFFIX.SHARED installed readonly
             CC.SUFFIX.SHARED hard linked to CC.SUFFIX.SHARED.major.minor
             P_target && D_dynamic does not imply generated (questionable=0x4000)
    95-10-11 fix :TABLE: options `no' and `NO' entries
             D_source is now cleared in make object for .SOURCE cross product
             $(^) subject to localview() too
             fix :WORKAROUND: for in-place changes
             set include=dir appends to .SOURCE.mk
             .ASSERT intercepts not applied to .IMMEDIATE targets
             -d4 lists make object prerequisite file info
             fix state.targetcontext expand bug that dropped too many marks
             add %.o:%.S to makerules/scanrules
             intersect() now handles invented :P=D: .. dirs not in .SOURCE*
             drop $(CC.REPOSITORY:@?-l??) from PPCC
             add sun -[Qq](dir|option|path|produce) to ppcc
             add proto -x to :INSTALLPROTO:
             fix compvar() V_oldvalue bug that put command line def in .mo
             internal.export -> internal.exported for proto export keyword
             :T=G: never matches non-target .TERMINAL
    95-10-01 add :TABLE: novariables to inhibit leaf variable assignments
             add preliminary long edit op names and converter
             D_global if not P_target (questionable=0x800 for old behavior)
             alias if !streq(name,r->name) (questionable=0x1000 for old behavior)
             fix scanrules .PREFIX.INCLUDE. handling of ../*
             more aggressive putbound() in bindalias() (-Q0020000 for old)
             `.FORCE : x' sets P_force too
             longest metarule patterns applied first
             more alias fixes
             move scan attribute/property additions before staterule() call
             :INSTALLMAP: ... scan now more selective
             .UNBIND now sets rule.time=0
    95-07-17 --- release 3.2 ---
             :F=%x: sfio 'u' internal format now handled
             fix .PTR.OPTIONS. initial condition
             fix .ERROR to work like 2.2 if !.FUNCTIONAL
             .FUNCTIONAL .ERROR return value: new level, no msg if already printed
    95-06-28 add *.ii to .CLOBBER. for EDG C++
    95-05-09 add SYMDIR_strict for strict ranlib uptodate check
             change $(!$(*:O=1)) to $(!$(*)) since lists are ok now
             drop .SAVE. since :: already handles it
             add old value to state variable changed explanation
             add .DO.READONLY.-xMerge
             unused var cleanup
             another make.probe preroot workaround
             add .CC.NOOPTIMIZE local scope
             handle `t {}' and strip lead space in {...}
             fix r==0 dereference in :P=B:
             don't force CCFLAGS=-g for instrument=purify
             fix .BIND.-l% version interactions with -lxxx.[0-9]
             add -o noalias to diable directory aliasing (for .INSTALL.LIST)
             make.probe pic test must check linker too
             calm down +([a-z]) => .+([A-Z]) conversion for :ALL: and .ARGS
             &error_info cannot be in a static initializer
             .OFFICIAL uses .MANIFEST. instead of .SOURCES.
             fix scope var bug that appended twice
             add - stack debug command to query
             drop extra .so's from ship.list.bin
             state.mam.out && !state.mam.port doesn't rebind after build
    95-04-01 `:: xxx' marks xx .TERMINAL
             fix recursion bug in :G:
             define PACKAGE_* vars if !mam too
             fix ciadb to exclude headers that may generate %.o (e.g., *.c)
             fix stray M_mark bug caused by expand() inside intersect()
             fix :INSTALLMAP: with no lhs
             :PACKAGE: is a little less restrictive on package root search
             use $(CCLDFLAGS) in %:%.s
             change :T=G: to check .TERMINAL state before .TERMINAL
             fix ppcc.sh pattern match ksh93ism for bsh compatibility
             fix PROTOFLAGS expansion with :Q:
             generated .SCAN.c do not get .PFX.INCLUDE
             scan prereqs for .JOINT targets are in staterules(PREREQS)
             change obsolete MAM -expandview ref to static*,port*
             fix trap bug that used elementsof(int*caught)
             makerules PTRMUST -> PTRMKDIR
             alpha archive symbol directory has word size embedded _64E[BL]E[BL]_
             fix \0 in output of recursive print -um
             fix bindfile() .. test for terminal directories [via Rich Drechsler]
             tablook() prototype tweak
             fix putbound() test in bindfile [via Dan Tiernan]
             beef up makerules $SHELL -n test
             drop newlines from PROTOCOPYRIGHT for MAM
    95-03-19 fix .AFTER job freelist bug in trigger() [via Rich Drechsler]
             add makerules STDDIRS; SYSRM -> STDRM {cmp,cp,ln,mv,rm}
             clean up makerules INSTRUMENT_* interface
             -v no longer turns on ppcc verbose
             fix cc- MAKEPATH override by $(=)
    95-02-14 fix targetcontext mkdir() test
             fix printarg() for proper sfio interface
    95-01-19 add CC.ARFLAGS for $(CC) that generates libraries
             add CC.DIALECT=PTRIMPLICIT for implicit C++ ptr dir name
             add CC.DIALECT=PTRMKDIR if C++ local ptr must exist
             add CC.DIALECT=PTRCOPY if C++ PTRMKDIR contents copied
             fix CC.READONLY probe to cast the const pointer assignment
             punt() now assumes oldmake has mam if options set
             add a few .SPECIAL's in ::
             fix rule.time update for .NULL action in trigger()
             add A_* flags instead of assertion() set.clear, etc.
             OP_NONE assertions are A_special
             x :LIBRARY: makes x virtual prereq of .ALL
             "local" statement mods for operator and function arg handling
             local same-name same-name gives dup name initial value of 1
             local name=value now accepted
             local -[n] arg ... sets $(1) ... [empties missing up to n]
             local (formal ...) actual ... sets formals from actuals
             $(;) returns the state data (formerly $(#))
             $(#) is the arg count from local -[n] | (formal ...) ...
             add TABLE.mk for :TABLE: table and map lookup
             add SS.mk for :SS: directory hierarchy subsystems
             don't forceread if global (questionable=0x400 for old behavior)
             add -o targetcontext to expand action in target dir context
             add state.context and MARK_CONTEXT for state.targetcontext
             fix a few more alias bugs
             .MAKE .LOCAL actions can contain parent scope assignments
             add base and delta common actions for pax -z support
             add :SYSTEM: to :SS: in SYSTEM.mk and delete SS.mk
             fix rebind to first clear D_entries|D_scanned
             add "*.[sS]|*.[aA][sS][mM]" to ppcc source list
    95-01-01 fix .CLOBBER $(-global) expansion
             .NULL metarule now provides equivalence for :G:
             avoid multiple entries in make.probe CC.REQUIRE.++
    94-12-25 ppcc, MAM -l<shared>, probe tweaks
             fix port/rand ar touch bug that modified member terminator
             fix .DO.INSTALL bug that asserted x : x
             avoid a few more 'not compiled' panics
             add -o mam=<type>[,noport] to inhibit porting hints
             drop mam_port and use noport mam option
             fix V_retain bug that took value from lowest view statefile
             fix PACKAGE .SOURCE.(h|a) that blew the CC.STD(INCLUDE|LIB) order
             fix .REBIND to work like .UNBIND on directories
             PACKAGE lib not .DONTCARE by default
    94-11-11 --- release 3.1 ---
             detect loops in complete() to avoid `did not complete'
             fix D_entries|D_scanned propagation in merge()
             fix .BIND. view and state.targetview propagation
             add :WORKAROUND: for external distribution workarounds
             merge(MERGE_ALL) does not propagate rule.scan==SCAN_NULL
             .OFFICIAL diffs changed files into ./OFFICIAL
             fix scan attribute propagation interaction with dirscan()
             fix uninitialized od reference in bindfile()
             fix ppcc -O over shift and empty rm
    94-10-01 CC.DIALECT DOTI : *.i accepted as preprocessed input
             CC.DIALECT TOUCHO : cc link may touch *.o
             $(CCC) dropped in favor of simpler $(PPCC)
             $(FEATURE) changed to $(IFFE)
             add -o mam=<type>[,dontcare] to list dontcare targets too
             fix staterule() to accept top view state if time matches
             fix bindfile()+putbound() for ..
             fix VOFFSET,VROOT for non-3d
             fix bindstate() recursion
             fix metaclose() bug that forced artificial metarule ordering
    94-08-11 add state.questionable mask (looks like it should go but not sure)
             move some state.test bits to state.questionable
             add MAM generated attribute
             add fs3d view loop test
             Os option arguments must be specified
    94-07-17 --- release 3.1 ---
    94-06-11 add -o believe=level (-B level) for 2d
             -b no longer implies -c
             -b implies no makerules
             uncouple state.keepgoing from state.mam (should have learned by now!)
             dirscan() sets rule.bound and rule.time
             add .SYNC : file [edit-select]
             fix .QUERY longjmp active frames and error trap hold
             fix pattern association parse that botched ../*%*
             avoid pathcanon() in metarule makerule() calls
             change include from control statement to immediate rule
             use rule in include list uses action as include file filter
             add makerules mam_port=0 to inhibit -o mam=static ${mam_*} mappings
             promote lower view state to top on load if no previous top iview state
    94-05-22 virtual preview not propagated
             fix nested loops in file input
             fix unalias() bug that dropped original binding
             fix merge() bug that called bind() while bind in progress
             fix -ptr *again* for CC 3.0.3
             add $(^) for current line in scan
             :A>pattern: matches rule prereqs
             fix statevar stateview search that unnecessarily forced re-scan
             .PARAMETER file checks now done after .INIT
             update CIA rules to use DOT instead of DAG
    94-04-01 .ERROR made for levels > 0; return 1 inhibits message print
             $(.ERROR) set to level and message text inside .ERROR
             stateview() now binds before searching state views
             fix CC.SO install for live replacement
             add .COMPDONE to fit the .INIT+.DONE pattern
             add rule.mark and M_* to eliminate mark clashes
             add .INTERRUPT.<signal> for signal specific handlers
             add .ALARM:<elapsed> immediate rule to set alarm
             add $(.ALARM) to be absolute time for next alarm, 0 for no alarm
             add .SYNC immediate rule to sync statefile
             maketop() now resets property when complete
             maketop(P_ignore) temporarily sets keepgoing=1
             xxx -> .XXX immediate test for all `no operator on line' statements
             .FORCE : xxx forces xxx to be new
             { action } -> .ALWAYS :$("\n\t")action
             immediate a b c -> .IMMEDIATE : a b c
             attribute a b c -> a b c : .ATTRIBUTE
             a b c { action } -> a : b c$("\n\t")action
             :MAKE: allows rhs a/b
             .DO.l.CC dropped -- let C++ fend for itself
             (<id>*)<stuff> can appear as target
             $("":D) no longer produces ``.''
             print -n -u[0-9m] -f "format" +-[io] path -p command data ...
             read -n -u[0-9m] +-i path +-o path -p command variable
             -uxxx may appear in $(INSTALLROOT)/lib/lib/<LIB>
             fix scan | ... % | bug that forced trailing space
             replace CC.OBJ and CC.SO with CC.SUFFIX.*
             .MAKE .OPERATOR prereqs made before operator applied
             add .PROBEINIT to .MAKEINIT and "::"
             .SHARED. now links with CC.SUFFIX.SHARED sibling library if it exists
             fix alias .UNBIND
    94-03-01 unify mam with gmake (additions done by gsf)
             -o mam={dynamic|regress|static}[:file[:[label][:root]]]
             -M no longer implies -nF
             -o mamtrace=file (-m) dropped
             -o regress=root dropped
             -o never (-N) added to override .ALWAYS
             fix scan bug that assigned strategy before binding
             frozen V_functional always causes .mo recompile
             add oldname(r) to fix unbind bug that omitted putbound(r,0)
             ``else if'' now accepted for ``elif''
             complain about extra chars after else and end
             add :T=Z[CERS]: for {cancel,event,relative,state} time
             fix circular implicit prereq actions
             fix aix shared library probe
             finish now handles errors in .MAKEDONE and .DONE
             fix stray D_mark unbind with D_markbind,D_markprereq,D_markscan
             fix :READONLY: probe for mips
             base rules unbound after reading (so make can install them!)
             delay statefile load until after makefile read
             add complete() for MAKING implicit prereq
             add CC.REPOSITORY with repository dir value
             delete PTREPOSITORY from CC.DIALECT
             stop .INSERT|.APPEND from adding duplicate prereqs unless .MULTIPLE
             .QUERY now pushes an active frame (shows up in $(<))
             fix state view resolution in stateview()
             fix :G=a/b: with no %
    94-02-14 warn about implicit reference while action in progress
             add print -opath
    94-01-31 .CLEAR now checks staterule before freeing prereq list
             .UNBIND now clears D_global, D_regular and preview
             add :F=%(time-format)T:
             add :F=%(invert|lower|upper|variable)S:
             change :F=[LUV]: to :F=%(lower|upper|variable)S: with obsolete warning
             fix .MEMBER view/preview mismatch that triggerred unnecessary actions
    94-01-11 $("":T=R) operates on current date
             add print -n -u[12m] -f "format"
             fix \<newline> action parse
    93-12-01 --- release 3.0 ---
    
    RELEASE notes for src/cmd/pack/RELEASE
    
    2003-05-21 pack.tst: add
    2003-04-28 pack,unpack: handle file size > 2Gb (and > 4Gb)
    2002-03-09 pack,unpack: diagnostic if no file operands
    1999-05-03 add optget() docs
    
    RELEASE notes for src/cmd/pax/RELEASE
    
    12-05-25 file.c: #include <tm.h> for tmdate() prototype
    12-05-14 pax.c: use Format_t.match to eliminate explicit format references
    12-05-14 pax.c: add xz format -- requires local system standalone xz command
    12-05-07 tar.sh: fix file/option quoting, --show
    12-05-04 tar.sh: snarf update from Brian Russell
    12-04-20 pax.c: verify that --maxout > --blocksize (else it recurses on newio()!)
    12-04-17 pax.c,copy.c: fix multiple prompt for --write --yes
    12-04-17 misc.c: --yes accepts { 'y' 'Y' '1' }, { 'q' 'Q' '-' } => remaining no
    11-06-21 pax.c,copy.c,file.c: add --filter option mtime=<date-string>
    11-03-17 copy.c: fix bug that didn't list special files for --verbose
    11-02-11 pax-tnef.c: handle "" member names -- really?
    11-02-02 pax-pds.c: ident now requires at least one dir entry
    10-10-10 file.c: don't prune state.update dirs based on time -- doh
    10-10-04 pax.c,misc.c: fix --meter off-by-one bugs for long paths
    10-10-04 pax.c: add #updated files to --update --verbose summary
    10-10-04 pax.c: --meter implies --verbose summary
    10-09-01 pax.c: RE errors => exit(2)
    10-08-27 add -U, --different to update files with different <mtime,size,mode>
    10-08-22 format.c: archive update requires (ap->io->mode & O_RDWR)
    10-08-11 use conformance("standard",0) test
    10-08-09 fix extended header size key precedence/performance
    10-08-09 use { SEEK_DATA SEEK_HOLE } for -rw if available
    10-08-08 disable SOKTYPE
    10-06-21 align { --append --update } with posix
    10-06-14 ug+s only for -p [eo]
    10-06-14 atime in archive by default for formats that support it
    10-06-14 add state.resetacctime to separate -t from state.acctime
    10-06-12 fix --exact to list matched directory hierarchies
    10-06-01 sync with ast api 20100601
    10-01-22 pax.c: fix -rw to 1 char dir name that dropped '/' separator
    09-09-09 ax-tar.c: handle gnu tar octal overflow extensions for all octal fields
    08-12-31 pax.c,pax-vczip.c: add vczip compression format
    08-05-08 pax.tst: handle systems with privileged chmod +t / mkfifo
    08-05-01 pax-tar.c: handle sfsprintf() '\0'
    07-12-11 delta2patch.sh: drop pax -v, add pax --nosummary
    07-12-06 delta2patch.sh: add
    07-09-21 format.c: add sumprint() default scale arg
    07-05-01 pax-tar.c,options.c: fix pax extended header for >=2**32 size
    07-03-14 pax-tnef.c: swap op == 3 for all arch!
    06-10-31 delta.c,format.c: fix ar=>ar delta bug that skipped data twice
    06-10-11 add sfstropen()/sfstruse() error checks
    06-09-27 pax.tst: fix uid etc. tests to use --listformat -- duh
    06-09-12 delta.c: delta for any X_IPERM st_mode changes
    06-06-07 pax: add -U --delta.update to update only delta members
    05-12-14 pax: fix --filter to work for --read and expand command %(...)
    05-06-07 format.c: fix inter volume fill logic
    05-05-28 pax: improve "junk data after volume" checks
    05-05-22 pax: fix --append for the formats that can handle it
    05-05-18 pax-flash.c: add solaris flash embedded archive format read
    05-03-19 options.c: -l == --link (not --local) per posix
    05-02-08 misc.c: fix interaction between delta and --meter
    05-02-07 delta.c,pax.h: don't output delta when src==tar -- duh
    04-12-25 bio.c: fix (*putheader)() return value logic, especially for ENOSPACE
    04-12-08 listformat now handles high resolution time
    04-12-01 tv.h,tv.c,features/tv move to libast
    04-09-25 bio.c: fix ap->io->count for skipped data -- wow
             pax-rpm.c: fix header padding logic
    04-09-01 bio.c: fix bread() seek logic
    04-08-11 pax.c,options.h,options.c: add -C,--chmod=mode to control header modes
    04-08-05 bio.c: fix bread() pointer arith 64 bit assumption (pax#15)
    04-08-01 delta.c: fix checksum 32-bit logic (pax#11) (testpax#01)
    04-07-19 delta.c,format.c,pax-tar.c: { O_RDONLY O_WRONLY O_RDWR } are values
    04-03-17 pax-tar.c: add tar_putepilogue to *all* tar variants
             format.h: let pax-tar.c determine tar variant order
             bio.c: fix a few printf format long long mismatches: %ld => %I*d
             format.c: map ident buffer CC_ASCII => CC_NATIVE
    04-02-29 format.c: drop ap->format=0 for possible deltaverify()
             format.c: handle CC_ASCII=>CC_NATIVE getprologue() header translation
             options.h,options.c: add --forceconvert to force --from
    04-02-25 pax.c: regcomp REG_SHELL => REG_LEFT|REG_RIGHT
    04-02-24 pax.c: add --action
             copy.c: fix file list peek premature '\n' => '\0' bug
             pax.tst: add --action,--checksum,--filter,--install tests
    04-02-21 file.c: fix VPATH state.pwd corruption
    04-02-14 add -F --fsync to call fsync(2) for each copied file
    04-01-27 bio.c: fix bget() buffer size alignment/mismatch overflow
    04-01-24 pax-*.c: use paxlib.h interfaces
    04-01-03 pax-cab.c: move to paxlib/cab as standalone plugin
             pax-calib.c: move to paxlib/calib as standalone plugin
    04-01-01 add --passphrase=passphrase, -E
    03-12-24 pax-zip.c: move to paxlib/zip as standalone plugin
    03-12-18 paxlib.h: add paxpart(), link with -lcodex for paxlib plugins
    03-12-05 pax-zip.c: fix EXT header logic
    03-12-01 rename OPT_delta_size to OPT_uncompressed: !=0 => compressed
             list compression % in delta op field
    03-11-25 paxlib.h: add external format dll interface
    03-11-20 pax-calib.c: add file suffix heuristics
    03-11-19 pax-calib.c: convert ibm -INC [edit comment] to COPY [REPLACING]
             pax-calib.c: handle line size > 80
    03-11-11 pax-pds.c: add mvs pds listing
    03-11-06 regression tests finally pass after Format_t method switch
    03-10-31 Format_t converted to true method
    03-10-20 initial readonly ca-librarian support
    03-10-01 add pax delta format -- groundwork for vcdiff deltas
    03-09-23 pax.tst: change test file names for same ascii/ebcdic sort
             pax.c: extended header values with length need no quoting
    03-09-11 default output format now ustar -- should eventually be pax
             format rename: tar=>oldtar, ustar=>ustar|tar
             add --testdate=date regression test hook
             add --uid=id --gid=id
             ascii vs. ebcdic cleanup
    03-09-10 private static cleanup
    03-09-09 xopen sync and { pax ustar } format fixes, <tv.h> interface
    03-06-21 format.c: add ccode conversion check to putheader()
    03-05-28 file.c: fix -vrw directory double list
             update to new <ccode.h> interface
    03-03-05 pax.c: tgz => ustar:gzip, tbz => ustar:bzip
    03-02-28 pax.c: handle a few common -x aliases
    03-01-14 misc.c: fix meter sign overflow for sizeof(off_t)==sizeof(int)
    02-12-13 format.c: fix TNEF bug that did bget(n) for n>buffersize
    02-10-23 misc.c: fix meter buffer overflow
    02-10-20 pax: drop experimental OMF; use ardirlist() to list ar types
             pax: add -t for x/open
    02-10-18 pax: add tar/ustar swap and inter-volume junk block checks
    02-09-09 format.c: handle all 11 octal digits in cpio format size
    02-09-05 file.c: fix chmod() loop at exists=0011 on case ignorant filesystems
    02-08-19 pax: cmd line patterns applied before -i or -s path edits
             pax: add posix -c for --invert
    02-08-06 pax: change --meter to use * instead of non-portable inverse video
    02-07-17 pax: handle gnu tar largefile size extension
    02-06-26 pax: fix regsubexec() edited symlink text buffer clobber
    02-05-24 pax: update to use regsubcomp(),regsubexec()
    02-05-07 pax: use <ardir.h>,-lardir for library archives
    02-04-23 pax: add dos omf library read
    01-12-07 pax: fix --meter to retain paths containing " -- "
    01-12-06 pax: fix --meter to stop at 100% (don't tell coach)
    01-10-20 pax: describe the 4 operation modes in separate paragraphs
    01-10-18 pax: fix --meter for paths containing \f\n\r\v
    01-09-06 pax: add ms tnef (transport neutral encapsulation format) archive read
    01-08-11 pax: fix tar_checksum() w.r.t. CC_NATIVE!=CC_ASCII
    01-06-28 pax: fix --from --to bio logic that sometimes double converted
    01-04-24 pax: --from & --to now associated with archive instead of global state
    01-04-17 pax: --from conversion only done if no control chars in first 256
    01-04-01 pax: fix --intermediate to create missing dirs first
    01-02-27 pax: add lchmod() and lchown() for symlink() restoration
    01-02-08 pax.tst: add -L and -P to symlink edit test
    01-02-07 format.c: fix malloc off-by-one for vdb format read
    01-02-02 file.c: fix duplicate -s map in addlink()
    00-12-20 bio.c: include <sys/ioctl.h> for systems that miss _IOW() etc.
    00-10-31 format.c: handle rpm 4.0 and newer
    00-09-20 copy.c: always allocate state.tmp.lst!
    00-08-31 change paths in delta archive: -rf i -z - -s e -wf o -z - [almost]
    00-08-11 copy.c: drop memalign() call for _std_malloc==1 in libast
             copy.c: save filter path from sfgetr() reset
    00-06-01 pax: fix mime format size by dropping last \r\n
    00-05-26 pax: astconf("CONFORMANCE",0,0)=="standard" inhibits some extensions
             pax: check USTAR file and link name lengths
    00-04-01 pax.tst: export TZ=EST5EDT; new tests should be UCT
    00-03-11 pax: add encapsulated mime format read
             pax: fix vdb block count
    00-02-14 pax: fix hard link read that didn't apply -s edit
             pax: logical|physical filter options
    00-01-04 pax: fix rpm embedded archive hard seek
             pax: --filter implies --nodescend
             pax: add --meter
             pax: handle ms PORTAR '\' => '/' path separator
    99-11-19 pax: try `ratz -c' if `gunzip' not found
    99-11-11 add --checksum, --install, --local, --preserve=s
    99-11-04 fix zip for archives with EXTLOC headers
             don't generate //* file names
    99-10-31 pax: add tgz == tar:gzip, --filter=-
    99-08-11 bio: fix end of medium handling
    99-06-01 restore -T == --test
    99-05-28 pax: add rpm read
    99-05-21 pax: fix -rw umask(0) bug
    99-05-17 pax: fix chmod() delay for ug+s,+t
    99-05-11 nocom: long options
    99-05-09 pax: sfopen(sfstdin,0,"rt") for input file list
    99-05-01 pax: state.xdev => FTW_MOUNT!!
    99-04-01 pax: fix Integral_t for sizeof(long)==8
             pax: fix ]] in optget usage
    99-03-17 pax: better st_mode preservation
    99-03-01 pax: fix dirprefix() prune to work in all cases
             pax: add savepath() to handle >PATH_MAX paths
    99-02-06 pax: update to new optget()
    99-01-11 pax: add bzip2 compression support
    98-10-01 pax: fix -rw hard link bug
             pax: fix -o preserve=* option.level inconsistencies
    98-08-11 cpio.sh: fix with getopts
             pax: increase -rw default buffer size
             pax: use REG_DELIMITED to parse -s
    98-04-01 fix tar delta bug that set st_size=0 before consuming delta head/tail
             pax -<flag> '?' lists help info for flag
             fix -rw bugs introduced by recent delta fixes
             testpax: add regression tests
             fileout: add EIO memalign fallback to track sgi bug
    98-03-19 fix tar delta epilogue check
             fix delta pass checks
             fix off_t vs. file size mismatches
    98-03-17 umask(0) only if -o preserve=* in effect
             add File_t.ro to mark readonly files/paths
    98-02-14 add -o intermediate to copy output to intermediate before commit
    98-01-23 use %I#d scanf format to get off_t right
    98-01-11 -K == -o keepgoing
             -x format on read accepts that format only (useful with -o keepgoing)
    97-12-07 add 4 NULs to work around gunzip bug that peeks beyond EOF
    97-11-11 use PROC_FD_PARENT to let procopen() close parent fd
    97-10-31 cab list works; anyone have LZX or QUANTUM decompress code?
    97-09-22 fix vdb format write
    97-08-11 fix omitted missdir() call
    97-07-17 -r attempts chmod u+w along with missdir and remove
             -rl preserves existing links if possible
             beginnings of cab file read
    97-05-09 fix putepilogue() with off_t boundary
    96-12-25 zip archive header magic fix
             use MTIOCGETBLKINFO to determine default tape blocksize
             -o eom=!command uses $(command read|write part [file]) for next file
             -s ',.*,-,' cats to stdout
             -x pax support for >2GB file size
    96-11-28 off64_t tweaks
             drop -r -w -x order dependency
             undo ccmaps() in bunread()
             add explicit O_RDONLY checks (!= 0 on some systems)
    96-10-11 change to <ccode.h> from mem[ae]to[ae]()
    96-08-11 add -o to={ascii|ebcdic} -o from={ascii|ebcdic} from mvs
    96-02-29 enable -rw setfile() -- why was it disabled in the first place?
             fix stdin file list peek bug that dropped leading files
    96-02-09 handle zip archives on input
    96-01-18 AT&T Research now
             switch to <regex.h>
    95-11-24 don't check for compressed format if already uncompressing
    95-11-18 ignore empty file list lines
    95-10-31 fix and compensate for cpio header hard link size bug
    95-10-11 drop "blocking ignored in pass mode" message
             aschk symlink data need not have trailing '\0'
    95-09-01 fix nocom \ handling
    95-08-11 builtin nocom for -o filter=nocomment
             more delta tracing
             vd02 delta algorithm
    95-07-17 fix -w output to stdout initialization bug
             fix stdin file list peek bug that dropped trailing files
    95-05-09 don't check member count unless its really a trailer
             sfkeyprintf lookup string arg is now the format conversion character
             initialize output archive for -rw to stdout archive
             misc.c had putc() and fgets()!
             unused var cleanup
             add return to listprintf()
             fix delta pass missing dir fd bug
             fix dirprefix for /
             add bax.sh as an *example*
    95-04-01 with proto va_start() must come before any arg references
             fix delta bug that failed to mark emitted or skipped members
             allow -z for patch deltas
             be sure to set ap->format before binit()
             fix ordering bug that botched most deltas!
             use file.name (after -s maps) rather than file.path in delta hash
             fix bget() bug that skipped checksum
    95-03-19 first round with POSIX 1003.2 1995
             handle file holes on input
             delta header contains member index and trailer size
             delta trailer contains member checksum
             delta epilogue contains member count
    95-03-01 internal redesign using Archive_t handles instead of global state
             -o ordered (-O) allows single pass through base
    95-02-14 make -u work with VPATH
             -x composes gzip,compress,delta,delta88,ignore,patch with real formats
             -x gzip:tar, -x gzip,tar, -x 'gzip tar' accepted
             -x delta is equivalent to -z -
             -o delta deleted
             fix OPT_owner null dereference
             fix archive pass bug that didn't update DELTA_create members
    95-01-19 detect compress and gzip on input
             add -f -z grouping with -r -w to support -r -f -z -w -f -z
             fix a few compress/delta ineraction bugs
             add -t s[#]k[#] to skip all [#] and/or keep all [#] tape volumes
             use new <align.h> ALIGN_ identifiers
    95-01-11 add s option to -s to stop on success
             add delta 94 (vdelta)
             add long option names
             deprecate most flag options
             DELTA_TEMP <64K avoids temp file
             add -o delta=patch for patch archives
    94-12-25 add lib/pax/*.fmt args files for unknown formats
             fix mknod() calls to use the right file type!
    94-11-11 fix ar out of phase warning
    94-08-11 add -Rh'header' and -Rt'trailer' for vdb write
             -e now works for -rw
    93-08-11 add vdb `virtual database' r/w format
    93-06-11 fix bug that didn't output non-regular files
             -w now uses FTW_POST to preserve dir modes
    93-04-01 handle PORTAR long member name table
    92-04-01 copy all 0 length files out regardless of read permission
    91-08-11 add check for garbage after end tar implementation bug
    90-10-01 add mips ar format out of date check
    90-08-11 header/trailer alignment now table driven
    90-07-20 fix binary output bug that set header size and time to 1
    90-06-01 fix misc delta compression bugs
    90-05-01 fix DELTA_create bug that did not check COMPRESS
    90-03-28 bump regular output block size to 8k
    90-02-11 delta changes held off by #if new_delta_format until new libdelta
             base archive checksums incompatible with previous versions
    90-02-06 fix newio() bug that looped when write() returned 0
    90-01-25 add proposed posix 1003.1b archive/interchange format
             tune buffering
             change -R option for general record support
             generalize delta id file name -- incompatible with old format
             prepare for new libdelta and subsequent incompatibilities
    89-12-01 add self-delta support, delete -A option (one algorithm with versions)
    89-11-18 fix dir mode restoration bug
    89-11-11 fix delta update with older file
    89-10-31 add portarch and randarch readonly object formats
    89-10-11 allow -f with -rwz
    89-10-01 add -Bmaxblocks and -C to match latest tar/cpio extensions
    89-08-22 align read() buffers to IOALIGN
    89-07-27 add EFBIG & EDQUOT checks to newio()
    89-07-04 fix cpio binary header mtime and size swab bug
             fix -rw bug that makes it work now!
             redo file post processing restoration
    89-05-11 handle GNU-tar USTAR format botch
             missing intermediate directories inherit mode of nearest ancestor
             fix names on stdin bug that only did -P
             incorporate lar changes from David Muir
             expand -R arg syntax
             handle ansi/ibm D,F,S,U,V formats on output
    89-03-28 fix bget() buffer boundary error for reads < buffersize
    89-03-01 ignore DELTA_PASS file set*() calls
    89-02-22 fix bread bug for 0 count and bget memcpy overlap
    89-01-18 fix copyout() rfd<0 delta bug that generated multiple entries
    89-01-11 fix dirsize!=0 bug; change ftwalk XDEV implementation
    88-12-11 fix symlink->nowhere bug
    88-11-22 add vmsbackup readonly format; fix lseek validity checks
    88-11-17 add -T040 to simulate tape device blocking on input
    88-11-11 add s5r4 asc and aschk formats
    88-11-07 hard links and deltas don't cross volumes
    88-11-01 add -n to read exact file list
    88-10-20 add bread(0,...) to skip, bget() and bput() io optimizations
    88-10-11 fix delta ops to use pattern args
    88-10-04 fix argc bug that botched -rw with file args
    88-10-01 for delta update, verify that untouched files match base archive
    88-09-30 fix allocate() bug: malloc() -> calloc()
    88-08-23 use libx/memsum() for checksum calculations
    88-08-20 add `![command]' to end of medium replies
    88-08-18 table of contents output to stdout
    88-08-08 update for libx/ftwalk() and libx/strls()
    88-07-28 streamline ftwalk() interface
    88-07-21 finish up -a and -u tar compatibility
    88-07-17 add cpio.sh and tar.sh interface scripts
    88-07-15 convert to pax
    
    RELEASE notes for src/cmd/paxlib/arj/RELEASE
    
    03-12-26 convert to codex sum-crc
    03-12-18 convert to -lcodex
    03-12-09 convert to -lcode
    03-12-02 first pax release
    
    RELEASE notes for src/cmd/paxlib/calib/RELEASE
    
    07-02-03 fix sfsprintf() size to match 2006-12 posix alignment
    04-04-04 add camap.c for { \0 \r } in cobol
    04-04-01 fix COPY REPLACING edit comment parse
    04-03-30 fix COPY-REPLACING delimiter to be `=='
    04-02-14 pax->strict disables -INC => COPY..REPLACING
    04-01-30 add rexx suffix check
    04-01-28 relax COPY REPLACING equivalent comment syntax check
    04-01-03 first release
    
    RELEASE notes for src/cmd/paxlib/ico/RELEASE
    
    11-03-09 first release
    
    RELEASE notes for src/cmd/paxlib/lha/RELEASE
    
    03-12-26 convert to codex sum-crc
    03-12-18 convert to -lcodex
    03-12-09 convert to -lcode
    03-12-01 first pax release
    
    RELEASE notes for src/cmd/paxlib/rar/RELEASE
    
    03-12-26 convert to codex sum-crc
    03-12-18 convert to -lcodex
    03-12-09 convert to -lcode
    03-12-04 first paxlib release
    
    RELEASE notes for src/cmd/paxlib/tp/RELEASE
    
    04-03-18 first release from tp.5
    
    RELEASE notes for src/cmd/paxlib/zip/RELEASE
    
    08-03-15 don't do hdr=paxget;paxread;access hdr; -- doh
    08-03-15 seek to eof if central hdr hit after last entry
    03-12-26 convert to codex sum-crc
    03-12-24 move from pax source and convert to -lcodex
    
    RELEASE notes for src/cmd/paxlib/zoo/RELEASE
    
    03-12-26 convert to codex sum-crc
    03-12-09 convert to -lcode
    03-12-04 common/ar-lh5.h for lzh decode
    03-11-29 first pax release
    
    RELEASE notes for src/cmd/probe/RELEASE
    
    10-06-01 sync with ast api 20100601
    07-02-22 probe.c: fix double sfclose(fp)
    06-09-05 probe.c: add -f, --force
    02-10-30 probe.c: reset proc->rfd after sfnew() to avoid close() error
    02-09-21 probe.c: handle strlen(base) != BASE_MAX
    02-09-11 probe.c: add more override docs
    02-01-30 probe.c: add probe.ini check to match libast/pathprobe()
    01-12-03 probe.c: return HOME relative path if readonly/non-suid fs
    00-08-11 probe: fix non-suid generation check
    00-01-11 probe: fix -t with writable info
    99-09-01 probe: add --override
    99-05-09 probe: long options
    
    RELEASE notes for src/cmd/proto/RELEASE
    
    12-02-20 proto.c: bump version to match astlicense() { since start source } change
    12-02-14 protp.tst: update for libpp/ppproto.c fix
    12-01-01 proto.c: add epl to the license type list
    11-03-04 sear.sh: add { sear32.ico sear64.ico }, $(dirname -r lib/$COMMAND/...)
    11-02-02 Makefile: don't update ../INIT/proto.c if no change or if cpp hack failed
    10-10-10 sear.sh: retain .exe suffix in sear -- its dos on the other side!
    10-09-10 sear.sh: add --args=args
    10-08-22 sear.sh: ratz+sear now requires -ladvapi32
    10-01-20 changes.sh: avoid nmake variable expansions in sh!
    09-03-02 Makefile: eliminate master src paths from ../INIT/proto.c
    09-01-15 sear.sh: update for msvcrt.dll link
    08-11-15 sear.sh: add manifest logic
    06-12-04 proto.c: add utime() prototype
    06-06-28 proto.tst: add more externalize tests
    06-05-09 proto.c: add --externalize, -x
    06-05-09 proto.tst: add -x tests
    05-12-25 ratz.c: fix sear CreateDirectory(tmp) permissions
    05-09-16 proto.c: add <stdio.h> for standalone rename() prototype
    05-07-31 proto.c: finally trust __STDC__ headers
    05-05-11 since.sh: add
    04-10-24 sear.sh: note in docs that ratz options apply to sear .exe's
    04-10-22 proto.tst: add array arg prototype tests
    04-10-01 proto.c: add CPL docs
    04-09-24 sear.sh: add cc -c to avoid nativepp "ratz.c" message
    04-05-20 proto.tst: add `int fun __P((int));' test
    04-03-19 proto.c: add { .cpp .hpp }, fix standalone -c parse
    04-02-29 proto.tst: add -f -p option tests
    04-01-14 proto.c: add suffix-comment table
    04-02-11 proto.c: default comment style set to match file suffix
    03-06-21 proto.tst: add T_INVALID ? splice bug test
    02-07-31 sear.sh: make sure output files has a suffix
    02-03-12 proto.c: add type=free
    02-01-07 proto.tst: add TEST 05 -- no fix yet
    01-12-12 sear.sh: fix rc ICON path \ escapes
    01-10-31 sear.sh: add sear.ico
    01-10-16 sear.sh: _SEA_* => _SEAR_*
    01-10-05 sear.sh: rename from sea.sh
    01-09-11 sea.sh: add
    01-06-26 proto.tst: add another buffer boundary test (large of course)
    01-04-01 proto: preserve file mode for -r
    01-02-06 proto.tst: add (finally)
    99-11-19 add --license, --shell, --copy, --verbose
    99-08-11 long options
    
    RELEASE notes for src/cmd/pzip/RELEASE
    
    03-07-17 pzip.c: update --split doc
             pin.c: add --maxhigh=N% high frequency column hard limit
             pin.c: fix tsp cost matrix free() bug
    03-04-05 pop.c: add OP_VERBOSE for cut() trace
    03-01-04 pin.c: list range only if more than 2 elements
    02-12-25 pin: add --sort
    02-02-14 Makefile: add explicit -lz references
    01-10-31 pin: add --reorder=tsp via -ltsp
    01-10-30 pzip: fix --window doc typo
    01-10-08 pin: add --optimize={dynamic|greedy|non|transitive}
             pin: add --optimize method table for easy expansion
    01-08-11 pzip: set error_info.id from argv for statically linked disciplines
    01-06-28 pzip: --split turns implies PZ_READ even with -p
    01-02-02 pzip.tst: add -w window size test
    00-10-04 pin: add -T0x800 TSP v3 dump
    00-10-03 pin: add -T0x400 TSP v2 dump
    00-10-02 pin: fix -p bug that botched the input read
             pin: TSP dump now computes exact big value
    00-09-29 pin: add -T0x200 TSP v1 reorder matrix dump
    00-05-31 pin: --size does filter() to verify guess, 0 if wrong
    00-02-11 pin: always have state.map, even with no freq filter
    99-11-03 pin: alb optimize()+solution() update (quadratic loop)
    99-09-25 pzip: change --split to --split[=pattern]
    99-09-11 pzip: change --split=dir to --split
    99-08-11 pzip: add --append, --split=dir
             pzip: fix SEE ALSO
    99-06-23 pin: add --cache to enable pin-* cache; off by default now
    99-06-22 pin,pop: add --prefix
    99-06-20 pzip: add --prefix
    99-03-22 rectify: add
    99-03-17 pin,pzip: add --bzip for investigation
             pin,pop: -r row-size now optional thanks to pzfixed()
             pin: fix bugs for high==0
    99-03-11 pin,pop,pzip: long options
             pin: -hn% for % frequency cutoff, default is -h10%
    98-11-01 pzip: delete sfclose(sfstdout) since SF_ATEXIT handles it now
    98-10-20 pin: maintain frequency and pair compress size cache
             pop: -s schema => -f pop-schema || mps-style-format
    98-08-11 initial release
    
    RELEASE notes for src/cmd/re/RELEASE
    
    12-06-25 test*.c: handle \u[U+...]
    12-06-23 testoldmatch.c: add tests for legacy astsa/strmatch.c
    12-05-07 grep.c: add case 'y': to *really* ignore --color
    12-05-03 grep.c: add -Y, --color -- ignored for GNU compatibility
    12-04-20 grep.c: always enable FTS_META (to disable pure FTS_PHYSICAL)
    12-04-17 type.dat: add type.dat re-type switch tests
    12-03-38 sed?.[ch]: 64 bit cleanup for msvc
    11-06-25 grep.c: handle FTS_SLNONE
    10-12-10 grep.c: fix some empty line buffer boundary bugs
    10-11-22 testregex.dat: add more [...\...] tests
    10-09-01 grep.c: RE errors => exit(2)
    10-08-11 ed,grep,sed: use conformance("standard",0) test
    10-08-11 sed: align y \\ \n \c \? logic with standard
    10-07-31 grep: add --recursive,-r for the linux for dummies crowd -- barf
    10-06-11 sed: drop space|semicolon separators warning
    10-06-11 sed: fix G to always emit newline
    10-06-11 sed: change 'l' command max line size to 72
    10-01-01 testfnmatch.c,testmatch.c: ignore 'v' test option
    09-12-11 grep.tst: add more -x + -e combos for regcomb() fix
    09-12-11 testregex.dat,regex++.dat: posix semantics for [z-a]
    09-11-20 sed: handle mb chars in y/from/to/
    09-10-31 sed: add a few gnu compatibility options
    09-02-02 repetition.dat,haskell.dat: add tests by Chris Kuklewicz www.haskell.org
    08-11-04 iso8859-1.dat: add [!-...] and [^-...] locale tests
    08-09-04 nested.dat,noop.dat: nested match beyond end of subject fix
    08-07-29 testglob.c: add workspace symlinks
    08-07-29 testglob.dat: add ** symlink => dir tests
    08-05-14 *.dat: update tests for UTF-8 vs. ISO-8859-1
    08-03-05 testregex.dat: add K {,*}(...) tests
    08-02-14 sed.tst: sync with regsubexec() fixes
    08-02-02 sed: add -m, --multi-digit-reference
    07-11-19 sed: /RE/I *except* for substitute command
    07-10-16 sed: add /RE/I... => ignore case
    07-03-19 testregex.c: add regdecomp() harness
    07-03-19 testdecomp.dat: add regdecomp() tests
    06-10-11 add sfstruse() error checks
    06-08-16 testglob.dat,noop.dat: add KRE ~(N) tests
    06-07-28 testglob.(c|dat): add gl_extra tests
    06-07-17 reg.dat: handle (?p) (pedandic RE checks)
    06-07-17 zero.dat: update inline option tests
    05-12-14 grep.c: add --name=name (-N) for stdin file label
    05-08-18 grep.c: add --label, -m and --total, -t
    05-06-06 reg.dat: transcribe from tcl 8.3 Spencer reg.test
    05-05-20 test(fmt|fnmatch|match|regex): handle file args for rt(1)
             nested.dat: add
    05-04-03 sed: change regexec() => regnexec() to handle embedded '\0'
    05-03-30 testmatch.dat,testregex.dat: add '[*' REG_SHELL pattern tests
    04-06-08 ed.c: fix move() bug that botched pointers across append()
    04-05-24 testregex.dat: add more backreference tests
    04-05-11 testregex.c: matchprint() now lists (?,?) up to nsub
    04-02-13 testmatch.dat: add strmatch() cache boundary tests
    03-10-17 testregex.c: add regexec() REG_LEFT tests, fix \x.... tests
    03-08-11 ed.c: fix . value after s
    03-08-08 ed.c: fix bug that botched the remembered RE parse
    03-07-17 testregex.dat: add REG_SHELL|REG_AUGMENTED tests
    03-06-09 minimal.dat: add tests
    03-03-17 ed.tst: add ! command tests for sfpopen() "" mode fix
    03-02-17 testregex.dat: add bm tests
    03-01-13 sed0.c: operate on all input files, even if some fail
             testfnmatch.c,testmatch.c: ignore testmatch -o option
    03-01-03 testregex.c,testregex.dat: add REG_SHELL_GROUP options and tests
    02-10-10 grep.c: ignore -a for GNU compatibility: gnugrep=tw+astgrep
    02-08-12 testregex.dat,locale.dat: add REG_MINIMAL tests for mb bug
    02-08-07 *.dat: recognize anchors in BRE subexpressions
    02-07-17 testregex.c: fix basic re support test
    02-07-15 locale.dat: add S and K tests for testfnmatch
    02-06-20 testregex.c: handle invalid (?,*) and (*,?) in match[]
    02-06-11 ed.c: fix global EOF test
    02-06-10 testregex.c: add -x to inhibit REG_NOSUB
             libtre.dat: add libtre regression tests
    02-06-06 ed.c: fix substitute line splice
    02-05-31 ed.c,sed.c: update to use regsubcomp(),regsubexec()
    02-05-30 testregex.c: add -R to replace answers with implementation answers
    02-05-20 testregex.c,ed.c,sed1.c,sed3.c: update to regsubcomp(),regsubexec()
             testsub.dat: add new regsubcomp(),regsubexec() tests
    02-05-14 testregex.c: add 'p' for REG_NOSUB, null regsub() 'g' match tests
    02-05-09 testregex.c: handle 'x' for implememntations with no REG_LENIENT
    02-05-08 testregex.c: fix "did not terminate" message
    02-04-12 README.re,Makefile.re,re.tgz: update standalone test tarball
    02-04-05 locale.dat: split from testre.dat
    02-03-27 testglob.c: fix double escape() call for GLOB_LIST
             testglob.dat: update tests for original pattern on no match
    02-02-14 grep: add -P,--perl-regexp == REG_EXTENDED|REG_LENIENT
    02-02-12 ed.c: add \r hacks
    02-02-02 sed0.c: add \r to blank() set
    01-12-06 grep.c: add -b,--highlight to highlight matched text on ansi terms
    01-11-20 minimal.dat: add tests for regnexec() REG_MINIMAL char class bug
    01-10-31 sed: all space before ; command separator for REG_LENIENT
    01-10-20 testglob.c: handle \ in pattern and result field parse
             testglob.dat: add tests for \ in pattern and GLON_NOCHECK
             sed1.c: fix instruction cast pun
    01-10-18 testmatch.c,testre.c: all test failure messages contain the text `fail'
    01-10-17 testre.dat: add []{}() imbalance tests
    01-10-05 testglob.c: update --help, add GLOB_LIST and GLOB_STACK tests
             testglob.dat: add a few more tests
    01-10-03 testmatch.dat: add ancc cc trigraph prone patterns
    01-09-11 ed: fix t command bug, add regression test
             ed: fix RE error intercept via REG_DISCIPLINE errorf
    01-09-06 testfnmatch,testmatch: add --help
    01-09-04 testre: update test data
    01-06-11 testre: handle embedded \0 in subject string, add \0 tests
    01-05-24 testre: add (?{...}) test support
    01-05-22 testre: add regsub() tests, testsub.dat
    01-05-16 regex.h update
             test*.c,*.dat: update for sensible test \\c expansion
    01-04-18 testglob.dat: add no metachar tests
    01-03-19 testglob: add
    01-03-08 testre,testmatch: update for I18N and strgrpmatch() regex wrapper
    99-12-12 sed: delay peek for .==$
    99-08-11 grep: don't complain about EISDIR read error
             ed: usage to stderr
    99-05-01 ed,sed: long options
    99-04-23 testre.dat: add ksh pattern parse tests
    99-03-01 grep: long options
    98-11-11 testmatch: add STR_ICASE tests
    98-09-22 sed: REG_LENIENT => delim not special inside [...]
    98-07-17 grep: add -w, -G
    98-04-01 sed: \n => newline for LHS and RHS of y if REG_LENIENT
    98-03-01 grep.tst,testre.dat: update for regcollate() [..] fix
    98-02-06 testre: char class range bug fix checks
             testmatch: char class range bug fix checks
    98-01-23 sed: use regerror(0 for more informative error messages
    97-05-09 sed: fix adrs[] by adding ccmapc()
    97-04-01 sed: fix s/old/new/w file
    96-12-25 sed: uchar -> unsigned char for the bsd holdouts
             sed: sfset(sfstdin,SF_SHARE,1) if q command compiled
             sed: ccmapc() command table indices
             sed: ; separator warning only if CONFORMANCE==standard
             ed: add <sfdisc.h>
             sed: hp.pa cpp can't handle #define f(/*a z*/a)
             ed: line mark bit constants now use sizeof(off_t)*CHAR_BIT
    96-08-31 testre: add BM tests
    96-08-11 ed: -? and arg errors now verbose
    96-05-09 testre: add RE_SHELL_* tests
    96-02-29 grep: fix line buffer span bug that forgot to add the newline
             grep: fix -h, add -H
             sed: fix compiled expression alignment errors by typedef word
             regress: move to lib0ast
             grep: fix exit status and keep going on input open error
    96-02-14 grep: -Ts keeps SF_SHARE input
    96-02-09 grep: fix end of buffer test
    96-02-06 grep: add regrexec() -- now its close to gre speed
    96-01-30 ed: ,==.,$ ;==1,$ %==1,$
             grep: turn off SF_SHARE on input pipe
             ed,grep,sed: unused var cleanup
    96-01-22 testre: add match overrun test
             testre: drop dups from testre.dat
             ed: add trap() call to append()
             ed: drop malloc/realloc ptr diff hack in append()
             ed,grep,sed: REG_LENIENT (-O) is default, -S for strict
             ed,grep,sed: astconf("CONFORMANCE")=="posix" for strict
             sed: REG_LENIENT allows space between addresses
    96-01-19 regress: INPUT|OUTPUT|ERROR -n for no trailing newline
             sed: fix incomplete last line handling
             grep: add incomplete last line handling
             testre: handle \n \r \t \xXX in re and s fields
    96-01-16 testre: standardize for outside exchange
    96-01-11 sed: convert sed.h enum to #define for K&R
             ed: add restricted red
             ed: fix s///g bug that botched more than 1 sub!
             ed: fix s///<num> bug that missed the point
    96-01-08 regex: convert from C++ to C
    95-12-25 regex: add REG_SHELL, REG_SHELL|REG_AUGMENTED
             regex: drop REG_ANCH, reganch() -- REG_LEFT|REG_RIGHT always done
    95-12-21 regex: snarf from Doug; now we have negation and conjunction
             regex: REG_MINIMAL converts pattern to pattern&(pattern.+)!
    95-12-19 regress: new
             convert test*.sh to *.tst for use with regress
    95-12-11 ed: undo for all ops
             ed: initial tested.sh
    95-12-08 ed: no hard limits
             ed: !command added
             ed: a,b!command writes to command and reads back
             ed: program state in ed struct
    95-12-04 regex: add REG_SHELL,REG_LEFT,REG_RIGHT and strgrpmatch()
             regex: add REG_MINIMAL placeholder
             ed: new from v10
             ed: posix update
    95-12-01 regex: snarf Doug McIlroy's C++ implementation
    
    RELEASE notes for src/cmd/sort/RELEASE
    
    10-08-11 main.c: use conformance(0,0) for "standard"
    10-05-25 main.c: handle mb -t
    10-05-11 main.c: add -p,--plugins=style -- common to all command swith plugins
    10-04-22 main.c: -C => -E, add posix --silent-check, -C
    10-04-11 main.c: drop -S,--unstable, handle --nostable, -[Sy]N => -zpN
    10-04-03 main.c: add locale reference to the sort order description
    09-12-09 main.c: add -h, --scaled|--human-readable
    08-04-24 main.c: add optget() 'n' option for -1 => -K1
    07-10-30 main.c: default insize == procsize -- worth ~25% time!
    07-10-30 sort.tst,testsort.sh: export LC_ALL=C
    07-01-25 main.c: v format size is max of all input files
    06-07-17 main.c: RS_POP before checking output
    06-07-17 main.c: handle empty file for record format data sample
    06-05-09 main.c: add path to record format determination message
             main.c: fix -o path to inherit -R% format from input
             sort.tst: fix -R% v format test
    06-04-19 main.c: fix minor merge file list bug
    06-01-21 testsort.sh: fix pure sum command search logic
    05-11-01 rec.c: add --count
    05-06-30 main.c: add -zbBUFSIZE for regression testing
    05-06-27 main.c: convert sftmp() etc. to rstmp*()
    05-06-24 sfopen.c: allow multiple io intercepts per program
    05-06-11 main.c: fix duplicate sfdcgzip() bug that corrupted input
    05-05-31 main.c: mv rslib() before key->input[] record format processing
    05-05-17 main.c: delay -l* => rslib() until all options parsed
    05-05-11 main.c: fix -R* parse, preserve output zip/record attributes
    04-12-01 main.c: fix -zI bug that only worked for 1 input file (sort#26)
    04-09-28 main.c: fix ERROR_USAGE logic
    04-08-11 main.c: add #intermediates to -Xdump, limit intermediates to 64
    04-07-22 main.c: acces() => eaccess()
    04-06-16 main.c: -R% -R- use recfmt() to sample for record format
    04-02-11 main.c: document the obsolescent -k reclen:fieldlen:offset
             sort.tst: add -k reclen:fieldlen:offset vs. -k .r -k .o.f tests
    03-11-11 main.c: fix sfread vs. sfreserve logic fooled by SFOPEN_INTERCEPT
    03-11-04 sfopen.c: add SFOPEN_INTERCEPT experiment
    03-10-16 main.c: add RS_CAT check
    03-10-11 main.c: add RS_IGNORE checks, -R% to get size from path%lrecl
             sort.tst: add -R% tests
    03-09-06 main.c: add -Z, --zd, --zoned-decimal
    03-09-04 main.c: change -R to --record=format | --recfmt=format
    03-08-31 main.c: -l implemented by rslib()
    03-08-15 main.c: add -J, --shuffle=seed
    03-05-27 main.c: add -C, --codeset={a,e,i,o,n}, -p, --bcd, --packed-decimal
    03-05-23 main.c: add -R, --reclen=reclen
    03-03-11 testsort.sh: initialize $CC from :TEST: TESTCC state var
    03-03-07 Makefile: +lsort for now
    01-04-19 sort.tst: add -s tests
    00-03-09 main.c: fix infomation typo
    00-12-25 main.c: close input before final overwrite ops
    00-08-31 main.c: add -zcCHUNK to sort in chunks with merge disabled
    99-11-19 main.c: use rskeylist() for method usage
    99-11-11 main.c: unstable sort is the default for backwards compatibility
    99-08-11 main.c: fix usage[]
    99-06-07 main.c: add -o in any file position for backwards compatibility
    99-03-03 main.c: add long options
             sort.tst: add gnu tests; `b' is tricky
    99-01-11 fix buffer boundary bug that emitted `newline appended' on 4k systems
    98-03-17 add -zI -zO to zip input/output
    98-03-11 fix sfmove() error checks
             close output before rename
    97-12-07 -Td1:d2:...:dn works via pathtmp(0,p,"/TMP_PATH",0)
             pathtmp(0,0,"/cycle",0) could be used to control phase tmp files
    96-07-17 insize is much less aggressive -- must nail down reasonable proc mem
             fix bug that required 2 ^D for interactive input
    96-12-25 drop sfset(sfstdin,SF_SHARE,0)
    96-10-22 sfreserve tweaks
             multi-stage merge now keeps previous stages out until next stage
             sfreserve() only if 1 S_ISREG() input file
    96-10-17 increase merge file limit to (OPEN_MAX-16) where possible
             update testsort TEST=15 input file size to force multi-stage merge
    96-10-11 all regression tests pass for all methods
    
    RELEASE notes for src/cmd/sortlib/glean/RELEASE
    
    10-05-26 Rskey_t.tab is now an array
    07-04-20 handle no main key as documented
    07-04-20 add "absolute" option to just list the minimum/maximum
    06-11-23 add min:=a,min:=b for two separate minima tests
    06-06-29 first release
    
    RELEASE notes for src/cmd/sortlib/sum/RELEASE
    
    11-08-23 sortsum.c: handle -t' ' => 1 or more [[:space:]] -- doh
    10-05-27 sortsum.c: hadle -t'multibyte'
    08-08-28 sortsum.c: add --regress to normalize arch dependent rounding
    08-05-08 sortsum.c,sort.tst: tweak default floating point rounding
    06-01-15 sortsum.c: fix var length field extension logic, add op=count
    03-05-27 sortsum.c: op=op:arg:key... order enforced to avoid op/type ambiguity
    03-05-24 sortsum.c: handle ccode maps
    03-05-23 sortsum.tst: add
    03-05-21 sortsum.c: add
    
    RELEASE notes for src/cmd/sortlib/sync/RELEASE
    
    07-01-25 sync.c: v format size is max of all input files
    06-10-11 ss.c: add sfstruse() error checks
    06-08-01 sync.c: handle %size.suffix mapping with multiple .'s
    06-07-17 ss.c: fix RS_POP event to unlock output sfreserve's
    06-05-22 sync.c,sort.tst: fix %size.suffix mapping
    05-10-19 sort.tst: add { INREC OUTREC E15 } tests
    05-09-12 ss.c: don't add V header to data that already has it
             ss.c: fix [n]{ABCX}['...'] field spec parse
             sync.c: fix %v* synthesis
    05-09-09 ss.c,sync.c: handle V format output
    05-08-23 ss.c,sync.c: add ssannounce()
    05-08-16 ss.c: fix listexpr() null dereference
    05-07-17 sync.c: default now stable
    05-06-16 sync.c: mark -o output file too
    05-06-15 sync.c: handle space separated MODS lib list
    05-06-14 sync.c: add checkmark() %* suffix search and Ss_t.format
    04-09-28 sync.c: handle { RS_TERMINATE RS_DELETE RS_ACCEPT RS_INSERT }
    04-09-17 ss.c: handle { MERGE SKIPREC STOPAFT }
    04-06-15 handle XSUM
    03-10-16 sort.tst: add RS_CAT and catenation tests
    03-10-11 sync.c,ss.c: add ssdd(), ssdrop() => ssio(), check ${SORTOFid}
    03-09-23 sync.c: update doc example
    03-09-21 ss.c: fix OUTREC default offset
    03-09-05 sync.c: add --junk=file
    03-09-03 ss.c: add CODE=codeset
             sync.c: add --codeset=codeset
    03-08-30 first release
    
    RELEASE notes for src/cmd/sortlib/vcodex/RELEASE
    
    08-06-06 sync with vcodex kpv update
    06-05-09 don't add .qz to non-regular file paths
    06-04-28 use input suffix on output if it doesn't already have one
    05-11-09 fix mixed input compression logic
    05-08-23 use sfdcvcodex() instead of vcsfio()
             delay RS_WRITE_FILE until first encoded input if possible
    05-06-30 first release
    
    RELEASE notes for src/cmd/ss/RELEASE
    
    10-06-01 sync with ast api 20100601
    04-07-22 ssd.c: access() => eaccess()
    03-07-29 ssd.c,features/cmd: add utmpx support
    99-05-18 ss: long options
    97-08-11 ssd: fix now used before defined bug
    95-05-09 fix ssd nlists feature tests
             add a few more utmp file macros from <utmp.h>
    95-02-14 fix an extremely botched since() macro
    95-01-19 fix user idelt time check that broke loop too soon
             checks every 10s, updates every CS_STAT_FREQ if not interesting
    
    RELEASE notes for src/cmd/std/RELEASE
    
    12-06-06 yes.sh: use echo instead of print if no $KSH_VERSION
    12-04-20 ls.c: FTW_META default
    12-02-14 yes.sh: add
    12-01-23 du.c: the rightmost of { -b -h -k -K -m } overrides the others
    11-12-13 features/procfs, pss-procfs.c: check _PS_task for { st_uid st_gid }
    11-08-24 ls.c: fix { linkop linktext } to check for FTS_SLNONE too
    11-08-01 file.c: add -b, --brief | --no-filename
    11-06-10 ls.c: add %(view)d for 3d fs view level (iview(struct stat*))
    11-05-09 ps,pss: handle pr_npid in /proc/<pid>/stat
    11-04-26 ps.c: increase COMMAND width from 16 => 24
    11-04-26 features/procfs: fix uwin /proc probes
    11-04-21 dd.c: turn stdin O_NONBLOCK off
    11-04-21 dd.c: fix SI vs US numeric suffix docs
    11-04-15 ls.c: add KEY_dev for all file types
    11-03-10 ps.c: use %0<width>s for string fields to retain last <width> chars of long strings
    11-03-03 dd.c: fix writes beyond count for piped input across partial input blocks (thanks ggreen)
    11-02-11 mount.c: fix umount operand verification
    11-01-28 file.c: add -a, --all to list all magic table matches
    11-01-11 dd.c,iconv.c: convert Iconv_disc_t* for iconv_move() and iconv_write()
    11-01-11 iconv.c: add posix { -c,--omit -l,--list -s,--silent }
    10-12-01 ps*: update freebsd procfs logic
    10-08-11 df.c: use conformance("standard",0) test
    10-06-01 sync with ast api 20100601
    10-05-25 ls.c: back off 09-07-02 logical|(meta)physical change
    10-02-09 ps.c: fix --tree --format=... => \\_ instead of \_
    10-02-09 ps.c: ntpid not hex by default
    10-01-01 ps.c: fix { -T -C -P } child detection logic
    09-12-09 du.c: add -h, --binary-scale|human-readable; -K, --decimal-scale
    09-11-11 features/procfs: handle linux /proc pr_tgrp == pr_tpgid
    09-10-21 locale.c: use fmtquote() to print key values
    09-07-02 ls.c: ftwflags() default only if not --recursive
    09-05-15 ps.c: fix format field alias logic
    09-04-15 ls.c: add --sort=version
    09-01-30 mount.c: hide mount prototype too (for mvs.390)
    09-01-20 dd.c: fix state.in.special counting logic
    08-12-08 ls.c: at least one space before link count for -l
    08-12-07 ls.c: use %[_][EO]K for [space pad] [full|long] iso
    08-10-28 pss-procfs.c: use hz = getconf("CLK_TCK")
    08-09-10 features/procfs,pss-kvm.c: netbsd 4.0 kvm tweaks
    08-01-31 features/procfs,pss-kvm.c: freebsd6 kvm tweaks -- stop already
    08-01-26 df.c: belay some of that delay (automounts foiled it)
    07-11-19 df.c: delay stat()/statfs() until necessary
    07-11-15 pss-procfs.c: handle pr_pgrp and (...) with embedded space
    07-08-03 ls.c: use return from main() instead of exit()
    07-06-27 seq.sh: error messages to the standard error -- oops
    07-06-01 Makefiles: add $(PACKAGE_LOCALE)umount link
    07-05-05 seq.sh,seq.rt: new
    07-04-25 locale.c: defer unknown keywords to /usr/bin/locale
    07-03-19 du.c: fix 0 pointer deref
    07-03-19 pss.c: initialize not found process placeholders
    07-02-07 sum.c: move to libcmd & builtin
    06-12-11 ls.c: disable LS_PRINTABLE for utf-8
    06-12-04 du.c: handle > 2Ti in local.pointer
    06-11-23 ps.c: --escape now the default: -E => --noescape
    06-10-11 add sfstruse() error checks
    06-10-11 ls.c: header/trailer must honor state.scale too
    06-09-19 split.c: pathconf() => astconf()
    06-05-23 ps.c: add but ignore -w, --wide
    06-01-11 pss-kvm.c: handle struct eproc.e_xsize
    06-01-03 ls.c: add --show-control-characters, handle --no*
    05-07-25 touch.c: eith => either
    05-07-17 dd.c: fix ccode conversion diagnostic
    05-06-16 ps.c: fix parent chain lookup infinit loop
    05-06-14 ls.c: fix divide by 0 in col()
    05-06-11 ls.c: sharpen the optimal row/col search
             ls.tst: normalize 02 test sizes
    05-04-22 ps.c: add --branch --escape
    05-04-06 df.c: fix -k F_FRSIZE() to always return > 0
    05-03-29 ps.c: check /bin/ps punt recursion when ast_ps is /bin/ps
    05-03-11 features/procfs: cygwin tweaks
    05-03-10 ls.c: fix -s arithmetic and column output
    05-02-14 sum.tst: add SHA { 256 384 512 } tests
    05-02-11 pss-info.c: add lynxos info(2) proc table
    04-12-25 ls: -e == --time-style=long-iso, -E == --time-style=full-iso
             ls: fix --quote-style=literal to bet literal -- doh
    04-12-15 ls: --time-style=long-iso
    04-12-12 touch.c: add high resolution time support
    04-10-28 ls.c: add space between group/size so they won't run together
    04-10-01 dd.c: drop ancient unused map code
    04-09-14 ls.c: add -w[linesX]cols, last col must be visible in window
    04-07-17 ls.c: rename -f => -Z, add x/open -f
    04-03-28 ls.c: add variable column widths for minimal { -C -x } footprint
    04-02-29 pss-getprocs.c: fix readf/partf semantic mixup
    04-02-26 ls.c: handle solaris S_ISDOOR for -F
    04-02-11 df.c: rescan mount table to avoid more expensive stat()/statvfs()
    04-01-14 split.c: fix csplit {*} EOF detection
    03-12-17 sum.c: update docs for new -lsum interface
    03-12-09 df.c: don't stat() mount table fs paths that don't start with /
    03-11-17 ps.c: fix --children bug that lost lower level ancestor links
    03-10-12 dd.c: add ast iconv identity check
    03-10-08 dd.c: fix count=n short-read when bs > underlying read size
    03-10-07 df.c: fix -Pi to do "portable" -i
    03-09-23 ls.c: call fmtmode() with internal mode
             ls.c: -L => ~FTS_SEEDOTDIR
    03-09-18 dd.c: numeric option arg values are now intmax
             split.c: -b -C -l are now intmax
    03-09-11 ls.c: add --testdate=date for testing
    03-08-21 split.c: fix csplit pattern matching -- did it ever work?
             csplit.tst: add regression tests
    03-06-21 pss-procfs.c: fix PR_TIME(),PR_CTIME() normalization
    03-06-11 mount.c: reorder includes for mvs.390
    03-05-26 dd.tst: add
    03-04-28 sum.tst: add sha1 tests
    03-03-21 ls.c: add -z,--time-style
             ls.c: if only -t is set then set FTW_SEEDOTDIR to keep configure happy
    03-03-11 pss.c: pid <= 1 => ppid == 0 to avoid ancestor loop
    03-03-06 ps.c: add pgid alias for pgrp
    03-02-28 pss*.[ch]: add Pss_dev_t and Pss_id_t
             ps.c: don't warn about unsupported fields for [cfjl]
    03-02-21 pss-*.c: initf errors except no space now warnings for ps fallback
             Makefile: hosttype workaround to avoid botched -lkvm
    03-02-11 ps.c: flags width 2 => 3 since posix says its octal
    03-02-07 ps.c: add --children and --parents, --tree == --children --parents
    03-02-06 locale.c,ls.c: fmtquote() FMT_ALWAYS update
    03-02-01 ps*.[ch]: convert to independent Pssmeth_t methods
             pss-ps.c: export _PSS_ps=1 to force for testing
    03-01-31 pss.c: add darwin.ppc kvm_getprocs() -- still needs work
    03-01-29 ps.c: check for obvious invalid pids
    03-01-10 locale.c: don't list default after unknown category/keyword
    02-12-04 du.c: add -H -L -P(default) symlink options
    02-11-22 file.c: add version type description
    02-10-10 pss.c: redefine only if not defined -- duh
    02-10-02 pss.c: move <ast_windows.h> to first #if __CYGWIN__
    02-09-30 dd.c: honor both count*bs *and* count
    02-09-24 dd.c: fix partial record computations and printf format
    02-09-11 pss.c: _WIN32 SF_ERROR <windows.h> workaround
             touch.c: drop TM_DATESTYLE (snarfed too much from date.c)
    02-09-09 ls.c: really ignore -T<n>
    02-08-13 touch.tst: fix 10 digit ambiguity test
    02-08-05 ls.c: add %(perm)[os]
    02-07-31 file.c: add -[cdiM] and swap (old ast) -m and -M semantics for posix
    02-06-25 ps.c: handle %s vs. %d --format inconsistencies
    02-02-14 touch.c: explicit epoch dates (0) are different from now (also 0)
             locale.c: don't output on unknown keyword
    02-02-11 ps.c: validate input pid strings
    02-02-04 ps.c: --format subformat => heading
    02-02-02 pss.c: handle __CYGWIN__ bug where sizeof(TTY_CONSOLE)>sizeof(dev_t)
    02-01-31 pss.c: add aix getprocs()
             ps.c: ntpid=>npid, ntpid now a deprecated alias
    02-01-28 ls: fix devmajor/devminor to use st_rdev where appropriate
    02-01-22 ps: fix `not available' warning to attempt subsequent fields
    02-01-21 ps: recode to use pss.[ch] process status stream interface
    02-01-06 touch: clarify --time doc
    01-10-31 df: increase the fs stat timeout from 2 to 4 sec
    01-09-04 locale: add new catagories
    01-08-11 ls: fix nonprintable test for mb locales
    01-08-01 features/procfs: note that synthesized psinfo doesn't have pr_psargs
    01-06-27 dd: fix conv=[lu]case|x2y logic botch
    01-06-08 ps: option `-' is optional for ancient compatibility
    01-06-06 ls: drop octets for bytes -- yay
    01-05-25 locale: -m runs local locale until the standard comes to its senses
             locale: add --element to list collation element weights
    01-04-20 df: --man now says --scale is the CONFORMANCE!=standard default
    01-04-17 date,rm: move to -lcmd
    01-04-01 locale: fix LC_ALL listing
    01-03-23 tsort: fix typo that goofed up $'b c\na c\na b'
    01-03-22 ps: %(ntpid)d takes precedence over hex attribute
    01-03-17 date: update --man for tmfmt() changes
             locale: add with regression test
    01-03-09 df: fix cannot stat filesystem typo
    01-03-05 ls: add --dump to dump generated --format string
    01-03-01 ps: fix iffe logic that disabled too much for /proc synthesis
             ps: fix -T -p that missed some children
             ps: fix -x to include session leaders
    01-02-14 ps: disable some iffe results for synthesized /proc structs
             ps: use sfstrbase() and sfstrsize() instead of member names
             mount: define NGROUPS for freebsd -- how does <sys/ucred.h> make it?
             df: add scaled sizes, no sync(2) unless -s,--sync
             df: add statvfs() timeout for good ol NFS
    01-01-31 ls: handle --sort=size
    01-01-01 ps: change (-x,--hex)=>(-X,--hex), add (-x,--detached)
             ls: really ignore --tabs, add --quote-style --scale, --thousands
             rm: -i and -f cancel each other
    00-12-13 df: change type default width to 10 for linux
             ps: fix --format '%(time)d'
    00-12-11 ps: fix --tree graph
    00-12-08 ps: no -e for pid args
             ps: add --heading
    00-10-31 date: mmddHHMMccyy doc and code fixes, test
             touch: ccyymmddHHMM doc and code fixes, --time=mtime common sense, test
    00-10-23 ps: -Tp pid gets pid and all children
    00-10-06 du: fix roundup error by delaying until the totals
    00-09-21 touch: fix to handle obsolete MMDDhhmm[YY]
    00-08-11 ps: fix man typo
    00-06-10 dd: add swap=op
    00-05-24 ls: fix --kilobytes, add --block-size
    00-05-11 df,ls,ps: unknown format id is fatal error
    00-05-02 dd: use iconv() for from=x to=y conversions
    00-04-01 ls.tst: export TZ=EST5EDT; new tests should be UCT
    00-03-17 rm: add PATH_ATTRIBUTES 'l' check (no hard links to directories)
             date: --elapsed accepts odd arg count
             catmerge: add
    00-03-09 df: add --format
             date: add --elapsed
    00-02-07 ls: -a and -A now mutually exclusive
             shar: add $USAGE_LICENSE
    00-01-25 touch: add invalid st_mtime value CAVEAT
             ls.tst: limit max st_mtime to 0x7fffffe to avoid stat(2) EOVERFLOW
    00-01-11 tsort: fix
    99-12-25 ps: fix linux -o args
    99-11-19 mount,umount: fix umount usage[]
             ls: fix --format doc
    99-11-18 ls: -H + cmd link non-dir symlink => lstat() (H == hairbrained)
    99-10-31 sum: change --check, add --header --permissions for verifcation
    99-10-22 date: fix %C %k %y doc
    99-08-11 ps: netbsd + unixware fixes
             ls: fix SEE ALSO
    99-07-17 ps: fix cancel logic to eliminate (null) header
    99-06-23 rm: fix -f exit status to be !=0 on errors, even if no diagnostic
    99-06-17 expand/unexpand: long options
    99-06-14 rm: dir arg requires -r, diagnostic even with -f
    99-06-11 df: minimize mntread calls when args given
             ps: all key.cancel format mods on rhs
             sum: binary mode by default, local text mode implementation
    99-06-01 dd: fix conv=* bitmasks
    99-05-20 df: F_BASETYPE() for redhat 6.0 linux statvfs incompatibility
    99-05-18 date: add settimeofday() and stime() checks/calls
             date: use %Y in /bin/date punt
    99-05-11 ps: use pr_sid for session leader checks
    99-05-09 sum: sfopen(sfstdin,0,"rt") file lists
    99-05-06 date: fix inconsistency between date(1) touch(1) tmdate(3)
             shar: add
    99-05-05 sum: add md5sum options
    99-05-01 touch,tsort: long options
    99-04-28 banner,df,du,file,mesg,mount,ps,sum: long options
    99-04-01 ls: long options, gnu compatibility
             date: fix +format for new optget()
    99-03-11 dd: convert to optget()
             ls: (time_t) cast fmttime() arg
    99-03-01 ps: fix static key table inititialization
    99-02-04 ps: add maxval to determine default width
    99-01-23 testdate: check date output format too
             move sfio,date,opt tests to src/cmd/tests
             move pax tests to src/cmd/pax
    99-01-11 sfio/t*.c: make a few tests more portable
    98-11-21 touch: add obsolete mmddhh & mmddhhyy
    98-10-20 dd: fix in/out partial block reports
             sum: add ast4|32x4|tw checksum
    98-08-11 ps: implement -G
    98-07-17 ps: fix -t dump
    98-06-26 rm: tighten hard link to directory test
    98-04-01 sfio: fix ttmpfile by intercepting open64() and creat64()
    98-03-11 dd: fix conv=* check
             du: list all command line args
    98-02-18 date: modify tests for tmfix() 1900+tm_year leap year fix
    98-01-23 df: add -O for mnt.options
             date: add y2k date tests
    97-12-20 ps: add (but name ast_ps until it's broken in)
    97-12-11 rm: fix -r bug that looped when remove() silently failed
    97-07-17 rm: `rm -rf' just prints usage; it used to do `rm -rf .'
             du: change -kblocksize to -bblocksize, -k => -b1024
             date: a few more tests
    97-05-09 rm: fix FTW_AGAIN code for multi-getdents() dirs
             df: add ERROR_SYSTEM to -v output
    96-12-25 dd: add from=<ccode> to=<ccode>
             tsort: fix empty list bug
             df: fix sync() prototype
             date: add -p input-format to supplement DATEMSK
             ls: fix boundary problem with %(path) by using %(name)
             ls: add -A
             rm: add -F to clear and sync data before remove()
    96-10-11 file: update for magic discipline
             dd: update for <ccode.h>
             *: change opt_arg to opt_info.arg
             mesg: add
             df: "UNKNOWN" fs type -> "local"
    96-08-11 dd: set error_info.exit after options
    96-06-19 fix ftwalk() top level children anomalies (fts is underneath now)
    96-05-09 date: Xopen DATEMSK tests
             df: Xopen update
             du: Xopen update
             ls: Xopen update
             find: move to tw
             rm: add
    96-02-29 df: list some stat errors -- well, maybe not
             sum: add cksum link and att,bsd,posix,zip,md5 algorithms
    96-02-07 df: (long) cast to handle (unsigned long) vs. (long) header diffs
    96-01-30 banner: unused var cleanup
    96-01-01 AT&T Research now
             banner: add
             split: add
    95-12-25 find: add -nouser, -nogroup POSIX unary ops
    95-12-08 df: cap = use / (use + avail)
             expand: new
             unexpand: new
    95-11-18 file: ignore empty file list lines
             df: add Mnt_t.options and Mnt_t.flags
    95-11-16 this is the place for single file standard commands
    95-11-11 df: new
             tsort: new
             file: fix aix shared library
    95-07-17 date: add gnu -d string
             ls: fix "total..." aggressive output
    95-05-09 file: switch to <magic.h> and libast/magic()
             file: add posix -h == -P
             ls: sfkeyprintf lookup string arg is now the format conversion char
             ls: #ifdef check S_ISSOCK
    95-04-01 ls: fix -c botch that treated it like -u
    95-03-19 ls: add -H for posix FTW_META|FTW_PHYSICAL
             ls: add -f format to match pax -o listformat
             ls: add -D key=value to match pax -o listmacro
             ls: dir.sh to mimic dos -- ouch
             ls: don't stresc() possibly readonly string literals
    95-03-11 find: add -metaphysical (posix -H) for FTW_META|FTW_PHYSICAL
    95-02-14 file: add -p pattern to select types that match pattern
    95-01-19 file: add linux kernel and minix as,ld
    95-01-01 file: start RELEASE file
             file: add JPEG, dot
             file: fix GIF
             file: stresc() match strings too
             file: add pax compressed and delta formats
             ls: add -n for LS_NUMBER
             ls: -C if argv[0] base is lc
    
    RELEASE notes for src/cmd/tests/RELEASE
    
    12-02-02 add timeout to { testlib terror.h }
    11-10-20 add TESTLIB.mk, common { testlib terror.h }, and test.aso
    11-09-26 vmalloc: sync with kpv
    10-05-28 date.dat,datey2k.dat: update for ast move to %Q? %K
    10-04-05 opt.tst: add head --nroff .TH fix tests
    10-04-02 opt.tst: add head --version bug fix test
    09-12-17 opt.tst: update for solaris short/long mix
    09-11-13 vmalloc/trandom.c: fix test logic
    09-07-22 ip6.rt: add trailing :0 tests
    09-04-27 sfio/tpool.c: update to match libast/sfio/sfpool.c patch
    09-02-22 date.dat: add iso duration tests
    09-02-02 sfio/tprintf.c: fix sfaprints() test
    08-12-30 date.dat: add TM_WORK tests
    08-12-19 date.dat,datey2k.dat: update for %_K
    08-06-24 date.dat: update for tmxfmt() %z fix
    08-05-22 testdate.sh: add date.dat supplement test case generator
    08-05-20 strtof*.rt: reorganize strtof tests for easy(ier) change
    08-02-11 date.dat: add more ISO 8601:2000 tests
    08-01-18 strn*.tst: consolidate into str*.tst
    08-10-15 strn*tof.(c|tst): handle +/- nan|inf|0
    08-10-15 strn*toi.(c|tst): handle bitsof(long) -- {32 64 }
    07-05-21 date*.*: update for ISO 8601:2000 %F == %Y-%m-%d
    07-04-11 sfio/tprintf.c: update for { inf INF nan NAN }
    06-09-14 datey2k.dat: yield to the gentlemen from congress
    06-08-25 opt.tst: update for leading 0 numeric option arg strip
    05-04-30 sfio: tgetr: add sfmaxr() tests
    05-04-20 cdt: snarf cdt tests from kpv
    05-01-04 date.c: add ``FMT time format answer''
    04-10-31 date.dat: add { hours days weeks months } ago tests
    04-10-27 opt.tst: TESTs 9? for astsa (stanadalone ast)
    04-09-14 date.dat: add %| and %& tests
    04-09-08 opt.tst: add :!value: omitted optional arg value TEST 47
    04-04-15 date.dat: add specific and ordinal day tests
    04-04-01 vmalloc: snarf vmalloc tests from kpv
    04-02-29 sfio/tscanf.c: add %! test
             opt.tst: add html escape test
    04-02-04 sfio/texcept.c: add sfraise(0,a,b) test
    04-01-14 sfio/tmmap2read.c: fix mmap() override for linux/bsd
    03-10-12 strtoi.tst: add strton[ll] suffix multiplier tests
    03-09-23 opt.tst: more optstr() tests
    03-09-11 opt.tst: add n:=v tests
    03-09-05 opt.tst: [f:l*?] test 43 update
    03-08-11 date.dat: add arithmetic tests
    03-05-25 opt.tst: add optstr() ???* internal option tests
    03-05-11 strtoi.tst: add malformation tests
    03-05-06 opt.tst: add getopt_long() compatibility tests
    03-04-22 date.dat: add last, this, next tests
    03-03-21 date.dat,datey2k.dat: add %Q/recent/distant/
             opt.tst: add trailing '*' option and option args tests
    03-02-13 base64.c: add base64encode()/base64decode() tests
    02-10-04 strtof.tst: add simple cases
    02-09-15 sfio/tscanf.c: add NaNS test
    02-09-05 opt.tst: add .fp 5 CW for *roff tests
    02-08-21 strelapsed.tst,strelapsed.c: add
    02-07-27 sfio/tpoll.c: fix for rw pipes
    02-06-26 opt.tst: fix debug locale message numbers
    02-05-16 date.dat: add '60+n min/sec ago' tests for n min/sec after the hour
             data.dat,datey2k.dat: update for %u addition to tmfmt()
    02-03-14 opt.tst: update \f...\f --keys tests
    02-02-02 sfio/(tclose|ttpopenrw|ttell).c: add alarm to handle hung coproc
    02-01-27 sfio/terror.h: handle non-idempotent <varargs.h>
    02-01-12 date.dat,date2k.dat: fix EST/EDT %z tests
    01-12-18 date.dat,datey2k.dat: update for %z change from SHH to SHHMM
             date.dat: add YYYY/MM/DD tests
    01-11-24 opt.tst: update --?+SECTION tests
    01-10-31 opt.tst: add --?+SECTION tests
    01-10-30 date*.dat: fix cron tests where both mday and wday are specified
    01-10-18 strtof.tst: adjust for sfprintf()/printf() rounding
    01-10-18 sfio/twchar.c: add wchar_t tests
    01-10-11 opt.tst: add example and literal tests, \&. nroff tests
    01-10-10 opt.tst: sync with optget() i18n fixes
    01-08-11 test.sf*: need $(LDFLAGS) for -L* library link paths!
    01-03-26 test.strtoi,test.strtof: add
    01-02-14 sfio: add tmpread
    01-01-31 sfio: uniform test exit codes
    01-01-01 opt.tst: add enumerated option argument values
    00-12-11 date.dat: add a few more crontab(1) forms
    00-10-31 date.dat: add date(1) and touch(1) forms
             sfio: kpv updates to handle mac os X
    00-10-17 sfio/thole.c: move large buffer from stack to global
    00-10-03 testy2k.dat: `Feb 29 01:02' => `Feb 29  2000'
    00-04-01 Makefile: add ../../lib/libast to .SOURCE for features/sfio
    00-03-07 opt.tst: add printf +1 bug fix test
    00-02-14 opt.tst: fix for "..." attribute quote
             datey2k.dat: oops: %l fails for old (2000-02-29) NOW
    00-01-10 opt.tst: fix USAGE_LICENSE
    99-10-22 date: test all % formats
    99-08-11 sfio: fix 3 tests for uwin
             sfio: tscanf for netbsd
    99-03-25 :TEST: don't forget about foo.c for foo.tst
             sfio/testsfio: fix option parse for `-x *,*' and cc.* and *.cc
    99-01-23 moved library tests from std to here
             added optget() tests
    
    RELEASE notes for src/cmd/tksh/RELEASE
    
    05-06-14 uinit.c: trap "tkloop" only if it is defined
    04-03-31 uinit.c: unalias ksh "source" to uncover tcl builtin by same name
    03-01-02 Makefile: dynamic -lshell on CC.HOSTTYPE=*win*
    02-08-27 tkMain.c: wait loop recode to avoid WNOHANG cascade
    02-02-14 Makefile: shell:static because dll is -g => fix this situation
    01-01-01 separate -ltksh from tksh main
    
    RELEASE notes for src/cmd/tw/RELEASE
    
    12-04-11 find,tw,xargs: update to cmdopen() discipline api
    12-02-29 find.c: fix ``! -type f'' vs ``! -type f -print'' bug
    11-10-31 tw.c: handle -lexpr X2I change -- scary
    11-07-25 expr.c: fix -e sort:url core dump
    11-06-30 tw.tst: add symbol table scope tests
    11-05-05 tw.c,find.c,xargs.c: update to cmdopen_20110505 api
    11-03-03 expr.c: add sum("method") for all libsum methods
    10-11-30 tw.tst: add "begin" scope tests
    10-09-01 find.c: RE errors => exit(2)
    10-08-18 tw.tst: add expr scope tests
    10-08-18 find.c: document -exec command ... {} +
    10-08-15 tw.h,tw.c,expr.c: add file arg to compile() for --file=expr-file
    10-06-01 sync with ast api 20100601
    10-04-05 find.c: vmclose() after all usage -- doh
    10-04-05 find.c: handle -exec|-xargs with multiple {}
    07-10-26 find.c: fix default -print w.r.t. -o
    07-10-03 find.c: fix { -atime -ctime -mtime } [-+]N logic
    07-09-21 expr.c: add sumprint() default scale arg
    07-08-17 tw.c: add --snapshot
    07-05-08 find.c: fix -printf => sfvprintf() translation
    07-05-08 tw.c: provide empty *ftw for -n actions
    07-04-24 cmdarg.c,cmdarg.h: move to src/lib/libast
    07-01-06 find.c: fix dumb -empty coding bug
    06-12-07 find.c,find.tst: fix -exec/-xargs vs {} +
    06-12-07 cmdarg.c,xargs.tst: adjust ARG_MAX logic
    06-10-11 add sfstropen()/sfstruse() error checks
    06-09-27 find.c: peel off leading [-+] from all -perm
    06-07-17 find.tst: fix -perm tests
    06-05-25 find.c: fix inum (and all but size) default units
    05-06-13 tw.c: sort:path == sort:name, handle ,-separated keys
    05-03-07 xargs.c: fix -i to treat each line as an arg
    05-02-23 tw.c: add --error-exit=code to exit if cmd exit >= code
             find.c: ignore cmd errors
             cmdarg.c: fix bug that dropped a path on cmd error
    05-01-11 tw.c: --local test for directories only
    04-12-24 tw.c: cmd non-zero exit status causes tw to terminate
    04-12-08 find.c: fix `option ... path ... option' logic *again*
    04-08-01 find.c: really fix -size
    04-04-15 tw.tst: add %s scanf tests
    04-04-01 find.c: handle `-sort -KEY' and `-sort KEY'
             find.tst: add `-sort -name' for uniform results -- duh
    04-02-26 tw.tst: add scanf tests
    03-12-02 find.c: -print does not require leaf stat -- duh
    03-11-16 find.tst,tw.tst: add leading . pattern match tests
    03-11-14 updatedb.sh: add /proc to default prune paths
    03-09-23 tw.c: -L => ~FTS_SEEDOTDIR
    02-01-10 tw,find: add sfsync(sfstdout) check
    02-11-07 tw: add type==DOOR (solaris S_ISDOOR)
             find: add -type D (solaris S_ISDOOR)
    02-07-17 updatedb.sh: add --local to skip non-local directories
    02-04-18 find: fix lookup() bug that dumped on unknown keys
    02-04-03 find: add FTW_DELAY logic, fix directory -empty
             tw: add FTW_DELAY logic
    02-01-16 tw: add symlink to EXPRESSIONS doc
    01-10-31 tw,find: add slocate(1) refs
    01-07-17 xargs: fix -e -i -l option parse for backwards compatibility
             cmdarg(): fix CMD_INSERT copy that omitted leading chars
    01-05-02 tw: fix -a to use CMD_POST instead of CMD_INSERT
    01-02-06 tw,find: move --local test fslocal()
    01-01-01 find: fix -newer -anewer -cnewer -perm
    00-11-14 updatedb: add --dir-format (it was already the default)
    00-08-11 tw: add --recursive
    00-05-23 cmdarg: fix -a strchr loop (thanks dr ek)
    00-05-01 find: add [f]printx and %[xX] -- or use tw
    00-03-12 find: fix multiple PRINT with -print imbeded in ( ) -o ( )
    99-10-11 tw: tighten up --generate exit codes
             updatedb: add a few options
    99-08-11 find: fix -size
             find: undef NOGROUP NOUSER -- (net)bsd stomps again
    99-07-17 xargs: newline *and* space separated args -- duh
    99-05-24 find: fix PRINT!=0 enum logic bug
             find.tst,tw.tst: add
    99-05-21 tw: fix print --man
    99-05-09 tw,xargs: sfopen(sfstdin,0,"rt") file list
    99-04-01 find: get -o -or and -a -and disambiguation order correct
             find: -*time -*min fix
             find: -exec {} malloc bug fix
             find: fix exit status
             xargs: long options, \r\n, fix exit status
             tw: long options, fix exit status
    99-03-11 find: convert to optget()
    99-03-03 tw: CMD_INSERT instead of CMD_POST, fix `-' file list on stdin
             find: FTW_SEEDOTDIR, CMD_INSERT instead of CMD_POST
    99-02-14 cmdarg: use astconf("ARG_MAX")
             find: -fast to execute() just like tw
             find: -xargs command ';'
    99-01-23 locate,updatedb: add
             cmdarg: fix bug that did not 0 last terminator in file list
    98-11-11 find: -ls => ls -lis
             find,tw: add astconf("PATH_ATTRIBUTES") and strmatch(STR_ICASE)
    98-08-11 tw: add 32x4 file content checksum
             cmdarg: fix off-by-1 bug that lost 1 arg per cmdflush()
    98-07-01 tw: fix expr convert disc
    98-05-28 find: add -magic pattern and -mime pattern
    98-03-11 tw: fix p=pwd initialization bug
             tw: fix -m interaction bug with action
    98-02-14 find: add -icase for -fast ignorecase
             tw: add -I for -f ignorecase
             use FTW_MULTIPLE to get ordering on cmd arg dir list too
             pass dir list to findopen(read)
             tw: -G now takes format arg
    98-02-04 find: add -fast primary to handle std `find x' == `find x -print'
    97-05-09 tw: mime && magic now use PATH(ftw)
    96-11-28 find: add optget()
    96-10-11 find: fix multiple -exec bug
             tw: strdup() compile time strings!
    96-10-01 update for magic discipline
    96-05-09 add find and xargs
             tw,find,xargs now use cmdarg.[ch] for exec arg limits
             tw: add -F codes to read/write fast find codes
    96-02-29 use EXIT_STATUS() to properly report command exit status
    95-05-09 add string magic field
             add -X (don't cross device boundaries)
    95-03-11 create this file
             add -H for FTW_META|FTW_PHYSICAL
    
    RELEASE notes for src/cmd/vczip/RELEASE
    
    09-10-01 vczip.c: make discipline data static -- it may be accessed after main() returns
    09-07-04 vczip.c: first attempt to unify vcodex(--method) and codex(--transform)
    09-02-02 vczip.c: -u is now a flag (no optional arg)
    09-01-18 vczip.c: fix bug that forgot to assign src file path
    08-11-04 vczip.c: change date to official kpv -lvcodex release
    08-06-06 sync with kpv; add ast plugins and optget() usage
    05-09-25 vczip.c: fix empty input test for pipes
    05-06-16 vczip.c: snarf from kpv
    05-06-30 vczip.c: handle vcsfmeth interface change
    05-06-28 vczip.c: snarf from kpv
    
    RELEASE notes for src/cmd/warp/RELEASE
    
    12-06-22 warp.c: add utimensat()
    08-11-15 warp.c: fix time() _WIN32 intercept
    05-02-01 warp.sh: IFS may be unset and { ash bsh } don't on startup -- wow
    05-01-01 warp.c,feature/lib: add utimes() intercept with struct timespec
    04-12-09 warp.sh: %s instead of %#, add clock_gettime() intercepts
    04-07-26 warp.sh: update runtime docs
    04-07-23 Makefile: link with static ast libs
    01-10-20 warp: drop :WWW: standalone distribution
    99-11-19 warp: fix _RLD_LIST for sgi.mips4-n32
    99-05-21 add: _xstat64
    99-04-01 add :WWW:, change from function to script
    98-04-01 add in factor code and intercepts
    98-03-11 initial release
    98-03-05 first implementation
    
    RELEASE notes for src/lib/libardir/RELEASE
    
    111-08-31 ar-omf.c: fix FILENAME #pragma prototyped incompatibility
    03-09-17 ardir.c: rewind initial peek to open position in case its /dev/stdin
    03-04-05 ar-port.c: fix bug that skipped initial long name entry
             ar-port.c: handle netbsd.i386 ' <long-index>' vs. '/<long-index>'
    03-02-05 ar-port.c: handle solaris TYPE_port variation
    03-01-30 ar-port.c: handle member name length == 16 (no terminator)
    02-10-20 ardir.c: add ardirlist()
    02-08-09 ardir.c: ardiropen() fails if !S_ISREG unless ARDIR_FORCE
    02-06-11 ar-port.c: handle 4.4BSD `#1/size' long names
    02-06-06 #ifndef EILSEQ => EINVAL
    02-05-07 first release
    
    RELEASE notes for src/lib/libast/RELEASE
    
    12-07-25 pathprobe.c: fix read() loop to handle EINTR
    12-06-28 vmalloc/malloc.c: use sbrk() unless VMALLOC_OPTIONS=mmap or asoinit(0,0,0)!=0 (workaround until next malloc update)
    12-06-28 aso/aso.c: asoinit(0,0,0): 0: no specific init, 1: app initialized
    12-06-27 sfio/sfvprintf.c: allow { L* z* } aliases for I* -- posix will probably pick one
    12-06-26 regex/regnexec.c: fix uninitialized variable reference
    12-06-26 comp/setlocale.c: utf8_wctomb() now calls (the corrrect) wc2utf8()
    12-06-25 string/chresc.c: accept \u[U+<hex>] and \u{U+<hex>}
    12-06-24 regex/regcomp.c: mb [^...] must be marked "complicated"
    12-06-20 port/astconf.c: increase DEBUG_astconf error debug levels (may leach into rt output)
    12-06-18 sfio/_sfopen.c: add 'e' => O_CLOEXEC
    12-06-18 features/fcntl.c: add #define O_CLOEXEC 0 if not defined
    12-06-13 features/float: handle __mips c99 peculiarities
    12-06-13 features/standards: handle __MACH__ posix peculiarities
    12-06-08 sfio/sfclose.c,sfmode.c: sfclose() for sfopopen() stream returns sh-compatible $?
    12-06-08 comp/strtold.c: fix header botch that missed ldexpl() prototype -- ouch
    12-06-06 misc/proclib.h: partially undo <ast_standards.h> for leaked ancient bsd-isms
    12-05-31 misc/proclib.h: <ast_standards.h> for linux undefined struct mmsghdr*
    12-05-31 error.h: add ERROR_PIPE(errno) to handle EPIPE and ECONNRESET
    12-05-31 Makefile: don't install $(INCLUDEDIR)/prototyped.h: src/cmd/INIT does it
    12-05-31 regcomp.c: add (?V...) ~(V...) REG_REGEXP switch
    12-05-28 regex: regoff_t in => ssize_t via api 20120528
    12-05-21 features/asometh: split intrinsic and method tests so code only instantiated in aso.c
    12-05-21 comp/strdup.c: use oldof() since mem overwritten by string copy
    12-05-18 misc/stk.c: fix access of moved realloc() data
    12-05-15 misc/optget.c: #? option with no value should have opt_info.num==0
    12-05-11 misc/stk.c: fix memmove() read of 1 uninitialized byte
    12-05-11 regex/regcoll.c: avoid memcpy() to self
    12-05-01 port/astconf.c: fix astconflist() to list standard minmax value if defined
    12-04-26 sfio/sftmp.c: fix memory leak due to inadvertent SF_STATIC copy
    12-04-26 sfio/sfwrite.c: fix subtle memory leak (with Vmlast or Vmpool or freeBSD malloc)
    12-04-26 vmalloc/vmbest.c: SIGSEGV overcommit check for __linux__ only
    12-04-25 vmalloc: add _vmfd() for private close-on-exec fds
    12-04-23 sfio_t.h: change getr to 32 bits to prepare for UTF-8 delimiters
    12-04-23 features/signal.c: add SIGSTKFLT
    12-04-17 regex/regcomp.c: fix (E:...) vs (E)... scoping
    12-04-11 features/sys: add aix's _LARGE_FILE_API to the _LARGEFILE(64)?_SOURCE mix -- anyone else?
    12-04-11 include/cmdarg.h,misc/cmdarg.c: (finally!) add a discipline with Cmdrun_f
    12-03-28 vmalloc: int vs [s]size_t cleanup
    12-03-27 sfio: fix #if logic that caused syntax errors (on 64 bit uwin)
    12-03-10 misc/optget.c: HELP_index for "PLUGIN" too
    12-02-29 include/shcmd.h: PLUGIN_VERSION 20111111 for cdt disc/meth change
    12-02-29 comp/spawnveg.c: fix sigcritical() to include waitpid() for internal child
    12-02-29 malloc.c: make __malloc_hook initialization thread safe
    12-02-24 comp/iconv.c: fix winix UTF-8 vs UCS-2 over-conversion
    12-02-24 astsa/*.h: clean up header guards
    12-02-24 astsa/astsa.omk: clean up standalone old make makefile interactions
    12-02-21 misc/cmdarg.c: fix bug that set argv[0]
    12-02-10 sfvprintf.c: fix 1 byte too long buffer access
    12-02-07 malloc.c/features/vmalloc: add gnu __malloc_hook tests
    12-02-06 vmmopen.c: fix ALIGN vs sys/param.h macro conflict
    12-02-02 astlicense.c: add license.component for component-specific licenses
    12-01-31 spawnveg.c: fix transient bug that made invalid setpgid() call
    12-01-27 pathpath.c: fix buffer size math when internal allocation requested
    12-01-24 malloc.c: fix _vmkeep() bug that did not return previous state
    12-01-23 malloc.c: add VMALLOC_OPTIONS=break to try sbrk() block allocator first
    12-01-21 astlicense.c: option style only overrides default license.type
    12-01-18 malloc.c: disable multiple regions for tracing or !vmbest or ASO_SIGNAL
    12-01-12 sfpkrd.c: add __sun I_PEEK+rsh runtime workaround
    12-01-10 shcmd.h: void* => Shbltin_t*
    12-01-10 tmxdate.c: handle { n>=1000 } TM_PARTS
    11-12-21 plug up some memory links -- thanks mhlavink
    11-12-21 vmprivate.c: enclose VM_NONMEM exception in CLRLOCK(vm,0) ... SETLOCK(vm,0)
    11-12-13 aso: in -lposix for uwin, not -last -- just like vmalloc
    11-12-13 sfpoll.c: all streams SF_IOINTR => don't ignore EINTR
    11-12-13 sfdcslow.c: set SF_IOINTR
    11-12-09 malloc.c: add _vmkeep() for setlocale() intercept _SYS_setlocale_free_OK
    11-12-04 sfio: _Sfmaxr=0 (unlimited) by default; use ulimit -M|-d or SFIO_OPTIONS
    11-12-01 aso: sync to new api
    11-11-11 optget.c: move .TH to the top for --nroff to get our macros first
    11-11-11 aso,cdt,vmalloc: resync with kpv
    11-11-11 cdt: preserve bits and Dt_link_t for CDT_VERSION < 20111111
    11-10-24 sfvprintf.c: %.-ns truncate from left to n chars
    11-10-21 sfvprintf.c: fix %0s (no width) core dump
    11-10-10 aso: add _WIN32 support
    11-09-26 vmalloc: sync with kpv
    11-08-29 features/{dirent,wchar,wctype}: eliminate #include with no header
    11-08-25 #pragma prototyped tweaks -- sun4 is dead, long live sun4
    11-08-25 ftwalk.c: FTS_SLNONE => FTW_SL
    11-08-11 features/wchar: fix #include _nxt_wchar for K&R C
    11-08-04 optget.c: tweak --html rendering
    11-07-24 mime.c: add %(default)[st] default if arg == ""
    11-07-21 setlocale.c: fix debug locale to treat "<<" as two single byte chars
    11-06-14 spawnveg.c: pgid -1: new session -2: setpgrp()&&tcsetpgid()
    11-06-14 pathprog.c: add darwin _NSGetExecutablePath
    11-05-14 features/common,features/align.c: { _X86_ _X64_ } conditionals for generic uwin
    11-05-13 tm/tminit.c: tweak tzname[] prototype
    11-05-09 astlicense.c: add ". file" parent-relative include and depth 4 input stack
    11-05-05 cmdarg: update to cmdopen_20110505 api
    11-05-03 sfio/sfclose.c: make sure close() errors propagate to sfclose() return value
    11-04-20 port/astlicense.c: add { id name } keys
    11-04-15 fmtdev.c: fix to work for non-{blk,chr} special
    11-04-12 stk: change size args to size_t and stseek() offset to ssize_t
    11-04-12 sfio: sync with kpv to optimize large SF_STRING sfputr() buffer allocation
    11-03-28 misc/fts.c: fix FTS_SLNONE logic to set it when it should!
    11-03-17 misc/stk.c: fixed bug that could delete an active stack frame
    11-03-10 sfio/sfvprintf.c: add %0<width>s to preserve <width> trailing chars in string arg
    11-03-09 misc/magic.c: add %d...%s where if %d==1 then %s=="" else %s=="s"
    11-03-09 misc/magic.tab: add windows ico
    11-02-08 misc/stk.c: change STK_FSIZE to (1024*sizeof(char*)) for 64 bit normalization
    11-02-02 sfio/sfmode.c: don't call sfsetbuf() on unbuffered stream to make it unbuffered
    11-02-02 features/wchar: handle hp.ia64 va_list interactions
    11-02-02 comp/omitted.c: fix mismatch between stat() vs _stat()
    11-01-31 std/wctype,features/wctype: add to handle <wchar.h> interactions
    11-01-28 add -lw for ancient sunos
    11-01-28 include/magic.h,misc/magic.c: add MAGIC_ALL
    11-01-27 tm/tmxfmt.c,tmpoff.c: %_z for SHH:MM
    11-01-25 features/wchar: change <wctype.h> <wchar.h> ordering
    10-12-24 sfstrtof.h: fix thousand grouping bug that did not check last group
    10-12-21 pathkey.c: add win32 { /32 /64 } preroot to hash
    10-12-09 pathprog.c: handle intermediate path != '* and fix invalid pathpath() call
    10-12-01 astconf.c: fix look.standard undefined variable reference
    10-12-01 sfset.c: SF_LINE|SF_WCWIDTH => no need for sfsetbuf() to call isatty()
    10-12-01 sfsetbuf.c: cache /dev/null <dev,ino> to cut down /dev/null stat()'s
    10-12-01 optget.c: delay dictionary initialization until needed
    10-11-30 malloc.c: drop { VMDEBUG VMETHOD VMPROFILE VMTRACE } env checks
    10-11-30 port/astconf.c: eliminate esaccess() calls for OP_universe checks
    10-11-24 regcomp.c: [[=]=]] must at least match itself in non-C locales
    10-11-23 glob.h,glob.c: add GLOB_GROUP => REG_SHELL_GROUP
    10-11-20 glob.c: handle mode switches across /
    10-11-19 regcomp.c: REG_SHELL => REG_CLASS_ESCAPE
    10-11-16 vmalloc.h: add VMFL tracing to vmstrdup()
    10-11-16 ast.h: simplify VMDEBUG _BLD_DEBUG and VMFL logic
    10-11-12 tm/tmlocale.c: ast TM_* extensions default to C locale
    10-11-10 regex/regnexec.c,vmalloc/vmstat.c: eliminate strict-aliasing puns
    10-10-20 misc/translate.c: change debug translation to drop " in (a,b,c,"d")
    10-10-10 misc/glob.c: drop ancient D_FILENO(d)!=0 test and trust readdir()
    10-10-06 misc/translate.c: fix "debug" locale logic
    10-10-04 misc/magic.c: fix magic() skip check to honor the continuation
    10-10-04 regex/regcoll.c: add wchar_t* args to regcollate(), drop ucs name lookup
    10-09-28 comp/setlocale.c: add utf8_wctomb()
    10-09-28 string/chresc.c,regex/regcoll.c: fix \S[.X.] (\C[.X.] never worked!)
    10-09-24 string/chresc.c: \Cc for control c, \S[.X.] for collating symbol X
    10-09-24 string/chresc.c: { \cc \e } deprecated
    10-09-22 regex/regcomp.c: fix off-by-one collation class allocation bug
    10-09-20 regex/regclass.c: fix CTYPES off-by-one bug
    10-09-14 comp/conf.sh: const int conf_elements, prefix_elements;
    10-09-08 add features/sizeof => ast_sizeof.h
    10-08-31 comp/getopt[l].c: export functions for dlls
    10-08-25 port/lc.c: add features/locale check for canonical UTF-8 spelling
    10-08-20 include/ast.h: add export plugin_version() prototype
    10-08-20 comp/conf.tab: add SF_BUFSIZE
    10-08-11 misc/conformance.c: conformance(0,0) => "standard"
    10-08-11 misc/conformance.c: check ast_env_serial for dynamic astconf() changes
    10-08-11 port/lcgen.c: remember to fudge Table_t.count for synthesized entries
    10-08-04 include/ast.h,comp/setlocale.c: add { debug C.UTF-8 } mbalpha() mbwidth()
    10-08-02 misc/translate.c: add NLSPATH message cache check
    10-07-29 string/fmtint.c: fix nasty bug that rendered "1000" as "1"
    10-07-27 setlocale,lsgen,localeconv: handle C vs C_EU decimal thousands sep
    10-07-26 misc/optget.c: fix interaction with nested plugin/builtin calls
    10-06-29 string/strtoi.h: strton() multiplier 1 => power of two suffix
    10-06-28 features/wchar: handle systems that require __va_list => va_list
    10-06-28 comp/conf.tab: another PID_MAX tweak -- default to 99999 for most
    10-06-28 port/astconf.c: lone "CONFORMANCE = standard" => all defaults standard
    10-06-25 misc/optget.c: avoid sfprints() call during initialization
    10-06-01 features/api, ast_api.h: formalized forwards/backwards api compatibility
    10-06-01 _AST_API=20100601: add size_t args for all path*() output buffers
    10-06-01 comp/setlocale.c: handle C.UTF-8 test locale
    10-06-01 include/mc.h: add size_t to mcfind() for result buffer (internal api)
    10-06-01 use strlcpy() instead of strncpy()
    10-05-28 include/ast_version.h: add AST_PLUGIN_VERSION for dllplugin()
    10-05-28 include/shcmd.h: add SH_PLUGIN_VERSION for dllplugin()
    10-05-28 misc/conformance.c: add conformance(3)
    10-05-28 misc/optget.c: add [(id1|id2)...] conformance("id1|id2",0) conditionals
    10-05-25 include/sfhdr.h: adjust SF_NMAP according to _ptr_bits
    10-05-25 include/shcmd.h: add sh_builtin() macro for lib_init() table initialization
    10-05-21 misc/optget.c: --html \bfoo::bar([[:digit:]][[:upper:]]*) => foo-bar.html
    10-05-15 include/proc.h,misc/procopen.c: add PROC_ORPHAN
    10-05-09 misc/optget.c: add --???MAN[section] --???SECTION
    10-05-07 sfio,stdio: fix all snprintf() variants to handle buf==0 and/or n==0
    10-05-04 string/fmtesc.c: add mb iswsoace() and iswcntrl() quoting checks
    10-05-03 fix LC_MESSAGES catalog lookup bugs, check for $set==3, accept $set==1
    10-04-30 string/chresc.c: add chrexp() for FMT_EXP_*
    10-04-30 string/stresc.c: add strexp() for FMT_EXP_*
    10-04-30 string/chresc.c: fix \uXXXXY bug that consumed Y
    10-04-22 misc/optget.c: check for html entities in <A name="...">
    10-04-22 misc/getcwd.c: add features/syscall check for SYSGETCWD() { linux solaris }
    10-04-22 string/stresc.c: wide chars absent locale guidance default to UTF-8
    10-04-12 port/mnt.c: favor bsd getfsstat() over getmntinfo()
    10-04-11 string/strtoi.h: k (1000) and ki (1024) now differentiated
    10-04-10 misc/recstr.c: fix 'd[delimiter]' parse
    10-04-08 include/vmalloc.h,vmalloc/vmstat.c: add Vmstat_t.mode region mode bits
    10-04-05 misc/fts.c: drop 1997-01-07 fts_open()=0 is one file and stat() fails
    10-04-05 misc/optget.c,optlib.h: add Optpass_t.release for --nroff .TH
    10-04-02 misc/optget.c: fix $'[-n?\n...]' --version bug
    10-04-02 regex/regcomp.c: ~(X) => REG_EXTENDED|REG_AUGMENTED, ~(PU) instead of ~(U)
    10-03-24 misc/procopen.c: add PROC_FD_CTTY(fd)
    10-03-24 path/pathtemp.c: fix pointer => int casts
    10-03-15 regex/regcache.c: fix 1 byte buffer overflow (didn't count trailing \0)
    10-03-08 features/tvlib: fix utimensat probe to include all macros/structs
    10-03-07 features/lib: change stream_peek to test pipes only
    10-03-07 string/strelapsed.c: fix next char return overrun
    10-03-06 tm/tvtouch.c: use runtime fallback if utimensat() fails with ENOSYS
    10-03-05 path/pathtemp.c: add pfx /seed for regression testing
    10-03-04 vmalloc/vmwalk.c: add user supplied handle arg
    10-03-04 path/pathtemp.c: properly handle mktemp()-style *+(X) templates
    10-03-03 include/ast_getopt.h: remove NULL guard - _AST_GETOPT_H now handles it
    10-02-24 comp/getopt.h: fix ast_std.h interactions
    10-02-24 vmalloc/malloc.c: empty { VMALLOC_OPTION VMDEBUG ... } => no debug!
    10-02-02 string/base64.c: fix corner case output buffer overflow
    10-02-02 features/fs: sys/mnttab.h requires stdio.h on some systems!!
    10-02-01 misc/optget.c: uppercase --html heading -- doh
    10-01-29 misc/optget.c: [+NAME?...] overrides error_info.id for >= STYLE_man
    10-01-25 vmalloc/vmprivate.c: fix seg ptr initialization bug (24 years old!!)
    10-01-20 misc/optget.c: handle nested {...} rendering
    10-01-20 misc/state.c: add ast.version for runtime api version
    10-01-20 port/astconf.c: "_AST_VERSION" now returns ast.version
    10-01-20 include/ast_std.h: add ast.version for runtime api version
    10-01-19 astlicense.c: add epl
    10-01-01 vmalloc: VMALLOC_OPTIONS env var for all runtime options
    10-01-01 include: change some <ast.h> refs to less intrusive <ast_*.h>
    10-01-01 setlocale.c,translate.c,fmterror.c: AST_LC_internal retains prev state
    10-01-01 comp/setlocale.c: AST_LC_setenv defers to LC_ALL (for sh)
    10-01-01 ast_std.h: add { AST_LC_internal AST_LC_setenv }
    09-12-24 comp/setlocale.c: fix setlocale(LC_ALL,"") when already initialized
    09-12-17 misc/optget.c: handle mixed solaris usage="x:f:(in)yo:(out)"
    09-12-11 regex/regcomp.c: posix semantics for [z-a]
    09-12-11 regex/regcomp.c: fix BRE/ERE ^^ logic
    09-12-11 regex/regcomp.c: fix regcomb() for REG_LEFT|REG_RIGHT
    09-12-11 regex/regcomp.c: bm complete=0 if REX_END
    09-12-11 comp/sigflag.c: add with npt check in features/sig.sh
    09-12-11 tm/tminit.c: fix _tzset_environ logic
    09-12-09 tm/tmlocale.c: include "ast_nl_types.h" to pull nl_langinfo in!
    09-12-04 features/options: add "opt map-libc" check
    09-12-03 tm/tmxdate.c: fix 'next month final day' for dec -> jan
    09-11-21 misc/magic.tab: add gimp XCF
    09-11-20 vmalloc/vmtrace.c: add pid to assertion disgnostics
    09-11-11 regex.h,regcomp.c: add REG_CLASS_ESCAPE, \ inside [...] literal by default
    09-11-03 regex/regcache.c: change to variable length pattern strings
    09-10-28 include/error.h: fix ERROR_translate() arg parens
    09-10-26 port/lcgen.c,comp/setlocale.c: handle LANG init after LC_* already defined
    09-10-05 _sfopen.c: add but ignore 'F' flags for stdio compatibility
    09-09-28 fts.h,ftwalk.h,fts.c: promote { namelen pathlen level } to (s)size_t
    09-09-28 locales: add AST_LC_LANG for $LANG
    09-09-28 setlocale.c: fix logic for dynamic { LANG LC_ALL LC_* } changes
    09-09-17 include/sfio.h,sfio/sfwalk.c: add sfwalk()
    09-09-09 sfio/sfputr.c: add SIGPIPE hang fix
    09-08-24 sfio/sfreserve.c: fix SF_UNBOUND logic with pushed streams
    09-08-18 include/ast_std.h,ast.h: add ast.mb_sync to sync mbchar() after error
    09-08-17 comp/setlocale.c: add AST_LC_utf8 and { utf8_mbtowc() utf8_mblen() }
    09-08-11 comp/setlocale.c: treat "en"/"en_US" AST_LC_MESSAGES as "C"/"POSIX"
    09-08-10 vmalloc/vmhdr.h: add user-defined _AST_PAGESIZE and computed VMHEAPINCR
    09-08-09 comp/conf.tab: add NPROCESSORS_MAX
    09-07-29 astlicense.c: fix first name=value logic error
    09-07-22 string/fmtip6.c: don't drop trailing 0 in 44::1:0:0
    09-06-30 port/astconf.c: standard PATH_RESOLVE is "physical" (not "metaphysical")
    09-06-19 vmalloc: sync with kpv
    09-06-19 include/shcmd.h: add sh_context(p) cast
    09-06-11 misc/magic.tab: differentiate pc 386 32/64 bit dll/exe/obj
    09-06-06 port/astconf.c: fix look->name null pointer reference
    09-06-05 port/astconf.c: fix 'UNIVERSE = value' synthesize logic
    09-05-25 tm/tmxduration.c: add
    09-05-08 comp/syslog.c: add _UWIN /var/log/syslog preference
    09-05-01 comp/setlocale.c: fix _UWIN intercepts to return NiL on unknown locales
    09-04-27 sfio/sfpool.c: fix bug that did not return pool on delete
    09-04-22 include/regex.h,regex/regcomp.c: add REG_REGEXP <regexp.h> compatibility
    09-04-15 tm/tmxdate.c: handle "4th thursday in november"
    09-03-31 string/strvcmp.c,string/strnvcmp.c: add version strcmp(3)
    09-03-31 string/strpcmp.c,string/strnpcmp.c: add path prefix strcmp(3)
    09-03-29 misc/optget.c: clean up num = number casts
    09-03-04 tm/tmxmake.c: add tmxtm() with zone override
    09-03-03 tm/tmxfmt.c: add %(...)<c>, specifically %(...)z for output zone
    09-02-22 tm/tmxdate.c: add iso P... durations
    09-02-02 path/pathprog.c: add
    09-02-02 misc/opthdr.h,optget.c: fix flags mixup, handle old '-' as option
    09-02-02 sfio/sfprints.c: fix sfvaprints() return value to not count trailing '\0'
    09-02-02 misc/cmdarg.c: handle !defined(ARG_MAX)
    09-02-02 port/astconf.c: fix UNIVERSE overwrite of null[] value!
    09-01-31 features/sys: drop header sys/localedef.h
    09-01-28 include/fs3d.h,misc/fs3d.c: mount() => fs3d_mount() for diff std prototypes
    09-01-14 misc/fts_open.c: delay top list reorder until first fts_read()
    09-01-14 include/ls.h: LS_W_INUMBER => 9 to accomodate large st_ino
    09-01-14 misc/optget.c: expand STYLE_usage input text
    09-01-09 features/uwin,stdio/_stdfun.c: iffe for _p__iob and __p__iob
    09-01-09 misc/magic.tab: add ISO filesystem image entries
    09-01-07 string/strtoi.c: strtol() etc. do not consume [lLuU] suffix -- thanks jkf
    09-01-07 sfio/sfstrtof.h: strtod() etc. do not consume [fFlL] suffix -- thanks jkf
    09-01-05 string/strlcat.c: fix logic to match docs (not that easy)
    08-12-30 tm/tmxdate.c,include/tm.h: add TM_WORK { "workday" "working" "work" }
    08-12-28 sfio/sfcvt.c: fix 'a' format rounding
    08-12-21 tm/tmdata.c: add 2008-12-31+23:59:60-0000 leap second event
    08-12-19 tm/tmxdate.c: check for dates near the epoch rolling back to the future
    08-12-19 tm/tmxfmt.c: change %s for now==0 to be the epoch
    08-12-07 include/ast_std.h,misc/getenv.c: no _ast_getenv for uwin ast54 compatibility
    08-12-07 tm/tmxfmt.c: add %[_][EO]K for [space pad] [full|long] iso
    08-12-07 sfio/sfvscanf.c: fix ok[] short by one allocation
    08-12-07 comp/setlocale.c: fix off by one composite initialition loop test
    08-12-07 path/pathkey.c: fix off by one loop test
    08-12-04 vmalloc/vmbest.c: catch sbrk() wraparound
    08-12-04 comp/spawnveg.c: clean up attrs on failure too
    08-11-04 regex/regcomp.c: fix locale [!-...] and [^-...] re-initialization
    08-11-04 stdio: add flockfile.c ftrylockfile.c funlockfile.c
    08-10-24 port/astconf.c: handle multiple/trailing '/' in universe initialization
    08-09-10 misc/magic.c: handle old vcodex() indices
    08-09-10 sfio/sfvprintf.c: drop SF_WCWIDTH, use %Lc or %Ls instead
    08-09-05 Makefile: ibm.risc joins the :NOOPTIMIZE: crowd
    08-09-04 regex/regnexec.c: fix nested delimiter match beyond end of subject
    08-08-20 misc/fts.c: fix st_nlink stat() optimization logic
    08-08-19 sfio/sfpkrd.c: workaround macosx recv(PEEK) data consumption on non-socket
    08-08-19 strn?tol?d: handle long double with smaller exponent range than double
    08-08-18 sfio/sfcvt.c: eliminate excessive multiplies and integral overprecision
    08-08-11 tm/tmxfmt.c: handle %10N and %010N
    08-08-06 include/shcmd.h: add 'int invariant;' for builtin invariant arg count
    08-08-05 features/ndbm: favor sleepycat ndbm compatibility
    08-07-21 include/glob.h,misc/glob.c: GLOB_STARSTAR only forces lstat on chdir
    08-07-17 sfio: sync with kpv
    08-07-17 misc/optget.c: call astwinsize() each time terminal width required
    08-07-16 sfio/sfvscanf.c: fix %% to skip leading space per posix
    08-07-16 vmalloc/vmbest.c: add VMCHECK=m, VM_mmap to favor mmap() alloc
    08-07-16 features/stdio,stdio/f(read|write).c: size_t return value!! ouch
    08-06-24 tm/tmxfmt.c: fix %z to handle tm_isdst -- doh
    08-06-24 misc/astintercept.c,misc/getenv.c: split from misc/setenviron.c
    08-06-17 misc/setenviron.c: add { astintercept() getenv() }
    08-06-09 tm/tmlocale.c: use _DATE_FMT if defined for TM_DEFAULT
    08-06-06 misc/optget.c: handle sub-component about details
    08-06-04 misc/optget.c: fix [-n?\n...\n] version parse
    08-06-04 include/debug.h,misc/debug.c: merge with kpvdebug.h
    08-06-02 features/ndbm: add to tame dbmlib.iffe replication
    08-06-01 comp/resolvepath.c,realpath.c: fix resolvepath() return value type
    08-05-22 tm/tmxdate.c: fix a few ordinal/last/this/next bugs
    08-05-18 string/fmtre.c: fix omitted stack var initialization bug
    08-05-14 regex/regcomp.c,regcoll.c: fix UTF-8 collation sequence logic
    08-05-11 tm/tmxfmt.c: :NOOPTIMIZE:, otherwise %Q/../../ fails
    08-05-01 tm/tmxdate.c: mon 1..12 => mon[13] -- doh
    08-04-30 misc/glob.c,reegex/regcomp.c: ~(R) => ~(O) to avoid pcre clash
    08-04-24 port/astconf.c: 'name = value' does assignment without system init
    08-04-15 port/astconf.c: SC#N treated like 'SC(N)'
    08-04-14 misc/optget.c: clean up nroff output
    08-04-01 port/astconf.c: add RELEASE => /proc/version fallback
    08-03-30 misc/optget.c: [-n]... to enable -number & +number options
    08-03-06 misc/optget.c: ---* and +++* are now operands
    08-03-06 misc/errorx.c: fix old error_info.translate workaround
    08-02-05 regex/regcomp.c: allow REG_SHELL {,n}... => {0,n}...
    08-02-27 misc/stk.c: top element during allocation relocated to top
    08-02-18 include/ip6.h,string/strtoip6.c,fmtip6.c: add ipv6 addr support
    08-02-14 regex/regsubexec.c: fix null match (tricky)
    08-02-14 regex/regsubcomp.c: fix SRE to match ksh
    08-02-11 comp/spawnveg.c: return proper errno on [v]fork() failure
    08-02-11 tm/tmxdate.c,tmdata.c: handle more ISO 8601:2000 forms
    08-02-02 regex/reglib.h: add REGMULTIREF to REG_COMP
    08-02-02 string/strmatch.c: fix str="" pat="" sub values
    08-01-31 comp/conf.sh,conf.tab: handle /bin/sh \ in read data, redir subshell
    08-01-18 misc/magic.tab: amd-x68, 64-bit => x86-64
    08-01-18 string/strnton.c,strntonll.c: add
    07-12-10 string/strelapsed.c: "0" is a valid elapsed time!
    07-12-02 sfio/sfreserve.c: preserve SF_SHARE sfrd() via sfreserve(f,0,0)
    07-11-21 comp/setlocale.c: add sjis_mbtowc() to work around [\~] translation
    07-11-15 features/signal.c: RT(1) .. RT(MAX-1) => RTMIN+1 .. RTMAX-1
    07-11-14 features/float: favor sscanf() due to gnu strto[l]d() nan bugs
    07-10-31 regex/regcomp.c: fix REX_COLL_CLASS node allocation size
    07-10-31 sfio/sfcvt.c: use signbit() if available
    07-10-31 features/isoc99: _ISOC99_SOURCE tests
    07-10-31 port/astmath.c: add -DN=8 for signbit()
    07-10-31 sfio/sfstrtod.h: don't forget about -0.0
    07-10-26 features/map.c: add { optopt optarg optind opterr }
    07-10-26 features/stdio: add _filbuf => _ast__filbuf
    07-10-26 comp/getsubopt.c: fix #undef that interfered with <ast_map.h>
    07-10-26 regex/regcomp.c: fix bug that missed ')' in ~(F)...
    07-10-12 port/astconf.c: fix CONF_ALLOC 16 bit overflow
    07-10-12 misc/fts.c: fix fts_close() to free the handle -- doh
    07-10-11 comp/setlocale.c: second and subsequent setlocale(*,"") reverts to previous
    07-10-11 path/pathprobe.c: add vfs ST_NOSUID check
    07-10-10 comp/conf.tab: add a few more xpg6 deferrals
    07-09-28 astsa: update to share with mainline src via _PACKAGE_astsa
    07-09-25 sfio/sfgetr.c: no limit on string stream line size
    07-09-25 sfio/sfextern.c: increase _Sfmaxr to 256*1024
    07-09-18 misc/procopen.c: tighten up SIGCHLD logic between parent/child
    07-09-18 misc/signal.c: unblock SIG_DFL after setting handler, sig<0 => don't unblock
    07-09-13 misc/fs3d.c: no $LD_PRELOAD => no 3d and avoids invalid mount(2) call
    07-09-11 vmalloc: vmstat(0,0)==1 => region in use, drop VM_primary|VM_secondary
    07-09-05 misc/recstr.c: handle [lL] gobbled by strtol() -- ouch
    07-08-17 path/pathprobe.c: handle '\r' in VERSION string
    07-07-17 regex/regcache.c: regcache(0,n,0) extends cache to size n (no shrinking)
    07-07-16 tm/tmdata.c: add 2005-12-31, drop 1999-12-31 (where did that come from?)
    07-05-21 tm/tmxfmt.c,tmxscan.c: %F => %L (TM_DEFAULT); %F => %Y-%m-%d
    07-05-15 sfio/sfvprintf.c: %h? and SFFMT_SHORT => raw bytes
    07-05-09 features/signal.c,features/siglist: use kill -l & strsignal()
    07-04-25 misc/optctx.c: add for opt_info switching
    07-04-24 misc/cmdarg.c,include/cmdarg.h: add CMD_CHECKED, CMD_SILENT
    07-04-24 misc/procopen.c,include/proc.h: add PROC_CHECK
    07-04-24 misc/procrun.c: add flags arg (current use PROC_ARGMOD)
    07-04-24 misc/cmdarg.c,include/cmdarg.h: move from src/cmd/tw
    07-04-20 port/(lclang.h|lc.c|mc.c|lclib.h|lcgen.c): separate lctab.c
    07-04-20 comp/conf.sh: defer to systems without 'grep -q' -- sigh
    07-04-20 comp/conf.sh: probe for LL integer constant initializer suffix
    07-04-20 include/syslog.h: <namval.h> => <ast_namval.h> for win32
    07-04-20 ast_namval.h: add as copy of include/namval.h for win32
    07-04-19 comp/conf.tab: fix SVID SI entries to probe SI_* (not _SI_*)
    07-04-13 tm/tmxdate.c,tm/tmzone.c: handle [-+]0000 UTC zone offset
    07-04-11 sfio/sfvprintf.c: add %F, propagate SFFMT_UPPER
    07-04-11 sfio/sfcvt.c: handle SFFMT_UPPER => nan/inf vs. NAN/INF
    07-04-02 comp/conf.tab,comp/conf.sh: add C/POSIX <stdint.h> symbols
    07-03-28 misc/optget.c: fix l10n --?-
    07-03-25 features/common: fix { ast_std.h ast_map.h stdint.h } logic
    07-03-21 error.h: move from error_info to (*_error_data_)
    07-03-21 misc/error.c: add errorctx() for error_info switching
    07-03-21 option.h: move from opt_info to (*_opt_data_)
    07-03-19 regex/regdecomp.c: fix REX_ONECHAR escapes and add REX_KMP
    07-03-11 tm/tmxscan.c,regex/regnexec.c: fix strict-alias transgressions
    07-02-27 comp/conf.sh: handle native getconf invalid numeric values
    07-02-21 comp/conf.sh,comp/conf.tab: handle SSIZE_MAX vs _POSIX_SSIZE_MAX
    07-02-20 sfio/sfvprintf.c: handle SF_WCWIDTH justification
    07-02-14 features/common: cover <stdint.h>, move to int_(bits)_t
    07-02-14 include/int.h: drop
    07-02-14 include/sfio.h: add SF_WCWIDTH
    07-02-12 comp/conf.sh: fix CONF_LIMIT bug that missed ULONG_MAX etc.
    07-02-12 comp/conf.tab: *LONGLONG* => *LLONG* to match posix
    07-02-12 features/float: *LONGLONG* => *LLONG* to match posix
    07-02-12 port/astconf.c: handle CONF_LIMITS_DEF with no deferral
    07-02-12 stdio/vasprintf.c: add trailing '\0' -- doh
    07-02-04 string/fmtelapsed.c: fix naive multi month/year logic
    07-02-02 misc/optget.c: add --??posix for getopts(1)/getopt(3)
    07-01-26 string/chresc.c: use mbchar()
    07-01-26 misc/optget.c: handle "o:-:" usage for old-style long options
    07-01-22 sfio/sfdisc.c,sfpool.c: handle push on streams with pending peek
    07-01-22 include/sfio.h: mv Sfieee_t to sfio/sfhdr.h
    07-01-17 tm/tmxfmt.c: fix terminating nil logic which clobbered size-1
    07-01-11 misc/stk.c: a 2 day marathon bug fix (can we release now dr ek?)
    07-01-05 comp/spawnveg.c: posix_spawnattr_setflags(POSIX_SPAWN_SETPGROUP)
    07-01-05 misc/error.c: fix multibyte vs. printable logic
    07-01-01 comp/conf.sh: LC_ALL=C
    06-12-26 tm/tmxdate.c: handle nn*.nnnn* == sec.ns
    06-12-20 features/libpath.sh: generalize sol.* LIBPATH patterns
    06-12-18 comp/setlocale.c: include ast_standards.h and ast_wchar.h !
    06-12-12 string/strperm.c: octal modes are absolute!
    06-12-11 comp/conf.tab: always defer ARG_MAX
    06-12-07 Makefile: fix conftab.c generation CCFLAGS to match build - doh
    06-12-04 sfio/sfcvt.c: fix (int) vs. (long) cast mismatches
    06-12-01 comp/conf.tab: add changes to cover solaris { bin xpg4 xpg6 }
    06-12-01 regex/reginit.c: adjust { SRE KRE } escaped (){}*? inside [...]
    06-12-01 sfio/sfcvt.c: add signbit/copysign tests
    06-11-22 comp/spawnveg.c: fix _real_vfork logic to work with 3d
    06-11-20 features/common: bias _ast_int8_t "long long" before "__int64"
    06-11-20 string/strperm.c: fix X to work with all ops (not just +)
    06-11-15 astconf.c,conf.tab: add CONF_DEFER_* for variable constants
    06-11-11 port/astconf.c: validate path arg w.r.t. underlying calls
    06-11-11 comp/conf.sh: fix S CONF_STANDARD bug, add D to defer to native
    06-11-11 comp/conf.tab: add D to defer to native
    06-11-01 include/vmalloc.h: avoid VM_FLAGS sys/v*.h clash
    06-11-01 include/ast.h: add FMT_PARAM for fmtquote()
    06-10-31 disc/sfdcseekable.c: add SFSK_DISCARD for seekable window control
    06-10-31 comp/spawnveg.c,features/lib: handle posix_spawn exit status 127
    06-10-30 features/lib: fix posix_spawn() fork() prototype conflicts
    06-10-30 string/fmtscale.c: fix 1024 rounding bugs
    06-10-27 disc/sfkeyprintf.c: handle 'i' (=='d') -- oops
    06-10-26 sfio/sfvprintf.c: %#d => fmtscale(1000), %#i => fmtscale(1024)
    06-10-26 features/map.c: _map_libc cleanup
    06-10-26 features/fcntl: add to the circle of trust
    06-10-26 features/sys: add <sys/socket.h> socklen_t
    06-10-26 include/regex.h: handle include before <ast_map.h>
    06-10-25 astconf "SHELL" => "SH" to avoid _POSIX_SHELL conflict
    06-10-25 comp/conf.*: drop no-op duplicate conftab.c entries
    06-10-18 string/fmtscale.c: 1000: n[.]n[n](kMGTPE), 1024: n[.]n[n](KMGTPE)i
    06-10-11 ast_std.h: now implies <sys/stat.h> (did on most before anyway)
    06-10-11 strtoi.h: ignore sign for 0, validate scale shift
    06-10-11 strdup.c,vmstrdup.c: handle 0 arg
    06-10-11 add sfstruse()/sfstropen() error checks
    06-10-10 misc/procopen.c: envv==environ => don't modify environ
    06-10-10 misc/procclose.c: return valid exit(1) status
    06-10-06 port/astconf.c,comp/conf.sh,comp/conf.tab: play nice with getconf(1)
    06-10-01 comp/conf.tab: SHELL default checks { _CS_PATH } X { ksh ksh93 sh }
    06-10-01 comp/conf.sh: export CONF_getconf to shell actions
    06-10-01 comp/putenv.c: always enable setenv() for procopen()
    06-10-01 misc/procopen.c: use pathshell() or astconf("SHELL",0,0) if PARANOID
    06-10-01 path/pathshell.c: localize the shell path patterns and accept ksh93
    06-09-28 Makefile: avoid ast <stdio.h> vix iffe -X ast -- doh
    06-09-27 regex/regdecomp.c: add
    06-09-26 regex/regcomp.c: handle KRE ~(...)<invalid-kre>
    06-09-25 reorganize to avoid native header intercepts
    06-09-15 uwin/crypt.c: _UWIN only!
    06-09-14 Makefile: tweak the ast_common.h bootstrap again (finally?)
    06-09-14 misc/optget.c: noncommercial => OPT_proprietary
    06-09-12 string/strelapsed.c: fix multi-char qualifier parse
    06-09-12 string/strtoi.h: drop [cClLqQwW] multipliers
    06-09-11 misc/optget.c: add numeric arg validity check
    06-09-07 misc/optget.c,tm/tmfix.c: fix uninitialzed var refs
    06-09-05 path/pathprobe.c: add version header verification
    06-08-01 Makefile: handle iffe vs FEATURE/common vs ast_common.h
    06-08-31 Makefile: add ast_map.h to the bootstrap list
    06-08-30 misc/glob.c: fix ~(E)re bug that stripped ~(E) before regcomp
    06-08-30 include/ast.h: add { integralof(x) pointerof(x) }
    06-08-27 string/strelapsed.c: fix off-by-one (too little) parse bug
    06-08-25 misc/optget.c: 0*<n>.* numeric option args => <n>.*
    06-08-22 misc/glob.c: handle ~(...) pattern options
    06-08-16 string/strelapsed.c: fix off-by-one (too far) parse bug
    06-08-16 regex/regcomp.c: accept but ignore ~(N)
    06-08-14 features/libpath.sh: add solaris LD_LIBRARY_PATH_64 check
    06-08-05 sfio/sfpool.c: pool SF_READ|SF_WRITE loop fix
    06-08-02 misc/fts.c: fix FTS_NOSTAT optimization to check for ..
    06-07-28 include/glob.h: add gl_extra for user globlist_t expansion
    06-07-27 features/common: #include "ast_map.h"
    06-07-26 comp/fnmatch.[ch]: allow <ast_map.h> to map fnmatch()
    06-07-22 cdt: snarf from kpv
    06-07-17 string/strperm.c: perm==-1 skips umask(1)
    06-07-17 sfio/sfvprintf.c: handle format invalid mb seq
    06-07-17 regex/regcomp.c: inline REG_SHELL => anchored, otherwise not
    06-07-17 regex/regcomp.c: inline B|G:basic E:REG_EXTENDED F|L:REG_LITERAL
    06-07-17 regex/regcomp.c: inline l:REG_LEFT r:REG_RIGHT
    06-07-17 regex/regcomp.c: inline a:REG_LEFT|REG_RIGHT p:~REG_LENIENT
    06-07-17 string/chresc.c: add \Uxxxxxxxx
    06-07-17 sfio/sfstrtof.h: ignore thousands sep after decimal
    06-07-17 string/tokline.c: splice() => spliceline() for bsd
    06-06-27 features/float,sfio/sfcvt.c: fix Nan logic
    06-06-27 port/astmath.c: fix long double isnan() test
    06-06-27 features/map.c: _map_libc for std => _ast_std
    06-06-25 string/strperm.c: handle posix = w.r.t. umask
    06-06-19 port/mnt.c,features/fs: handle netbsd getmntent api change
    06-06-18 regex/regstat.c: add REG_LITERAL check
    06-06-11 cdt/dtview.c: update from kpv
    06-05-31 sfio/sfhdr.h: fix _SFOPEN() typo
    06-05-09 comp/conf.sh: add native getconf -a names to the mix
    06-04-28 misc/optget.c: add solaris long option name compatibility
    06-03-09 string/strmatch.c: add REG_ADVANCE => REG_* flags
    06-02-14 comp/iconv.c: fix uwin iconv_list() /reg/ generator
    06-02-10 port/astconf.c: relax standard prefix filter
    06-02-08 sfrd.c,sfsync.c: lock logic bug fix
    06-02-01 port/astlicense.c: add { parent incorporation }
    06-01-26 port/astconf.c: fix { LIBPREFIX LIBSUFFIX } length
    06-01-06 features/lib: change _UNIV_DEFAULT probe to use cross{...}
    06-01-04 misc/stk.c: fix n**2 realloc behavior
    06-01-01 include/sfio.h: export { _Sfi _Sfmaxr }
    05-12-13 string/chresc.c: handle \C-X => control-X, \M- => ESC
    05-11-22 regex/regcache.c: add, convert string/strmatch.c to regcache()
    05-10-06 string/ccmap.c: update ebcdic-u to be idempotent
    05-09-28 vmalloc: snarf from kpv; fixes large block brk() thrashing
    05-09-26 misc/magic.c,misc/magic.tab: handle latest vcodex header
    05-09-12 misc/optget.c: reset opt_info.offset on error
             string/strtoi.h: strton() '.' multiplier only if m>1
             string/fmtesc.c: add unadvertized FMT_PARM for FMT_SHELL
    05-09-09 string/fmtesc.c: fix FMT_SHELL logic w.r.t. [$`]
    05-08-11 string/strerror.c: fix { sys_errlist sys_nerr } prototypes
    05-08-03 sfio: snarf sfvaprints sfaprints
    05-07-21 port/astconf.c: retain most recent synthesized lookup
    05-07-20 sfio/sfsetbuf.c: default file io size now 64K on all systems
    05-07-17 ccmap*: add microfocus cobol EBCDIC_U
    05-06-29 regex/regcomp.c: fix the A & B inline flag logic
    05-06-15 include/recfmt.h: add fs format flag to fmtrec()
    05-06-14 error.c: add ERROR_OPTIONS { break count match }
    05-06-07 features/stdio: drop FEATURE/limits to fix bootstrap circular dep
    05-06-02 features/*,Makefile: drop vestigel iffeio.h bootstrap workaround
    05-05-31 string/fmtbuf.c: unlock (spin) before each return -- doh
    05-05-30 sfio/sfpkrd.c: work around macos 10.4 recv(MSG_PEEK) bug
    05-05-27 regex: add REX_NEST (?%[S.][T.][OT])
             magic.tab: ammend bsd db magic
    05-05-23 regex: REX_NEST (?%[D.][E.][L.][Q.][oc]...)
    05-05-21 regex: state.fold[] is now locale specific -- doh
    05-05-19 regex: add REX_NEST (?%\\()<>[]""...) %(...) nested match
    05-05-15 recfmt.h: add recstr() reclen() fmtrec()
    05-05-13 optget.c: allow boolean options to take numeric values
    05-05-12 recfmt.c: add to recfmt.h, adjust Recfmt_t encodings
    05-04-30 sfio: add sfmaxr(), default 64K
    05-04-22 comp/omitted.c: fix magic() logic for files < 512 bytes
    05-04-20 cdt: snarf update from kpv; void* Dt_t.user added
             misc/error.c: library => ERROR_LIBRARY
    05-04-19 regex/regcomp.c: handle REG_SHELL [^...] == [!...]
    05-04-11 tm/tmxscan.c: handle yyy.mm.dd[-+.]hh.mm.ss.nnnnnn
    05-04-07 regex/regnexec.c: fix out of bounds boundary check -- ouch
             features/align.c: add jmp_buf to the alignment mix (ia64)
             vmalloc/vmhdr.h: add jmp_buf to the alignment mix (ia64)
    05-03-31 misc/optget.c: fix option { - _ } separator matching
    05-03-30 misc/glob.c: eliminate superfluous GLOB_NOMATCH stat() calls
    05-03-24 port/astwinsize.c: include <sys/ioctl.h> if possible
    05-03-23 string/ccmap.c: add ebcdic-m mvs cobol table
    05-03-11 comp/omitted.c: handle utime[s](const,const)
             comp/conf.tab: fix linux PID_MAX probe
    05-03-10 comp/setlocale.c: LC_* value "" => unset -- doh
             misc/optget.c: reorder _PACKAGE_astsa code for msgcc
    05-03-08 misc/optget.c: delete leading space in STYLE_nroff output
    05-03-07 sfio/sfhdr.h: drop extern _sfdscan -- clashes with sfvscanf.c static
    05-03-01 tm/tminit.c: add tmlocaltime() for tzset() getenv() override workaround
    05-02-20 features/tvlib: tmsettimeofday only for systems that have settimeofday
             features/float: fix mvs.s390 NaN tests
    05-02-18 tm/tmxmake.c: fix <0 west of GMT bug that warped to 1800's -- wow
    05-02-11 port/mnt.c: handle lynxos MOUNTED=/etc/fstab
    05-02-08 features/float,sfio.h,sfcvt.c,sftable.c: add INF and fix NAN
    05-02-04 features/lib: add _std_strtol (for lynxos)
             include/ast_std.h: add _std_strtol tests
             comp/strtod.c: #define S2F_function strtod
             misc/signal.c: fix ancient bsd SV_INTERRUPT vs. SV_ABORT clash
    05-01-11 sfio/sfmove.c: try to seek(fr) when fw==0
             comp/omitted.c: intercept utimes() too
             comp/omitted.c: add DOSPATHVARS env var path value conversions
             features/tvlib,tm/tvtouch.c: check for utimets()
             misc/optget.c: handle '-' or '_' option word separators
             sfio/_sfopen.c: allow stream mode changes after initialization
             sfio: sync with kpv: SF_SYNCED fix for ksh input loss bug
    05-01-09 tm/tmxfmt.c: fix %6N for n<100000000
    05-01-08 regex/regcomp.c: conj() => con() to avoid C99 clash
    05-01-05 tm/*: fix { %U %V %W } logic -- my head hurts
    04-12-30 tm/tmxtime.c: fix tm_isdst<0 loop
    04-12-23 vmalloc/vmbest.c: fix vmresize bug that didn't 0 new data
    04-12-19 misc/optget.c: broaden - long option match
    04-12-09 string/strtoi.h: fix terabyte 't' suffix math
             string/strmatch.c: flush cache on locale change
    04-12-01 tm/tmsleep.c: add
             tv.h,tv*.c,tv.3: move from pax
             tmx.h,tmx*.c,tmx.3: add high resolution tm(3) counterparts
             features/lib: add *another* sgi linux.ia64 memccpy bug check
    04-10-31 Makefile: __OBSOLETE__ now computed <6 months ago year>0101
             ccode.h,ccmapid.c: add ccmaplist(Ccmap_t*) iterator
             option.h,optesc.c: add 3rd arg, 1 => quote '?' too
             misc/magic.c: fix bug that terminated `string \0a' at \0
             misc/magic.c: handle vcodex() via decompose()
             misc/magic.tab: add vcodex magic
             features/stdio: handle _LARGEFILE64_SOURCE -- oops
             stdio/(fseek|ftell|fseeko|fsetpos|fgetpos|ftello).c: oops^2
    04-10-28 string/swapop.c: size==-4 => size=4 and extend op=3 to op=7
             tm/tmfix.c: fix tm_mon<0 logic
    04-10-22 tm/tmdate.c: handle 'final day feb 2004'
             port/astlicense.c: add query=all|id|${...}${...}
             port/astlicense.c: "free" => "mit"
             comp/omitted.c: revert to the open source license
             string/stropt.c: drop siz==0 => tab is hash table
             include/sfio.h: incorporate <sfstr.h>
             include/sfstr.h: drop
             disc/sfstrtmp.c: drop -- use sfstrbuf()
    04-10-20 misc/magic.tab: update tar magic
    04-10-18 ufc-crypt.h,crypt_util.c: drop GPL code
             crypt.c: add BSD code
             pathpath.c: disable { $0 $_ $PWD } related root search
    04-10-01 normalize ident stamps
             port/astlicense.c: add type=cpl -- yeah
    04-09-25 string/swapop.c: return op < size -- duh
    04-09-23 comp/spawnveg.c: :NOOPTIMIZE: -- volatile sometimes ignored
    04-09-21 comp/spawnveg.c: exec_errno_ptr is volatile -- duh
    04-09-14 tm/tmscan.c: add %| alternation and %& => tmdate()
    04-09-08 misc/optget.c: add :!value: omitted optional arg value
             misc/optget.c: fix --noNAME ambiguous option logic
    04-08-26 string/strperm.c: add who^mode to propagate least restrictive up
             astmath.c: add { frexpl ldexpl } checks for ast.req
             port/astlicense.c: ignore first option if non-assignment
             include/ast_dir.h: move d_fileno map before struct defs -- duh
    04-08-24 vmalloc/vmbest.c: add {VM_region} VMCHECK=+r for region segment checks
             misc/recfmt.c,include/recfmt.h: add
    04-08-23 vmalloc/vmbest.c: add {VM_primary VM_secondary} VMCHECK=-s for primary
             features/common: punt to <stdarg.h> for unknown va_list
    04-08-11 vmalloc: sync _UWIN libposix hooks
    04-07-27 features/common,features/limits.c: ULL suffix for unsigned _ast_int8_t
    04-07-22 include/ast.h,comp/eaccess.c: add eaccess() for effective access()
    04-07-19 comp/open.c,sfio/_sfopen.c: { O_RDONLY O_WRONLY O_RDWR } are values
    04-06-28 misc/error.c: check level after error_info.auxilliary
    04-06-24 string/strmatch.c: strgrpmatch() match[] now variable size array
    04-06-17 features/common: change _DLL null define to (the standard ast) 1
    04-06-11 misc/optget.c: allow optional [-|+|--|++] optstr() option prefix
             misc/optget.c: reset optstr() state on 0 return
             misc/optget.c: text()=>textout() linux.ppc symbol hijack workaround
    04-05-31 sfio/sfreserve.c: no side buffer if user buffer is large enough
    04-05-27 string/fmtbuf.c: handle one concurrent buf > sizeof(buf)
    04-05-24 regcomp.c: fix no-advance initialization
    04-05-05 conf.tab,conf.sh: update to align with standards
             magic.tab: ms suffix update
    04-05-04 port/lcgen.c: fix territory initialization
    04-04-15 tm/tmdate.c,include/tm.h: fix specific and ordinal days
    04-04-08 astconf: retain { HOSTTYPE LIBPATH LIBPREFIX LIBSUFFIX } strict vals
    04-04-07 vmalloc/vmbest.c: fix alpha tiny block bug
             vmalloc/malloc.c: re-enable on alpha
    04-03-30 tm/tminit.c: GMT => UCT only if tz.daylight not defined
    04-03-25 vmalloc/malloc.c: _AST_std_malloc=1 for __alpha
             path/pathprobe.c: per-user probe dir => $HOME/.probe/$HOSTTYPE
    04-03-23 regex/reglib.h: fix isw*() redefines
    04-03-17 features/stdio: no __FILE override for __CYGWIN_ (sys/reent.h clash)
             sfio/sfhdr.h,sfio/sfsetbuf.c: lower sfmove() default buf size 4x
    04-02-29 comp/omitted.c: move env trace after PATH fixup
             comp/omitted.c: cygwin spawn _P_DETACH => _P_NOWAIT+setpgid(pid,0)
             misc/optget.c: fix html mailto: match
             port/astlicense.c: add type=test for fixed 2001 date
             features/float: check local NaNQ first
             vmalloc/vmhdr.h: fix _vmextern_ vm_truncate return type
             misc/magic.tab: add elf s390 index=22
    04-02-26 vmalloc: VMCHECK a:assertions c:arena-check w:warn-instead-of-abort
             sfio/sfvscanf.c: fix extf arg selection
    04-02-24 features/dirent: set nodefine to avoid ast_std.h _typ_off64_t undef
             disc/sfkeyprintf.c: only case pattern must be ()[] balanced
    04-02-14 include/sfio_t.h: add SF_DCDOWN, SFDCNEXT(), SFDCPREV()
    04-02-13 string/strmatch.c: fix bug that didn't save one-time sub[] size
             vmalloc: -g: export VMCHECK=1 enable malloc/free checks
             vmalloc: -g: free(0) to check and disable malloc/free checks
             vmalloc: -g: free(1) to check and enable malloc/free checks
    04-02-11 Makefile: add :P=A: to conf and lcgen exec for cross-compile
             regex: use MBSIZE() instead of mbsize() to grab 1 char on err
             vmalloc/vmbest.c: updated to do more comprehensive DEBUG tests
    04-02-04 sfio/sfraise.c: add sfraise(0,a,b) to iterate over all streams
    04-02-01 vmalloc/vmbest.c: _BLD_DEBUG free(0) checks the arena
    04-01-31 features/vmalloc: fix typo that missed _mmap_zero
    04-01-23 string/strerror.c: handle real strerror() return value overwrite
    04-01-11 path/pathpath.c: fix size vs. sizeof(buf) typo
    03-12-22 misc/magic.tab: dos EXE tweaks
    03-12-05 vmalloc: sync with kpv, adding exceptf announcements
    03-12-04 port/astlicense.c: fix expand() loop sentinel bug
    03-12-02 include/ast.h: mbchar() advances by 1 on mbtowc() error
             misc/fts.c: increase MINNAME to 32
    03-11-21 vmalloc/vmbest.c: export VMCHECK=1 to enable $(CC.DEBUG) vmcheck()
             vmalloc/vmbest.c: export VMCHECK=2 to disable KPVCOMPACT
             misc/magic.c: add { cobol copybook pl1 } and suffix preference
    03-11-12 features/stdio: drop cuserid,getopt for SUSV3
    03-11-11 vmalloc/*: merge kpv update -- this should stomp the compaction bug
    03-10-23 comp/iconv.c: fix sfreserve lock fallback
    03-10-20 sfio/_sfopen.c: add to allow user sfopen() intercept
    03-10-17 regnexec.c: fix exec time REG_LEFT, \x.... => wctomb()
    03-10-12 string/strtoi.h: fix strton '.' overconsumption
    03-10-12 comp/iconv.c: identity is always (iconv_t)0
    03-10-09 string/fmtesc.c: fix FMT_SHELL to check for all shell magic chars
    03-10-01 port/astlicense.c: unknown authors copied verbatim (instead of ignored)
    03-09-30 string/chresc.c: handle \u..., \x... consumes all trailing hex digits
             string/stresc.c: \u... and \x... > UCHAR_MAX => wctomb()
    03-09-29 fnv.h: add
    03-09-23 modedata.c: table is for external modes, so no arch specific hacks
             optget.c: fix option prefix match translation bug
             optget.c: add `<length> <name>=<value>\n' to optstr()
             features/lib: add memcmp() test for sgi optimzation bug
    03-09-22 regex.h,regcomp.c: add regncomp()
             regclass.c: fix for loop dangling ; in regaddclass()
    03-09-20 sftable.c,sfvprintf.c: fix SFFMT_CHAR handling to match extf api
    03-09-19 sfmode.c: update release to kpv's
    03-09-17 regcomp.c: add pedantic backref error checks
    03-09-16 regnexec.c: exec time REG_LEFT => don't advance past initial position
             regclass.c: add regaddclass() for user defined [:class:]
             regexec.h: REG_VERSION_N2X, add redisc_t {re_map} ccode map
             regstat.c: add regstat_t
    03-09-11 optget.c: --n:=v sets opt_info.assign=':', opt_info.number enabled
    03-09-09 disc/sfkeyprintf.c: *pn on lookup is arg separator; lookup "" arg too
    03-09-05 optget.c: [f:l*?] preserves user long name past '*' in opt_info.name[]
    03-09-03 sfstr.h: add sfstrpend() for #pending bytes in read buffer
    03-08-25 regex: add REG_FIRST, optimize bm
             features/lib: _AST_no_spawnveg==1 falls back to fork/exec
    03-08-22 features/stdio,stdio/asprintf.c,stdio/vasprintf.c: add
    03-08-21 path/pathnative.c,path/pathposix.c: interix updates
             features/botched: add cygwin _stat => _stat64
    03-08-15 include/ast.h: map out bsd strmode()
             features/common: add interix _ast_intmax_t workarounds
             misc/fs3d.c: 3d mount test now uses "" instead of NiL (or cygwin dumps)
    03-08-11 string/fmtesc.c: fix optional quoting checks
             tm/tmdate.c: fix > 1 year of seconds arithmetic
             tm/tmfix.c: fix leap year adjustments
    03-08-01 features/lib: beef up sock_peek test for interix
    03-07-29 features/float: add -lm to frexp... test
             Makefile: fix -lm astmath test sense
    03-07-26 features/mem.c: favor _mem_sbrk over _mem_mmap_*
    03-07-22 vmalloc/vmbest.c: fall back to sbrk() if mmap() fails
             features/mem.c: _mem_sbrk means sbrk() and brk() work
    03-07-17 regex/regcomp.c: fix bug that treated KRE X{n,m} like {n,m}(X)
             misc/magic.c: check MAGIC_VERBOSE for all load() messages
    03-07-14 misc/optget.c: handle [...]{[...]\f...\f...}
    03-06-21 misc/sigcrit.c: block SIGCHLD if _lib_sigprocmask || _lib_sigsetmask
             comp/spawnveg.c,sfio/sfmode.c: use sigcritical() SIG_REG_* macros
             comp/spawnveg.c: drop ENOEXEC logic
             vmalloc/*: snarf kpv KPVCOMPACT() fix
             vmalloc/vmbest.c: export VMCHECK=2 to disable KPVCOMPACT (just in case)
             string/strdup.c: drop __strdup() etc. intercepts -- malloc gets it
             features/mem: define _mem_method and _mem_* possible values
             vmalloc/malloc.c: _AST_mem_method==_mem_* to force mem get method
             sfio/sfputr.c: __ia64 memccpy is bogus -- how many tries do they get?
             path/pathshell.c: verify abs path and access(path,X_OK) -- duh
             vmalloc/vmhdr.h: add private _Vmessage() for non-sfio ASSERT()
             port/astconf.c: fix bug that always returned the minmax value
    03-06-11 comp/*.c: reorder macro hding for mvs.390 and <ast_map.h>
             features/vmalloc: add _lib_brk and _lib_sbrk verification
             include/ast_std.h,etc.: add _map_malloc for malloc => _ast_malloc
             comp/conf.sh: fix SI_* and *_SI_* macro redefs
             ast.h: VMDEBUG or _BLD_DEBUG enable <vmalloc.h> and VMFL tracing
             vmalloc/vmtrace.c: _PACKAGE_ast __FUNCTION__ is a string
             vmalloc/vmtrace.c: set trace file fd FD_CLOEXEC
             vmalloc/vmbest.c: set /dev/zero mmap fd FD_CLOEXEC
             features/mmap: fix ancient read() vs. mmap() time arithmetic typo
             vmalloc/malloc.c: _AST_std_malloc==1 to force standard malloc
    03-06-09 comp/omitted.c: add _imp__FUNCTION sybols for __CYGWIN__ static link
             vmalloc/vmbest.c: handle systems with sbrk() but no brk()
    03-06-04 port/astconf.c: drop non-standard diagnostics
    03-06-03 comp/conf.sh: rework symbol collision logic
    03-05-30 conf.tab,conf.sh,astconf.c: add <sys/systeminfo.h> sysinfo() SI_*
    03-05-29 ccode.h: rework for extensibility, drop obsolete mematoe(), memetoa()
    03-05-28 regex/*: recode to use isw*() directly when needed, is*() otherwise
    03-05-27 features/vmalloc: fix _std_malloc test
    03-05-25 misc/optget.c: fix optstr() ???* internal options
    03-05-24 misc/optget.c: fix (ancient) argv null dereference
    03-05-23 comp/getcwd.c: don't intercept on _WINIX -- unreliable st_ino
    03-05-22 sfio/sfsprintf.c: n<0 => don't append '\0'
    03-05-18 misc/fts.c: re-stat FTS_DP to update nlink/times
             misc/fts.c: add FTSENT.stack to eliminate getlist() recursion
             regex/ucs_names.h: use "..." catenation to placate some cc's
    03-05-11 string/strtoi.h: handle "-" "+" "0x" "11#"
    03-05-09 vmalloc/vmbest.c: large memory allocation tweaks
    03-05-06 misc/optget.c: fix getopt_long() prefix==1 bug that missed short flags
    03-04-27 comp/system.c: handle <ast_map.h>
    03-04-24 vmalloc/vmmopen.c: drop dup <unistd.h>
    03-04-21 tm/tmdate.c: fix next hour/min logic
    03-04-15 vmalloc/malloc.c: intercept __malloc() along with __libc_malloc()
             string/strdup.c: intercept __strdup() along with __libc_strdup()
             features/mmap: consolidate from features/(lib|sfio|vmalloc)
             add _NO_MMAP==1 to disable all mmap()/munmap() calls
             path/pathposix.c: add
    03-04-14 comp/setlocale.c: fix debug_mbtowc() return value for *s==0 || n < 1
             comp/iconv.c: fix error return errno values
    03-04-11 misc/stk.c: fix stkgrow() realloc bug
    03-04-05 string/tok.c: support readonly single token input strings
             disc/sfdcdio.c: fix F_DIOINFO and FDIRECT #ifdef's
             include/ast_std.h: allow _LARGEFILE64_SOURCE on __hppa
             features/common: fix `tst _foo_' => `tst foo_' typo
             features/float: fix `tst _foo_' => `tst foo_' typo
             features/float: add FLTMAX_(UINTMAX_MAX,INTMAX_MAX,INTMAX_MIN)
             comp/omitted.c: fix pathconf => _pathconf => _ast_pathconf loop
    03-04-03 features/float: add _ast_no_um2fm: no usinged intmax => floatmax cast
             vmalloc/vmbest.c: add getenv("VMCHECK") to initialize Vmcheck
    03-03-28 include/ast_dir.h: add D_TYPE; { D_FILENO D_TYPE } must be #ifdef'd
             misc/fts.c|getcwd.c|glob.c,preroot/getpreroot.c: add D_FILENO #ifdef's
             Makefile: make sure _BLD_ast is defined for all compiles
    03-03-27 ast_vfork.h: generate from features/vfork to pick up headers/pragmas
    03-03-25 comp/omitted.c: drop free() of live environ
             path/pathshell.c: allow trailing .exe -- pox on that
             string/strtoi.h: fix bug leading 3 digits before thousands sep bug
             string/(fmt|str)[gu]id.c: we know root when we see it
    03-03-24 misc/optget.c: handle : and ? in := default value
    03-03-21 ast_std.h: drop all spawn*() but spawnveg()
             obsolete/spawn.c: add for dropped spawn*()
             features/lib: _use_spawnveg if spawnveg() is a win over fork()/exec()
             features/lib: drop NutForkExecve() and _map_spawnve
             features/lib: fix memccpy test to clean up /tmp droppings
             comp/spawnveg.c: call posix_spawn() if implemented
             comp/omitted.c: add spawnve() intercept
             comp/getoptl.c: set getopt_long() optind even if no options
             tm/tmfmt.c: add %Q<delim>recent<delim>distant<delim>
             misc/optget.c: fix trailing '*' for option and option args
             sfio/sfmode.c: getenv("_AST_SFIO_OPTIONS") [,]SF_LINE[,] for fd {0,1,2}
             vmalloc/*: kpv sync for uwin build independent of libast
    03-03-18 port/astconf.c: switch to dynamic string values (saves 7K data/bss)
             string/strmatch.c: switch to dynamic regex cache (saves 3K data/bss)
             regex/regcoll.c,ucs_names.h: initialize rw tables from smaller ro data
             features/lib: add vfork test for passing SIG_IGN across exec
             features/lib: add spawn test for passing SIG_IGN across spawn
    03-03-17 comp/omitted.c: unlink() renames to .deleted dir in case file open
             sfio/sfpopen.c: handle mode "" for spawn with no pipe
             features/float,comp/frexp.c,comp/frexpl.c: add pow2() table alternative
    03-03-12 features/lib: fix linux.ia64 memccpy() tests -- now its their turn
             features/vmalloc: fix /dev/zero test
             features/align: _ast_intmax_t and _ast_fltmax_t join the union
             misc/stk.c: fix struct frame size to align data
             disc/sfdcdos.c: change sfslen() => sfvalue(f)
    03-03-10 misc/optget.c: handle [f\f:x:lll\f?ddd]
    03-03-07 port/astconf.c: uninitialized CONFORMANCE + POSIXLY_CORRECT => standard
    03-03-05 comp/omitted.c: make sure at least /bin is in PATH to find cygwin dlls
    03-03-02 path/pathshell.c: write access to /bin is effectively root
    03-02-28 features/float: add (FLT|DBL|LDBL)_U?(LONG|LONGLONG|INTMAX)_(MIN|MAX)
    03-02-25 features/lib: change vfork() test to use _exit() instead of exit()
    03-02-23 include/error.h: update ERROR_VERSION for error_info.number space
    03-02-22 comp/conf.sh: wrap ksh check in eval to avoid premature exit
    03-02-21 misc/fts.c: verify chdir(..) to avoid malicious dir rename()
    03-02-19 string/strtoip4.c: isspace() instead of ' '||'\t'
    03-02-17 regex/regcomp.c: fix stats.l REX_REP logic that botched REX_BM
    03-02-13 string/base64.c: handle catenated encodings
    03-02-11 features/libpath.sh: change LIBPATH to <dir>[:<env>[:<pat>]][,...]
    03-02-07 path/pathfind.c: allow "/dev/null" to be PATH_REGULAR
    03-02-06 include/ast.h,fmtquote.c: add FMT_ALWAYS|FMT_ESCAPED|FMT_SHELL|FMT_WIDE
    03-02-05 tm/tmdate.c,tm/tmword.c,string/strelapsed.c: '_' treated like ' '
    03-02-01 string/strelapsed.c: handle ps style [day-][hour:]min:sec
    03-01-31 port/astlicense.c: fix author=* match
    03-01-30 include/tm.h: add tmisleapyear() macro
    03-01-29 comp/getopt.h,comp/getoptl.c: add gnu getopt_long(), getopt_long_only()
             include/ast_getopt.h: for non-gnu part of comp/getopt.h
             include/ast_std.h: include <ast_getopt.h> instead of <getopt.h>
    03-01-28 ast.h,string/base64.c: add base64encode() and base64decode()
             path/pathfind.c: verify S_ISREG()
    03-01-24 path/pathexists.c: fix abs dir bug and deal with case ignorance
    03-01-23 path/pathpath.c: honor PATH_ABSOLUTE for the easy case too
    03-01-22 path/pathprobe.c: fix search to find both the probe script and command
    03-01-17 misc/magic.tab: application/zip => appplication/(gzip|pzip|zip)
    03-01-14 misc/optget.c: change href="" to href="."
    03-01-10 include/ast_std.h: strtold() import hackery for static __CYGWIN__
    03-01-03 include/regex.h,regex/regcomp.h: add REG_SHELL_GROUP
             include/ast.h,string/strmatch.c: add STR_GROUP for REG_SHELL_GROUP
    02-12-15 include/error.h: errorcontext => Error_context_s (compatible til 2004)
    02-12-06 misc/sigdata.c: add NoF(sigdadata) -- why nmake was uninterruptable!
    02-12-03 comp/omitted.c,features/omitted: handle cygwin alarm() return botch
    02-11-27 misc/swapop.c: op=3,size=4 => op=7
             string/strlcat.c,strlcpy.c: fix uwin decl clash
    02-11-26 sfio/sfvprintf.c: fix sfsprintf() '\0' termination bug
    02-11-22 misc/glob.c: move static struniq() to libast extern
             string/fmtversion.c,include/ast.h: add fmtversion
    02-11-18 string/strncopy.c: add
             misc/magic.tab: list size for magicid.h magic
    02-11-14 sfio/sfvprintf.c: add %#c for C escapes
             include/error.h: add ERROR_NOTIFY context flag for builtin commands
    02-11-11 string/strtoi.h: add S2I_size for strnto*() size_t 2nd arg
             sfio/sfstrtof.h: add S2I_size for strnto*() size_t 2nd arg
             comp/putenv.c: add setenv() and unsetenv() wrappers for setenviron()
    02-10-31 path/pathfind.c: add dir of including file to the pathinclude() list
             misc/optesc.c: add
    02-10-30 string/strtoip4.c: set next char pointer even on error
    02-10-29 comp/resolvepath.c: add (size_t version of realpath())
             misc/mime.c: fix mimehead() to ignore null content values
    02-10-28 misc/glob.c: add GLOB_STARSTAR for /**/ and GLOB_NOTDIR optimization
    02-10-27 string/struniq.c: add
    02-10-23 features/common: fix off-by-one loop check
    02-10-18 include/ast_std.h: avoid off_t,ftruncate,lseek,truncate redefinitions
    02-10-17 misc/mime.c: handle type/* match, fix bogus header parse
    02-10-04 sfio/sfstrtof.h: S2F_static <0:export =0:private >0:static
    02-10-02 features/common: don't define _WIN32; define _WINIX => unix on windows
             features/tty: finally stomp the bsd _POSIX_VDISABLE redefinition
             misc/fastfind.c: add more specific findwrite() error messages
             comp/omitted.c: fix cygwin utime() to update st_ctime
             comp/strtol.c,strtoul.c: __CYGWIN__ static link workaround XXX
             string/fmtls.c,fmttime.c: tmform() => tmfmt()
    02-09-22 port/astconf.c: return values in fmtbuf() buffer instead of stack
             port/mnt.c: don't set MNT_REMOTE for win32 ?:\* paths
             sfio/sfvscanf.c: _sfdscan() is library global (not static)
    02-09-21 path/pathkey.c: add tool arg for mamake compatible hash
             features/fcntl.c: handle iffe _hdr_lcl_* => _lcl_* change
    02-09-15 comp/conf.sh: fix enum vs. macro test
             cdt: kpv sync
    02-09-11 ast.h,features/common: move _WIN32 macro init to features/common
             features/common: enable __EXTERN__ and __DEFINE__ for _WIN32&!_UWIN
             features/float: add -lm to _ast_*_nan_init tests
             vmalloc: kpv sync with vmresizef => vmgetmem
             features/iconv: must have both <iconv.h> and iconv_open()!
             features/vmalloc: alloca test must compile *and* link
             sfio/sfvscanf.c,sfstrtof.h: add flag arg to char get, fix NaN loop
    02-09-10 vmalloc/vmhdr.h: enable getpagesize() and sbrk() prototypes
             features/fcntl.c: enable mmap64() prototype
             include/ast_windows.h: windows.h wrapper with ast namespace workarounds
    02-09-07 misc/mime.c: fix quoted value parse bug that ate the whole line
    02-09-05 features/vmalloc: add free() to _std_malloc test
             include/ast.h: NoF(x) now defines _DATA_x for !_BLD_DLL too
             tm/tmlocale.c: { C POSIX en } == unix dadgummit
    02-08-29 path/pathfind.c: initialize Dir_t.next=0
    02-08-28 uwin/rint.c: update
             features/libpath.sh: "bin" is now the default value
    02-08-22 vmtrace.h: add for debugging
    02-08-20 misc/magic.c: convert to use <cdt.h>
             vmalloc/vmresizef.c: add for generic discipline resizef default
             string/strelapsed.c: allow long time component names
    02-08-19 misc/optget.c: add `.fp 5 CW' to --nroff output
             string/(fmtfs|fmtuid|fmtgid|strgid|struid).c: convert to use <cdt.h>
             include/dt.h,cdt/dtnew.c: add for dtopen() in specific vm region
    02-08-13 comp/omitted.c: fix bzero logic for e.g. unixware.i386
             include/ast.h: add fmtbase->fmtbasell; swap in 2003-09-01
    02-08-12 regex/regnexec.c: fix REG_MINIMAL REX_DOT mb bug
    02-08-08 features/iconv: <ast_common.h> instead of <sys/types.h> <ast_common.h>
    02-08-07 regex/regcomp.c: recognize anchors in BRE subexpressions
    02-08-06 comp/iconv.c: handle win32 cpNNNN == windows-NNNN aliases
    02-08-05 cdt/*: sync with kpv src
    02-08-02 features/iconv: include sys/types.h for ast_types.h
    02-08-01 misc/magic.c: magic file "." names the default
             misc/magic.c: handle addr type (from irix string)
             features/lib: move malloc tests to features/vmalloc
             features/vmalloc: snarf tests from features/lib
             vmalloc/*: sync with kpv src
             comp/libc.c: dropped -- __libc_* intercepts moved to vmalloc/malloc.c
    02-07-30 features/lib: handle __libc_malloc() in _std_malloc test
             vmalloc/malloc.c: add gnu pvalloc()
             features/vmalloc: fix alloca check
    02-07-29 features/limits.c: handle netbsd guards
    02-07-27 sfio/sfpoll.c: handle rw pipes
    02-07-25 features/iconv: include ast_types.h for size_t in ast_iconv.h
    02-07-18 apply LARGEFILE64 header prototype clash patches
             misc/optget.c: __EXTERN__ _opt_info_ instead of opt_info
    02-07-17 ast_std.h: memzero() now defaults to memset() instead of bzero()
    02-07-16 ast_std.h: add ast.env_serial
             misc/setenviron.c: increment ast.env_serial
             include/tm.h: tmset() now calls tminit() directly
             tm/tminit.c: check ast.env_serial for env change
             tm/tmfix.c: speed up for large values of tm_mday
    02-07-15 comp/fnmatch.c: fix memory leak caused by missing regfree()
             comp/strstr.c: fix broken interpretation and implementation
             comp/iconv.c: intercept (but no-op) null to and from buffer pointers
    02-06-27 ast_std.h: map _sysconf => _ast_sysconf for sun
    02-06-26 cdt,sfio,vmalloc: kpv sync -- is this ever easy?
    02-06-24 sfio: kpv sync, vfwscanf(),fputw() fix (wcslen(x)*sizeof(wchar_t)!!)
             misc/fts.c: fix symlink chdir() optimzation bug
    02-06-11 sfio/sfwrite.c: string to file fix
             Makefile: __OBSOLETE__==20020101
    02-06-01 regex/regcomp.c: REG_DELIMITED now consumes the delimiter
    02-05-31 regex/reglib.h,regcomp.c,regnexec.c: null subexpression fixes
    02-05-24 misc/fts.c: disable dir link counts in 3d
             misc/magic.c: fix "*(mkfile)" sh pattern to "*@(mkfile)"
    02-05-20 regex.h,regex/regsubcomp.c,regex/regsubexec.c: add
             regex/regsub.c: deprecate
    02-05-16 tm/tmfix.c: fix '60+n min/sec ago' bug for n min/sec after the hour
    02-05-14 regex/regsub.c: fix (^|x) null match early termination bug
    02-05-13 dir/dirlib.h: drop errant extern==__EXPORT__
             features/uwin: add uwin lib tests
             uwin/*.c: check features/uwin for stubs
             features/float: add nan representation generation
             sfio/sftable.h: used _ast_*_nan_init for huge values
    02-05-09 misc/fts.c: fix virtual top to force ``child'' stat()
             features/common: define va_copy() only if not in <stdarg.h>
    02-05-01 string/strtoip4.c: cisco inverted quad mask must have 4 parts
    02-04-30 misc/magic.tab: fix pzip version check
    02-04-19 string/strtoip4.c: handle cisco inverted quad mask n.n.n.n/i.i.i.i
    02-04-18 misc/fts.c: add chdir() verification stat() optimizations
             path/pathkey.c: check PROBE_ATTRIBUTES for list of vars
    02-04-12 port/astlicense.c: type=open tweak, fix author list spacing
    02-04-11 regex/regcomp.c: check for pattern number overflow
    02-04-05 tm/tmfmt.c: add %u
    02-04-04 sfkeyprintf.c: fix %c numeric value
             path/pathpath.c: check plain path first -- duh
    02-04-03 misc/fts.c: fix (FTS_PHYSICAL|FTS_NOSTAT) stat optimizations
             ftwalk.c: only clear FTW_DELAY if FTW_CHILDREN
             ftwalk.h: add FTW_NSOK for FTW_DELAY
    02-03-29 ast.h: drop strerror() prototype -- already in <ast_std.h>
             features/stdio: check for _SFIO_H redundant _Sfstd* declarations
    02-03-26 misc/glob.c: fix GLOB_LIST gl_flags values
    02-03-24 port/mnt.c: update bsd fstype name and mount option logic
    02-03-23 Makefile: add ast_wchar.h to the .check.hdr list (for mamake)
    02-03-17 features/stdio: hack around g++ 3.* clashes
             Makefile: add ast_nl_types.h to the .check.hdr list (for mamake)
             string/strtoip4.c: fix validity check bug that only checked last part
    02-03-14 misc/optget.c: fix --keys to not expand inline \f...\f
    02-03-12 port/astlicense.c: add type=free
             path/pathaccess.c: sibling ".." search ignores relative dirs
             sfio/sfvscanf.c: sfstrtof get() must return 0 on eof
    02-03-11 path/pathexists.c: check path by pairs checking {ENOTDIR,ENOENT}
    02-02-14 features/float: copy local min/max macros to avoid printf roundoff
             features/wchar: include <ast_common.h>, not <ast_std.h>
             misc/magic.c: match[]=>matches[] to fix K&R match() macro conflict
             include/vmalloc.h: include <stdlib.h> for !_PACKAGE_ast
             uwin/mini.sym: add sprintf (now required by features/common)
             regex/regnexec.c: truncate wide chars for <ctype.h> functions
             Makefile: fix MAM ast_common.h sequencing bug by making it first
             cdt/dthash.c: fix DT_DELETE memory leak (DT_DETACH typo)
             cdt/dthash.c: fix DT_DELETE double free (dt->data->here typo)
             regex/regcomp.c: fix recomb() to reject RE with backref
             features/iffeio: explicitly generate stdio.lcl
             stdio: add {fcloseall,f(get|put)s_unlocked,fmemopen,getdelim,getline}
             tmmake,tmtime: allow negative time_t if native localtime/gmtime do
             tmdate: allow years before 1969
             fmtfmt: add
             include/ast.h: add { PATH_TOUCH_CREATE PATH_TOUCH_VERBATIM }
             Makefile: add std/*.h for std header iffe overrides
             comp/iconv.c: fix non-C win32 sfreserve() loop
    02-02-11 features/common: separate long long / long double tests
             features/common: verify printf handles long long / long double
    02-02-02 include/ast_std.h,sfio/sfhdr.h: drop _hdr_locale tests -- always on now
             include/ast_std.h: trust _UWIN <unistd.h>
    02-01-31 port/mnt.c: add aix options field
    02-01-30 comp/strstr.c: add for ancient s5
             stdio/_flsbuf.c: only on systems that transfer to native (e.g., uwin)
             string/strtoi.h: cat min/max error return values
    02-01-28 features/tty: add cf[gs]et[io]speed macros for <termio.h>
             comp/rename.c: punt to (ancient) /usr/lib/mv_dir on EISDIR
    02-01-24 sigcrit.c: fix SIGCLD!=SIGCHLD interrupt loop
             sfvprintf.c: convert fast io macros to functions for uts.390 cc
             string/strtoi.h: drop #pragma prototyped for standalone sfio
             sfdcsubstr.c: rename from sfdcsubstream.c for 14 char fs
    02-01-22 execlp,execvp,execvpe,spawnlp,spawnvp,spawnvpe: fix __EXPORT__
             spawnlp,spawnve,spawnvp,spawnvpe: handle ms mode arg -- barf
             sftable.c: ifdef hacks for _WIN32&_ALPHA_ fp exception
             _stdfun.c: add _UWIN&_ALPHA_ iob map
    02-01-18 sfio/sfstrtof.h: drop #pragma prototyped for standalone sfio
    02-01-17 features/hdr: don't include <stddef.h> after it doesn't check out!
    02-01-16 misc/magic.c: add version type for YYYYMMDD or [a.][b.]c.d
             misc/magic.c: recode mime %s parse -- sensible and no buffer overflow
    02-01-15 misc/magic.tab,magicid.h: add generic binary magic number and header
    02-01-12 tm/tmlocale.c: override win32 default date for {C,POSIX,en} locales
             comp/omitted.c: fix cygwin workaround logic bugs
    02-01-09 stdio/fseeko.c,ftello.c: add from UNIX98
    02-01-08 comp/conf.sh: use $cc instead of cc
    02-01-07 string/strlcat.c,string/strlcpy.c: add bsd api
    01-12-18 comp/conf.tab: fix LFS_CFLAGS default for sun _CS_LFS_CFLAGS botch
             features/common: add hdr stdarg test
             tm/tmdate.c: handle YYYY/MM/DD
    01-12-10 misc/magic.tab: add generic 0x00010203 binary magic
    01-12-03 path/pathprobe.c: return HOME relative path if readonly/non-suid fs
    01-11-30 misc/optget.c: add simple cache for repeat offenders (like ksh read)
             sfio/sfhdr.h: preserve errno across SFMMSEQON-SFMMSEQOFF
    01-11-29 magic.tab: fix GIF version number listing
    01-11-28 string/fmtbase.c: p!=0 => base always included in output
    01-11-26 misc/fts.c: empty path is an error
    01-11-14 misc/optget.c: fix --?+SECTION queries to include paragraphs
    01-11-20 regex/regnexec.c: fix REG_MINIMAL character class match bug
    01-11-19 features/lib: retain _lib_confstr for all solaris releases
    01-11-16 comp/setlocale.c: fix !_lib_setlocale typo
    01-10-31 regex/ucs_names.h: add string catenation to keep line length low
             misc/fastfind.c: handle gnu slocate db read
             misc/optget.c: add --?+SECTION queries
             comp/fnmatch.h: add FNM_NOSYS
    01-10-30 tm/tmdate.c: fix cron specs when both wday and mday are specified
    01-10-20 misc/glob.c: fix bug that called \ trim() twice on same path
             misc/glob.c: fix \ trim() bug that restored / to wrong position
             string/fmtre.c: fix { ^ . $ } translations
             misc/optget.c: use original string if translation fails -- duh
             sfio/sfhdr.h: assume <errno.h> assigns proper atttibutes to errno
             comp/regcmp.c: __ia64 workaround fixed by proper CC.DLL probe
             comp/getdate.c: __ia64 workaround fixed by proper CC.DLL probe
             features/lib: add lib getdate
    01-10-18 features/lib: check for strtod static link collision
             features/float: add another signed cast for old bsd cc
             features/wchar: add <stdlib.h> <stdio.h> before <wchar.h> for old bsd
    01-10-17 sfio/sfcvt.c: limit max precision to { FLT_DIG DBL_DIG LDBL_DIG }
             sfio/sfcvt.c: fix %[aA] format to always have leading 0[xX]1.
             sfio/sfvprintf.c: handle %C %lc %S %ls for wchar_t args
             sfio/sfvscanf.c: handle %C %lc %S %ls for wchar_t args
             string/fmtmode.c: fix bug that omitted trailing '\0'
    01-10-12 misc/optget.c: . => \&. for --??nroff
             comp/wc.c: fix mbstate_t initialization typo
             features/float: fix max integer / float loop termiation
             features/float: fix LDBL_UINTMAX_MAX typo that did DBL_UINTMAX_MAX
    01-10-11 include/sfio.h: fix _Sfstd* import/export
             features/common: fix _UWIN __DYNAMIC__() definition
    01-10-06 features/fcntl.c: { O_BINARY O_TEXT } default to 0
             features/omitted: add for comp/omitted.c
             sfio/sfopen.c: O_BINARY default for _WIN32&&!_UWIN
    01-10-05 misc/glob.c: fix `\(x/*' GLOB_NOMATCH bug that returned `(x'
             misc/optget.c: fix localization lookup that didn't drop doubled : ? ]
    01-10-04 comp/setlocale.c: handle sizeof(wchar_t)!=4 in debug locale
             comp/conf.sh: handle sytems where _SC_* is both an enum and a macro
    01-09-25 astconf: add LIBPREFIX
    01-09-20 features/common: add __DYNAMIC__() for dll externs
    01-09-19 cdt: kpv update
             mb*() macros: update for ksh conversion, extend debug locale
    01-09-16 tm/tmlocale.c: add compiled in defaults for C locale
             misc/glob.c: add gl_nextdir callback for GLOB_COMPLETE
    01-08-14 clarify _WIN32 vs. _UWIN vs. __CYGWIN__
             tminit: fix standard & daylight initialization
    01-09-11 pathnative.c: add for native fs representation
             regex.h: fix regerror_t prototype
    01-09-04 regex/regnexec.c: fix REG_ICASE for multi-char collating elements
             tm/tmlocale.c: fix old ascii LC_TIME load
             locale*: add new LC_* categories
             comp/omitted.c: add CYGWIN workarounds
             features/lib: add CYGWIN workarounds
    01-08-11 features/common: some compilers have long long but no LL constants!
             features/lib: add mmap64 implementation test (for linux.s390)
             regex/regcomp.c: fix \ in [...] parse
             setlocale: retain user locale spelling in setlocale() return value
             features/limits.c: don't include ./limits.h -- duh
             fmtesc: don't escape multibyte chars
             tm/tmlocale.c: fix native C locale default
    01-08-08 features/float: some compilers (msdev) forget long long vs. double
    01-07-31 misc/optget.c: handle suboptions
    01-07-27 cdt.h: add DTDISC()
    01-07-17 iffeio.h: move to include for stdio bootstrap iffe workarounds
    01-06-25 regex: perl extensions added and tested
    01-06-21 misc/error: add ERROR_OPTIONS=prefix=string for message processing
    01-06-15 string/chresc: only 2 hex digits max for \xxx
             regex/regsub: handle REG_SHELL ~(nnn) rhs backrefs
    01-06-11 regex: handle embedded \0 in pattern and subject string
             regex: add (?nnn) for backrefs > 9
             comp/fnmatch: add FNM_LEADING_DIR for gnu compatibility
             features/float: _ast_flt_unsigned_max_t for bsd.i386 omission
    01-06-06 misc/optget.c: add o option for old ps,ar,tar with optional leading -
             regex/regcomp.c: REG_LENIENT|REG_DELIMITED \<newline> => <newline>
             regex/regcomp.c: REG_LENIENT \000 => NUL
    01-06-04 features/dirent: replace Makefile hack with iffe semi-hack
             regex/regnexec.c: negation must also check REG_SHELL_DOT
    01-06-03 sprintf.c: change buf size from SF_BUFSIZE to INT_MAX
    01-05-31 glob: fix gl_fignore to ignore leading . by default
             features/lib: add botch_d_ino_dirent64 for linux botch
    01-05-25 port/lc.tab: add a few missing language_territory's
    01-05-23 string/chresc: \C[.collation-element.]
             fmtmatch,fmtre: update for <regex.h> syntax extensions
    01-05-21 regex: add perl extensions, unicode names for collation elements
    01-05-11 string/chresc: \e == \E == escape, \cX == control X, \x{..} == \x..
    01-05-09 path/pathtemp.c: pathtemp(0,0,0,"/private",0) for mode S_IRUSR|S_IWUSR
             port/touch.c: handle utime(2) EPERM to fix bug that truncated
             regex: change REG_MINIMAL to avoid negation -- much faster now
    01-05-08 *.h: add some off_t macro guards for suse linux
    01-05-03 regcomp.c: optimize ((x)!)* to ((x)!)
             wchar: add <wchar.h> and stdio wchar routines
    01-05-02 feaures/wchar: add <wchar.h> intercept, add stdio wchar functions
    01-05-01 string/strtoi.h: signed strtoi accepts qualified unsigned constants
    01-04-30 comp/setlocale.c: fix code that relied on 2 simultaneous getenv()'s
             tm/tmlocale.c: check for UTF-8 encoded LC_TIME files
             misc/magic.tab: add utf-8 and utf-16 U+FEFF magic
    01-04-26 features/common: some cc's have _ast_int8_t but not LL constants
    01-04-24 features/lib: add _std_strtod for mac os X
    01-04-23 ccode: add CC_sub for ms embedded EOF char on ebcdic -- no joke
    01-04-20 iconv: handle ebcdic<=>utf
             mc.h,mc.c: add mcindex()
             ast_std.h: add AST_MESSAGE_SET
    01-04-18 features/libpath.sh: fix mvs probe
             *: sundry mvs fixes
             glob: fix GLOB_NOCHECK to avoid stat() and properly trim patterns
    01-04-01 strtod,strtold: add
             strtol,strtoul,strtoll,strtoull,strton,strtonl: handle locale & ERANGE
             sfvprintf,sfvscanf: handle locale decimal_point,thousands_sep
             sfvprintf,sfvscanf: handle %a,%A
             setlocale: add LC_NUMERIC decimal_point,thousands_sep init
             ast_std.h: __OPTIMIZE_SIZE__==1 to disable non-std __GNUC__ inlines
             pathexists: path cache to cut down pathpath() access(2) calls
             features/stdio: __FILE_TAG == _sfio_s for solaris
    01-03-23 iconv: fix iconv_move buffer boundary bug that stopped at 1 block
    01-03-19 glob: add GLOB_AUGMENTED
             regex: REG_SHELL syntax error implies REG_LITERAL match
             strto[ln][ll]: add overflow checks
    01-03-17 locale: reimplemented to provide canonical locale namespace
             locale: add LC_ALL=local for local system user default
             tm.h: TM_*_3 => TM_*_ABBREV
             tmfmt: handle standard E and O format modifiers
             tmlocale: consult nl_langinfo() if defined
             fmtquote("\"",1) => shell quote
    01-03-08 regex: handle multibyte chars and collation classes
             strmatch,strgrpmatch: now a wrapper on regex
             ast_std.h: add mb*() multibyte and collation support
             sfvscanf: handle locale decimal and thousand
             proc*,system: handle ignored SIGCHLD
             sfkeyprintf: handle %*C
    01-03-06 locale: add locale data cache for efficient multiple locale switching
             optget: fix LC_MESSAGES!=C --man bug
    01-03-01 Makefile: HEADEROPT is not optional for win32.*
             comp/syslog.h: comply with the de factos
             optget(): fix \f...\f stack bug that referenced data after pop
    01-02-27 *locale*: a batch of fixes for native LC_MESSAGE&LC_TIME hooks
    01-02-22 pathprobe: reprobe test now checks probe.ini too
             sfio_s.h: advertize public Sfio_t members with _ prefix
             sfio.h,features/stdio: add <sfio_s.h> reference
             sfhdr.h: map <sfio_s.h> _foo to foo
             sfio.h: SF_APPEND=>SF_APPENDWR, SF_CLOSE=>SF_CLOSING
    01-02-14 comp/conf.sh: probe <unistd.h> for _(CS|PC|SC)_* getconf symbols
             stdio/*: update for uwin stdio.dll binary compatibility
             sfread: finally fixed premature pipe read EOF bug
             fmtscale: format tenths for number > 0 && number < 10
    01-02-09 _sfmode(),_sftype(),_Sfextern: UWIN binary stdio compatibility exports
    01-02-08 sfgetm,sfputm,_sfputm: fix max clash with k&r max() macro
             setlocale: undef valid for sun4 k&r valid() macro
    01-02-07 catopen.c: don't do native catopen for the debug locale
    01-02-06 sfraise.c: add SF_FINAL check to avoid (posibly) freed disciplines
    01-01-01 features/common: fix uwin __DEFINE__
             sftable: initialize decimal and thousand
             magic.tab: add corel wordperfect document
             syslog: add LOG_LEVEL, add '\n' only if needed
             include/tm.h: #undef daylight for _WIN32
             sfio.h: add _SF_APPEND and _SF_CLOSE for native namespace incursion
             ast_std.h: add AST_LC_multibyte for MB_CUR_MAX>1
             setlocale: set AST_LC_multibyte
             strmatch: check AST_LC_multibyte
             features/limits.c: add _BITS_POSIX1_LIM_H guard for linux
             features/libpath.sh: fix for aix LIBPATH
             procopen,procclose: block SIGCHLD if PROC_FOREGROUND (e.g., system(3))
             optget.c: add enumerated option argument values
             optget.c: add <!--INTERNAL--> for private --html
             optget.c: fix memory leak that hit shell builtins hard
             sfio: drop sfread small chunk logic
    00-12-25 mnt.c: handle " and ' quoting for fstab
             sftmp.c: let pathtemp() open the fd O_EXCL
    00-12-15 conf.sh: add -v for verbose trace
             features/(limits|unistd).c: no FEATURE/types because of _POSIX_SOURCE
             features/time: add default for CLOCKS_PER_SEC
             features/lib: std_malloc now handles NeXT
    00-12-13 strton: recognize qualifier only if preceded by a digit
             features/lib: change return in vfork() test to exit() for linux sparc
             fmtquote: fix $'...' quote logic
    00-12-11 tmdate: fix cron format bug that mishandled months
    00-12-01 optget: handle $Id: ... $ in --?-version
             features/fcntl.c: fix _STDPP_ mmap munmap
    00-11-27 magic: drop dup sfclose() in load()
             optget: handle error_info.id==0
    00-11-22 features/stdio: add _FILEDEFED for sol9.sun4
             strton,stronll: handle [u|U][l|L][ll|LL] qualifiers
    00-10-31 tmdate: add TM_DATESTYLE and mmddHHMM[cc]yy
             astlicense.c: #include <hashkey.h> MAM workaround
             astlicense.c: check for non-empty CONTRIBUTORS
    00-10-26 features/stdio: add _FILE and __FILE for gnu
             misc/stk.c: fix stack pointer check off-by-one (dgk does it too!)
    00-10-23 syslog.h: sync with bsd values
    00-10-18 _STUB_* now functions instead of common symbols
             all extern data declared with definition to eliminate common symbols
             fastfind: add mac/bsd /var/db/locate.database
    00-10-17 features/lib: add apple osX (darwin.ppc) workarounds
    00-10-12 add: fmtbuf(), fmtclock(), fmtip4(), strtoip4()
             fmt*() now use fmtbuf() for tmp fmt buf allocation
    00-10-05 regex: add REG_DISCIPLINE and regdisc_t for alloc/error disc
    00-09-29 features/lib: pipe_rw==0 for sgi: boot rw == bin incompatibility
    00-09-21 astlicense: handle \' and \" in license values
    00-09-20 sfwrite: fix write() error in sfprintf() loop
    00-08-11 hdr,vmhdr.h: check/hide { getpagesize sbrk } prototypes
             astlicense: add noncommercial
    00-07-31 fflush: don't seek on pipes
             sfresize: add
             setlocale: fix bad newof() call
    00-06-01 strmatch: initialize match.current.beg[0] to avoid dump at line 670
             sfio/stdio: a few more errno tweaks
             astquery: sfstdin/sfstderr by default
    00-05-26 sfmode: errno=EBADF for invalid stream use
    00-05-22 rewind: fix for xopen test
    00-05-18 mcfind: returns absolute path
    00-05-16 optget: --keys must catch \f...\f too
             translate,mc: errno cleanup
    00-05-09 magic: add netbsd binary magic
             fts: PATH_RESOLVE!=logical => FTS_SEEDOTDIR
             ftwflags: call fts_flags()
             astconf: astconf(0,0,0) re-syncs with _AST_FEATURES
    00-05-08 optget: --usage & --keys for last -catalog group only
    00-05-02 iconv.c: add; use codes[] in ccmapid() and ccmapname(); "" for native
    00-05-01 pathtmp: copy env values (libshell or putenv may change)
    00-04-01 optget: drop bar from [-foo?bar] for --??keys
             sfvscanf: add %X -- duh
             features/common: fix va_listval() for power pc
             findopen: fix FIND_GENERATE codes file search
             magic: add ERROR_translate() and msgcat.key
             tmlocale: add for LC_TIME locale info
             tmlex: check tm_info.format and tm_data.format
             tmfix: fix for tm_wday special case (via nl_langinfo on LC_TIME fields)
             strftime: fix for nl_langinfo special case
             ast_std.h: provide LC_* defauls if not defined
             sfnew: check ${_AST_sfio_bufsize} -- don't tell kpv
             catopen,nl_types.h: add intercept to mc* routines
             magic.tab: add ast message catalog
             strerror: add _ast_strerror intercept with ERROR_translate("errno")
             fmtquote: escapes >0177 only if (flags&2)
    00-03-17 feof: stdio macro functions only for _UWIN
             optget: proper ERROR_translate() calls
             astgetconf: add for thread safe error message control
             astlicense: fix type=special but with non-null notice
             errorx: add for ERROR_translate() support
             ERROR_translate: add locale id args for alternate dictionary
             option.h: move _OPT_PRIVATE_ to pointer to avoid dll size mismatch
             ftwalk: fix FTW_CHILDREN bug that hit top level non-dirs twice
             translate.c: default error_info.translate
             astconf: fix dup loop thrash that never returns, add _AST_VERSION
    00-03-10 ast_std.h: do _LARGEFILE_SOURCE initialization before std headers
             fmtquote: handle $'...' quotes
    00-03-07 optget: fix numeric option support test
             sfkeyprintf: add %q for '...' quoting with ansi escapes
    00-03-06 features/stdio: fix _sfflsbuf prototype (dingold@gte.net)
    00-02-14 pathtmp: fix pid cache bug that sometimes repeated after ~10 attempts
             optget: "..." attribute quote
             pathfind: eliminate *: prefix in lib, not type
             proc: PROC_FOREGROUND for system(3) semantics (wait status return)
             pathtmp: fix mktemp() logic
             fts: fix FTS_NOSEEDOTDIR bug that botched ./* in top list
             include/ast/prototyped.h includes include/prototyped.h
             pathpath: fix strdup(0) bug
             optget: --html <foo@bar> => ...mailto:foo@bar...
             sscanf: fix sfsscanf => sfvsscanf typo
             magic.tab: strengthen tar recognition
    00-02-08 conf.sh: fix ifdef for systems that think sysconf(FOO) is const
    00-02-04 glob: fix globlist_t.gl_flags
    00-02-02 vm*: add NoF() for data only files
    00-01-27 fts: fix top level .==.. statp bug (thanks to dr. ek)
    00-01-25 conf.tab: fix LFS*_*LAGS typo
    00-01-24 astlicense: handle type=verbose, license.notice, author=*
    00-01-11 pathprobe: generate info for first probe script on PATH - duh
             ast.h: add NoF(x) for files that define no functions
             tmpfile: fix implementation
             global change for string ERROR_translate() dictionary names
             optget: fix new way but no long names off by one
             optget: handle [--dictionary?name]
    99-11-19 comp/conf.sh: `expr length XXX` is not universal
             drop sfstdio; stdio via functions everywhere
             drop Makefile conditionals (and follow our own advice for once)
             sfio: new stream after atexit() bug fix
             tm: Tm_zone_t.daylight=0 for standard time within zone
             stdio: fopen => _ast_fopen: only way short of binary compatibility
             Makefile: atmain.C falls back to atmain.c
             optget: add --keys, s<section> option
             stdio: _UWIN check for foreign stdio
    99-11-11 astlicense: add
    99-10-31 glob: fix regexec pattern; add PATH_ATTRIBUTES case check
             pathpath: path==0 means malloc space
    99-10-22 tmfmt: %C=2-digit-century, %k=date(1), %y=2-digit-year-in-century
    99-10-18 fastfind: expanded default db lookup
    99-08-11 magic: fix off by one registry malloc
             features/fs: add __RENAME checks for stat familiy (netbsd)
             features/fs: major()/minor() fixes for s5
             features/libpath.sh: netbsd fix -- ld.so not in std places
             misc/fastfind: fix codes path generation bug
             optget: beef up --?* description, fix <TR>...</TR> nesting
             pathprobe: check for override (writable key file) first
             features/time: int tmtimeofday(struct timeval*);
             optget: fix opt_info.num, even if opt_info.arg!=0
             fts: FTS_PHYSICAL => FTS_SEEDOTDIR, add FTS_CHOP
             fastfind: init dir tab with logical and physical name
             glob: add gnu GLOB_ALTDIRFUNC
    99-07-17 sfio: kpv update and sfhdr.h sync!
    99-06-24 stdio: fix fflush() to ignore sfseek(0) return value
    99-06-23 magic: '\r' is text not control to placate m$
    99-06-08 stdio: fix fseek,ftell semantics
             uwin stdio: fflush() => _doflsh() to avoid __cplusplus clash
             getopt: call liberror() to avoid error() conflict
             tmfmt,tmscan: %N zone type (nation code), %z zone minutes west offset
             tmfmt: - no pad _ space pad 0 leading 0 pad
    99-05-28 magic: fix 'x' == '*' for any number, magic.tab tweaks
             features/lib: verify that stat64 really works
    99-05-21 tm*: add TM_WINDOW==69 for consistent century windowing guard year
    99-05-18 tmtime: add century leap year calc anticipating unsigned time_t
    99-05-17 sfkeyprintf: handle %o and %x!!
    99-05-09 pathprobe: $HOME/.probe if not suid and st_uid!=geteuid()
    99-04-28 magic,magic.tab: add registry()
    99-04-24 regcomp: fix ksh pattern +! parse
             regfatalpat: add
             optget: make : ? ] double escape consistent in all contexts
    99-04-01 features: drop iffeio.h and stdio.h when only printf() used
             regex: fix stats() .l and .k count
             fmtquote: added; most general fmtesc() form
    99-03-22 fmtesc.c,ast.h: add fmtnesq()
             optget: --?x works for -x option flag
    99-03-17 features/limits.c: workaround solaris __EXTENSIONS__ _timespec bug
             workaround limits.h circular prereq with ignore stdio.h
             sfvprintf: %04e left-pad zero fixed
    99-03-03 fts: uncle already: add FTS_SEEDOTDIR to retain leading ./
             regex: REG_MULTIPLE, BM for fixed string alternation
             optget: embedded `-' optional in long options, prefix={0,1,2}
    99-02-14 fastfind: fix dir format bug that emitted wrong paths
             astconf: fix redef off by one bug
    99-02-11 pathcanon(): don't cache astconf("PATH_LEADING_SLASHES", NiL, NiL)
    99-01-23 optget: move <old_opt.h> back into <option.h>, no open-close
             optget: add "[index:long-name:description]" for --long-name
             comp/gross: add weak __libc_attr for irix < 6.5 compatibility
             features/limits.c: tweak the guards again
    99-01-11 fastfind: handle old format count byte order
             magic.tab: fix elf to use real phdr offset
             magic.c,magic.tab: fix | to act like switch/case
             comp/fross.c,features/hack: for gross hacks
             features/stdio: avoid sfio namespace pollution
    98-12-25 tmdate: yyyy.mm.dd
             pathprobe: fix procrun() cmd path bug
             fmtesq: add
             features/common: win32.alpha va_list
             magic: add pc alpha object
    98-11-11 strmatch: add STR_ICASE
             pathprobe: punt to $HOME/.probe/<key+HOSTTYPE> if not S_ISUID
             tmzone,tmdate: handle +-minutes, nn/MMM/yyyy
             stropt: fix nested quote pop
             tmfmt: add %K => %Y-%m-%d/%H:%M:%S
             sfio/stdio: fix fseek() SF_PUBLIC omissions
             fmtesc: catch '\\' (duh)
             vmalloc: vmbest round bug fix
    98-11-01 fts.c: no pathcanon() if (fts_flags & FTS_PHYSICAL)
    98-10-01 features/stdio prototype fixes
             optget: strton() instead of strtol() for #
    98-09-22 regcomp: add REG_DELIMITED and REG_ESCAPE delimited re support
    98-09-15 fix _LARGEFILE64_SOURCE stuff
             ast_std.h: provide mmap() prototype
    98-08-11 fix sfpopen() to ignore SIGPIPE by ignoresig() for sfio but not stdio
             fix procopen() to ignore SIGPIPE by ignoresig() for PROC_IGNORE
             sfio sfpopen/popen update
             magic.src: fix ustar entry
    98-07-17 fix ftwalk() short by one malloc()
             add fts_notify()
    98-06-25 sfdcmore,sfdcprefix: add
    98-06-19 tokscan: add %f %g
    98-06-01 disc/sf*.c: memset(0) after disc malloc()
    98-05-11 strelapsed: y==Y
             fts: pathcanon() top list
    98-04-01 error: error_info.time for all msgs, just after cmd id
             error: no sfsync(sfstdin)
             sfio: sfpool, Sffmt_t update
             magic.tab: sgi core dumps -- why aren't these elf?
             stropt: (v+n) for unknown option is option value if n!=0
             procopen: fix setsid() for spawnveg() only
    98-03-19 malloc: add realloc foreign region check
             sfdisc.h: rename to match kpv disciplines
             fastfind: fix strcasecmp/strcmp directory prefix mixup
    98-03-17 features/fcntl.c,pathtmp,sftmp: add O_TEMPORARY
    98-03-01 pathcanon: fix PATH_LEADING_SLASHES to stat() both slashes
             pathcanon: add PATH_VERIFIED
             tmdate: add skip[] to expand separator char set
             fastfind: FIND_OLD for old 7 bit db, FIND_TYPE for new 8 bit typed db
             fastfind: default generates gnu LOCATE02 8 bit db
             magic: handle %s in mime description
             cdt: kpv update
             sfio: kpv update
             stdio: fpos64_t fseek64(), ftell64(), fgetpos64(), fsetpos64()
             stdio: fseek() => sfseek(SF_PUBLIC) to avoid locking
             fts: initialize parent stat[bp] from top level *after* statf done
             astmath: add -lm requirement test
             *: Astlong_t => _ast_*_t
             regex: simplify regcollate() (from doug)
             tmtime: preserve Tm_t*tm when calling tminit()
             astconf: add readonly PATH_ATTRIBUTES=[cirw]
    98-02-14 fastfind: add FIND_ICASE to ignore case
             tmdate,tmgoff: handle (+|-)hh[[:]mm[[:]ss]] absolute timezone
             tmdate: `<n> <part>' now assumes `next <n> <part>' instead of `this'
             tmfix: fix leap year bug that forgot to add 1900
             proc: add PROC_ZOMBIE
    98-02-06 strmatch() char class range bug fix
             regex char class range bug fix
    98-01-23 _WIN32: changed the #if logic again to accomodate _GNUC_
             mnt: grab the mount options too
             ast_std.h: hide getopt,getsubopt from stdlib.h
             features/limits.c: add gnu guard macros to avoid limits.h recursion
             features/mode.c: include "limits.h" instead of "FEATURE/limits.lcl"
    98-01-11 sfio.h: use Astlong_t, move Sfio_t Sfdisc_t typedef to top for stdio.h
             sfhdr.h: #undef SETLOCAL for hpux
             sfvprintf,sfvscanf: %I*x for sizeof(int_arg)
             handle ftruncate64 and truncate64
             dtopen.c: __hppa dll needs Dtset Dtlist Dttree refs here
    97-12-18 fmtnum: add
    97-12-11 magic: handle sgi 64 bit core dumps
    97-12-07 pathtmp: add override for TMPPATH,TMPDIR and cycling
    97-11-11 tm: handle 0 return from gmtime(),localtime() (dos negative time_t)
             features/stdio: fix fflush() macro to do physical sync
    97-10-31 astconf PATH_RESOLVE is logical if 3d&&!std, metaphysical otherwise
             magic: fix #! mime bug
             tm: tmtime() now calls tmfix() and adjusts tm_isdst too=>mtime() works
    97-10-11 dllfind,dlfcn: move to separate -ldll so -last can link static, duh
             Makefile,state.c: move forced header generation state.c => Makefile
             sfio: update including SF_WHOLE
    97-10-01 sfdostext: add \r\n => \n sfio discipline
             stropt: NiL table => p=name for all name=value
    97-08-11 pathtmp: check pid to note forks
             procopen: FD_CLOEXEC rfd && wfd
             fts: fts_close() after fts_children() with no fts_read() now works
    97-07-17 error: sfsync(sfstdin,sfstdout,sfstderr) instead of sfsync(NiL)
             _sfcvinit: add sfio internal interface to base conversion tables
             strton: use _Sfcv* base conversion tables instead of sfsscanf()
             sfvscanf: use _Sfcv* base conversion tables
             mime: x- permutations now matched if exact fails
             mime: original- stripped from content-* headers
             tmdate: add yyyy-jjj, yyyy-mm-dd
             dllfind: add
             ccmapid: fix buf copy loop limit
             ccmapname,ccmapcpy: add
             sfstrtmp: add
    97-05-09 streval: fix up casts for pseudo-ansi cc
             features/types: use _ast_int_8 vars to verify support
             string/modedata: check for mvs.390 S_IFMT
             include/ast(_std).h: add #define __FILE_typedef
             magic: add ccode text check
             include/ftwalk.h: FTW_PATH=>FTS_NOCHDIR to avoid FTS_AGAIN (duh)
             fts: clear status for FTS_AGAIN (fixes rm -r bug)
             mnt: add mvs openedition w_getmntent()
             sfhdr: _hdr_float && <float.h> for correct MAXDOUBLE
             vmalloc/vmbest: if _std_malloc then use malloc()/free() not sbrk()
             remove: check _std_remove
             procopen: handle pio[{0,1}]=={0,1}
             setenviron,features/uinstd: test for mvs.390 dll environ hacks
    96-12-25 <sfio_p.h> -> <ast_common.h>
             __EXTERN__(type,object)
             __DEFINE__(type,object,value)
             magic: check strings in !CC_NATIVE code set too
             system: cmd==0 means check for shell access (xopen)
             sfhdr.h: fix sfrsrv prototype
             add __libc_malloc etc for gnu/linux
             astconf(NiL,path,name) == astconf(name,path,NiL) + no liberror
             fts_open: if toplist() stat fails return 0
             ftwalk: handle fts_open()==0 via one phony userf() call
             sfmode: S_ISFIFO default is SF_SHARE=0
             features/lib: _WIN32 _lib_vfork=1 by default
             unsigned<0 comparison and other fixes via sgi.mips4 cc
             stk.c: use <align.h> ALIGN_BOUND for stkalloc()
             features/lib,vfork: uwin fix
             ast_std.h: fix strto[u]ll prototypes with features/types _ast_int_8
             getsubopt: add for xopen 4.2 compatibility
             drop function __IMPORT__
             magic: more magic
             change #define FILE from Sfio_t to struct _sfio_s
             state.c: add generated includes that may be hit by std for MAM
             bytesex: forgot about sizeof(long)=>7; could we fix the name too?
             vmalloc.h: fix vmnewof() definition
             sfio.h,stdio.h,ast_common.h: pollution cleanup
             magic.c: add | op for switch
             Makefile: stdio.h was on both HEADERSRC and HEADERGEN -- don't do that
             drop pp:notice to get <sfio.h> ... <ast.h> to work
             regex: add [[:<:]]==\< and [[:>:]]==\> for bsd compat
             mime.c: ignore X-* headers while scanning for Content-*
             magic.c: check for negative indirect offsets
             magic.tab: fix dos entry that generated negative indirect offsets
             vmalloc.h: add vmstrdup() prototype
             hash.h: add hashgetbucket() macro
             magic.c: MAGIFILE is now a : file list
             mnt.c: another 4.4 bsd fix -- users must include <sys/crap.h>
             common: fix _WIN32 chicken&egg with va_copy
             sfio: forgot to set f->val along with _Sfi in sfexcept()
             Makefile: add mini target for uwin libmini.a
             sfcvt.c: workaround for flaky long double optimizers
             features/common: fix to work with va_list==void*
             regexec.c: fix REG_STARTEND subexpression offsets
             strmatch.c: don't forget <wctype.h>
             regrexec.c: fix REG_INVERT end boundary bug that missed last record
             astconf.c: notify(0,0,"a=b") called for each setenviron("a=b")
             pathcanon.c: check astconf(PATH_LEADING_SLASHES) to preserve //*
    96-11-28 _LARGEFILE64_SOURCE by default if possible: NOTE: assumes xopen
             regerror: fix for xopen
             getopt: fix for xopen
             magic: add ciao virtual database
             astconf: posix/strict/xopen implies "standard" conformance
             fs3d.h: hide mount prototype
             ast_std.h,mnt.c,features/fs: ncr port tweaks
    96-10-31 version 5.0
             add strtoll() strtoull()
             sfkeyprintf: upgrade to int_max args
             ast.h: add ssizeof() to work around unsigned botch
             conf.sh: add shell actions to conf.tab
             _DLL*: drop for _BLD_<lib> + __EXPORT__ + __IMPORT__
             sfio,cdt,vmalloc: kpv update
    96-10-11 <ccode.h>: add character code map support
             procclose: return shell style exit status
             features/fs: pun statvfs.f_basetype to statvfs.f_reserved7 for mvs
             uwin: add subdir for uwin additions
             ast_std.h: swab() is from <stdlib.h>
             sfio.h: <ast_std.h> if _PACKAGE_ast
             magic.tab: add mips[1-4], 64-bit
             port tweaks for sol.sun4 and sun4
    96-09-06 strerror: add
             fmterror: uses strerror
             str*search: use sfiso646() order
             strpsearch: add
             magic: add Magic_t.mime mime type return for magictype()
             mime.h: add
             strton: use sfsscanf()
             strperm: factor in umask() if no who
             pathtmp: add TMPPATH check
             libevent: add
             magic: add discipline to magicopen()
             mime: add discipline to mimeopen()
    96-08-31 regex: fix BM fail table generator
    96-08-11 mntread: fix mnt.type for SCO variant
             conf.tab: add SCO KERNEL_* sysconf() vars
             fastfind: add findwrite(), fix findread() FF_OFF omission
             ftwalk: reimplement on top of fts
             fnmatch,re_comp,regexp: reimplement on top of regex
             basename,dirname,fmtmsg,fts,ftw,getdate,getsubopt,glob: add
             hsearch,nftw,realpath,strftime,strptime,swab,tempnam: add
             tsearch,wordexp: add
             getcwd: cache last path for easy test
    96-07-17 error: sfsync(NiL) ... write ... sfsync(sfstderr)
             astconf: handle readonly *(DEV|DIR) vars
    96-04-01 swapop: fix stupid return value bug
             features/int.c: fix int_swap generation bug
             regnexec,regrexec: fix unsigned underflow init error
             ls.h: fix iblocks() to be in units of LS_BLOCKSIZE
    96-02-29 magic: space before function is definition with no call
             hash: drop hash_info from public interface
             hash: OBSOLETE hashlast()
             hash: add Hash_root_t.Hash_last_t to public interface
             add strsearch() and strnsearch() to complement strlook()
             add hashkey.h for keyword->long hash
             pathpath: pathpath(0,0,"",0) disables $0 $_ $PWD relative search
             sfio: sfstrtod+sfhdr update
             regex: fix REG_LENIENT to map BRE \[+?|] to ERE [+?|]
             change _std_malloc iffe test so it doesn't hang on alpha
             sfhdr.h: features/sfio generates _lib_cvt instead of _i386_cvt
             ast_hdr.h: add va_copy(a,b) to copy va_list b to a
             getopt: fix stupid getopt() -> optget() bug
             sfvprintf: %h? now downcasts
             regex: handle strto?l() errno in regcomp()
             sfstrtod: _Sfstrtod_already_defined -> _STUB_sfstrtod
             ast_std.h: hide valloc() and ignore <strings.h>
             sfkeyprintf: pass phony va_list for '2'
             regex: change HIT var type from int to size_t in special()
             ast.h: add EXIT_STATUS(x) to convert wait() status to sh exit status
    96-02-14 regex: add _ to \<...\> isalnum test
             regex: fix BM inner loop breakout
             features/types: size_t is signed on some systems! => _ast_size_t
             sfio: sfrd discipline peek optimization
             vmalloc: vmalloc.h malloc family macro upgrade
             tokopen: fix newline bug for non-restore open
             sfio: no inline for gcc until it emits for -g too
    96-02-12 sfio: internal upgrade
    96-02-09 regex: Boyer-Moore boundary fix
             vmalloc: snarf latest
    96-02-06 regex: add regrecord() and regrexec() for Boyer-Moore record filtering
             regex: rearrange regnexec() args to match buffer,count arg style
    96-01-31 stk: add STK_NULL to stk.h and stk.c
             regex: privatize regex.h and fix min re length computation
             workaround lazy strdup() implementations in features/lib _std_malloc
             fix stkclose() to free(stream) -- purify missed because of sfio links
             unused var cleanup
             port/mnt.c must include <ls.h> to get <ast_fs.h>
             add SF_FINAL to sfio and stk
             sfio reads now on natural block boundaries
             add #!!! <level> <message> !!! to tokline()
             add REX_BM pre-filter to regcomp/regnexec
    96-01-22 add regcomp env.paren overflow checks
    96-01-11 add Doug McIlroy's regex (converted to C from C++ by gsf)
             AT&T Research now
             sfgetr optimization
             regex buglets
    96-01-05 tweak magic.tab for win32
    95-12-25 add !(...) -> (...)! to fmtre()
             nt tweaks -- functions with no header proto must be defined extern
    95-11-24 version 4.1
             add mnt.h mntopen mntread mntclose
             convert fmtfs to mnt.h
             add RE_LEFTANCHOR and RE_RIGHTANCHOR
             gcc inlines must also have global library function instantiation!
             add hashview()
             fix strtape() internal buffer flow
             fix mntread() fs/dir transposition for uts mnttab
    95-10-31 change features/unistd.c includes to break limits-param cycle
             add cdt from kpv
             sfio snarf from kpv
             add [ht]search for _WIN32
    95-10-11 clarify PARANOID pathcheck() warning
             fix procopen() LIB_SPAWN environ bug with setenviron() cache
             fix setenviron() bug that forgot to reset environ if == 0
             add %Z '\0' output format to sfkeyprintf()
             sfio snarf for sfvprintf fix
             allow multiple hashscan() with scope caveat
             add comp/fakelink.h to synthesize a few symlink text patterns
             add !<xxx> magic to misc/magic.tab
             add FTW_TOP to inhibit recursion (for ftw side effects on top level)
             add memfatal() common malloc fatal exception message
             add dos \r\n test to misc/magic.c/cklang()
             sftmp() O_EXCL+random to avoid collisions
             pathtemp() uses sftmp() randomizing
             features/fs uses SF_APPENDWR
             sftmp() uses pathtemp() -- don't worry, its not circular
             a few more _WIN32 compatibility additions
             realloc fixed to use VM_RSCOPY|VM_RSMOVE instead of obsolete 1
             add hashlook(tab, oldname, HASH_RENAME, newname)
             a few more tweaks to satisfy port warnings
             add _SFIO_INLINE_PRIVATE to provide real function too
             fix <dirent.h> installation test
             oops object / shared library compat with _sfgetl2 _sfgetu2
    95-09-11 add getopt() compatibility
             add fstat,lstat,mknod,stat fixes for _x versions in sys/stat.h
             add getconf CONFORMANCE - posix for things that aren't ast default
             sfio_t.h: #ifndef _SFIO_H #include "sfio.h" #endif
             snarf vmalloc from kpv
    95-08-11 fix malloc bug in magic
             update linux and bsd 386 magic entries
             error_info.auxilliary returns new level, |=ERROR_OUTPUT if msg done
             drop fnmatch from strmatch for sparc (solaris) until it collates
    95-07-17 fix port/astconf universe initialization
             fix misc/optget opt_info.nopt initialization
             drop tmset() TZ=... because it only worked when TZ=... was ignored
    95-05-09 mongo <ast.h> namespace cleanup
             drop > 2 year old obsolete interfaces
             sfvprintf.c fix for (char:8 short:16 int:32 long:64) architectures
             TMP_MAX back into conf.tab
             pathbin() and pathshell() now use astconf()
             fix pathtemp() to not cache getenv("TMPDIR")
             fix ftwalk() metaphysical to handle non-dirs too
             initialize *_info = { 0 }; for ancient ld semantics (NeXT)
             fix magic() to do vmfree()
             astconf(X_OK) must prefix lines with "getconf"
             use <wchar.h> and wctype in strmatch() if available
             _lib_utime_now checks utime(path,0)
             _lib_poll_notimer checks poll(x,0,timeout)
             add another _lib_utime_now check to port/touch.c
             fix dd_buf cast in dir/opendir.c
             split getconf.h into conftab.h and conftab.c for :READONLY:
             use mbtowc() only if MB_LEN_MAX>1
             sfio char* -> Void_t* cleanup
             handle old syntax in misc/magic.c
             sigdata.c holds readonly signal strings
             pathcheck() does AT&T checks for tools matching PARANOID - yuk
             unused var cleanup
             deprecate hash_info in favor of hashlast()
             fix bad conf.sh ksh integer interactions
             dll cleanup
             magic.c falls back to malloc for now
             add environ to <ast.h> -- C library global data syms are *RESERVED*
             sfhdr.h memccpy(1,2,3,size_t) prototype
    95-04-01 version 4.0
             convert to vmalloc
             allow sigcritical() nesting mismatch to work around vfork() bug
             add strexpr() primitive for streval() with user handle (like ftwalk)
             add <magic.h> and magic.c file command magic interface
             update magic mail message entry
             fix keyprintf() invisible char count nesting bug
             add sfstrnew(SF_READ|SF_WRITE) for alternate sfstropen() modes
             sfstrnew(SF_READ) but reading requires sfseek(), sfreserve()
             add conf.tab and conf.sh to nail C/POSIX limits/unistd macros
             add getconf() string interface to *conf*
             _DLL_INTERMEDIATE_DATA for systems that require indirect globals
             _DLL for building shared libraries with _DLL_INTERMEDIATE_DATA
             vecfile() restricted to S_ISREG()
             add spawnveg() for job control
             convert procopen() PROC_PGRP(id) to spawnveg()
             fmterror() returns error text given errno (strerror() does same)
             fmtsignal() returns signal text given errno (strsignal() does same)
             {sig_name,sig_text,SIG_MAX} -> sig_info.{name,text,sigmax}
             liberror("",...) omits [%s library] prefix
             update features/signal.c table
             add vmdisc() and change vmnewof() to use vmresize()
             fix conf.sh to allow refs to previously defined limits
             fix undefined entries in getconf()
             magic data in magic.tab
             fix stropt() pointer cast
             vmalloc() exception handler replaces nomalloc()
             merge sigdata.c into fmtsignal.c -- sun link needs function w/ data!
             sftmp() bug fix
             drop local <unistd.h> even with _POSIX_SOURCE
             fix vmstrdup() macro arg miscount
             fix conf.sh to handle enum'd symbolic constants in unistd.h
             drop malloc() et.al. prototypes from vmalloc.h
             fix sfvprintf() %d argument reference
             add OSF/1 AES symbol(s) to conf.tab
             determine standards prefix from conf.tab
             add _CS_SHELL to conf.tab
             getpath() default is confstr(_CS_PATH)
             getshell() default is confstr(_CS_SHELL)
             unify keyprintf user function args (should have learned by now!)
             add quad type to magic
             add astfeature() to unify universe style dynamic features
             add ftwflags() to determine FTW_* flags from astfeature()
    95-03-11 fix stropt() to not modify its *const* arg
             handle "'\ quotes and chresc() in stropt() values
             , treated like :space: between stropt() options
             fix procopen() fd dup to ignore self-dups
             add library id[] to misc/state.c
             add ftwalk(FTW_METAPHYSICAL) for posix -H
             sfvprintf() now handles balanced () in %()
             add tmfmt() with buffer size check to replace tmform()
             add fmttime() calling tmfmt() to fit fmt*() mold
             add <keyprintf.h> and keyprintf() to support %(...)? in commands
             add Hash_table_t for size==0 in stropt()
             add EXTTYPE extended header to tar.h
    95-02-14 sfmove() buffer size overflow fix
             add _SFSTDIO_H to sfio.h
             rename setenv() to setenviron() -- posix finally decided
             rename <option.h> opt_* to opt_info.*
             update features/unistd.c for _SC_* and _PC_* posix additions
    95-01-19 (char*)uchar cast in fmtesc()
             fix hash bucket memory leak in hashlook() [via John Mocenigo]
             update strings/strtape()
             fix optget()/optjoin() to handle leading +
             add ALIGN_ prefix to <align.h> identifiers
    95-01-11 change tm/*.c tmset(0) to tmset(tm_info.zone) to keep user setting
             fix tmform() %Z null pointer dereference
    95-01-01 add this RELEASE file
             fix strperm() to properly handle "644 file"
             fix tokline() to return last '\0' terminated line in string
             fix tokscan() to properly handle \\n splice
             add fmtesc() to complement stresc()
             add LS_NUMBER to fmtls()
             drop spurious optusage() ' '
    
    RELEASE notes for src/lib/libbz/RELEASE
    
    10-11-08 bzlib.[ch]: change bzReadGetUnused 3rd arg to void* for strict aliasing
    09-04-15 bzlib.c: add bzfopen()
    03-05-13 sfdcbzip.c: add SF_DBUFFER exception, SF_SHARE before sfreserve()
    02-02-14 blocksort.c: drop -O for msvc
    02-01-24 bzhdr.h: rename from bzlib_private.h for 14 char fs
    01-01-01 bzlib.h: add _PACKAGE_ast checks
    99-09-11 sfdcbzip: return >0 if discipline pushed
    99-07-17 sfdcbzip: don't free disc on SF_CLOSE
    99-03-17 split library from command, sfdcbzip.[ch]
    
    RELEASE notes for src/lib/libcmd/RELEASE
    
    12-06-25 getconf.c: don't defer to native getconf if we are it -- doh
    12-06-19 tail.c: be nice and use sh_sigcheck() and tvsleep() to verify interrupts
    12-05-31 cat,head,tee: use errno==EPIPE => ERROR_PIPE(errno)
    12-05-25 vmstate.c: #include <sfdisc.h> for sfkeyprintf() prototype
    12-04-20 chgrp.c,chmod.c,cksum.c,cp.c: default fts_flags()|FTS_META (to disable pure FTS_PHYSICAL)
    12-03-26 cp.c: fix --interactive astquery() logic that ignored no&quit!
    12-02-14 rm.c: --force ignores no file operands specified
    12-01-10 b_* (int, char**, void*) => (int, char**, Shbltin_t*)
    11-08-27 pids.c: add getsid() iffe test
    10-08-16 chmod.c: add -l alias for { -h --symlink }
    11-08-16 chgrp.c: change lchmod() ref to lchown()
    11-05-03 cp.c: do not delete src if mv to dest fails -- doh
    11-03-28 chmod.c,chgrp.c: fix --symlink logic
    11-03-26 rm.c: don't eaccess() check symlinks!
    11-01-27 date: add { -R, --rfc-2822, -T, --rfc-3339=type }
    11-01-03 chgrp.c: --symlink => --physical
    10-12-10 rm.c: fix not-writable logic
    10-12-01 tee.c: add iterrupt logic for slow open(1) -- needs to be generalized
    10-11-30 chgrp.c: add -N,--numeric to bypass name lookup
    10-10-20 cp: add --timestamps (preserv timestamps and permissions)
    10-10-20 ln: fix 'cannot replace existing file' logic
    10-10-10 cp,mv: add --remove-destination
    10-08-11 cp.c,expr.c: use conformance("standard",0) test
    10-08-11 cut.c: use mbnsize() instead of mblen() (for ast C.UTF-8)
    10-07-28 chgrp.c,chmod.c,cksum.c: fts_path for diagnostics, not fts_accpath!
    10-06-14 rm.c: fix -rfu logic
    10-06-12 paste.c: repeat after me: do not modify argv[i]
    10-06-01 sync with ast api 20100601
    10-05-09 tail.c: fix -0f bug that inially listed the entire file
    10-05-06 basename.c: add { -a,--all -s,--suffux=suffix } from BSD
    10-04-12 cat.c: fix -v bug that dumped core and make consistent with cmp --print-chars
    10-04-11 cmp.c: add --print-bytes, --count=n, --differences=n
    10-04-08 vmstate.c: add { method flags } vars for Vmstat_t.mode
    10-04-08 mkdir.c: fix check for { S_ISUID S_ISGID S_ISVTX } after successful mkdir(2)
    10-04-01 stty.c: add --fd=fd option
    10-03-23 tail.c: fix -f large initial offset bug that didn't copy all data
    10-03-07 tail.c: sfsync(sfstdout) after all -f done, fix -f partial line
    10-03-05 mktemp.c: add --regress=seed for testing
    10-03-05 vmstate.c: add
    10-01-26 tail.c: -f sleep(1) only if no progress from last round of checks
    10-01-20 fts_fix.[ch]: use <fts_fix.h> instead of <fts.h> (see fts_fix.c)
    10-01-20 cp.c: free(state) if called from old shell
    09-12-10 join.c: <wctype.h> for iswspace()!
    09-12-04 cmd.h: fix CMD_DYNAMIC logic
    09-12-04 cut.c: handle -d mb
    09-12-03 mkdir.c: add --verbose
    09-11-30 cat.c,date.c,cksum.c: drop setlocale() call already done by optget()
    09-11-30 join.c: handle -t mb
    09-11-28 wclib.c: { -w -L } mb independent of -m
    09-11-28 paste.c: handle -d mb
    09-11-28 uniq.c: handle -s mb
    09-11-28 cksum.c: FTS_SEEDOTDIR by default
    09-09-09 fds.c: add --unit=fd
    09-08-25 tail.c: initialize Tail_t.fifo=0 !!
    09-08-15 tail.c: fix fifo logic
    09-08-11 wc.c: add setlocale(LC_CTYPE,"C") cleanup, add utf8 optimzations
    09-08-10 uniq.c: replace -c 1..9999 sfsprintf() with inline conversion
    09-08-01 join.c: fix empty field null pointer deref
    09-07-23 pathchk.c: add -P,--path and -a,--all
    09-07-02 chgrp.c,chmod.c,cksum.c: fts_flags() default only if not --recursive
    09-06-19 cmd.h,cmdinit.c: add ERROR_CALLBACK for ERROR_NOTIFY main() callback
    09-06-19 mktemp.c: --unsafe now checks and prints path but does create
    09-06-19 tee.c: add ERROR_CALLBACK for tee_cleanup() sfio discipline pop
    09-06-18 rm.c: handle interrupts during interactive query
    09-06-18 cp.c: handle interrupts during interactive query
    09-05-25 tail.c: fix old style option logic to handle --invalid-long-option
    09-05-24 tail.c: -r == +1r
    09-05-01 mktemp.c: handle foo/prefix, add -p dir and -u
    09-03-31 cat.c: handle --no* options
    09-03-15 tail.c: fix --timeout termination logic
    09-03-03 tee.c: clean up sfio disciplines on error
    09-03-03 cat.c: fix -v|-e|-n|-B interaction bugs
    09-02-14 tail.c: fix VSC failures
    09-02-14 join.c: fix VSC failure
    09-02-02 uniq.c: document -number == -fnumber, +number == -snumber
    09-02-02 tail.c: fix usage[] for negative offsets, add sun -b
    09-02-02 mktemp.c: add
    09-02-02 features/utsname: UWIN _UNAME_os_DEFAULT => UWIN
    09-01-31 dirname.c: add experimental { -f -r -x } for pathpath(3)
    09-01-05 cmp.c: fix EOF diagnostic to conform to posix
    09-01-03 mkfifo.c: fix --mode=mode logic
    08-12-07 date.c: add %[_][EO]K for [space pad] [full|long] iso docs
    08-11-10 stty.c: check for -t grouping so -tostop != -t -ostop
    08-10-15 rm.c: handle 'rm -f x x' => exit 0
    08-09-08 stty.c: #ifdef guard TAB[012] -- freebsd: damn the posix, full speed ahead
    08-06-17 shcmd.h: move to libast
    08-04-24 uniq.c: add optget() 'n' option for -1 => -f1
    08-04-24 getconf.c: clarify diffs between "name - value" and "name = value"
    08-04-01 cut.c: add write error check
    08-04-01 paste.c: fix --noserial stream vector access bug
    08-04-01 pids.c: add ls/ps style --format=format
    08-04-01 stty.c: fix off2 unitialized reference
    08-03-28 chgrp.c: add --before=file
    08-03-14 pids.c: add
    08-03-11 chgrp.c: fix -m to use uid:gid as lookup key
    08-02-11 Makefile: add -lmd possibly required by sumlib.o -- hack alert
    08-01-30 expr.c: fix <=0 type that broke substr * 1 * -- wow
    07-12-13 cp.c: fix builtin state reinitialization
    07-11-29 rev.c: honor multibyte locales
    07-11-27 cp.c: open non-existent destination with O_EXCL
    07-11-27 stty.c: add -t,--terminal-group to list tty pgrp
    07-11-27 cksum.c: --silent -s => -S, -s == -x sys5 for gnu compatibility
    07-11-11 tee.c: drop ancient bsd compatibility "-" operand => SIGINT
    07-10-29 cksum.c: add SUM_LEGACY for -r
    07-10-12 cp.c: plug usage string memory leak by using per-builtin state
    07-09-21 cksum.c: add sumprint() default scale arg, --scale, --bsd for solaris
    07-09-10 chmod.c: add --show,-n
    07-07-27 wclib.c: bias <wchar.h> checks for modern unix
    07-07-17 cat.c: fix --squeeze-blank to reduce multiple blank lines to *one*
    07-05-20 cmd.h: handle msvc's balk at if(0)0=0;
    07-05-20 cksum.c: #include <modex.h>
    07-05-11 cmd.h: add _CMD_CONTEXT_OK() to verify >= 20070511 context
    07-05-09 fds.c: handle ipv6 sockets
    07-05-09 cmd.h: <shbltin.h> : cmdquit() => sh_checksig(context)
    07-04-25 mkdir.c: force (S_ISVTX|S_ISUID|S_ISGID) after mkdir(2)
    07-04-24 procrun.c: add -last intercept => sh_run() and whence -q
    07-04-19 uname.c: name operands first checked for CS_NAME, then NAME
    07-03-28 date.c: add --unelapsed=scale, -U: fmtelapsed() => strelapsed()
    07-03-25 wclib.h: iswspace() requires <wctype.h>!
    07-03-11 tty.c: add sysV --line-number, -l
    07-02-26 Makefile: sumlib.o: direct extract from +lsum (vcodex someday)
    07-02-24 Makefile: tweak cmdext.h action for --mam bootstrap
    07-02-09 Makefile: { cmdext.h cmdlist.h } depend on *.c list!
    07-02-09 Makefile: +lsum to bring in static -lsum (no dynamic right now)
    07-02-07 cksum.c: move from src/cmd/std with ftwalk => fts
    07-02-07 getconf.c: handle /bin == /usr/bin in defer logic
    07-01-26 chmod.c: don't FTS_FOLLOW if !FTS_PHYSICAL
    07-01-23 cut.c: Cut_t variable dimension list[] must be last member
    07-01-22 uname.c: fix -h typo that clobbered astconf() state -- ouch
    07-01-02 fmt.c: fix buffer splice off by one bug -- what else
    06-11-23 cmd.h: because of proto cmdinit cannot be a function like macro
    06-11-21 cp.c: fix 06-10-31 const dot[] readonly assignment
    06-11-15 cp.c: fix 06-10-31 ln -s enoent bug
    06-11-11 getconf.c: let astconf() handle "undefined" vs. ""
    06-11-11 getconf.c: fix deferred getconf path search
    06-11-11 fmt.c: handle two char { \t \n } in --usage ouput
    06-10-31 global edit to eliminate most non-const static data0
    06-10-31 use <cmd.h> for all b_*() implementations; drop <cmdlib.h>
    06-10-31 cmd.h: add CMD_ prefix to { BUILTIN DYNAMIC STANDALONE }
    06-10-31 join.c: tone down /tmp usage vi SFSK_DISCARD
    06-10-31 cp.c,rm.c: update to <fts.h> to accomodate non-static data
    06-10-29 date.c: "...%H%..." => "...%H" "%..." to avoid SCCS conflict
    06-10-26 fds.c: handle sctp
    06-10-18 tail.c: fix invalid suffix infinite loop
    06-10-11 chgrp.c,cp.c: add sfstruse() error checks
    06-10-10 tee.c: add --linebuffer, -l
    06-10-06 getconf.c: preserve native getconf(1) known variable behavior
    06-10-04 sync.c: add (thanks to Roland Mainz)
    06-10-04 getconf.c: add -v specification => run native getconf(1)
    06-09-28 stty.c: static setmode() => set() for darwin.i386
    06-09-27 head.c: handle -1c => -c1
    06-09-19 pathchk.c: pathconf() => astconf()
    06-09-11 tail.c: handle compatibility corner cases
    06-09-08 date.c: add output write error diagnostic
    06-09-04 tail.c: fix initial position for -n0, no args => no -f
    06-08-28 uniq.c: add -D,--all-repeated
    06-08-25 wc.c,wclib.c: add -L,--longest-line,WC_LONGEST
    06-08-24 wc.c,wclib.c: implement -m and WC_MBYTE
    06-08-24 rmdir.c: -sp applies to every message, add gnu -e
    06-08-23 rmdir.c: add solaris --suppress, -s
    06-08-23 mkdir.c: don't add 0300 to -p final dir mode
    06-07-17 cut.c: handle last line with no newline
    06-07-17 cut.c: --output-delimiter == --line-delimiter
    06-06-25 chmod.c: mask -c output with S_IPERM
    06-05-09 uname.c: add -o; change -a to match linux
    06-05-03 date.c: add --last -L to list last of multiple time args
    06-02-14 tail.c: fix -f bug that lost fast stream data
    06-02-11 getconf.c: exit 1 if name invalid -- duh
    06-01-28 cp.c,rm.c: fix astquery() 'q' to return and not exit()
    05-08-11 fmt.c: fix -o to handle raw --usage strings
    05-05-17 cat.c,head.c: disable EPIPE error messages
    05-04-14 chgrp.c: -f means all non-syntax error messages
    05-04-11 fds.c: add from old internal open(1)
    05-04-09 cmdext.h,cmdlist.h: generate from source -- about time
    05-03-24 features/symlink: verify { lchmod lchown } implementations
    05-03-07 date.c: add --listzones to list the time zone table
    05-02-14 chmod.c: add --reference=file
    05-01-11 cat.c: restore output stream to binary mode on exit
    04-12-15 cp.c: add --preserve high resolution time support
    04-12-08 date.c: add high resolution time support
    04-12-01 cmp.c: fix %6I*ld => %6I*d -- doh
             fmt.c: handle "\n\n operands \n\n"
             head.c: handle -cN -nN, N > 4Gb
    04-11-22 cmp.c: handle >2G chars/lines
    04-11-18 fold.c: add --prepend=text, --append=text
    04-10-31 tail.c: use SF_LOCKR macro
    04-10-28 tail.c: use strtol() for old stype [+-]number[suffix] -- doh
    04-10-22 cp.c: check rename() errno==ENOENT to retain destination
    04-10-11 fmt.c: fix -o,--optget sublist bugs
             tail.c: use strton() for number conversion
    04-10-08 pathchk.c: add empty path and -p - first component char
    04-10-01 fmt.c: add -o,--optget concatenated usage string format
             stty.c: context is ERROR_INTERCATIVE
             rm.c: restore 3d before exit
    04-09-24 pathchk.c: fix docs
    04-09-14 date.c: add %| and %& --parse docs
    04-08-27 cp.c: add FTW_DC check -- duh
    04-08-01 fmt.c: handle last char != '\n'
    04-07-22 date.c,uname.c: access() => eaccess()
    04-07-01 fmt.c: handle large input lines -- ouch
    04-06-11 id.c: fix -r to output something!
    04-05-27 expr.c: fix `:' op subexpression output
    04-04-15 chmod.c: follow symlink for relative mode
    04-04-12 Makefile: add STDCHMOD (for osf.alpha)
    04-03-19 tail.c: handle -f sfreserve() large chunk failure
    04-02-29 cp.c: decouple -f and -i for standard CONFORMANCE
             cp.c: mv now attempts rename() before remove()+rename()
             date.c: -f format or +format disables system clock set
    04-02-14 cp.c: add -F --fsync to call fsync(2) for each copied file
    04-01-05 head.c: -s now uses opt_info.number for >2Gb skip
    03-09-18 tail.c: add --log
    03-09-11 rm.c: add --unconditional
    03-08-11 fold.c: add --delimiter=c to break at c
    03-07-28 features/time: change settimeofday() test to 2nd arg of (void*)0
             expr.c: add {match,substr,index,length,quote}
    03-07-15 fmt.c: fix trailing space bug
    03-06-20 uname.c: fix -p constant string overwrite
    03-06-04 stty.c: add undef to control assignment docs
    03-05-31 uname.c: add -f and sysinfo()/confstr() compatibility via astconf()
    03-05-27 rm.c: fix inappropriate "/.." append path overflow
             cut.c: snarf from dgk
    03-05-18 rm.c: check st_nlink to verify progress w.r.t. ftwalk/fts
    03-05-15 join.c: fix stealth -v2 bug (thanks ahs)
    03-05-04 wc.c: drop trailing space for `wc -l < file'
    03-03-21 date.c: add %Q/recent/distant/ docs
    03-02-19 date.c: fix %+|!flag docs
    02-11-14 update for cmdinit() 4th arg and ERROR_NOTIFY for interrupt cleanup
    02-10-02 date.c: tmform() => tmfmt()
    02-09-30 date.c,uname.c: change execv() calls to procrun(): exec|exit => bad
    02-09-06 wclib.c: fix 1 char-at-a-time miscount bug
    02-08-19 chgrp.c: convert to use <cdt.h>
    02-07-23 join.c: fix comm snarf typo
    02-04-05 date.c: add %u
    02-01-24 stty.c: ifdef a few more macros for uts (yes, its still running)
    01-12-14 date.c: clarify %z doc
    01-10-31 mkdir.c: mkdir() on existing dir could fail with errno!=EEXIST
             uname.c: add execve() loop check for unknown options
    01-10-29 tail.c: SF_SHARE on only if not reading through EOF
    01-10-11 getconf.c: fix usage typos
    01-09-11 cp.c,cmd.h: handle . in argv[0]
             cp.c: add O_BINARY to all open() calls
    01-09-06 tail: input streams must be SF_SHARE -- duh
    01-07-16 stty: fix cntl() macro for CC_NATIVE!=CC_ASCII
    01-05-31 date: fix /bin/date fallback logic
             stty: fix a few mismatched flags, -a and -g option logic
             stty: tone down sane to modify current settings rather than from zero
    01-05-01 uname: -i => -h, add sol.sun4 -i, add sgi -R, punt to /usr/bin/uname
    01-04-17 date,rm: add
    01-03-07 cp: fix readonly string mod on "."
    01-01-23 cp: `cp foo' => `cp foo .' only for CONFORMANCE!=standard
    00-12-01 cut: multibyte support
    00-10-31 mkdir: handle races by checking EEXIST
    00-09-20 cp: copy argv to stack before modifying in place
    00-05-18 add setlocale(LC_ALL,"")
    00-04-30 join: drop weird opt_info.argv reference
    00-03-17 expr: add == operator -- duh
             cp,ln,mv: delay pathcanon() on destination to verify `cp a b/.'
             getconf: use astgetconf for proper message control
             ERROR_translate: dictionary update
    00-03-08 tail: handle multiple -f files
    00-03-07 fmt: add
    00-03-07 dirname: handle PATH_LEADING_SLASHES as documented
             tail: accept + options
    00-02-14 chmod: --ignore-umask to ignore umask(2) in symbolic expressions
             chmod,chgrp,cp: use FTS_NOSEEDOTDIR for correct path construction
             cat: fix -n (was ignored, wow)
    00-01-27 getconf: add "-a" and "-v spec" for sol7.* compatibility
    99-09-09 join: fix -j1 vs. -j 1, add --ignorecase
    99-06-22 paste: defualt delim in writable string
    99-06-16 cat: fix --dos-ouput typo
    99-06-11 cp: tighten chown() diagnostics
    99-06-08 expr: nothing for NULL string bug fix
    99-05-21 paste: fix missing newline columnize bug
    99-05-20 mv: do not check for `mv foo foo' since rename() handles it
    99-05-01 cmp,comm,cp/mv/ln,expr,fold,getconf,head: long options
             join,logname,paste,pathchk,tail,tee: long options
    99-04-10 uname: long options, stdize -a
             chmod,head,tail,rev: long options
             cut: long options, pass regression test 02
    99-04-07 cat: long options, fix O_TEXT modes
    99-01-11 tail: fix +n
             join: another ggs/psm bug
             join: all 1 and/or 2 to be unseekable
    99-01-01 cp: fix -p
             chmod: drop -l option because of clash with l (lock) mode
    98-12-25 cat: add -T to sfopen(,,"rt")
    98-11-11 chgrp,chmod: cannot open file stream => not found
             join: fix another ggs/psm bug; thanks guys
    98-10-20 cp: fix cp -rp to update dir times too
    98-09-22 join: fix ggs null field bug
    98-08-11 join: fix last regression test bug
    98-05-29 join: add jp->common to handle boundary conditions
    98-03-11 cat,cp,rev,tee: fix sfmove() error checks
    98-03-01 join: fix bug that emitted records more than once after eof
             cp: fix sfmove() error check
    98-02-14 cp: -R physical, -[HLP], -r getconf(PATH_RESOLVE)
    98-01-11 cp: check sfclose() return value
    98-01-07 chown,chgrp,chmod: use fts for -R
             mkdir: fix -p default mode
    97-12-07 mkdir: fix umask() reset
    97-11-11 chown,chgrp: proper interpretation of -h,-l for lchown()
             chown,chgrp: only chown() if uid or gid change
    97-10-31 mkdir: do umask right
    97-08-11 cmdinit: clear opt_info.index to allow multiple calls
             cp,ln,mv: add
    97-07-17 join: fix a few more -a bugs
    97-05-31 expr: optget() only if CONFORMANCE==standard
    97-04-01 join: fix a few bugs that make it work!
    96-12-25 head: sfset(sfstdin,SF_SHARE,1)
             Makefile: add -last to cmd lib list
             drop function __IMPORT__
    96-08-11 tail: check for truncated file and rewind for -f
    96-04-08 update <cmd.h>
    96-02-29 uname: -a like std, -l for everything
             id: add -a (default)
    96-02-14 wc: speed up inner loop newline breakout
    96-01-30 unused var cleanup
    96-01-01 AT&T Research now
             pathchk: handle getcwd(0,0) error
             expr: switch to <regex.h>
    95-11-11 add expr.c
             fix cut exit code and -s optimization
    95-10-11 add extern b_* to cmd.h
             add void* context 3rd arg to b_main()
    95-05-09 add getconf
             cat -u avoids mmap
             add chown|chgrp -m uid|gid map file
             add chown|chgrp -P for systems with lchown(2)
             chown|chgrp -P => lstat() too!
             chmod|chown|chgrp -HLP
    95-04-01 version 1.2
             add rmdir
    95-02-14 fix mkdir -p symlink bug
             fix mkdir '/' skip bug that went one too far
    
    RELEASE notes for src/lib/libcodex/RELEASE
    
    10-01-15 code-uu.c: add uu-base64-string to encode with no newline separators
    09-06-26 codex.h,codex.c: add Sfio_t* Codex_t.op for open/close/read/write apis
    08-05-23 code-qp.c: avoid isprint()/iscntrl() for CC_NATIVE==CC_ASCII
    07-09-26 code-uu.c: uu_sync() => flush() for encode only -- doh
    07-09-22 code-uu.c: fix uu_read() partial reads
    07-09-22 codex.c: handle PASSPHRASE=* as documented
    07-09-22 codex.c: handle quoted parameter values
    06-08-23 code-uu.c: fix remainder output *and* input bugs
    05-09-25 add '^' equivalent to '|'
    04-02-14 codex.c: SFDCNEXT() and SFDCPREV() now provided by <sfio_t.h>
    04-01-11 codex.c: top level composition parse, handle CODEX_INVERT
    04-01-10 codex.c: use CODEX_FLUSH to disable SF_SYNC before initf
    04-01-09 prepare codex.h for possible { decodef encodef } addition
    04-01-04 codexcmp.c: fix return value to match strcmp(3)
    03-12-30 codexmeth.c: case-sensitive match on qualified name
    03-12-26 add CODEX_OPTIONS='trace=method-name-pattern debug'
    03-12-25 codex.c: pop intermediate disciplines on error
    03-12-22 add "RETAIN" option for CODEX_RETAIN
             add "SIZE=size" and alternative codexsize() for expected output size
    03-12-18 add to ast -- still working on relationship with { -lvcodex -lz -lbz }
    03-12-16 codexlib.c: add cache to codex()
    03-12-15 { rot13 qp uu iconv } working
    03-12-11 first code
    
    RELEASE notes for src/lib/libcoshell/RELEASE
    
    12-02-22 coinit.c: handle non-identifier export var names
    11-12-13 cowait.c: handle sfpoll() error return on interrupt
    11-11-21 cowait.c: poll before blocking read to weed out killed jobs (no 'x' message)
    11-08-30 codata.c,coopen.c: drop macro "..." catenation for old cc
    10-08-11 coinit.c: force _BLD_DLL for environ intercept
    10-06-01 sync with ast api 20100601
    10-05-19 cokill.c: do cowait(co,co,0) to drain pending messages
    10-05-15 coshell.h,coopen.c: add CO_ORPHAN for PROC_ORPHAN
    10-05-11 coopen.c: add PROC_ORPHAN for CO_SHELL
    10-05-10 coopen.c: no atexit() for CO_SHELL
    10-04-15 first ksh93u local job pool tests work (service daemon tbd)
    10-04-14 cowait.c: add 3rd cowait() arg timeout; 0 Coshell_t* operates on all open coshells
    10-04-10 coshell.h: add CO_SHELL for shell using coshell!
    09-12-09 coexport.c: add runtime CO_ENV_EXPORT hook that avoids changing environ
    08-10-28 coopen.c: close write side of parent msgfd -- doh
    08-04-28 coexec.c: check for fd 1,2 equivalence before CO_SERIALIZE 2>&1
    07-10-29 coshell.h,coexec.c: fix procrun()/system() intercept logic
    07-08-15 add CO_SEPARATE,CO_MODE_SEPARATE for separate shell+wait per action
    07-04-09 Makefile: $(CC.PIC) to allow archive to be pulled into other dlls
    06-08-22 coshell.h: procrun => coprocrun, system => cosystem
    06-08-09 coshell.h: export CO_ENV_MSGFD for COSHELL=coshell
    06-08-02 coexec.c: Cojob_t.flags&CO_SERVICE for service requests
    06-08-02 cokill.c: cokill() signal==0 => kill CO_SERVICE jobs
    06-07-27 coexec.c: drop server cowait() that bypassed caller
    06-06-21 coexec.c: add non-block cowait() to drain responses
    06-06-11 fix service intercept cleanup
    06-05-24 add service=name:init lightweight service intercepts
    05-04-19 cowait.c: beef up invalid message tests and diagnostics
    05-04-11 drop fixed CO_MSGFD for $_coshell_msgfd
    05-04-07 coexec.c: fix !_lib_fork&&_map_spawnve close-on-exec redirection
    04-09-22 cowait.c: remove CO_SERIALIZE temporaries after listing -- duh
    04-09-01 co*: add CO_SERIALIZE
    04-07-22 system.c: access() => eaccess()
    04-02-11 coinit.c: fix CO_CROSS PATH initialization
    02-10-30 coclose.c: fix reference-after-free bug in coclose()
    02-01-31 codata.c,coopen.c: fix CO_MSGFD parameterization
    02-01-24 coopen.c: fix small memory leak
    01-10-26 coopen.c: hung sfclose(fp) -> close(sffileno(fp)) -- wow
    01-09-11 coinit.c: fix coident[] for ancient bsh that die on `test == 1'
             coinit.c: and fix coident[] to weed out buggy ksh88i trap on exit
    01-05-31 co*: add CO_CROSS, expose CO_DEVFD
    01-04-23 coquote: add state.type to avoid getenv() overwrite on some systems
    01-01-01 cokill: killjob => cokilljob, killshell => cokillshell
    00-12-18 coinit: CO_OSH ? "${!-$$}" : "${!:-$$}"
    00-10-25 codata: $ZSH_VERSION is not ksh
    00-02-14 procrun,system: system(3) returns wait() status (not shell status)
    99-11-19 co*: add CO_OSH for bsdi lack of times(1)
             coexec: CO_IGNORE for all but real ksh
    98-06-22 coinit: quote cd path arg
    
    RELEASE notes for src/lib/libcs/RELEASE
    
    10-06-01 sync with ast api 20100601
    10-04-12 Makefile: defer share and local generation to first use
    08-04-09 csopen.c: fix mkmount() path cleanup
    08-04-09 csopen.c: add debug=-1 mkmount() error message
    07-06-05 csclient.c: add CS_CLIENT_SEP
    06-09-19 css.c: sysconf() => astconf()
    06-08-15 csclient.c: fix prompt logic
    06-08-14 csopen.c: fix group=name logic
    06-08-04 csclient.c: fix CS_CLIENT_ARGV
    06-06-11 csclient.c: add
    06-05-31 csopen.c,cs.h: add csattach() for non-/dev/fdp/ streams
    05-02-04 Makefile: drop -lnetinet (for lynxos)
    04-07-22 csopen.c,cssend.c,csauth.c,cslocal.c: access() => eaccess()
    04-07-19 cslocal.c: call spawnveg() for standalone 3d
    04-03-25 csrecv.c,cssend.c: OPEN_MAX_CEIL => OPEN_MAX
    03-08-01 csdata.c: add NoF pure data workaround, drop const + prototyped
    03-03-28 msglib.h: add D_FILENO ifdef
    02-10-02 features/lib,genlocal.sh: add ssh, pid to hang warning
             msglist.c: tmform() => fmttime()
    01-12-12 cssfd: CS_POLL_CLOSE now close()'s if not dropped -- double duh
             csstat: change down test to avoid unsigned long overflow
    01-10-31 cssend,csrecv: use msg_accrights over msg_control
             cspath: don't check /dev/fd/* -- duh
    01-05-11 csserve: sync cs.* with css->*
             csspoll: handl cspoll() EINTR that doesn't set cs.interrupt
    01-01-01 cspoll: fix getmsg() flag arg
             csaddr: fix local host addr initialization
    00-06-01 csopen: handle dynamic ip assignment underfoot
    00-05-11 csopen: handle /dev/tcp/local/9876/FOO/other
    00-05-09 cssfd: CS_POLL_WRITE implies O_NONBLOCK
    00-02-14 cschallenge(): add stat() to verify touch()
    00-02-03 features/lib: add sys/types.h to htons etc. header refs
    00-01-25 genlocal: use package instead of hostinfo
    99-10-07 csbind: NODELAY for CS_ADDR_NOW only
    99-09-22 cs*: add CS_MNT_TAIL for multi-char mount files
             css: _UWIN workaround for st_ino verification
    99-07-17 csaddr: clear more state->flags bits to avoid prev csopen() carryover
    99-05-20 msg*: handle f_basetype and f_fsid for redhat 6.0 linux -- boo
    99-05-13 css: fix disc.wakeup logic
             cspoll: add debug=6 poll trace
    99-04-23 csaddr: check for 127.0.0.[01] from hostname lookup == local
    98-06-29 cs.h: add Cs == (&cs)
    98-06-03 csserve: fix SIGCHLD exit bug
    98-02-14 csopen: add PROC_ZOMBIE for systems that don't fork() in csdaemon()
    97-11-27 csopen: /dev/tcp/*/inet.*/user for client inet.* authentication
             css.h: add CSS_AUTHENTICATE for server inet.* authentication
    97-11-11 csread: add CS_RESTART to restart on interrupt
             cslib: CS_AUTH_MODE for authentication file mode
             cs.h: drop CS_SVC_SERVICE, add CS_SVC_SUFFIX
             SERVICE.mk: executable name changed from server => `service'.svc
             csopen: rm CS_MOUNT_PROCESS if no connect and pid invalid
    97-07-17 add css.h, csserve() on top of css
             CS_INTERFACE=2 for thread safe state instead of global cs.*
             cspoll(CS_POLL_WRITE) events cleared on write
             csspoll(timeout,CSS_INTERRUPT|CSS_ERROR)
             cs.h,msg.h: fix dll import/export
    97-05-09 cslib.h: check _hdr_netdb,_hdr_netinet_in,_hdr_netinet_tcp
             features/lib: statvfs.f_fstr
             msglib.h: <ast.h> before "cs_lib.h"
    97-04-01 csport: htons() done too soon
    96-12-25 genlocal: add correct nslookup query
             fix sizeof(long)==4 assumptions
             install genlocal and genshare in $(INSTALLROOT)/lib/$(ID)
    96-02-29 use <hashkey.h>
             add csport()
             drop CS_MOUNT_*; use csvar(CS_VAR_*,trust) instead
             CS_VAR_PROXY ($CS_MOUNT_PROXY) names proxy connect stream
             csopen() attempts proxy open on local failure
             hold CS_PROC_FD_TST cssend() fds until next cssend()
             csread(CS_LINE) really means 1 line
             fix cslocal() and csopen() fdp initiate timing bug
    96-01-31 add warning to local rather than generate on install
    96-01-22 no <sys/uio.h> on linux (defined(MAX_IOVEC))
    95-11-11 trap 127.0.0.[01] local address alias in cspath() and csntoa()
    95-10-31 CS_MNT_OTHER '.' -> '#' to placate NT (trailing . ignored -- thanks)
    95-10-11 export -> coexport
             add dirsize() to cslib.h
             check _mem_d_reclen_dirent for d_reclen
    95-08-11 (done)(handle,EXIT_TERM(signal)) called on csserve() interrupt
                    0 return ignores signal
             csserve() now creates local auth dir if not there, duh
             fix genlocal hostinfo timeout
    95-07-17 fix remote auth off by one error
    95-05-09 add linux /proc/<pid>/fd/<fd> to cssend()-csrecv()
             add bsd4.4 msghdr.msg_accrights -> msghdr.msg_control mods
             bsd4.4 thinks S_ISFIFO() and S_ISSOCK() are the same!
             features/cs.c now uses sfio
    95-04-01 convert genlocal.sh to hostinfo
    95-03-19 bsd4.4 stole devname(), so use devpath() in cspath()
    94-12-15 csinfo("-",0) gets standard info
    
    RELEASE notes for src/lib/libdll/RELEASE
    
    12-07-25 add debug diagnostics
    11-10-11 dll_lib.c: add { dllnames() dll_lib() }
    10-10-20 dllscan.c: version arg "-" => 0
    10-10-19 dllplug.c: fix bug that wiped out dlopen() error message
    10-10-19 dllplug.c: un-localize lookup names (happens with cut and paste)
    10-10-19 dllscan.c: still no code for implicit libs missed by dlopen()
    10-08-02 dllplug.c: fix local path dllcheck() call
    10-05-28 dllplug.c: add dllplugin() with dllcheck() version check
    10-05-28 dllcheck.c: add dllcheck() to do plugin_version() checks
    10-05-28 dllerror.c: add dllerror(int retain) for dll*() and dl*() messages
    09-11-17 dllscan.c: handle name[-.]version in dlsopen()
    09-04-15 dllopen.c: add, use dllopen() internally to wrap dlopen()
    08-05-12 dllscan.c: LIBSUFFIX==.dylib => default plugin version match 0.0
    06-10-11 dllscan.c: check sfstruse() return values -- doh
    06-01-25 dllplug.c: add errorf() library message for dlopen() error
    05-02-14 dllscan.c: "" || "-" => NiL
    04-10-01 dllfind.c: drop ksh "builtin" workaround
             dllscan.c: directory prefix in name limits search to dir and siblings
    04-07-22 dllscan.c: access() => eaccess()
    04-01-30 dllfind.c: dllplug(error_info.id) then dllplug(0)
    04-01-28 dllscan.c: update for new plugin scheme: lib/foo/bar.xxx
             dllplug.c: add dllplug() for plugin dllfind()
    03-03-12 dllfind.c: dlopen() with RTLD_GLOBAL|RTLD_PARENT defaults
    03-02-11 dllscan.c: change LIBPATH to <dir>[:<env>[:<pat>]][,...]
    03-01-08 dllscan.c: hack version logic again -- is consistency rocket science?
    03-01-07 dlfcn.c: fix darwin.ppc dlopen/dlsym/dlclose
    02-11-18 dllfind.c: add path,size args (with backwards compatibility checks)
    02-11-15 dllfind.c: check for ./path if '.' in path but no '/'
    02-08-30 dllfind.c: fix a bug that returned uninitialized value on not found
    02-08-28 dllscan.c: handle and display bin as a sibling dir
    02-07-31 dllscan.c: add dllsopen,dllsread,dllsclose
             dllfind.c: use dllsopen,dllsread,dllsclose
    02-07-26 dllfind.c: add dllinfo()
    02-06-27 dllnext.c: define _GNU_SOURCE to enable RTLD_NEXT
    02-03-17 dllfind.c: fix dll prefix search (for cygwin)
    02-01-11 features/dll: include <dlfcn.h> only if _hdr_dlfcn&&_lib_dlopen
    01-10-31 dlfcn.c: change hp.pa dlopen() prototype (<dlfcn.h> but no -ldl!)
    01-09-25 dllfind: add LIBSUFFIX
    01-07-17 dllfind: do at least one dlopen() to prime dlerror()
    01-05-29 dlopen: fix dlopen(0,0) for HP
    01-04-20 dllfind: use getconf HOSTTYPE LIBPATH LIBSUFFIX
    01-02-14 features/dll: fix unbalanced ' quote and ancient hostinfo reference
    00-01-26 dlllook: add -- dlsym() with `_' weak prefix fallback
    99-04-01 features/dll: drop <stdio.h> -- iffe protos printf
    99-03-19 static=1 for all but win32.*
    98-06-01 dllfind: fix version search
    98-03-11 features/dll: probe for _DLL_RLD_SYM
    98-03-01 dllnext: fix to work!
    98-01-23 -ldl test moved to lib0ast
    98-01-11 update for astconf("LIBPATH")
             add dllnext(flags) to uncover next layer
             dllfind() and dllnext() in separate files (for 3d)
    97-10-11 move from libast so libast can link static
    
    RELEASE notes for src/lib/libdss/RELEASE
    
    12-06-15 dssopt.c: fix bug that failed to provide closing ]
    12-05-31 dssopt.c: handle optegt() style descriptions
    12-05-15 cx.h: add CX_DEPRECATED
    12-05-15 cxopen.c: handle nested structs
    12-02-29 cxopen.c: add "hex" details for external buffer representation
    11-10-07 dssopen.c: use generic dll_lib() to load methods
    11-09-11 cxmap.c: fix cxsub() to cast <=> string if necessary
    11-09-11 add <MAP><PART><EDIT>ed-style-substitute</></></>
    11-09-11 dssprintf.c: add edit=<del>from<del>to<del>[flags]
    11-09-11 cxopen.c: add edit() builtin
    11-09-10 cxopen.c: add cxcvt()
    11-09-07 dssprintf.c: fix if/else nesting -- ouch
    11-08-22 add cxsizeof()
    11-08-22 add sizeof(var), typeof(var), type==type, type!=type
    11-08-19 add DSS_BASE for base methods (with dynamic schemas)
    11-08-19 dss-print.h: add --all to list name/value for all fields
    11-08-18 cxeval.c: (cx->test&0x0100) enables code trace
    11-06-21 cxcomp.c: fix back() on empty input stack logic
    11-06-15 dssmisc.c: add "< expr-file" expression to dsscomp()
    11-06-15 dss-scan.h: add "< list-of-files-file" argv to snan_beg()
    11-06-15 dssopen.c: dsslib() scan invalid plugin is just a warning
    10-05-04 dssopt.c: check for '[' usage in description, drop [+PATH?...]
    10-05-01 cxopen.c: document string type format details
    10-04-22 dssprintf.c: %(:details:)s for default %s details
    10-04-22 dssopt.c: handle dss default method special cases
    10-04-22 dssprintf.c: treat { %d %ld %lld %Ld } as intmax_t
    10-04-22 add (type)var and (type)lib::fun() casts
    10-04-22 add lib::fun and lib::type plugin lib bindings
    10-04-22 fix unary ! logic bugs
    10-04-22 add Dsslib_t.variables variable/function table
    10-04-21 dssprintf.c: allow expressions in %(...)c
    10-04-15 add string=>number CX_CAST callout for stringvar op number
    10-04-15 add lazy lookup for self-describing data { e.g. xml json }
    10-04-08 dssopen.c: name=="method::..." is schema here doc
    08-06-24 dss.h: add per-Dssfile_t vm
    08-06-17 cx.h: add Cxtype_t* arg to Cxmatchexec_f for delayed eval
    08-05-08 cxopen.c: fix number_external() width logic
    07-11-28 cxcomp.c,cxmap.c: fix num=>str cast logic
    07-10-26 cxcomp.c: fix s="S"; print(s,s) cast bug
    07-10-25 cxcomp.c: pretty up CX_DEBUG instruction code trace
    07-10-01 dss.h: add void* Dssfile_t.caller caller defined handle
    07-09-27 cx.h: add CX_HEADER_INIT for sun4 K&R
    07-09-24 cx.h: add Cxvariable_t.header.index set by cxaddvariable()
    07-09-21 dss-return.h: document it via return_beg() -- doh
    07-09-20 dssopen.c: fix dss var initialization base type loop
    07-09-06 dssopen.c: add dss-return.h
    07-09-06 cxcomp.c: handle ()?{}:{...}
    07-09-05 cxopen.c,cxcomp.c: handle (<string> op <fundamental-integer>)
    07-04-02 dssfile.c: handle empty compressed file peek
    07-01-17 dssfile.c: sfdcpzip() => sfdczip()
    06-12-04 dssopt.c: add full type description to dssopt()
    06-10-11 add sfstruse() error checks
    06-02-14 dss.h: always __EXPORT__ dss_lib()
    06-02-02 dssopt.c,dss-print.h: add \fprint\f default print format
    05-09-14 dssopen.c: prevent libraries dict double queue insert
    05-05-09 cx.h: add CX_QUOTEALL
    05-03-08 dss.h: add dssstatic() for static Dsslib_t loading
    04-10-20 dss.h: add dssget() dsstype() dssvariable() dsssave() dssdrop()
             dss.h: add Dssformat_t.savef Dssformat_t.dropf
             dss.h: add Dsstype_t Dssvariable_t
    04-10-11 dss.h: add Dssformat_t.seekf, dssftell(), dssfseek()
             dsslib.h: add Dssfile_t.seekf, dss_no_f*()
             dssfile.c: add dss_no_f*()
    04-08-24 tag.c: fix malformed input 0 pointer deref
    04-05-19 tag.h: add Tagframe_t.attr and TAG_ATTR_conv
    04-05-12 dss.h: add DSS_FORCE
    04-05-06 cxopen.c: fmtquote() possibly binary message data
    04-05-04 cxopen.c: number_internal: \0 => 0 is ok
    03-09-23 add dss.file,dss.format,dss.offset,dss.record
    03-09-22 cxopen.c: {library::query ...} searches for query in library
    03-09-03 dssopen.c: dsslib() separator expanded to [,\t\r\n]
    03-08-11 dssprintf.c: add %(field:quote=qb:endquote=qe:shell:escape:opt:wide)s
             dssprintf.c: check variable/type format for ll hints
             cx.h: add CX_STRING|CX_NUL for string that may contain '\0'
             tag.c: fix tag data leading and trailing space removal
    03-08-08 tag.c: handle &#00; values
             dss-scan.h: dssfopen() errors ok, will be caught at exit time
    03-05-28 cxopen.c: check format.code and do the map in cxcast()
    03-05-14 dss.h: add dssformat() macro
    03-05-05 dss-compress.h: add bzip docs
    03-04-30 dssprintf.c: check for printf io errors -- duh
    03-04-29 cxcomp.c: fix stack depth logic to include function formal arguments
    03-04-15 dssprintf.c: fix signed/unsigned overflow check
    03-04-05 cxmap.c: default delimiters: read { | + }, write { | }
             cxcomp.c: propagate parse() var for string conversion
             dssprintf.c: avoid possible floating point underflow/overflow
    03-03-27 dssprintf.c: verify that each format spec has (variable)
    03-02-28 cxcomp.c: handle (foo)||(bar)
    03-02-21 cx.h: add Cxvariable_t.Cxarray_t and Cxvariable_t.Cxstructure_t
             dssprintf.c: catch omitted format char
    03-02-20 cx.h: add Cxformat_t.fixedpoint
             dssopt.c: add method name+description to fields output
    03-02-19 dss.h,dsstags.c: add <PRINT>format</> for default {print} format
    03-02-18 cxopen.c: fix externalf buffer extension
    03-02-17 dssfread.c: dssfread() file->flags|=DSS_FILE_ERROR on readf error
    03-02-14 dssopen.c: dss head query should not be parent
             cxcomp.c: peek() now skips over isspace()
             cx.h: add Cxtype_t.Cxtype_t*fundamental for fundamental representation
    03-02-11 cxopen.c: change cx em and rm from Vmbest to Vmlast
    03-02-11 cxeval.c: execute() optimizations
    03-02-07 add Cxpart_t.type and <MAP><ITEM><PART><TYPE>
             tag.c: rework <#TABLE#> to handle embedded <#INCLUDE#>
    03-02-06 dss.h,dssopen.c: add dssrun(), split static queries into dss-*.h
    03-02-05 dssfile.c: (*identf)() < 0 means reject input file
    03-01-28 cx.h: add Cxtype_t.Cxmember_t* for member info ala Cxmatch_t
             cx.h: add Cxtype_t.Cxreference_t*
    03-01-27 cxopen.c: use <ast.h> base64encode()/base64decode()
    03-01-25 cx.h: add Cxformat_t.description for format details
             cx.h: change cxnum2str() prototype for error detection -- duh
    03-01-24 cx.h: cxnumber() => cxisnumber() etc.
    03-01-22 cxopen.c,cxcomp.c: add buffer type relational ops
    03-01-21 cx.h,dss.h: add Cxdisc_t.locationf and cxlocation() for Cxdisc_t.errorf
             cxopen.c: add fundamental type internalf/externalf -- oops
    03-01-15 cx.h: add Cxtype_t.Cxmatch_t callouts for type specific matching
    03-01-14 Cxexternal_f now returns <0 on error, > size on insufficient size
    03-01-12 dss.h: add Dssstate_t.file, Dssfile_t.offset for message context
    03-01-11 cx.h,cxmap.c: finish external edit support
    03-01-08 cx.h: add Cxquery_t.method pattern to match caller method
    03-01-07 cx.h: Cxvariable_. member=>members, added member type
    03-01-06 cxcomp.c: list() now handles interpreted cx expressions
    03-01-04 cxcomp.c,cx.h: add ?: composition op, child=>pass|fail sibling=>next
    03-01-02 cxcomp.c: parent now set by defaults()
    02-12-25 cxcomp.c: fix unbalanced (...) message
             cx.h: Cxvariable_t.operand.type => Cxvariable_t.type
    02-12-24 cxopen.c: cxbase(),cxnumber(),cxstring(): add
             cxeval.c: cxbeg() and cxend() now check Cxexpr_t.begun
    02-12-20 add <METHOD>name</> to pass remaining tags to name method
             add <COMPRESS>name</> and Dssmeth_t.compress for preferred {compress}
    02-12-18 add Cxdisc_t.loadf; meth==foo checks dss:foo.dss as last resort
             cxbeg() calls tail first; cxend() calls head first
    02-12-17 all regression tests pass after reorganization
    02-12-12 reorganize local vs. global state : only variables are dss/cx local
    02-12-10 add query composition and rename src to reflect changes
    02-12-07 cxparse.c: change dynamic query syntax to { name opts args >out }
             cxparse.c: handle dynamic and interpeted query composition
    02-12-04 cxparse.c: use format.map for constant folding in code()
             cxeval.c: fix instruction trace long double numeric output format
             dssfile.c: fstat() file to double check sfsize()==0
    02-12-02 cx.h,cxmap.c: change cxstr2num() to all error detection -- novel
             cxmap.c: add CX_IGNORECASE, <IGNORECASE>1</>
    02-11-28 dss.h: Dssident_f takes Dssfile_t* arg
             dsslib.h: add skip and ident to Dssfile_t for Dssident_f
             tag.h,tag.c: reorder visit arg, add handle arg to avoid disc clash
    02-11-27 cx.h: add CX_BINARY to mark binary representation
             split dsslib.c info dssopen.c dssfile.c dssprintf.c dssmisc.c
    02-11-26 dsslib.c,cxopen.c: add a few more floating=>signed=>unsigned casts
    02-11-25 finally give in to Dssformat_t instead of Dsstype_t
    02-11-22 dss.h: add DSS_ID, fix dss_lib() export
             tag.h: add Tagdisc_t.id for pathfind()
             cx.h: export cxinitmap()
             dsslib.c: add sfdcpzip() error check -- how novel
    02-11-21 tag.c: handle <#INCLUDE#>path</> and <#TABLE#>path</> closing </>
    02-11-20 move support libraries to dsslibs dir
    02-11-19 opaque/opaque.c: add opaque method
             dssmagic.c: magic support for opaque data
             dss.h: add variables to Dsslib_t, add dssadd()
             dss.h: DSS_STATIC for static method link
    02-11-18 dsslib.c: drop dss_init(), add libraries to Dsslib_t
             dsslib.c: drop Dss_t* arg from dsslib(), change dssadd() to dssload()
    02-11-16 cx/cxeval.c: set optget() discipline for query \findex\f
    02-11-15 flat/flat.c: snarf cdb flat record code
             cx dynamic queries now defined via dsslib()/dss_lib()
    02-11-14 types/num_t.c: add numeric encoding support
    02-11-12 finally fix cxvariable() . references for dssprintf()
             add <NAME><DESCRIPTION><IDENT> nop's for all top level tag input
    02-10-31 switch to XML tag specifications (with self documentation)
    02-10-17 dsslib.c: add generated methods to the list of all methods
    02-10-15 flat/flat.c: add initial XML flat file description support
    02-10-11 netflow: add ns_t start,end nanoseconds since the epoch
    02-10-09 bgp-ipma.c: add
             dsslib.c: fix printf double -> integer cast bug when sign bit set
    02-09-30 text/text.c: add ipadd_t,time_t: really need a "struct" method
    02-09-24 netflow/flow-dump.c: implement dumpfwrite()
             bgp/bgp.prt,netflow/netflow.prt: move from src/cmd/dss
    02-09-11 cx: add Cxquery_t,Cxframe_t and support functions for dll queries
             cx: change Cxoperand_t keep boolean to refs count
             cx/cxparse.c: work around sgi cc page boundary bug
             pt: switch from vm region (16K) per table to malloc-per-entry
             lsa: fix (int) pointer cast that truncated on 64 bit arch
             lsa: use fmttime(%K) to list dates
    02-09-05 Makefile: optimization bug seems to be in sol*.sun4, not just sol7
    02-08-29 dsslist(): no dss_init() missing error message when scanning for dlls
    02-08-22 dss,cx: eliminate inter-object globals for darwin dlls
    02-08-20 cx/cxopen.c: drop cxvmresize; use ast vmresizef instead
             lsa/*: add $pragma prototyped for sun4
    02-08-19 cx/cxparse.c: handle char const operands on left and right
    02-08-14 dss.h: add dss_init() prototype for static method links
    02-08-12 lsa: add
             flat: drop until different from text method
             dsslib.h: install for independent method dlls
    02-08-11 cx/cxopen.c: add cxscope() to push/pop scopes
    02-08-09 cx/cxparse.c: cxvariable() now reports "undefined variable"
    02-08-08 cx/cxparse.c: handle type1->base==type2->base callout
             cx/cxparse.c: add /.../ quotes strings (already bowed to =~ and !~)
    02-08-07 cx: add cxfree(), cxtell(), cxvmresize()
             bgp/bgp.h: add Bgpredisc_t, Bgperror_f, Bgpreresize_f
    02-08-01 cx/cxvariable.c: set reference value type
             dss_init: now 3 args, second is option string
    02-07-31 dsslib.c: all methods now dlls; dsslist() searchs PATH
    02-07-25 bgp/bgpre.c: fix must logic
    02-07-19 dsslib.c: dsscomp() now pops cx input stream to previous state
             cx/cxopen.c: fix =~ typo that checked for CX_EQ instead of CX_MATCH
    02-06-26 dsslib.c: add shared lib method dss_init() hook
    02-06-19 cxopen.c: add default number<=>string conversions for base==number
    02-06-18 netflow: split into { dump fixed flat } method types
    02-06-14 dss.h: add dssfopen() Dssflags_t arg; DSS_FILE_READ/DSS_FILE_WRITE
             cx: add Cxreference_t for structure member references
             dssprintf: avoid sfkeyprintf() by caching Dssformat_t
    02-06-12 netflow: add
    02-06-10 cx/cxparse.c: add vm arg for parse time internalf/externalf
             bgp/bgp.c: add ipprefix_t==ipprefix_t callout
    02-06-07 bgp-mrt.c: handle long prefix field line split
    02-06-03 bgp.c: add "origination" for data time
    02-06-02 bgp.c: fix ipaddr_t/ipprefix_t inequality overloads
    02-05-31 bgp-fixed.c: fix read swap
    02-05-29 split library and command source
    02-05-28 add { =~ !~ } to usage
             advertize { variable type meth-type } dictionaries
             drop { itemf infof }
    02-05-23 update for reworked cx type interface
    02-04-04 add numeric field maps, -I, %include
    02-04-03 update bgp fields
    02-03-31 first working flat method
    02-03-26 first working dssgrep with bgp method
    02-03-19 snarf pta bgp and cx libraries for initial implementation
    
    RELEASE notes for src/lib/libexpr/RELEASE
    
    12-07-18 exgram.h,exeval.c: handle scanf("%[^\n]", &v) -- thanks Philippe
    11-08-25 exparse.y: fix "begin()" frame symbol table check
    11-06-30 extoken.c: enter LABEL: in the parent scope symbol table!
    11-06-26 exparse.y: fix bug that lost function return type
    11-03-16 exparse.y,expr.h: fix statement_list cons tail recursion
    11-03-03 eparse.y: fix function reff node pointer
    11-03-03 exeval.c: function env is args[-1]
    10-11-30 fix "begin" scope logic that caused tw bug
    10-08-18 add static, global and function level variable scopes
    09-02-02 exgram.h: drop function ref in call() to avoid eval in exeval()
    06-10-11 add exstash() and exnospace() for sfstruse()/vmstrdup() errs
    05-10-25 exeval.c: fix I2F unsigned cast
    05-04-20 exeval.c: fix sscanf() runtime argument check logic
    05-01-11 Makefile: fix exop.h generation to handle spurious #define's
    04-12-14 exeval.c: handle printf "%% %x"
    04-04-15 exeval.c: handle scanf %s -- forgot that regression test!
    04-04-01 exparse.y: drop #pragma prototyped
    04-02-26 add scanf() and sscanf()
    02-10-02 exeval.c: tmform() => fmttime(), static nmbuf[] => fmtbuf()
    02-09-11 expr.h: move exbuiltin[] to private exlib.h
    99-09-22 exparse.y,exeval.c: add for(ID[DYNAMIC])
             exparse.y: ref[i].ref
    98-12-25 excc: fmtesq() to handle \"
    98-11-11 expr.h: add disc matchf for strmatch
             exlib.h: fix exeval string mem leak with Expr_t.ve
    98-09-11 expr.h: move Exdata_t to last public element of Exnode_t
    98-07-17 label: return type INTEGER
             add exdump() for debugging
    98-05-22 STRING * STRING == common chars by position, ' ' for diff
    98-05-11 add function args; NOTE: auto's still global
    98-04-01 sfprintf Sffmt_t update
    98-02-14 fix aggressive freenode
    98-02-04 finally drop exstr*() for vmalloc regions
    97-12-07 preprint adjusts l count for %[doux]
    97-10-31 tweak INTEGER <=> auto conversions
    97-10-01 INTEGER is now Sflong_t
    97-08-11 add pathfind()
             add '$' to identifier set
             eliminate S2B at PROCEDURE level
    97-07-17 discipline interface (incompatible but only tw,cql affected)
             add excc() to generate C expression code
             drop exinclude()
             add printf base param (%width.precision.base<format>)
    96-12-25 rearrange exparse.y to keep yacc and bison happy
    95-08-11 drop exseek(), add exstatement(), exrewind()
             tune excontext()
    95-05-09 drop %token for tokens in %binary,%left,%right to avoid redef errors
             add EX_CALL and EX_SCALAR to refval|getval|setval elt arg
             excomp with sp==0 and fp==0 resumes from previous context
             fix exseek()
             loosen excast() restrictions
             fix Oexparse.[ch] generation
    95-04-01 add solaris yacc bogus yyact index makefile workaround
             fix switch newof() size=0!
    95-03-19 fix exstore() alignment bug
    95-01-11 prepare extoken.c for TRACE_lex==debug-level
             add exseek() for backup
    
    RELEASE notes for src/lib/libjcl/RELEASE
    
    10-06-01 sync with ast api 20100601
    10-04-20 run.c: add timout arg to cowait()
    07-12-10 path.c: fix <size><suffix> ordering
    07-12-07 path.c: handle { '.' '/' } delimiters, '/' for pds
    07-12-03 jcl.h: add Jcl_t.flags JCL_GDG for data generations groups
    07-12-03 path.c: add data generations group logic
    07-11-21 run.c: fix USAGE computation
    07-04-09 Makefile: $(CC.PIC) to allow archive to be pulled into other dlls
    06-11-11 sym.c: export JCL_SYM_READONLY for exec and verbose
    06-11-11 add JCL_SYM_READONLY for command line name=value
    06-10-11 add sfstropen()/sfstruse() error checks
    06-08-14 run.c: fix coopen() to use COSHELL=pathshell()
    06-08-04 run.c: fix JOBNAME export
    06-08-04 run.c: use coshell instead of system()
    06-08-01 run.c: exit code is EXIT_STATUS(system(...))!
    06-05-18 RC cleanup
    06-05-17 libjcl.h,open.c,run.c: add JCL_EXEC SYS* redirection
    05-10-25 run.c: fix "+" file append mark placement to be first char
             parse.c: fix literal ' inside PARM=(...) list parse
    05-10-11 jcl.h: add JCL_DD_MARKED for paths with size marks
    05-09-15 run.c: drop "+" append mark on command arg files
    05-09-12 lib.c: add { %%BLANK[n] %%TIME }
             run.c: create output files if they don't exist
    05-09-09 run.c: use fmtquote() FMT_SHELL flag for [$`]
    05-08-29 jcl.h: add Jcl_t {date,odate,rdate} and control-m vars
             open.c: initialize Jcl_t {date,odate,rdate}
             lib.c: synthesize Jcl_t {date,odate,rdate} control-m vars
             parse.c: add '$' to control-m var id set
    05-06-11 run.c: 1 export per line for readability
             run.c: export STEP=step-name
             parse.c: fix SUBSYS=... file catenation bug
             parse.c: SPACE=n is not a reliable lrecl predictor
    05-02-14 sym.c: handle symbol redefinitions
             find.c: ${%%foo} => ${JCL_AUTO_FOO}
             jcl.h: fix JCL_CREATE/JCL_WARN bit value clash
             jcl.h: add JCL_IMPORT env var precedence over map definitions
    05-02-11 find.c: add expand() recursion check
    04-10-31 jcl.h,parse.c,run.c: add JCL_DD_ALIAS for postponed DD
             parse.c: handle DD SUBSYS=(name,'DDNAME=x')
    04-10-18 path.c: expand() "set" args
    04-10-17 run.c: add checkdir() to mkdir -p output dirs
             find.c: recursively expand set vars
    04-09-28 run.c: add more JCL_SUBDIR trace output
    04-09-21 jcl.h,run.c: add JCL_SUBDIR
             parse.c: add "JCL_AUTO_JOBNAME" to jclsym()
             parse.c: fix expression parse bugs
             uniq.c: trailing %% is not a file size mark
    04-09-20 run.c: add "export JCL_AUTO_JOBNAME=job"
    04-09-19 path.c: handle prefix match tail
    04-09-15 jcl.h: add Jcl_t.roflags
             path.c: add expand() for --include ${...} expand
             path.c: ${...} does lookup() then getenv() -- duh
             path.c: add *.X prefix match with ${1} ... subexprs
             path.c: add "export" and { JCL_SYM_EXPORT JCL_SYM_SET }
    04-08-11 jcl.h,find.c: add JCL_CREATE for jclfind() create
    04-08-08 path.c: provide default disc.{usage,optsetf}
    04-08-06 split cmd/jcl => lib/libjcl + cmd/jcl
             path.c: set options only if usage&optsetf are set
    04-06-14 run.c: clean up tmp files on exit
    04-06-06 jcl.h,parse.c: parse OUTPUT and DD OUTPUT=*
    04-05-31 jcl.h,jcl.tst: add JCL_DD_DIR for SPACE=(*(x,y,z)*)
    04-05-24 run.c: handle JCL_DISP_MOD by prefixing dd name with '+'
    04-05-20 cpy2dss.c: fix --variable to *also* emit <VARIABLE>1</>
    04-05-19 cpy2dss.c: fix --variable to emit terminator and width
    04-05-14 cpy2dss.c: add --terminator=char and --variable
    04-05-06 cpy2dss.c: handle nested structs and out of sync level indices
    04-05-04 cpy2dss.c: promote from test area
    04-02-29 parse.c: ignore %%.
             jclparm(): PARM=(' name=value') => name=value
             run.c: parms passed as one , separated arg
             run.c: map dd DSN=&FOO => ${TMPDIR:-/tmp}/job.$$.FOO
    04-02-11 lib.c,sym.c: fix short by one bugs in stash() and jclsym()
    04-01-30 fix '&variable' logic; JCL_LISTSCRIPTS lists INCLUDE paths too
    04-01-27 parse.c: fix off-by-one continuation logic
    04-01-14 run.c: fix std[3] => std[4] off-by-one declaration
    03-11-18 parse.c: add INCLUDE and JCLLIB, fix find search()
    03-11-17 find.c: only convert base name upper=>lower in search
             parse.c: add IF/ELSE/ENDIF
    03-10-30 fix DD SYSIN redirection, DD DUMMY
    03-10-16 set (recfm,lrecl) via marked() if not already set
             export DD catenations
    03-10-10 variable expansion by the book
    03-10-01 first code
    
    RELEASE notes for src/lib/libmam/RELEASE
    
    10-06-01 sync with ast api 20100601
    
    RELEASE notes for src/lib/libpp/RELEASE
    
    12-06-06 ppline.c: preserve hosted sync even for normal sync
    12-02-29 pp.probe: handle predefined function-like macro definitions
    12-02-14 ppproto.c: fix "already noticed" logic
    11-08-30 ppproto.c: bump BLOCK to 16*1024 for (ppargs.c self-doc!)
    11-03-15 ppop.c: add ppok() readonly check for subset of ppop(PP_*)
    11-03-02 ppop.c,ppcontrol.c: use ppset() to handle readonly values
    10-09-01 RE errors => exit(2)
    10-09-01 ppcall.c: no disgnostic for 0 actual args for 1 formal arg
    10-06-29 ppargs.c: ignore -H<number> (hpux /opt/langtools/lbin/cpp.ansi)
    10-06-16 ppsearch.c: try parent prefix if -I- include search fails
    10-06-01 sync with ast api 20100601
    09-02-02 pp.probe,probe.win32: check for compiler supplied __FUNCTION__
    09-02-02 ppop.c: include pp_default.h/probe at end of builtin script
    09-01-20 probe.win32: elide #pragma comment.*linker.*manifest
    09-01-06 ppcall.c: fix macro definition overwrite bug -- I know
    09-01-05 ppcontrol.c: fix multiple include guard for #include outside guard
    08-12-07 pp.h,ppdata.c: fix ancient pptype and ppctype[] off by one
    08-11-15 ppsearch.c: '\\' => '/' in first step; msvc complains about '\\' in #line!!
    08-10-31 ppsearch.c: relax pp:nomultiple pedantry
    08-10-30 pplex.c: handle =#x S_CHRB|SPLICE bug
    08-05-11 ppproto.c: fix proto test 10 regression
    07-09-21 ppproto.c: add "Public Domain" to the noticed list
    07-08-11 probe.win32: add cl.exe setuid workaround, CC.VERSION[.STRING]
    07-06-12 pplex.c: finish -D:preserve logic update for imake
    07-06-07 pplex.c: handle -D:preserve S_CHRB splices
    07-06-04 ppsearch.c: only apply pp:chop ?old?new? if original not found
    07-03-11 add -D-Y pp:pedantic, PP_WARN macro formal parenthesis checks
    07-01-26 pp.def,probe.win32: add _WCHAR_T_DEFINED
    06-09-23 ppop.c: check -I <dev,ino> for c and TYPE_HOSTED|TYPE_VENDOR attrs
    06-09-23 pplex.c: add HOSTED check for "/* appears in // comment" -- doh
    06-09-05 pp.probe: add version stamp comment
    06-06-29 pp.probe: gcc pp:linefile probe (otherwise it can dump!)
    06-06-28 ppproto.c: fix inappropriate __PARAM__ insertion
    06-05-09 pp.tab,ppcontrol.c,ppproto.c: add externalize
             ppfsm.c: handle compatibility ul numeric qualifiers
    06-02-28 probe.win32: add wchar_t probe
    06-01-11 pplex.c: fix rpcgen pp:passthrough header splice bug
    05-12-16 pplex.c: fix imake pp:passthrough comment splice bug
    05-09-16 pplib.h: add <string.h> for standalone proto
    05-07-31 pplib.h: finally trust __STDC__ headers
    05-04-11 pplex.c: fix '"a" #s' catliteral + stringize bug
    05-03-29 pp.probe: check $? and stderr messages for pp:lineid
    05-02-20 probe.win32: handle /platformsdk mount
    05-01-11 ppargs.c: fix -I-S docs
             ppinput.c: ppproto() only for COMPATIBILITY or PLUSPLUS
    04-10-22 ppproto.c: handle `type var[x][y]' arg prototype
    04-10-01 pplex.c: really fix directive hidden newline logic
    04-08-31 pplex.c: fix directive hidden newline logic
             ppcall.c: fix '(' peek bug that missed the MARK
    04-08-30 add pragma pp:pragmaflags PP_PRAGMAFLAGS, pp:system_header
    04-08-11 ppproto.c: intercept "#(define|undef) extern" for __(EX|IM)PORT__
    04-07-23 probe.win32: generalize #include dir order search
    04-07-22 ppsearch.c: access() => eaccess()
    04-05-20 ppproto.c: don't __PROTO__ `int fun __P((int));'
    04-04-15 probe.win32: sync up with uwin 2003-08-06 master -- oops
    04-04-01 pp.probe: add stdinclude usrinclude path cleanup
    04-02-29 ppproto.c: fix bug that skipped prototyped check during notices check
             ppproto.c: recognize `Copyright nn'
    04-02-14 ppproto.c: comment[0]==0 => no notice
    04-02-11 Makefile: fix %.yacc to handle cross-compile
    04-01-28 pp.h,pplib.h,ppop.c: add PP_RESET to restore original pp.symtab scope
    03-12-12 ppcall.c: missing macro actual warned but expanded
    03-11-12 ppexpr.c: fix premature #if expression token strip
    03-06-21 ppproto.c: fix T_INVALID ? splice bug that did 0?val => 0?vaL
    03-06-10 ppargs.c: add -D-d and -D-m
             ppargs.c: add gnu options { -dD -dM -imacros -include -lang-* -lint }
    03-05-19 pplex.c: fix stray SKIPMACRO bug
    03-05-18 ppcall.c: add SYM_FUNCTION '(' peek to avoid inappropriate ungetchr()
    03-04-30 pp:mapinclude hosted <std.h>="." will search only hosted dirs
             pp.probe: add pp:mapinclude probe for namespace incursions
    03-04-29 ignore()=>ppmapinclude(), add pp:mapinclude
    03-03-25 ppop.c: PP_RESERVED now deletes old symbol before redef with lex value
    03-03-14 pp.probe: fix the #include_next probe
    03-02-28 ppsearch.c: fix -MM bug that missed prefix include hosted mark
    03-02-18 pplex.c: handle COMPATIBILITY \" and \' in macro actuals
    03-01-23 probe.win32: mingw32 tweaks
    02-12-17 ppargs.c: document -I-!
    02-12-06 -I- pp:noprefix otherwise pp:prefix default
    02-11-29 probe.win32: added __INTSIZE, drop dm pp:noallmultiple
    02-11-26 pp.def: add STDC_HOSTED
             probe.win32: add C95 and C99 STDC predefined macros
    02-10-30 ppfsm.h: add boundary check to IDSTATE()
    02-10-18 probe.win32: update for mingw
    02-10-15 ppsearch.c: if PLUSPLUS && not found && no suffix then try with .h
    02-10-10 pplex.c: fix does not end with `newline' bugs
    02-10-01 ppop.c,ppargs.c: -I-I => -I-M with proper docs; -I-I for PP_IGNORE
    02-09-21 pp.probe: add pp:nocatliteral test
    02-09-10 pp.tab: add pp:passthrough to match -D-P docs
    02-08-30 probe.win32: fix for borland cc -E
    02-08-22 ppexpr.c: add __SOURCE__ and #match(string,pattern)
    02-06-25 ppproto.c: fix pragma search bug that stopped after 8 comment lines
    02-06-11 ppsearch.c: fix ... next include search to skip *all* intermediates
    02-05-28 probe.win32: updates for { mingw }
             ppsearch.c: don't use inherited prefix for <...> -- duh
    02-05-24 ppcontrol.c: simplify getline() space canonicalization
             probe.win32: updates for { digital-mars borland lcc }
    02-05-20 ppcontrol.c: update to use regsubcomp(),regsubexec()
    02-05-09 ppcontrol.c: inhibit `EOF in directive': newline warning will catch it
             pplex.c: inhibit `newline in character constant' for hosted directives
    02-05-06 probe.win32: add more win32 compilers
    02-04-15 probe.win32: handle long long unsigned int
    02-04-12 ppproto.c: fix NOTICED check
    02-03-15 ppproto.c: fix cpp pp:compatibility double line sync memory fault
    02-03-11 pplex.c: add pp:modern to emit \a \v instead of octal forms
    02-02-14 ppargs.c: fix -D or -U as last arg core dump
    02-01-24 pplib.h: use vmalloc(Vmregion) if _std_malloc
    02-01-23 probe.win32: add more msvc predefined macro candidates
    02-01-14 ppproto.c: #pragma prototyped noticed -- has notice comment
    02-01-10 ppproto.c: fix PROTO_FORCE|PROTO_PASS bug that disabled PROTO_FORCE
    02-01-08 pplex.c: fix HEADEREXPAND|HEADEREXPANDALL logic
    01-11-22 pplex.c: add pp:headerexpandall for gcc vs. msvc <...> expand diff
             pp.probe: add pp:headerexpandall test
    01-10-20 pplex.c: fix pp:splicespace inside "..."
    01-09-11 ppinput.c: use pathnative() for native fs representation
    01-08-31 pp.probe: handle -Dmacro(args)=value
    01-08-11 ppcontrol: fix ... and __VAR_ARGS__ for C99
             ppsearch: fix SEARCH_NEXT bug that skipped the include stack
    01-08-06 ppproto: preserve #! first line for # comments
    01-07-17 gentab.sh: fix ksh test to omit pdksh (typeset -u fails)
    01-06-26 ppproto.c: fix another buffer boundary bug that didn't preserve OTHER
    01-06-06 ppsearch.c: list PP_FILEDEPS headers once
    01-06-01 pp.h,ppop.c,ppsearch.c: allow multiple PP_FILEDEPS (-M)
    01-05-24 pp.probe: fix pp:hostedtransition probe: only suncc can __STDC__==1?
    01-04-25 pp.probe: split macro probe files for compilers that have #line limits
    01-04-19 pp.h,pplex.c,ppproto.c: fix { \a \E \v } EBCDIC translations
    01-04-16 pp.tab: add pp:splicespace for mvs jcl decks -- the 60's live on
    01-04-13 ppbuiltin: add __FUNCTION__ cache for functions that span the buffer
    01-03-08 pp.tab,ppbuiltin,ppcontrol,probe: add pp:hostedtransition
    01-02-22 pp.tab,ppfsm,pplex,pp.probe,probe.win32: add pp:zeof for ^Z => EOF
    01-02-14 ppcall.c: fix macro(tuple*) bug that truncated macro arg expand buffer
             pplex.c: fix # inside pp:pragmaexpand
             gentab.sh: change ksh test for openbsd /bin/sh
             ppproto.c: fix buffer boundary bug that lost call nesting
             ppproto.c: add realloc prototype and memcpy=>memcopy strcpy=>strcopy
    01-02-09 ppsearch.c: fix another pp.include null dereference
    01-02-07 ppcall.c: fix stack inequality checks
             ppcall.c: handle trailing \ in macro args
    01-02-06 fix readonly buffer write (cpp test 07:2873)
    01-02-04 fix -M* to properly handle .cxx .cpp .C input
             fix IN_BUFFER pop bug that did not reset the token pointer
    01-01-01 pp:headerexpand: space ok if not IN_MACRO
             ppcall: hide if IN_FILE|IN_MACRO|IN_EXPAND
             pplex: don't complain about ^L or ^Z as last char in file
             ppsearch: fix #include <.../foo.h> loop
             ppcontrol: manulally increment IN_RESCAN error_info.line
    00-12-25 add EXPOSE to expose hidden macros (for #import ...)
             probe.win32: add cc path *and* args to first line to avoid hash clash
             pp.probe: filter out invalid symbols for predefined macro scan, duh
             pp:headerexpand: limit expansion to IN_MACRO
    00-10-31 __STDC__==0 if HOSTED && _UWIN
    00-10-26 pplib.h: change SEEK_SET to O_RDONLY for aix
    00-10-17 pp.probe: __IMPORT__ => __STDPP__IMPORT__
    00-09-18 add __FUNCTION__=#(FUNCTION), #define <a b> c
             pp.probe: add probe_longlong
             probe.win32: add #define <long long>
    00-09-11 add pp:noproto (NOPROTO pp.option) to disable ppproto()
    00-09-01 ppproto: fix buffer slide bug
    00-08-11 pplb.h: check for <unistd.h> already included for PROTOMAIN
             pragma: add pp:pragmaexpand to expand pragma args
             ppcontrol: always disable pp:* pragma expansion
             ppcall: fix pp:hide buffer clash
    00-06-01 pplex: fix "\\U" and "\\u"
    00-05-22 ppsearch: fix uwin #include <C:/foo/bar.h>
    00-05-16 probe.win32: update reserved word list
    00-05-09 ppcontrol: fix C++ macro >+> invalid fuse
             ppcontrol: 'macro' expansion only for COMPATIBILITY | TRANSITION
             c9x: up to date with proposed standard
    00-04-01 pp.tab: add allpossible and ALLPOSSIBLE
             ppmacref: fix ref inside literal catenation
    00-02-14 pppopen(): general comments with "bme" (begin middle end) string
    00-01-11 pp.probe: hosttype now in C.probe
    99-11-19 is[a-z]*( => ppis[a-z]*(
             ppproto: "..." [A-Z_]+ "..." ignores [A-Z_]+ if PROTOMAIN
    99-11-11 ppproto: use astlicense()
    99-10-31 ppproto: add PROTO_SHARP, update license parse
             pplex: fix some MARK bugs seen by #define X "A B <C@D>"
    99-10-01 add pp:stringsplit for "...\\n..." => "..."\n"..."
             add pp:lineid to match PP_LINEID
    99-07-17 ppbuiltin: fix getline() canon spacing for numbers
             ppsearch: fix FILEDEPS not found \\n print
             pplex: fix spurious FILEDEPS '.' empty character constant message
             ppargs: fix usage error call and error_info.id default value
             ppproto: fix up copyright notice for ksh93 style .author file
             ppproto: check if notice text if file path
    99-06-02 ppproto: add __MANGLE_package_DATA__ & __MANGLE_package_FUNC__
    99-05-26 ppcontrol: all pragmas but prototyped need pp:
    99-05-25 ppargs: long options
    99-05-22 ppproto: changes for full ast vs. PROTO_STANDALONE
    99-05-09 ppinput: add #pragma pp:native and (pp.option&NATIVE) for native paths
    99-04-22 ppproto: finish type=open notice
    99-02-11 #define __STDC__ #(STDC); demote __STDC__ to 0 for HOSTED (thanks sun)
    99-02-04 pplex: joined strings separated by \\\n
    99-01-11 probe.win32: add _UWIN predef
    98-10-20 pplex: a few more (HOSTED|RELAX) checks
             -D:preserve throws a bunch of stuff -- great for imake (yuk)
    98-05-11 pplex: fix "..." \n off by one line count
    98-02-14 ppcontrol: fix HEADEREXPAND missing NUL
    98-01-23 ppproto: add _GNUC_ to _WIN32 check
             ppfsm: don't optimize for hp.pa
    97-11-11 ppcontrol: fix recursive use of pp.hdrbuf for HEADEREXPAND
    97-10-31 ppmacref,pp.h: add ppmacref sum arg -- some parts assumed it!
    97-10-01 pplex: loosen HEADEREXPAND check
    97-08-11 pplex: fix COMPILE pplex() bug that did not reset NEWLINE for S_MACRO
             pplex: PP_PRESERVE does not pp.pragma <token> ... # <pragma-stuff>
             pp.def: add UWIN
             ppcall: fix macro actual arg error checks
    97-07-17 ppproto.c: C++ __INLINE__ prefixed with extern __MANGLE__
             ppop.c: fix PP_RESERVED T_* lookup
    97-05-09 pp.def: add MVS :architecture:
             ppfsm.c: change C_* pseudo codes to not clash with ebcdic
             pp.probe: fix stdc.$src sed script
    97-04-01 ppcontrol.c: fix tokop() for PP_RESERVED
    96-12-25 add ms #@ charize to complement # stringize
             pp.probe now detects preincludes
             ppproto: allow #ifdef'd function definions before {
             ppproto: NoN() is not a function
             pp.key,ppkey.h: add int64
             ppargs.c: fix -M{DGM}*
    96-12-06 add pp:headerexpand for ms that expands macros in expanded <...>
    96-10-31 a few more line sync tweaks for EDG C++
    96-10-11 fix pp:macref off by one for standalone pp (big suprise)
    96-10-01 -D:macref -D-L -> #line (n-2)\n#pragma pp:macref ...
    96-08-11 fix transition macro expansion
             compatibility \" or \' does not start quote
    96-02-29 use <hashkey.h>
             drop ungetchr() in ppcall that modified macro values
             tighten the DEBUG PANIC case in ppcontrol.c
             unify #architecture() and #machine() probe
             add POSIX,WIN32,X86 to pp.sym
             tweak pp.probe
    96-02-14 pp:noallmultiple works on hosted files too
             fix #define /* EOF loop
    96-01-31 fix ## as arg to stringize macro to have ## value, not #
             add nonstopux and SYSTYPE_SVR4 to pp.def
    96-01-01 AT&T Research now
             fix catliteral line sync line number bug
             ppproto() converts non-directive <num>u to (unsigned)<num>
             switch to <regex.h>
    95-10-31 fix PP_COMPILE PP_TRANSITION bug that didn't allow space before #
             fix PP_TRANSITION \newline in definition complaint
    95-10-11 fix ppproto() PROTO_PLUSPLUS bug
             change ignored pp.incref PP_SYNC_POP to PP_SYNC_IGNORE
             add PP_PEDANTIC to handle gnu oversights (can't beat em ...)
             add memfatal() call
             relax newline in quote semantics
             proto inline -> __INLINE__
             fix __INLINE__ proto def for __GCC__>=2
    95-08-11 pp:preserve for easel (aka IFS) and imake
             fix pp:reguard ## macro output
             fix MARK PANIC with CATLITERAL
             PP_INPUT *.(s|S|as|AS|asm|ASM) implies pp:nocatliteral pp:spaceout
             ppargs() can't use isid() until after FSM_INIT
             -D#... for assert, -D%... for directives
             __STRICT_ANSI__ && __GNUC__ requires -pedantic for PP_STRICT
             #include <.../x> for include_next
    95-05-09 fix tokop() bug that concatenated adjacent strings
             don't concatenate directive string literals in proto
             split pp.mode into pp.mode and pp.option
             restrict pp.probe hostinfo output to the first token
             fix EOB/EOF pplex() nonterminating loop
             unused var cleanup
             add pp:reguard to emit #define and #undef (for C++ templates)
             add a few ppproto '\r's for NT
             fix T_BUILTIN ppsymbol -> ppsymkey pun
             fix pp:stringspan `#define x "' hang
    95-04-01 fix pp:hide for macros defined before the hide
             fix pp:map getline space canonicalization
             fix proto `<digits>[uU]'
             proto does // comments by default (fixes bug introduced 07/17/94)
             proto does "..." "..." string literal concatenation
             spice up proto copyright comments for nonexclusive license
             add hosttype assertion
             fix proto `typedef type fun(args)'
             proto copyright finishing touches
             fix overzealous "empty character constant" message
    95-02-14 pp:nopredefined probe info defines are now pp:builtin
             clean up pp:hosted conflicts
             tighten up unknown directive warning
             PP_INPUT *.(s|as|AS|asm|ASM) implies pp:nocatliteral pp:spaceout
             change newof(0,char,n,0) to newof(0,char,0,n) if 0 init not needed
             don't emit unkown directives inside #if 0 ... #endif
    95-01-19 *strict-* does not force STRICT
             token##null-last-variadic-arg consumes token (to match gcc)
             variadic actuals call be one less than arity (to match gcc)
             fix PLUSPLUS digraph bug that lost comment state
             tighten up PLUSPLUS //, /*, */ interaction warnings
             macro formals in "..." for COMPATIBILITY|TRANSITION
             macro formals in '...' for COMPATIBILITY|TRANSITION|!STRICT
             STRINGSPAN allows '\n' in '... too
             add PP_SYNC_* flags for pp.incref arg 3
             add PP_SYNC_INSERT for invented file references
             fix C++ fsm bug that popped out of comment in // /* */ ...
             PP_INPUT *.(s|S|asm|ASM) implies pp:nocatliteral pp:spaceout
    95-01-01 avoid string literal concatenation in pp.probe #if #predicate() tests
             fix pplib.h memcpy,strncmp PROTOMAIN prototypes (its a nop tho)
    94-11-11 fix readonly memory reference in refill
             add C++ digraphs (digraph = --trigraph)
             add C++ T_EXPLICIT -- did dos take over C++?
             fix improper ppproto() C++ __PARAM__ expansion
    94-11-01 allow #include string header arg concatenation (yes, its not ansi)
             #macdef macros are recursive
    94-10-01 fix C++ } loop in ppfsm/refill
             T_NOISES consumes symbol and optional paren group
             __builtin_* T_NOISES by default
             fix "..." "...MARK..." join
             fix STANDALONE */*comment*/
    94-09-11 fix pp.probe cp+strip with chmod u+w
    94-08-11 add -I<vdb-archive> to handle pax -x ppar header archives
             fix -D-Q header checkpoints
             add `pp:chop prefix' to chop prefix/ from include prefix/*/*
             add pp:keyargs for key=value macro formals/actuals (not for C!)
    94-06-01 fix ppcontrol/tokop() that botched pp:id, etc.
             add pp:plussplice to handle cfront // \<newline> ignorance
             inhibit trigraph conversion for pp:compatibility, duh
             new C++ keywords enabled by pp:keyword
             proto: int fun xxx((yyy)) is macro call, not decl
             fix !ALLMULTIPLE pp:load to SKIP between duplicated line syncs
             fix PP_DUMP for pp:noallmultiple, optimize pp:load format
             fix CPP CACHEOUTX() buffer boundary bug
    94-04-01 drop warnings for -X*
             fix ppproto() %% in comment bug for yacc proto
             PP_COMMENT now truncates comments to MAXTOKEN-4
    94-03-01 no pp:truncate for #pragma pp:macref
    94-01-01 fix STANDALONE+PP_TRUNCATE fsm macro bug
             drop __VOID__ from ppproto.c
    93-12-01 release
    93-11-11 fix PP_COMPILE+PP_TRUNCATE=8 bug for continue,unsigned,etc.
             add PP_LINEBASE for compilers that botch long line sync paths
             fix #if unsigned promotions
             aggressive interactive line splice flush
             fix #else inside multiline null dereference
             fix "..." newline space # COMPATIBILITY CATLITERAL bug
             fix m(a)b compatibility token pasting [cpp/test/ess.01.c]
             fix nested @X mark bug [cpp/test/net.02.c]
    93-10-11 add FSM_COMPATIBILITY for floating point hex -- yo ansi, anybody home
             add #else if|ifdef|ifndef for COMPATIBILITY but with warning
             drop PP_HOSTED, add ppop(PP_CDIR|PP_HOSTED,"-",n), -D-I for pp:cdir
    93-10-01 add pp:opspace to tokenize <binop><space>= to <binop>=
    93-08-11 drop ancient BCD constant (`...`) detection -- wake up cfront
             fix PP_TRUNCATE macro fsm bug that missed some expansions
             fix stringize bug that choked if space preceded #
             fix <function-like-macro> <identifier> bug that omitted space
    93-07-17 minor transition mode fix for string concatenation
             fix standalone macdef line sync buffer bug
             pp:noline turns off linesync, pp:line restores it
    93-06-22 add pp:prefix to control prefix include compatibility
    93-04-01 use probe_verbose in predefined symbol probe
    93-03-11 close fd after last file block read -- relaxes open fd limit
             remove pp.control nesting limit
             add `#rename old new'
             __STDC__ not defined for plusplus (until they figure it out)
    93-01-22 fix ansi macro args recursion bug
    93-01-11 fix '\377'<0 for signed char compilers
             add RELAX for __STDPP__directive directives
    92-12-25 fix #include guard test that omitted IN_tokens for CPP=1
    92-12-11 fix pp:truncate for STANDALONE and COMPILE
             fix pp:allmultiple again!
    92-11-30 add pp:final, pp:initial
             add __STDPP__directive and #(directive) as ??= alternative
             relax obsolete macro expand warning for _xxx||xxx
             retain quoted \newline when PP_LINEID != ""
             fix CATLITERAL hidden newline line sync
    92-11-11 fix COMPATIBILITY EOF in macro arg list and # in macro body
             fix [?\] on 4K buffer boundary bug that lost next refill()
             fix ppproto bug that botched -ih comments
    92-10-31 fix standalone -C bug that duplicated output buffer
             add pp:stringspan to handle gnu "<newline>" extension
    92-10-12 fix T_X_GROUP asm bug
             allow `#define a "b' pp:compatibility hack
    92-08-11 add PP_PLUSCOMMENT, pp:pluscomment probe
             add #(default v,d) #(empty v) #(iterate m,...)
             compatibility allows #define f(a,,b) for 2 args!
             probe now handles gcc -E -g3 to get gnu predefines
    92-07-17 fix pp:multiple again, fix ppproto() out of bounds
             PP_STANDARD is always PP_CDIR and PP_HOSTED
    92-07-11 add #import and #include_next probes
    92-06-11 fix bug where comments dissappeared after disabled macro in standalone
             COMPATIBILITY macro recursion bug fix may cause some to be missed
             PP_MACREF or -D-L- ignores #line until #line with file arg
    92-06-01 add pp:ignore
             fix probe of stdpp to handle -I[-+][CH]
    92-05-11 add pp:hide <id>, pp:note <id>, noticed(<id>), exists(<...>)
             add defined(__STDPP__<pragma>) feature test
             add PP_CDIR, pp:cdir for C++ extern "C" { ... } include wrapping
             pp.probe now handles predefines with values other than 1
    92-04-11 add inverse proto (K&R -> prototype) to ppproto
    92-04-01 release
    92-02-29 #include <...> inside <xxx.h> gets next xxx.h on -I list
             non-libpp generated symbols containing ' ' are not truncated
    92-02-11 conversion to new lexer brings time close to reiser (esp. w/gcc -O)
             combine standalone (ppcpp) tokenizing (pplex) and proto lex tables
             recode ppproto for standalone operation via PROTOMAIN
             add PP_NOHASH for PP_COMPILE front ends that rehash T_ID anyway
             delete PP_NOQUOTE
             delete #option(strict) test in probe in favor of non-hosted warnings
             add unsigned to ppexpr()
    91-10-11 add pp:truncate <len> for non-flexname compilers
    91-09-11 fix ppproto aggression on f(*y); -> f __PROTO__((*y));
    91-08-11 switch seterror() to error_info.*
             add pp:linefile to force file name in line sync
             add pp:spaceout for probed compilers that don't allow pp override
    91-06-11 fix ignored -I/usr/include bug
    91-04-11 set SYM_INIT in pp.macref for -U on cmd line
    91-01-31 replace pp:pragma and pp:directive with pp:map
             replace #assert and #unassert with #define #... and #undef #...
             #assert and #unassert compatibility retained via pp:map
             replace -D#directive with -D%directive (because of #assert change)
             add pp:splicecat for \<newline> #define token paste
             fix \<newline> bug that added space in COMPATIBILITY quoted strings
    90-12-11 fix #pragma pp:multiple
    90-11-11 generalize handling of non-standard keywords for COMPILE
             replace pp:identifier/PP_IDENTIFIER with pp:reserved/PP_RESERVED
             pp*keys* -> ppkey
             add PP_NOISE
             (gag) handle msdos paths by changing \ to / and retrying on failure
             (gag) handle msdos :> operator by pplex() '+' return
             add #pragma prototyped and ppproto.c for prototype conversion
             add unsigned long arg to PP_MACREF for hashed macro arity+value
    90-10-11 0f is not a float constant
             change -I-M to -I-I, file just lists include files to be ignored
             fix ppprobe for __STDC__==0 hybrids
             add pp.flags and PP_[a-z0-9]+ for exported state info
    90-10-01 fix standalone ppmacref for directives
             add `try' to C++ keywords
             fine tune a few COMPILE error messages
             privatize pp.h
    90-08-11 use opt_again in cmdargs() option parsers
             (gag) add pp:macref macro reference pragma to handle CC preprocessors
             (gag) add pp:spaceout to handle ansi + asm hacks
    90-07-17 remove spaces from macdef line sync (blew sun cc)
    90-06-11 add internal ppsymkey to avoid ppsymbol.value pun for SYM_KEYWORD
    90-05-01 fix catliteral bug of `"..." << ' -> `"..." <='
    90-04-01 fix `ifndef-define-endif' include wrapper test
    90-03-27 add setpreroot() to ppop() [ sleazy but well hidden ]
    90-03-22 pp.macref called for all undef's
    90-03-20 add <prefix>cpp checks to ppprobe
             add pp:hostdir before pp:include in ppprobe
             fix PP_HOSTDIR op with no dir arg
    90-03-15 System V CCS compatibility update
             add PP_ASSERT
             add -A for PP_ASSERT and -YI,dir for PP_STANDARD
             add ppincref.c and -H to use it
             -Xa defines __STDC__ to 0 (gak)
    90-03-09 duplicate macro formals cause level 2 error
    90-03-01 add #(ARGC) for (variadic) macro arg count
    90-02-11 fix line sync number bug in pppush()
    89-12-01 ignore leading = in pragma map for old pragma compatibility
             check for NEWLINE on first macdef line sync
    89-11-11 add -1 arg to pp.incref -- include skipped
             STRICT 0x7e-macro is T_INVALID per standard
    89-10-31 put all C keys in ppckeys.c, C++ keys in pppkeys.c
             add pp:identifier pragma to selectively undo PP_COMPILE keywords
             add tokop() to ppcontrol to support multi-valued pragmas
             add #ifndef...#endif include optimization for STRICT
    89-10-27 use REF_NORMAL, REF_IF, REF_UNDEF for pp.macref arg2
    89-10-17 fix c(x)y compatibility pasting bug
             #line 1 "f" now marks "f" included
    89-10-11 enable -I. during initialization
    89-10-01 inhibit pp:linetype syncs for top level #line directives
             ----- see HISTORY -----
    
    RELEASE notes for src/lib/libpz/RELEASE
    
    11-09-21 sfdczip.c: set SF_SHARE if uncompress discipline pushed
    11-03-07 pzip.h,pzpart.c: handle length@offset variable row size
    06-12-18 pzline.c: move to separate plugin source dir
    06-10-11 add sfstruse() error checks
    06-03-22 pzopen.c: change "input stream close error" to "data corrupted"
    05-07-17 pzinflate.c: use sferror() instead of sfsync() -- doh
             pzsplit.c: drop SF_WRITE sfreserve() to keep writes aligned
    05-06-30 pzsplit.c: work around sfreserve() write failure via sfwrite()
    04-04-08 add pznospace()
    04-02-29 pzip.h,pzline.c: fix pz_init() prototype
    03-11-04 pzpart.c: use PZ_HEAD to avoid multiple PZ_UPDATE, fix wrk overflow
    03-07-23 pzsplit.c: --split file size limited to --window
    03-07-17 pzpart.c: fix "//" partition translation
             pzpart.c: add include="file", library="..." disabled during include
             pzpart.c: default split window threshhold is now 16K
             pzsplit.c: free Id_t when done
    03-05-13 sfdcpzip.c: add SF_DBUFFER exception, SF_SHARE before sfreserve()
    03-05-05 sfdcpzip.c,sfdczip.c: add bzip support
    03-04-15 pzlib.h: add PZ_MARK_PART for partial last input record
             pzlib.h: add PZ_MARK_TAIL for tail records
             partial input record is now a warning and handled on inflate
    03-03-03 pzhead.c: PZ_FORCE disables unknown input diagnostic
    03-02-10 sfdczip.c,sfdcpzip.c: handle PZ_CRC and SFGZ_NOCRC
    03-02-06 pzhead.c: fmtquote() FMT_ALWAYS update
    03-01-04 pzpart.c: list range only if more than 2 elements
    02-12-25 pzip.h,pzpart.c,pzdeflate.c,pzwrite.c: add PZ_SORT
    02-12-18 pzwrite.c: add partial row buffer
    02-12-12 sfdcpzip.c: move disc arg to the end for discplined consistency
    02-12-11 sfdczip.c: add
             sfdcpzip.c: fix SF_WRITE, set disc.partition if passed in
    02-11-22 sfdcpzip.c: fix bug that did not close pz->pz->io (and its fd!)
             pzpart: check option errors (duh) and accept comment option
    02-10-31 pzpart: partition file "/" or "//" or "/gzip/" => gzip compress
    02-04-30 pzopen,pzhead: tighten pzip magic check via reasonable version number
    02-03-09 pzopen,pzdeflate,pzsync: add fatal error checks
    02-02-14 pzopen: disable PZ_UNKNOWN check if PZ_NOPZIP -- duh
    02-01-11 pzdeflate: use Sfoff_t for sfmove() return instead of ssize_t
    01-08-11 pzinit: add for static discipline library linking
    01-07-17 pzlib: call dllerror() on failed dllfind()
    01-06-28 pzpartnext: add to iterate over all partitions
             pzpartition: default partition can be on one line: `"label" size -'
    01-02-02 delay buffer allocation until pzpartinit()
             pzpart: fix non-terminated string bug for url-style paths
    01-01-01 pzopen: open new stream instead of using sfstdin for sfdcgzip()
    00-12-11 pzpart(): add -X0 => prefix.skip => skip prefix on uncompress
    00-10-04 pzhead(): accept empty input for compression -- duh
    00-05-31 pzclose(): check for pz->io == 0
    00-02-14 PZ_DELAY|PZ_HANDLE|PZ_UNKNOWN for 'unknown format' after pzlib() done
    00-01-26 pzlib: dlsym() for NAME and _NAME (some don't map `_' automatically)
    99-08-11 discipline cleanup
             pzdeflate: last record incomplete is an error
             pzline: add
             pzpart: add partition#name partition?name=value,...
             pzclose: add scaled bps to PZ_SUMMARY
             pzfixed: use size if available and do 2 col freq check
             pzfixed: add optional pz for tracing
             pzip.h: add PZ_REGRESS, Pz_t.test, drop PZ_TEST*
             *: details => options, use optstr() with usage for PZ_OPTION
             pzpart: fix off-by one max col check
    99-07-17 sfdcpzip: don't free disc on SF_CLOSE
             pzsplit: add
    99-06-23 add EOF checks to PZGETP() and PZGETZ()
    99-06-21 add Pz_t.fixed, name=value to partition file
    99-06-15 pzfixed: fix divide by 0
    99-06-04 resize pp->fix after detail changes
    99-03-17 add pzfixed()
    98-11-11 nmap==0 allowed
    98-11-01 add PZ_NOGZIP,PZ_NOPZIP for finer convert control
    98-10-20 add Pzdisc_t readf and writef and file trailer
             add pzconvert() discipline
    98-10-15 hide some Pzpart_t details; part access by name only
    98-10-01 2.0 format and interface -- Pzpart_t for multiple partitions
    98-09-09 1.3 format -- separate <run,off> <val> compression groups
    98-08-11 1.0 release
    
    RELEASE notes for src/lib/librecsort/RELEASE
    
    12-05-28 rskey.c: fix unsigned comparison to 0
    11-10-11 recsort.h,rskeyopen.c: RSKEY_VERSION=20111011, add Rsdisc_t* argument
    11-09-27 rsopen.c,rsmerge.c: drop obsolete VM_TRUST
    10-05-25 rskey.c: locale-ize Rskey_t.tab and key_m_code()
    10-04-22 rskey.c: 'C' codeer => 'E' to make way for posix -C
    09-12-09 rskey.c: add h option for key_n_code (IEEE 1541-2002 scales)
    09-05-11 rskey.c: add collation mbxfrm() overflow panic (yes I know)
    09-05-11 rskey.c: fix mbxfrm() return value logic
    07-12-14 rskey.c: fix mb fixed field offset >= 99 key gen
    07-10-30 rshdr.h: default INSIZE == PROCSIZE -- worth ~25% time!
    07-10-30 rskey.h,rskeyopen.c,rskey.c: honor locale collation order
    07-10-10 rskey.c: handle ascii signed zoned decimal (0x70 => negative)
    07-04-16 recsort.h,rskey.c: add RSKEY_KEYS
    06-12-15 rskeyhdr.h: increase MAXFIELD to INT_MAX
    06-07-17 rsprocess.c: re-key after RS_READ calout
    06-06-29 rsprocess.c: set obj key,keylen before RS_READ
    06-05-10 rsmerge.c: (car) caught 2 more missing RS_WRITE callouts!
    06-04-20 rsmerge.c: no RS_WRITE events for intermediate merge -- doh
    06-04-19 finally fixed multi-level merge v record format bugs
    06-02-14 recsort.h: always __EXPORT__ rs_disc()
    06-02-09 rstemp.c: sfset(SF_READ|SF_WRITE) not needed
    05-12-01 -lsync event callout bug fixes -- finally working?
    05-11-28 rswrite.c: honor RS_OTEXT
    05-11-09 rsmerge.c: fix RS_ITEXT+notify logic
    05-10-18 rsprocess.c: RS_READ callouts finally in the right place
    05-10-12 rstemp.c: keep temp write SF_WRITE and temp read SF_READ
    05-08-22 rsmerge.c: fix RS_WRITE callouts
    05-06-30 rsmerge.c: handle all RS_TEXT record formats
    05-06-28 add rsnew()+rsinit() to split rsopen() for rsfile*()
    05-06-27 rstemp.c: add temp file support and RS_TEMP_* events
             rsfile.c: add input/output file open RS_FILE_* events
    05-06-11 rskey*.c: initialize disc->data via REC_*_TYPE macros -- doh
    05-05-15 handle disc->data Recfmt_t
    04-10-31 rsmerge.c: fix EOF detection
    04-10-15 rs-copy.c: add
    04-10-11 recsort.h: change int count to Sfulong_t count
    04-09-28 recsort.h: add { RS_TERMINATE RS_DELETE RS_ACCEPT RS_INSERT }
             rsprocess.c,rswrite.c: initial RS_INSERT code -- not right yet
    04-08-11 rskeydump.c: list key.nproc if >1
    04-06-15 rsprocess.c: fix V format record read
    04-02-11 rskey.c: fix old ast reclen:fieldlen:offset parse
    03-10-11 recsort.h: add RS_IGNORE Rs_t.type hint
    03-09-18 rswrite.c: fix RS_WRITE exceptions
    03-09-06 rskey.c: add 'Z' key_z_code for zoned decimal
    03-09-04 rsprocess.c: rs->disc->data==-1 => ibm v format records
    03-09-03 rslib.c: rslib() separator expanded to [,\t\r\n]
    03-09-01 recsort.h: add rslib(), discipline stack, extra event arg
    03-08-29 recsort.h: add RS_READ and RS_WRITE events
    03-08-15 rskey.c: add -Jseed for random shuffle (jumble)
    03-05-27 rskey.c: add Ci[o] code set [conversion]
    03-05-26 rskey.c: add 'p' packed decimal (bcd)
    03-05-23 recsort.h: add Rskey_t.code for global ccode index
    03-05-22 rskey.c: handle -k.reclen -k.position.length
    03-05-21 recsort.h: add events mask to Rsdisc_t, change Rskey_t disc to pointer
             rsnotify.c: add
    03-03-07 Makefile: generate dll for dr. ek
    03-01-21 rsmerge.c: fix typo that kicked in on large (~100K) record sizes
    01-01-01 recsort.h: _RSHDR_H => _BLD_recsort; should have been done years ago
    00-08-31 rskey.c: fix code() buffer off by one (too far)
    00-03-17 rskey.c: consult RLIMIT_DATA for size limits
    00-01-25 rskey.c: win32.i386 optimizer generates bad code for key_n_code
    99-11-19 rskeylist.c: add usage
    99-07-28 rskey.c: factor number of key fields into rs.disc.key
    99-03-03 recsort.h: add RSKEYDISC() to get Rskey_t.keydisc from Rsdisc_t*
    98-08-11 add rsmerge() write error detection
    96-12-25 add (ulong) for alpha 64 bit << bug (ahem..correct stdc interpretation)
             add (int) for unsigned char subtracts
             drop function __IMPORT__
             use vmalloc() for all allocations
             we're getting sick of bsd: <stdlib.h> has a radixsort() prototype!
             unroll rs-rasp.c for the hp.pa compiler; don't trust it!
    96-10-31 sfio,dll update
             drop MAXFIELD restriction by converting to linked list
             add -k*a to accumulate fields from dup keys
    96-10-22 K&R cast cleanup
    96-10-17 iffe test for sizeof(long)==8
    96-10-15 oops -- regression test bug let rswrite() bug through
    96-10-11 all regression tests pass for all methods
    96-10-01 rskey discipline and eventf; remove libast dependencies
    96-09-20 rskey(kp,s,obsolete)
    96-09-18 first working version with -lsort (ok, so -c and -m don't work yet)
    
    RELEASE notes for src/lib/libsum/RELEASE
    
    12-02-29 sum-sha2.c: bitcount[] order reversed to allow a single noalias buffer copy
    09-09-28 sumlib.c: use simple (faster) method name match function
    08-06-05 sum-lmd.c: align context to largest int
    08-05-01 sumlib.c: add some -lmd verification checks
    08-02-11 sum-lmd.c,features/sum: add wrapper for solaris -lmd
    07-10-29 sum.h,sumlib.c: add SUM_LEGACY for legacy output format
    07-09-21 sum-sha1.c: reinstate Steve Reid's public domain implementation
    07-07-26 sumlib.c: drop GPL sum-sha1.c
    05-02-14 sumlib.c: split into sum-*.c
    05-02-14 sum-sha2.c: add SHA { 256 384 512 }
    04-02-29 Makefile: compile with $(CC.PIC) for codexlib/sum $(CC.DLL)
    03-12-16 add { crc prng } generic methods and maps[] to these methods
    03-12-16 sum.h,sumlib.c: add sumdata()
    03-09-29 sumlib.c: fix FNV to use ^ instead of +
    03-04-28 sumlib.c: drop md5 `zeroize' for performance
             sumlib.c: add FIPS 180-1 SHA-1
    
    RELEASE notes for src/lib/libtaso/RELEASE
    
    11-12-01 first release
    
    RELEASE notes for src/lib/libtk/RELEASE
    
    10-11-12 eliminate strict-aliasing puns
    10-06-01 sync with ast api 20100601
    
    RELEASE notes for src/lib/libtksh/RELEASE
    
    12-05-04  update sh_sigcheck() => sh_sigcheck(0) -- eventually figure out Shell_t*
    10-06-01  sync with ast api 20100601
    08-08-08  src/list.c,src/tcleval.c: add temporary sh_eval(p,0x8000) hack
    07-03-19  src/var.c: use nv_setref() to initialize references
    06-09-19  src/shcompat.c: sysconf() => astconf()
    04-07-19  tcl/tclIOUtil.c: treat { O_RDONLY O_WRONLY O_RDWR } as values
    03-06-13  include/tclInt.h: disable #undef sprintf that masked its prototype
    03-04-05  src/var.c: fix off by 1 malloc() call -- for once not gsf's fault!!
              src/var.c: hack around nv_move() double-free bug -- needs better fix
    03-03-12  src/tcleval.c,src/tclIO.c: change sfslen() => sfvalue(f)
    02-08-27  tcl/tclNotify.c: XXX add sh_sigcheck() call -- to be cleaned up
    02-08-22  enable regex cache initialization
    02-06-25  include/nvextra.h: use an addaptable cheat for the namval offset
    02-03-17  update ksh private assoc array offsets -- should be a function call
    02-01-30  compensate for uts.390 lack of header guards for { select.h time.h }
    01-04-19  add HAVE_TIME_H HAVE_SYS_PARAM_H HAVE___FD_MASK tests to tclPort.h
    00-02-10  --- Release 7.6 ---
    00-02-10  Update README file
    00-02-09  Deleted unreferenced vars, dropped tcl 7.5 compatibility,
              added _PACKAGE_ast <tm.h> routines to tclUnixTime.c, added
              forward refs to the Tcl_LinkVar() Tcl_UnlinkVar() tk callbacks,
              changed Makefile library refs
    00-02-07  Modified shcompat.c and shcompat.h to handle
              change to ksh93 where nvenv is now private.
    00-02-07  Included Tk4.2 in distribution to avoid
              compatibility problems.  Modified Makefile.
    00-02-07  Using new packaging provided by gsf
    97-06-24  src/tclIO.c proto tweaks [gsf]
    
    97-04-10  --- Release 7.6b1 ---
    97-04-09  tcl_open |command works
    97-04-09  Default interp mode is INTERP_TCL
    97-03-09  Combined tksh.c interp.c to init.c
    97-03-09  Incorporated changes for Tcl 7.6
    97-03-09  waitevent sets interp type to tcl instead of having eval guess
    97-03-09  Inserted code to null terminate argv in InterpProc
    97-01-20  Integrated in tcl 7.5p1
    97-01-20  Integrated tclIO.c written on sfio
    97-01-20  using nmake makefile
    97-01-20  integrated changes for uwin
    96-09-04  Reorganization of directory
    96-09-04  Works with Tcl 7.5
    96-09-04  Doesn't work with Tcl 7.4, Tcl 7.4 (requires Tk4.0)
    96-09-04  Lots of new files, deleted files
    96-02-29  Tcl_RegExp*() changed to use posix regex
    96-02-29  Tcl_RegExp*() cache change to avoid copying
    96-02-29  Tcl_RegExpCompile arg 3 for case ignore match
    96-02-29  drop stdarg.h from :: src list
    96-02-29  drop malloc.h from tksh.h
    96-02-25  unset TK_LIBRARY in tk.ksh
    96-02-25  modifications to Makefile, config.sh and config.tcl:
              make debug, make BASE=, removed debug option in interface
    96-02-25  setsub now creates a null subscript
    96-02-25  init.ksh sets argv0 & argv, uses discipline for env instead of trace
    96-02-25  bug in Tksh_ConvertList fixed (didn't check errors properly)
    96-02-25  Man page updated
    
    96-02-21  --- Release 1.0b2 ---
    96-02-21  New version of Tksh paper
    96-02-21  Man page updated
    96-02-21  ksh version of source accepts standard input ; uses sfio
    96-02-15  Tcl_EvalFile works with Tcl mode
    96-02-15  Result only printed if stdout is a string.
    96-02-13  Added sh_sigcheck to Tcl_TclEval, making it possible to stop an
              infinite loop in a builtin.
    96-02-13  Traces turned off in subshell
    96-02-11  Added array data field in array discipline, used for array searches.
              TkshMakeArray now called TkshArrayData, separate nv_makearray macro.
              Search ids allocated like tcl, using array data instead of hash table
              set.test would pass, except ordering of elements is different (5 fail)
              however, it meets specs.
    96-02-11  Cleaned up tksh.h a bit
    96-02-11  Added in .sh.result traced to interp->result
    96-02-11  Added builtin setlist
    96-02-08  Added Tcl_UpVar, Tcl_UpVar2 functions
    96-02-08  regexp.c used instead of shell patterns
    96-02-08  fixed bug in proc test (but now file crashes)
    96-02-08  changed behavior of "info commands" to strip off tcl_ so that
              info.test passes
    96-02-06  rewrote portions of var.c - now the code is a lot easier to follow.
              Set up to use the new NV_NODISC flag.  Two more trace tests pass.
              Note - only one unset disc is called after a function clears scope.
    96-02-06  Added pid command
    96-02-04  button.ksh invoke does not redirect stderr and stdout to /dev/null
    96-02-03  Moved TclOpen and TclRead from tk.c to tclunix.c
    96-02-03  File reorganization:
                New file varcmd.c which has commands associated with vars
                  (taken from tclcommand.c)
                tclcommand.c renamed commands.c, command.c renamed eval.c
                commands.c has tclinfo.c and tclsource.c
    96-02-03  Removed tcllist.c, tclstring.c and tclresult.c and put tclUtil.c
              into tcl directory (only a couple of changes necessary to tclUtil.c)
    96-02-03  Tcl_SetErrorCode.c remvoed from tclerr.c (in tclUtil.c)
    96-02-03  Makefile updated accordingly
    96-02-03  Fixed bug with bind : #! in bindscript was ignored
    96-02-02  Fixed up/down arrow key problem in tk library
    96-02-01  Removed printing of "after" for entry widgets
    96-02-01  Removed return in Tcl_UntraceVar (return void doesn't work for sgi)
    96-01-30  Added in checks to config.sh for -lsocket and -lnsl
    96-01-30  Added fixstrtod (used in libtk.a on Solaris)
    96-01-30  Moved "widget" to scripts directory and made symbolic link to it
    96-01-30  Created "tksh" directory for binaries
    96-01-29  Changed name of directory "kshmain" to "obsolete"
    96-01-29  Fixed ifdef 0 in tk.c
    96-01-29  tclinfo.c and interp.c use function TkshLibDir(), defined in tksh.c
    96-01-29  tksh_builtin_command sets sh.exitval to 1 on error
    
    96-01-25  --- Release 1.0b1 ---
    
    RELEASE notes for src/lib/libuu/RELEASE
    
    09-09-24 uulib: add cat method for mail sevenbit|7bit encoding
    03-01-07 uulib: check UU_HEADER in bx_header()
    01-03-27 uulib: add UU_LOCAL for local path conversion
    00-03-06 uulib: !UU_HEADER decode checks for candidate encodings
    00-03-04 uulib: add posix decode size check
    98-12-25 uu_encode: fix dp->fill usage
    98-11-11 uulib: add binhex encode
    
    RELEASE notes for src/lib/libvcodex/RELEASE
    
    11-01-31 Makefile: use `...` instead of $( ... ) for bootstrap build
    10-06-01 sync with ast api 20100601
    09-08-19 vchufgroup.c: sync with kpv (new alg)
    09-06-22 sync with kpv, add vcgetfname(), vcwalkfname()
    09-03-12 vcstrip.c: add
    09-03-10 vcalias.c: add qnl
    09-02-24 vcalias.c: add rte
    09-02-24 vcsfio.c: ignore VC_EOF+ at end of header data
    09-02-02 vcsfxsort.c: fix suffix sort stack overflow bug
    08-12-07 sync with kpv 2008-11-04
    08-09-10 vcsfio.c: handle old binary method header
    08-07-23 vcodex.h: add __EXPORT__/__IMPORT__ extern attributes
    08-06-04 sync with kpv
    06-07-26 vcgetmeth.c,vcextract.c: handle CC_NATIVE!=CC_ASCII
    06-02-14 vcodex.h: add __EXPORT__ to plugin declaration
    06-02-08 vcsfio.c: simply magic logic by just peeking 4 byte magic
    06-01-24 move private builtin methods to private plugins
    06-01-16 Nmakefile: add PRIVATE for non-cpl methods
    06-01-13 vcgetmeth.c: fix "foo.arg" parse error
    05-10-25 vcsfio.c: fix header peek logic
    05-09-28 Vchuff/vchhdr.h: add type case to ARRAYMAKE()
    05-09-22 vcsfio.c: vczip command support functions for the masses
    05-09-16 vcodex.h,vcsfio.c: add vcsfcomp() stub for vczip getmethods()
    05-09-15 snarf from kpv, remerge _PACKAGE_ast
    05-08-23 vcodex.h,vcsfio.c: add sfdcvcodex() (1:pushed,0:not-needed,-1:error)
    05-08-22 vcsfio.c: peek initial header => no consumption on error
    05-06-30 vcsfio.c: change vcsfmeth() to return Vcsfmeth_t* and size
    05-06-29 vcodex.h: _PACKAGE_ast => <sfio.h>
             fix !__STD_C for ancient sun4
             change ident to char* (from unsigned char*) for pedantic cc
             Vcdelta/vcdtblinit.c: init { _Vcdtbl _Vcdindex } to avoid dyn common
    05-06-28 snarf from kpv
    
    RELEASE notes for src/lib/libvdelta/RELEASE
    
    12-02-14 vdelhdr.h,vdio.c: apply patch from philippe.bergheaud
    04-03-14 vdelta.h: #if !_DLL => #if !defined(_DLL) to handle empty value
    08/11/95 version 2.0 -- new delta layout but old update recognized
    04/24/95 back out of latest version -- incompatible deltas generated
    
    RELEASE notes for src/lib/libvgraph/RELEASE
    
    08-12-07 rename graph => vgraph
    08-11-22 graph.h: add _WINIX import/export qualifiers
    08-05-21 first release for -lvcodex
    
    RELEASE notes for src/lib/libz/RELEASE
    
    07-11-29 sfdcgzip.c: add seekf() for first buffer rewind
    07-06-11 rename ARCH macros to ZLIB_ARCH to cut down namespace pollution
    07-05-09 Makefile: :INSTALLPROTO: zconf.h for win32 <ast_*> post edit
    07-01-25 zlib.h,gzio.c: add gzbopen() to handle buffered unseekable data
    07-01-25 sfdcgzip.c: use gzbopen() to handle buffered unseekable data
    05-07-25 __MVS__ tweaks
    05-03-21 snarf and merge zlib 1.2.3, drop gzseek64() gztell64()
    05-05-11 sfdcgzip.c: change return value to [cgv], add vcunzip read check
    04-02-14 sfdcgzip.c,sfdclzw.c: add SFDCNEXT()/SFDCPREV() calls
    03-05-13 sfdcgzip.c,sfdclzw.c: add SF_DBUFFER exception, SF_SHARE+sfreserve()
    03-03-13 gzio.c: eliminate fixed gzprintf() buffer size via sfio string stream
    03-01-20 zlib.h,gzio.c: add gzreopen()
    02-09-11 zlib.h: move 64 bit counts to internal_state
    02-08-05 add z_off64_t, gzseek64() etc. to preserve old binary interface
             work around 2^32 file size limitations
    02-06-11 add uSize == unsigned _ast_intmax_t; fix header size check
    02-05-22 zconf.h: fix __32BIT__ logic
    02-03-11 infblock.c: apply double free patch
    02-03-09 gzio.c: add stream->fatal to mark fatal errors previously ignored
             sfdcgzip.c: fix exception return values and mark SF_ERROR on fatal
    02-01-30 minigzip.c: error() => mgzerror() to avoid ancient ld dup sym error
             minigzip.c: [uU] in executable base name => gunzip, otherwise gzip
    01-09-18 zconf.h: include <ast_std.h> for __IMPORT__ and __EXPORT__
    00-09-11 gzio: don't set verified=1 in check_header() for concatenation
    99-11-19 gzio: add missing _PACKAGE_ast
    99-09-11 sfdcgzip,sfdclzw: return 1 if discipline pushed
    99-08-11 gzio: fix gzread() z_err to keep Z_STREAM_END after check_header()
    99-07-17 sfdclzw: don't free disc on SF_CLOSE
    99-06-23 fix gzread/gzwrite to return -1 on error (fixes sfio disc loop)
    99-02-14 fix SFGZ_SETPOS to flush/sync for mode=='w' only
    99-02-04 add SF_CLOSE to output trailer before the underlying stream is closed!
    98-12-01 drop lzwWrite and lzwSeek in sfdclzw
    98-11-01 pushed stream buffer size is SF_BUFSIZE
    98-10-01 add SFGZ_GETPOS and SFGZ_SETPOS
    98-03-19 sfgzip => sfdcgzip
