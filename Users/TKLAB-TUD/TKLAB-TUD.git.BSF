======================: FILES :======================
======================: README CONTENT :======================
<img align="center" src="https://github.com/tklab-tud/BSF/blob/master/resources/bsf2.jpg" alt="BSF Logo" title="BSF Logo" width="200" height="200" />
     
# BSF - Botnet Simulation Framework

BSF provides a discrete simulation environment to implement and extend peer-to-peer botnets, tweak their settings and allow defenders to evaluate monitoring and countermeasures .

## Synopsis

In the arms race between botmasters and defenders, the botmasters have the upper hand, as defenders have to react to actions and novel threats introduced by botmasters. The Botnet Simulation Framework (BSF) addresses this problem by leveling the playing field. It allows defenders to get ahead in the arms race by developing and evaluating new botnet monitoring techniques and countermeasures. This is crucial, as experimenting in the wild will interfere with other researchers and possibly alert botmasters. 

BSF allows realistic simulation of peer-to-peer botnets to explore and study the design and impact of monitoring mechanisms and takedown attempts before being deployed in the wild. BSF is a discrete event botnet simulator that provides a set of highly configurable (and customizable) botnet features including:
- realistic churn behavior
- variable bot behavior
- monitoring mechanisms (crawlers and sensors)
- anti-monitoring mechanisms

Moreover, BSF provides an interactive visualization module to further study the outcome of a simulation. BSF is aimed at enabling researchers and defenders to study the design of the different monitoring mechanisms in the presence of anti-monitoring mechanisms [1,2,3]. Furthermore, this tool allows the users to explore and understand the impact of design choices of botnets seen to date.

## Installation

BSF consists of the simulation framework and a visualization tool. The simulation framework itself is built on top of [OMNeT++](https://omnetpp.org/). Visualization is built on top of [Dash](https://plot.ly/dash/) to provide an interactive within your favorite browser.

### Setting up OMNeT++

The current version of BSF is built and tested with [OMNeT++ version 5.4.1.](https://omnetpp.org/download/old)

Please refer to the [OMNeT++ documentation](https://omnetpp.org/documentation/) for installation guidelines, tutorials and references regarding the provided functionalities.

### Setting up visualization components

To visualize the botnet simulations, the following python packages are required:
```
pip install dash==1.2.0      # The core dash backend
pip install dash-daq==0.1.0  # DAQ components (newly open-sourced!)

pip install networkx
pip install natsort 
pip install numpy
```

## Getting Started

OMNeT++ simulations are based on configurations defined in .ini files. The simulations folder of this repository contains a set of pre-defined configurations located in the tests.ini and sample.ini files.

To run a configuration, you may use either the OMNeT++ IDE or the command line. As BSF does not use any of the graphical features of OMNeT++ we recommend to run all simulations in the cmdenv, i.e., using just console output.

### Running Simulations within the IDE

To run a simulation within the IDE you need to setup a run configuration. For this, right click the \*.ini file and select *Run As* -> *Run Configurations*. Next setup your configuration file as shown in the image below:

![IDE run configuration setup](https://github.com/tklab-tud/BSF/blob/master/resources/omnet_run_config.png "IDE run configurations")

Now simply hit apply and run. The output of the simulation will appear in the IDE console.

### Running Simulations from the Command Line

To run from the command line, we need to first build the project. Navigate to the root folder and run:

```
make MODE=release all 
```

Afterwards navigate to the simulations folder and run:

```
../BSF -r 0 -m -u Cmdenv -c SampleConfig_Crawler -n .. samples.ini
```

### Simulation Output

Regardless of running the simulation from the IDE or the command line, you should see output similar to this:

```
** Event #577792   t=64831.46985369179   Elapsed: 4.21157s (0m 04s)  37% completed  (37% total)
     Speed:     ev/sec=180486   simsec/sec=14682   ev/simsec=12.293
     Messages:  created: 406512   present: 2108   in FES: 487
Just crawled: 24 nodes at 88983.25891616358
Just crawled: 40 nodes at 92583.25891616358
** Event #1050880   t=93607.74036896409   Elapsed: 6.28757s (0m 06s)  54% completed  (54% total)
     Speed:     ev/sec=227885   simsec/sec=13861.4   ev/simsec=16.4402
     Messages:  created: 729732   present: 2106   in FES: 630
Just crawled: 108 nodes at 96183.25891616358
Just crawled: 286 nodes at 99783.25891616358
Just crawled: 570 nodes at 103383.25891616358
```
The blocks start off with \*\* are standard outputs of OMNeT++ indicating the progress and statistics of the simulation. In the selected configuration, we have additional outputs by the crawler reporting the number of nodes discovered at each crawling interval. While this doesn't tell us much, we will show in the next section how you can visualize the output of both the botnet and the results of the crawler.

## Visualizing Results

The visualization is decoupled from the simulation framework and works on top of the generated graph and monitoring log files. We have also uploaded some sample data to explore the visualizations without running the main framework.

To visualize the results of the simulations you have to navigate to the *visualization* folder and call *app.py*. Afterwards open your favorite browser and open *http://127.0.0.1:8050/*. This should provide you with a graph view of one of the sample configurations looking something like this:

![Visualization demo](https://github.com/tklab-tud/BSF/blob/master/resources/visualization_graph_only.png "Visualization demo")

The dropdown menu in the top right of the screen allows you to choose between the results of different configurations. On the bottom of the screen you can see a timeline indicating all available snapshots of the botnet. This allows to visualize changes in the activity and connectivity of the bots. Furthermore, the menu on the right allows to visualize the information collected by crawlers or sensors. An example can be seen in the following figure, where the view of the crawler is highlighted in green.

![Visualization demo](https://github.com/tklab-tud/BSF/blob/master/resources/visualization_with_crawler.png "Visualization demo")

Furthermore, we are currently working on more advanced visualizations aiding the analysis of monitoring and takedown operations.

## References

The following publications present examples on the use cases of BSF:

\[1\]	[Leon Böck, Emmanouil Vasilomanolakis, Jan Helge Wolf, Max Mühlhäuser: Autonomously detecting sensors in fully distributed botnets. Computers & Security 83: 1-13 (2019)](https://www.sciencedirect.com/science/article/pii/S0167404818312094)

\[2\] [Leon Böck, Emmanouil Vasilomanolakis, Max Mühlhäuser, Shankar Karuppayah: Next Generation P2P Botnets: Monitoring Under Adverse Conditions. RAID 2018: 511-531](https://link.springer.com/chapter/10.1007/978-3-030-00470-5_24)

\[3\] [Emmanouil Vasilomanolakis, Max Mühlhäuser, Jan Helge Wolf, Leon Böck, Shankar Karuppayah](https://www.youtube.com/watch?v=m4rKqdQEqSo&t=1s)


====================== GIT HISTORY: ======================
86d477b HEAD@{0}: clone: from https://github.com/tklab-tud/BSF
commit 86d477b1aca8a95be58f9608c6da375d3946be53
Author: Leon Böck <leonboeck@gmail.com>
Date:   Thu Aug 6 18:10:27 2020 +0200

    Updated dependencies for python visualization

commit 8af548c4ad65172f27d70a649e27ad76a31a0b96
Author: leonboeck <leonboeck@gmail.com>
Date:   Thu Aug 6 16:26:10 2020 +0200

    Added graph files for Blackhat US 2020 sample visualization

commit a00855f23565cf2149f54c4cd86a87bffaffceba
Author: leonboeck <leonboeck@gmail.com>
Date:   Thu Aug 6 16:22:36 2020 +0200

    Cleanup

commit a5242f16b9f611c807bd589b9dc4e64a919253a0
Author: leonboeck <leonboeck@gmail.com>
Date:   Thu Aug 6 16:15:09 2020 +0200

    Updated scenario for Blackhat US 2020 presentation

commit deb7919d0bad1c630e6de2d1f0ee8f62302c311c
Author: leonboeck <leonboeck@gmail.com>
Date:   Fri May 8 12:07:21 2020 +0200

    Changed crawler dump format to a sparse representation

commit 192ddbd0ff02ff3c7b5caf20a3e54228880a79a7
Author: leonboeck <leonboeck@gmail.com>
Date:   Fri May 8 10:37:40 2020 +0200

    Added a bomtaster module that can inject version updates to simplebot.

commit 89bccd20359ec794cd19a1211d5e52c751e7405c
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Oct 29 08:16:09 2019 +0100

    Implemented processing delay and maximum parallel connections
    
    The parameter "delay" can now be used to set a processing delay for MM messages.
    
    The parameter "max_parallel_connections" can now be used to limit the amount of parallel MM messages sent by a bot.
    e.g.: "**.max_parallel_connections = 8" will cause the bot to open at most 8 parallel outgoing connections to other bots during the MM phase. Incoming connections are NOT affected by this parameter.

commit 697bb3ed7ff3d6c72396d8af3e2500ffabbd9a96
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Oct 29 06:40:11 2019 +0100

    Implemented sender latency.
    
    Latencies are drawn from a uniform distribution and applied to every message sent by NodeBase. The old default 100ms delay on the channel is not used if latency_mean is provided in the ini file.
    
    New parameters:
    latency_mean
    latency_stddev

commit 5a5db67e69c0d2b8ceecc08d9682118dab60d33d
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Oct 22 13:51:35 2019 +0200

    Added gitignores for files generated as simulation output.

commit 60900427d9ab0948ead9bd1b8fd0f822a8256b5e
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Oct 22 13:49:52 2019 +0200

    Added functionality to record communication traces as csv file.

commit af4b2f672552365f4604c64ca289ecde655885f3
Author: Leon Böck <leonboeck@gmail.com>
Date:   Wed Sep 11 12:00:04 2019 +0200

    Update README.md

commit 0c94afe3d55fceeaec93cdea52fd142ef59379d3
Author: leonboeck <leonboeck@gmail.com>
Date:   Wed Sep 11 11:59:15 2019 +0200

    Updated visualization screenshots

commit e20424d484cb31395e8b890e4953df8a5d1a396f
Author: Jens Keim <jens.keim@stud.tu-darmstadt.de>
Date:   Wed Sep 11 11:48:44 2019 +0200

    add visualization

commit 19248250e831ec82a1de836e6dc1385e023efe08
Author: Leon Böck <leonboeck@gmail.com>
Date:   Wed Sep 11 11:39:33 2019 +0200

    Update README.md

commit d8f7baaf52c4f43105452c9d52af105f42425bd0
Author: Leon Böck <leonboeck@gmail.com>
Date:   Wed Sep 11 10:43:26 2019 +0200

    Update README.md

commit d397d936b2f0642f261c2fae46dcdc765ba973e3
Author: leonboeck <leonboeck@gmail.com>
Date:   Wed Sep 11 10:33:59 2019 +0200

    Added BSF logos

commit 368a9bae32c4d44acfd7282178034a08164fe4f2
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Sep 10 19:39:45 2019 +0200

    Added sample image for visualization

commit 44f9dcc36bc0e00a343a74e209f01ccd49bcff0a
Author: Leon Böck <leonboeck@gmail.com>
Date:   Tue Sep 10 14:55:36 2019 +0200

    Updated visualization details in readme

commit 6460e0b67f667148b14aa9b29dd672ebd60380d1
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Sep 10 13:44:32 2019 +0200

    Added a new smaller config (SampleConfig_Crawler_Small) for demonstration and visualization purposes.

commit fb40f2b3571f95662347e25ab982ad017d664d57
Author: leonboeck <leonboeck@gmail.com>
Date:   Tue Sep 10 11:10:54 2019 +0200

    Changed the folder structure for simulation data and updated test files.

commit 4b8bae8d75bddf8994f91fd43081a3e279e559c0
Author: Leon Böck <leonboeck@gmail.com>
Date:   Tue Sep 10 10:20:16 2019 +0200

    Added Synopsis and additional references to readme

commit b4b4c5709725b5e2a49373678ada69da3cbe512b
Author: leonboeck <leonboeck@gmail.com>
Date:   Fri Sep 6 13:56:05 2019 +0200

    Implemented the SimpleCrawler node, its related classes and added a test and sample config for it.

commit f1520ee822c9e950f940b4db42078e0b3edf5c2d
Author: Leon Böck <leonboeck@gmail.com>
Date:   Fri Sep 6 11:18:28 2019 +0200

    Added a screenshot showing the configuration setup.
    Create README.md

commit 41efd82b4e9a10cfd47fb1d64aa7608464457e8e
Author: leonboeck <leonboeck@gmail.com>
Date:   Thu Aug 8 17:21:17 2019 +0200

    Initial Code

commit 0d3bac63fa5020b3e94d685e2836ddd324d74495
Author: UndeadKernel <carloscg@gmail.com>
Date:   Wed Jul 24 13:44:38 2019 +0200

    Initial commit
