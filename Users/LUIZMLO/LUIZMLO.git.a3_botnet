======================: FILES :======================
======================: README CONTENT :======================
### A3 - Botnets

Este é um repositório onde documentarei todo o processo de pesquisa e desenvolvimento de uma botnet do zero com python, websockets e asyncio, com o objetivo de aprender networking e redes, programação assincrona e outros conceitos.  

Esta botnet será apresentada como demonstração durante a apresentação do trabalho de conclusão da matéria de Sistemas Computacionais e Segurança.  

O tema escolhido pelo meu grupo foi o de Botnets, uma coleção de tecnologias utilizada para controlar de maneira distribuida um exercito de dispositivos infectados, podendo gerar muitos impactos com o grande poder de processamento e geração de tráfego.

#

### Indice
- [**Resumo do Projeto**](#resumo-do-projeto)
  - [C2](#c2)
  - [Zumbi](#zumbi)
  - [Vitima](#vitima)
- [**Protocolos de Rede**](#protocolos-de-rede)
  - [Handshake](#handshake)
  - [Heartbeat](#heartbeat)
- [**Pacotes de Rede**](#pacotes-de-rede)
  - [handshake_ping](#handshake_ping)
  - [handshake_pong](#handshake_pong)
  - [handshake_success](#handshake_success)
  - [heartbeat_ping](#heartbeat_ping)
  - [heartbeat_pong](#heartbeat_pong)
- [**Setup**](#setup)
  - [Dependencias](#dependencias)
  - [Instalação](#instalação)
    - [Linux/Unix](#linuxunix)
  - [Executando](#executando)
  
[**Setup**](#setup)

#

<a name="resumo"></a>

## **Resumo do Projeto**

Este projeto vai ser muito complexo e contará com diversas partes, entre elas um servidor de controle que comandará os *zumbis*, um frontend malicioso que infecta as vítimas e um site que servirá de vítima da botnet, sofrendo um ataque de DDoS durante a apresentação ao vivo.

#

<a name="c2"></a>

### C2

> O servidor de controle  

Este será um servidor feito em python utilizando as bibliotecas asyncio e websocket que irá fazer a gestão, controle e monitoramento dos zumbis.

Este será responsável por manter uma espécie de Heartbeat, um pulso que irá checar a conexão de todos os zumbis e enviar uma mensagem para todos os zumbis que não estão conectados ou perderam a conexão com o servidor de controle.

O servidor de c2 será responsável também por enviar o comando de ataque e parada para os zumbis, que irão agir de maneira coordenada e sobrecarregar a vítima, causando um ataque distribuido de negação de serviço, um ataque de DDoS.

#

<a name="zumbi"></a>

### Zumbi

> O frontend malicioso

![](https://i.imgur.com/KAzrLa3.png)

Esta é a aplicação web onde as vítimas irão se conectar e se comunicar com o servidor de controle, aguardando ordens de ataques utilizando a tecnologia de websockets.

Os clientes conectados respondem um pulso enviado a cada segundo pelo servidor de controle para provar que ainda estão conectados e ativos, esperando o comando e o alvo do ataque.

#

<a name="vitima"></a>

### Vitima

> A vítima do ataque distribuido

Este será um servidor de demonstração que irá sofrer o ataque coordenado da botnet e será sobrecarregado, tendo sua funcionalidade prejudicada pelos zumbis.  

Este irá contar com uma interface de monitoramento, onde iremos observar ao vivo o estado da vitima, quantas requisições estão chegando, a quantidade de banda, tráfego recebido e outras métricas.

#

<a name="protocolos"></a>

## **Protocolos de Rede**

### Handshake

> O processo começa com a abertura da conexão websocket, que é feita pelo cliente.  
> O servidor então responde com um pacote handshake_ping e uma chave aleatória de 4 bytes que será utilizada para criptografar as mensagens entre o cliente e o servidor.  
> O cliente então responde com um handshake_pong e outra chave aleatória de 4 bytes, além de um nome de tamanho entre 4 e 16 caracteres, usado para identificar o zumbi.  
> Usando o nome e as duas chaves trocadas, o servidor faz o hash da chave e envia um pacote do tipo handshake_success, contendo o hash.  
> O cliente então compara o hash local com o hash recebido pelo servidor e se os hashes forem iguais, envia outro pacote handshake_success, indicando ao servidor de controle que a comunicação foi iniciada e as rotinas de heartbeats e ataque deve começar.  

Linha do tempo: (C=cliente, S=servidor))  

1 C ---> S | C Abre conexão websocket  
2 C <--- S | S Envia handshake_ping e chave aleatória server_key  
3 C ---> S | C Envia handshake_pong, nome do zumbi e chave aleatória client_key  
4 C <--- S | S Envia handshake_success, hash sha256 do nome do zumbi e das duas chaves trocadas  
5 C ---> S | C Envia handshake_success após comparar os hashes sha256 do identificador do zumbi e o hash recebido pelo servidor, confirmando que a troca de chaves foi válida e que já está esperando as rotinas de heartbeat e ataque

Este processo é puramente por Proof of Concept e não é de fato um handshake real, já que este processo é feito por trás dos panos já que estamos usando a tecnologia de websockets.

**demo conexão handshake**

![](https://i.imgur.com/AgrAJAp.png)

**gif com o processo completo de comunicação, desde o handshake até os heartbeats, com 3 clientes simultâneos**

![](https://i.imgur.com/zBNBAuB.gif)

#

### Heartbeat

> O servidor de controle envia um pacote do tipo heartbeat_ping para todos os zumbis que estão conectados, que devem responder com um heartbeat_pong para comprovarem que estão ativos e esperando o comando de ataque.

**Teste com 100 zumbis conectados:**

![teste com 100 zumbis conectados](https://i.imgur.com/6MH3YfS.png)

#

## **Pacotes de Rede**

> Lista com os pacotes e conteudos trocados entre o servidor de controle e zumbis, serializados em formato JSON

- handshake_ping (C<--S)
- handshake_pong (C-->S)s
- handshake_success (C<--S)
- heartbeat_ping (C<--S)
- heartbeat_pong (C-->S)

<a name="handshake_ping"></a>

### handshake_ping

Pacote enviado do servidor de controle para um zumbi após uma nova conexão via websocket ser aberta, esperando como resposta um handshake pong contendo um nome completo para o cliente

> {  
> "type": "handshake_ping",  
> "server_key": "\<chave aleatoria\>"  
> }

<a name="handshake_pong"></a>

### handshake_pong

Pacote enviado do zumbi para o servidor de controle respondendo o handshake_ping, enviando também o nome/identificador do zumbi, composto por um nome escolhido pelo cliente ou gerado automaticamente, uma chave aleatória gerada no cliente e a chave recebida no handshake_ping e um checksum do nome completo, que será validado no servidor

> {  
> "type": "handshake_pong",  
> "client_name": "\<identificador zumbi\>",  
> "checksum": "\<checksum\>"  
> }

<a name="handshake_success"></a>

### handshake_success

Pacote enviado do servidor de controle para um zumbi confirmando a conexão bem sucedida e confirmando o inicio do pulso do heartbeat

> {  
> "type": "handshake_success",  
> "checksum": server_checksum  
> }

<a name="heartbeat_ping"></a>

### heartbeat_ping

Pacote enviado do servidor de controle para todos os zumbis a cada 1s, mantendo controle de todos os zumbis que ainda estão ativos e que perderam a conexão

> {  
> "type":"heartbeat_ping",  
> "seed": "\<numero aleatorio\>"  
> }

<a name="heartbeat_pong"></a>

### heartbeat_pong

Pacote enviado do zumbi ao servidor de controle respondendo um heartbeat_ping e realizando um Proof-of-Work (PoW) e retornando para o servidor de controle. Caso o PoW seja válido, o cliente é mantido na lista de zumbis ativos.  
Por ser um processo demonstrativo, o algorítmo de Proof of Work é só inverter a seed enviada pelo servidor.

> {  
> "type":"heartbeat_pong",  
> "pow": "\<numero aleatorio ao contrario\>"  
> }

#

<a name="setup"></a>

## **Setup**

> Work in progress, não está funcional ainda
Para rodar o projeto em sua própria máquina, são necessárias algumas dependências.

### Dependencias

- python3 (3.9.7 foi usado para o desenvolvimento)
- python3-pip
- python3-venv

### Instalação

O repositório conta com um arquivo de setup que instala todas as dependências necessárias em sistemas Unix usando apt e outras utilidades do shell.

#### Linux/Unix

Para instalar com o projeto você precisa de um usuário com privilégios administrativos, ou seja, um usuário com permissão de root.

**Instalador**

```bash
chmod +x ./build
./build
```

**Instalando manualmente**

```bash
sudo apt install python3 python3-pip python3-venv
```

### Executando

Guia temporário, o projeto contará com instalador e utils para rodar  

servidor c2:

```bash
cd ./c2_server/; python ./server.py
```

webapp:

```bash
cd ./frontend/; python ./app.py
```
====================== GIT HISTORY: ======================
6e30c9e HEAD@{0}: clone: from https://github.com/luizmlo/a3_botnet
commit 6e30c9e30bb1e8afc4e7fc654e13ec803406c757
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 19:15:50 2022 -0300

    admin page, OOP no server e +

commit cc0bb1f6d8f5895f1b4307ca470218715236cc46
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 02:11:00 2022 -0300

    run instructions

commit 49edc69616667b65cfe2016e70818c5037269f39
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 02:07:24 2022 -0300

    mensagem pra habilitar o debug mode

commit e156effab51b255c5b803d8f73b23356c03c59ae
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 02:05:35 2022 -0300

    added error to logs

commit 2d1da0f6422b51e4d53e0a62c07245ee689cee2a
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 02:02:07 2022 -0300

    added screenshot to readme

commit 82e2ee2e212179681e0722e0b50896ad2fb77608
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 01:59:47 2022 -0300

    added tx/rx counter

commit 9c0de2bfb416fa9d3ae2b1a12501d75f3771d0ab
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 01:44:29 2022 -0300

    added metrics footer + footer update function/job

commit 35a30129cfee7e048f8e97f5f4bce8402542e5eb
Author: Luiz Melo <zberyt@gmail.com>
Date:   Fri Apr 22 01:23:21 2022 -0300

    desquebrei os imports que tavam errados

commit 2535bafb509e52b892ed3e82b1d8e5953797085c
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 23:38:48 2022 -0300

    bababooey

commit d7781a5d4104ca5c16b24a2dc87c816d7f1f107f
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 22:56:38 2022 -0300

    console adicionado a tela, debug mode adicionado no js FALTA O TOGGLE

commit a816423d1bdf763b7f6a2d34dbf77ddc6e570ed5
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 22:00:51 2022 -0300

    console messages funcional, criando função agora

commit d24ce9316c7f0346da19ee11f1129a83ab23fb82
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 20:54:27 2022 -0300

    background, particles e efeito neon

commit 2b013d2d6a1bc315c4f4127c1d1670076d73151b
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 20:53:55 2022 -0300

    front bonitinho com background e particles

commit 03af65f2276b814e7020c4d579cdb2b3c7d2ecab
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 20:17:50 2022 -0300

    comunicação com frontend concluida, handshake/heartbeat funcionais

commit b4389aefdd3e7196484edc8d290b7e85b2b08f82
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 18:30:40 2022 -0300

    deixar como default 1 instância no cliente py

commit bd5857d0107cad65e85f23348dafbcb9fee30c8d
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 17:46:03 2022 -0300

    atualização readme

commit 7bb7c351c474df7af40d200987bb1357ed729e1b
Author: Luiz Melo <zberyt@gmail.com>
Date:   Thu Apr 21 17:23:50 2022 -0300

    heartbeat funcional, multi instances e readme atualizado

commit cce122d62359c31c2b5fcad8bd7f79891cb99af5
Author: luiz <luiz.melo@ostec.com.br>
Date:   Thu Apr 14 13:15:28 2022 -0300

    readme

commit 5a10749da05e2f6d180b60731a1790e90a007d5a
Author: luiz <luiz.melo@ostec.com.br>
Date:   Thu Apr 14 13:14:38 2022 -0300

    refactor

commit c4078b12ceb9f3c95d366b6cfdc846e12d0c3e8f
Author: luiz <luiz.melo@ostec.com.br>
Date:   Thu Apr 14 13:14:30 2022 -0300

    refactor

commit 50362cf2e9926f16e7ce00148453f9393c773c6c
Author: luiz <luiz.melo@ostec.com.br>
Date:   Thu Apr 14 12:51:54 2022 -0300

    readme stuff

commit 59195c40081e31f89a070c84f048c131a77f86ba
Author: luiz <luiz.melo@ostec.com.br>
Date:   Thu Apr 14 12:48:33 2022 -0300

    tirei os bold nos pacotes

commit a922ed939325c6e3f9b29b94f09d990c3fab4daa
Author: luiz <luiz.melo@ostec.com.br>
Date:   Wed Apr 13 22:24:52 2022 -0300

    added pacotes de rede

commit 8ed1e6f81a4d7781d7297838cad6715ba3abbf63
Author: luiz <luiz.melo@ostec.com.br>
Date:   Wed Apr 13 22:05:51 2022 -0300

    resumo/heartbeat

commit 1e57f54669fe3770c6303ccb462fde6cfddf48bf
Author: luiz <luiz.melo@ostec.com.br>
Date:   Wed Apr 13 21:53:08 2022 -0300

    readme

commit ced47522fe79273965cea1c23f1e7a40c14d5081
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 15:28:33 2022 -0300

    inicio do front zumbi

commit 7353f26898436070f550703b0cda5a21d164a0c7
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 12:37:06 2022 -0300

    handshake realmente concluido, pronto pra iniciar handshake

commit d1c8ed4ffe15271b5897801a972a22fa0465d1ee
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:23:57 2022 -0300

    mais readme stuff

commit b3ad9c085eee6331504ce7d44dfa3bb07cdc1b91
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:22:06 2022 -0300

    mais readme shit

commit 0a7233993efabb385797bf0cfbda6e4bce8a859e
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:18:44 2022 -0300

    botei print no readme

commit 02e2a4330a24431ddd601f48d3a52969150aeb61
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:13:58 2022 -0300

    atualização readme to indo dormir meus neuronios estao tostados

commit 674b28d5399cd40e4d4a33a91c4ba827c95a081c
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:01:21 2022 -0300

    handshake readme

commit 3938ec71be8003841bd6556593ff116c6bed967e
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 02:00:44 2022 -0300

    updated readme

commit 709f9530dd631ac71f35ac51c520497476479e85
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 01:46:47 2022 -0300

    handshake stable

commit bf3f68a3cca8ab02c1b8407b118d39c31fbcfc5b
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 01:46:38 2022 -0300

    processo de handshake concluido

commit 7853f848b433194284be41c184ce0050d9559b9b
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 01:33:02 2022 -0300

    criada primeira versão do protocolo de comunicação

commit 80d572dfd834ca9de8ad1c00ad1ac23c06127574
Author: luiz <luiz.melo@ostec.com.br>
Date:   Mon Apr 11 01:32:47 2022 -0300

    criada primeira versão do protocolo de comunicação

commit abba2a10851b1b605444e874c8745144246b16b2
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:46:00 2022 -0300

    arrumei o redirect de stderr no build file

commit cce3b5a02b3224c39d1d2e4b3cd96c6407bc0777
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:42:52 2022 -0300

    wip no setup

commit 0bb26202979e27d8d995d469b840e95b471b3266
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:42:27 2022 -0300

    atualização readme

commit f3e8ea02bb63e7c442bc295029d1fbb099f489b3
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:21:16 2022 -0300

    atualizei o readme com mais infos

commit 694595f038443c5ce13a308d8df2e7b4a379df87
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:18:26 2022 -0300

    typos

commit e192919ffc5fc40b7a9b9e8ac40cded47951faee
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:16:39 2022 -0300

    Atualizei o readme pra incluir mais informações sobre o projeto

commit 72e06872a9556b1bfae1e65de4f68435040656be
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 14:00:33 2022 -0300

    criação das páginas iniciais dos zumbis e vitima

commit f0502cca1e8b4ffb5c18def4a0d08a1c1472123d
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 13:50:31 2022 -0300

    separação de c2/clientes

commit d7535669af90379e63b78394b7d6b9d2f8074b0c
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 13:38:18 2022 -0300

    adicionei o .gitignore e removi a pasta do venv

commit 3d03377b218e3eb1203785b8a8c2a7b651ecdc1a
Author: luiz <luiz.melo@ostec.com.br>
Date:   Sun Apr 10 13:37:26 2022 -0300

    first commit
