======================: FILES :======================
======================: README CONTENT :======================
TestCreds is a PowerShell module with commands to help compare lists of leaked
usernames and passwords to your Active Directory users.

Installation
============

Place the folder somewhere in your PowerShell module path 
`%USERPROFILE%\Documents\WindowsPowerShell\Modules` should work. Put the whole
folder in there; not just the files. You will end up with a folder like 

  `%USERPROFILE%\Documents\WindowsPowerShell\Modules\TestCreds`

You may have to customize a few commands for your environment. There currently
is no clean way to do this aside from editing the source.

This module requires the ActiveDirectory module. Either install this module on
a server with the ActiveDirectory module, or install RSAT. Please don't make a 
habit of downloading crap from github to run directly on your DCs.

Usage
=====

    PS C:> Import-Module TestCreds
    PS C:> get-command -Module TestCreds
    PS C:> get-help Test-CredentialsFile
    etc.

Creds File Checking
-------------------

Save the username/password dump as a file with email:password lines or as a CSV
with username and password fields. You do NOT need to look up the tokens first to
find valid AD accounts; we will do that for you. See the note at the end of this
section about the format. Let's say we have a file named c:\dumps.txt with 
the correct format.

    PS C:> Import-Module TestCreds
    PS C:> Test-CredentialsFile -Path c:\dumps.txt -OutCSV c:\results.csv

results.csv will now be a CSV with these headers:
* EmailAddress:     obtained from the input file
* SamAccountName:   Account name from AD, if found
* DisplayName:      DisplayName from AD, if found
* PasswordChecked:  True/False if we actually checked the password
* FoundInAD:        True/False did we find the account in AD?
* Notes:            Diagnostic info about the results
* PasswordWorks:    True/False if True, then the Password works!
* Password:        obtained from the input file

If FoundInAD is TRUE, then `Test-CredentialsFile` found a corresponding user for 
the EmailAddress. If PasswordWorks is TRUE, then the supplied password IS VALID.
That is bad.

*`Test-CredentialsFile` tries to authenticate to AD with the given credentials.*
This is the only sane way to tell if they're valid. If you have particularly 
crazy account lockout rules and your users are unlucky, you may lock them out;
Suppose you lock-out on 3 failed attempts. If the user recently had 2 failed
login attempts and `Test-CredentialsFile` causes the third, the account will
lockout. When a zillion failed login attempts to AD originate from your
workstation you might run into trouble from user behaviour analytic systems.

You may find multiple search results per input line. `Test-CredentialsFile` uses
`Search-ADUser` to find the SamAccountName, so its possible that there will be
more than one search result. For example, your users might have an admin account
and both their regular account and admin account have the same email address in
AD. `Test-CredentialsFile` will find them both.

Note on format: The 'email' portion of the email:password lines can actually be
anything. Behind the scenes, `Test-CredentialsFile` uses `Search-ADUser` to find
the corresponding user(s) for each line. So these are totally valid and might 
work (if these people exist in your AD, that is):

    John.Doe@contoso.com:password1
    Smith, John:123456
    rumplestiltskin:mustang67
    frank:Changeme123!

Notice that last line. You may have several users whose names include 'frank'
somewhere. 

Search for accounts in AD
-------------------------

`Search-ADUser` is included in the TestCreds module. You can use it similarly to 
`Get-ADUser`, except you don't have to bother writing a filter statement to
search for users yourself.

`Search-ADUser` searches Active Directory for a user account matching your input
by first trying likely matches (for instance, trying the username, email
address, or real names) and then trying increasingly less-likely techniques
until matches are found. Depending on how well populated your Active Directory
fields are, you can find your users by business unit, phone number, title, etc.

Query All Domain Controllers
----------------------------
`Get-ADUserFromAllDCs` works like Get-ADUser except that it, well, gets them
from all DCs. It will aggregate the fields you specify with whatever aggregation
you wish. This is useful for object properties which aren't replicated such as
lastBadPasswordAttempt; you can query each DC for the lastBadPasswordAttempt and
return the largest (e.g. latest) one. But don't do that because you also have
`Get-RealLastBadPasswordAttempt` in this module too.

Utilities
---------

* `Test-ADAuthentication` is a quick method to verify that a Credential object
contains a valid username and password.
* `Test-PasswordValidates` checks to see if Active Directory will allow a given
password. It does not actually check if the password is valid for the user.



Known Issues
============
* This module probably requires PowerShell Version 5.
* `Search-ADUser` might use a very slow method to search for users due to
unpredictable errors when used via PSRemoting.
====================== GIT HISTORY: ======================
73caed0 HEAD@{0}: clone: from https://github.com/ktwombley/TestCreds
commit 73caed0bddeac81212eaa545b9c7bba5a3db6f6f
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Thu Nov 14 09:39:04 2019 -0600

    finished rename of get-aduserfromalldcs, fixed psd1

commit d6e9a9557523452b61da60b44e0e842fb24b1be1
Merge: 35697ff 8e61000
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Thu Nov 14 09:37:38 2019 -0600

    Merge branch 'master' of github.com:ktwombley/TestCreds

commit 35697ff2dc1a38ac313674b5217b77ffb4845864
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Thu Nov 14 09:36:49 2019 -0600

    remove cruft from psm1, linting

commit 8e610003aad3f80fd16031c519bc4e7849eb1aa9
Author: Keith W. Twombley <daoist@home.keithtwombley.com>
Date:   Wed Oct 23 00:09:51 2019 -0500

    Made less scrolly by converting write-verbose to write-debug a bunch.

commit b839aed1869691b574756beb8b7ca431576f4113
Author: Keith W. Twombley <daoist@home.keithtwombley.com>
Date:   Tue Oct 22 02:33:59 2019 -0500

    Query AD Schema and gracefully remove attributes from search list which dont exist.

commit 981fe214b8bb4cfb867b190c76b733e00e994bbb
Author: Keith Twombley <ktwombley@gmail.com>
Date:   Wed Apr 17 11:55:09 2019 -0500

    fix psscriptanayzer complaint plaintext passwords

commit 8ae2e5c18baa7e5ac950b468413cf4dcb6ba07bd
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Fri Feb 1 11:43:38 2019 -0600

    ignore all these dumps laying about

commit f71dedd09ff621d73a04684c363029cd571433e7
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Fri Feb 1 11:40:11 2019 -0600

    Fixed harmless error when processing colon-sep file

commit e9ec994f018315d19d297b90fc4fe943cf62ff7a
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Wed Jan 30 15:39:27 2019 -0600

    formatting readme

commit c124054224726e1791aecd23c804e2e95c9fd6a6
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Wed Jan 30 15:36:16 2019 -0600

    Updated documentation

commit 3e5723437ae8f1039924e39c911ae417f39a3bb1
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Tue Jan 29 13:26:19 2019 -0600

    removed cruft from readme and formatting

commit 7d710c544e47233caa8e079ab12a5f1b63c02225
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Tue Jan 29 13:18:25 2019 -0600

    dont need config file yet

commit d1504c7af7e3c416b3d090ddbc69d8026e9a0d96
Author: Keith Twombley <keith.twombley@bcbsa.com>
Date:   Tue Jan 29 13:17:37 2019 -0600

    Initial import
