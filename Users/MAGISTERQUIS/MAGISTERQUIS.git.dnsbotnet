======================: FILES :======================
dnsbotnet
├── c2.go
├── dnsbotnet.go
├── dns.go
├── implants
│   └── dnsbotgo
│       ├── build.sh
│       ├── implant.go
│       ├── procattr_nonwindows.go
│       └── procattr_windows.go
├── LICENSE
├── README.md
├── ssh.go
└── tasking.go

2 directories, 11 files
======================: README CONTENT :======================
DNSBotnet
=========
Controller for a DNS TXT record-based botnet.

Work in progress, though works pretty well as-is.



More documentation (and ease-of-use) will be implemented in the future.

For legal use only.

Building / Installation
-----------------------
The botnet Controller (in the same directory as this file) can be built and
installed with the customary
```bash
go get github.com/magisterquis/dnsbotnet
```
or
```bash
git clone github.com/magisterquis/dnsbotnet
cd dnsbotnet
go build
```

Aside from the binary, an NS record for the domain to be used for beacons must
be set up such that the Controller will receive DNS requests from recursive
resolvers.  This usually means setting a glue (A) records or two and an NS
record with the registrar to point to the IP address of the Controller.

A file containing the SSH public keys should be made to authenticate C2 clients
(i.e. botnet Controller users).  This file is in the same format as OpenSSH's
`authorized_keys`. and is named `authorized_keys.dnsbotnet` by default.

Implants / Protocol
-------------------
Each individual implant has a README with more information.

There are two DNS request formats that the Controller understands: beacons
and output.  In general, clients should beacon periodically to check for
tasking, and if tasking is received, execute it and return any output with
a further series of DNS requests.

The timing of DNS requests is left up to the implant.  They should be fast
enough to allow for usage (interactive, if desired), but slow enough not to get
caught.

### Beacons
Beacon requests should have exactly one name in the following format:
```
ignored.counter.t.implantid.domain
```
The response will either contain a single text record with the task to execute
or no responses at all.  How the tasking is executed is up to the implant.  The
implants contained within this repository run the tasking as a shell command
and return its stdout and stderr.  The meaning of each part of the name will be
explained below.

### Output
Output requests should have exactly one name in the following format:
```
outhex.counter.o.implantid.domain
```
The response will always have 0 records.  The output is printed to any C2
Clients which request it, explained below.  The meaning of each part of the
name will be explained below.  The output should be carefully chunked to

### Names
Request and response names have the following parts

|Label|Meaning|Example|
|-----|-------|-------|
|ignored   | Ignored, for symmetry with beacons.                                                                                   | 0           |
|outhex    | Tasking output, hex-encoded.  The maximum length is 31 bytes (62 hex digits).                                         | 4920616d20313333370a |
|counter   | A unique number per request to prevent caching (i.e. cachebusting).                                                   | 37          |
|t         | A literal t, to signify a beacon (request for tasking).                                                               | t           |
|o         | A literal o, to signify an output request.                                                                            | o           |
|implantid | An ID chosen by the implant to uniquely identify itself.  IP addresses with dots replaced by dashes are good choices. | 192-168-11-11 |
|domain    | The malicious domain.                                                                                                 | example.com |

A beacon name might look like
```
0.3580645942777501247.t.192-168-11-11.example.com
```
An output name might look like
```
202020202020202020202020203634353220436f6e736f6c65202020202020.1150749505258401772.o.192-168-11-11.example.com
```

C2 Clients
----------
All acutal tasking of bots is done by first SSHing to the Controller, then
issuing commands via SSH.  A complete list of commands is available with the
`help` command.

The C2 client session can either be used to display tasking output or beacons
(which may be filtered to only show certain beacons of interest).

Example C2 session:
```
$ ssh -p 10987 c2server.com
Welcome to the DNSBotnet Server!

Available commands:
help        - This message
id          - Show all beacons
idr <regex> - Show beacons from implants matching regex
id <ID>     - Show a particular implant's output (not beacons)
t <ID>      - Task the current implant (after ID is set)
last [n]    - Show the [n most recent] beacons from all implants
exit        - Goodbye.

2018/02/16 05:28:54 [192-168-11-11] Beacon (2143406018522754847)
2018/02/16 05:28:56 [192-168-11-11] Beacon (2143406018522754848)
2018/02/16 05:28:58 [192-168-11-11] Beacon (2143406018522754849)
2018/02/16 05:29:01 [192-168-11-11] Beacon (2143406018522754850)
> id 192-168-11-11
2018/02/16 05:29:06 Watching implant with ID "192-168-11-11"
192-168-11-11> t uname -a
2018/02/16 05:29:12 Queued task for implant 192-168-11-11: "uname -a"
OpenBSD victim.example.com 6.2 GENERIC.MP#134 amd64
192-168-11-11> last 1
ID            Queued Last Seen
--            ------ ---------
192-168-11-11 0      2018-02-16T05:29:31Z (4.8s)

Current time is 2018-02-16T05:29:36Z
192-168-11-11> exit
```

Unless a particular implant is specified with the `id` command, only beacons
will be printed.  To interact with a particular implant, use the `id` command
to specify the implant by ID  and then the `t` command to give it tasking.
Output from tasking will be printed to the terminal.  The `last` commands work
whether an implant is selected or not.  The `idr` command and the `id` command
without an implant ID can be used to return to printing beacons.

In practical usage, it's helpful to have one C2 connection showing beacons as
they come in and one or more to interact with implants.

Logging
-------
A log file is generated with all tasking and output.  It can be used as a
history of commands run as well as to recover output lost when tasking finished
after `id` was used to view another implant's output.
====================== GIT HISTORY: ======================
0bee23f HEAD@{0}: clone: from https://github.com/magisterquis/dnsbotnet
commit 0bee23f8f9242c4de55503e3de7759177631a66e
Author: Stuart <kd5pbo@gmail.com>
Date:   Thu Aug 1 17:33:20 2019 -0400

    Add 8 bytes of randomish data to a static ID

commit 9308b236ffa4d17f7223b8ab93b45a635116e532
Author: Stuart <kd5pbo@gmail.com>
Date:   Thu Aug 1 14:54:45 2019 -0400

    Allow for a baked-in ID

commit 05e26dc154d77c442e7d5a7a4f553b36c87d49dd
Author: Stuart <kd5pbo@gmail.com>
Date:   Mon Jul 1 11:07:38 2019 -0400

    Don't report errors on NXDomain on Windows

commit 22a296d0b9a927dd73aca11249273c160e188279
Author: Stuart <kd5pbo@gmail.com>
Date:   Thu Jul 19 12:04:06 2018 -0400

    Allow for random cachebusting labels

commit 9d87830a28adc6f80562c602176a2338ff0a1cdf
Author: Stuart <kd5pbo@gmail.com>
Date:   Tue Jul 17 10:15:07 2018 -0400

    Update modified date

commit 41cfb79add88f2bcce293fe49d12bb3eb4064f34
Author: Stuart <kd5pbo@gmail.com>
Date:   Tue Jul 17 10:13:41 2018 -0400

    Don't list fewer than one implant

commit 884c884dfd6b5eb53e18204dce95d278771e611f
Author: Stuart <kd5pbo@gmail.com>
Date:   Tue Jul 17 10:13:15 2018 -0400

    Configurable reply TTL

commit 5c6722cb4130ae0b89ab81df03d70d573e6a88a6
Author: Stuart <kd5pbo@gmail.com>
Date:   Tue May 22 08:35:40 2018 -0400

    Don't leak DNS

commit 00ef10d9819b4199470e590f77de1c1bcab8e1df
Author: Stuart <kd5pbo@gmail.com>
Date:   Tue May 22 04:39:32 2018 -0400

    Add domain-fronting DNS over HTTPS

commit e11d78f4e657ae2be73a9bff14b30a5782292f8c
Author: Stuart <kd5pbo@gmail.com>
Date:   Mon Apr 23 16:07:05 2018 -0400

    type

commit 1678b67f7de42b61c6d45f5dfde5563c80324598
Author: Stuart <kd5pbo@gmail.com>
Date:   Fri Apr 20 16:42:02 2018 -0400

    Add maximum size of exfil

commit 9bc21d31e693a31e034e5391cb7ebeff4e024fa5
Author: Stuart <kd5pbo@gmail.com>
Date:   Mon Mar 26 16:33:49 2018 -0400

    Add -defang

commit f9b116ee0d0de76ef869e7852b8042aa5704ff20
Author: Stuart <kd5pbo@gmail.com>
Date:   Mon Mar 26 09:53:46 2018 -0400

    Ignore SSH environment; don't parse comments or blank lines as keys

commit c07116874cc0d9ec9a1fa74c2c7303893e21a76c
Author: Stuart <kd5pbo@gmail.com>
Date:   Wed Mar 14 15:21:13 2018 -0400

    Log unauthorized user

commit a39a1dee3a9ee5aab18d751a5b389031394ee9be
Author: Stuart <kd5pbo@gmail.com>
Date:   Wed Mar 14 15:12:51 2018 -0400

    Fix t help text

commit 2856abe109c2ced6ba6f6081135aaa1c187b5529
Author: Stuart <kd5pbo@gmail.com>
Date:   Wed Mar 14 11:37:26 2018 -0400

    Tableify table

commit 323fef29aa731dda42bd7f35a9f0bb33bf4b0c2e
Author: Stuart <kd5pbo@gmail.com>
Date:   Fri Feb 16 00:33:48 2018 -0500

    SSH command

commit d2ec645ab95dfa590f97deabec74808955ae4607
Author: Stuart <kd5pbo@gmail.com>
Date:   Fri Feb 16 00:31:59 2018 -0500

    Example session

commit 730ead9cfeb5af44b4e333ccdbbd6db596d0d861
Author: Stuart <kd5pbo@gmail.com>
Date:   Fri Feb 16 00:25:47 2018 -0500

    Actual docs

commit aac5fc3ee1751f9d8e73a48b92b57fff84686f45
Author: Stuart <kd5pbo@gmail.com>
Date:   Thu Feb 15 00:17:06 2018 -0500

    Allow listing implants by regex

commit 1c20800022b3ad7eae896c75e78acf438b8f1874
Author: Stuart <kd5pbo@gmail.com>
Date:   Wed Feb 14 14:12:31 2018 -0500

    Initial commit
