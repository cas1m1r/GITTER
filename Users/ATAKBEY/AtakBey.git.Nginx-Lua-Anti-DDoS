======================: FILES :======================
======================: BRANCHES :======================
======================: LOGINFO :======================
commit 88d9170a4ce50676b12b66c8f8e0a2ed6fe5cc6e
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Apr 26 21:14:19 2020 +0100

    Update README.md

commit 1a67833f5f4ca272a17ef1d8dd97f888c85b71d0
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Tue Apr 21 22:15:22 2020 +0100

    Update anti_ddos_challenge.lua
    
    WAF Features added :
    Added ability to inspect URL for malicious content SQL/SQI Injections XSS attacks / exploits.
    Added ability to inspect query strings and arguements for malicious content / exploits.
    Added ability to inspect all Request Headers provided by the client connecting.
    Added ability to inspect cookies for exploits.
    
    Marked of the TODO list : https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/29
    
    Added Feature to pass IP to backend in existing headers like Cloudflare and Such CDN's do https://support.cloudflare.com/hc/en-us/articles/206776727-What-is-True-Client-IP-
    
    Added Feature to modify headers on site URL's Paths Query Strings etc the reason for this is to strip out unwanted header values that could expose the software the server runs like the "Server" header and to add in custom headers to responses like to get clients to Cache files to save server / site bandwidth and resources.

commit 3418059f3a5143442eff99cfdeaadeecdb686046
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Apr 10 20:04:09 2020 +0100

    Update anti_ddos_challenge.lua
    
    Added to configuration of file formats that should never have Query strings on the end of the URL this will strip query strings from static files like .jpg .gif .css .js .ico etc by default since all websites never serve these static files with query strings. This will result in a higher Cache HIT Ratio and a performance gains.

commit 5a3ac398b9b76bdd097eeaed87266d96a2cb1206
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Apr 9 21:00:03 2020 +0100

    Update anti_ddos_challenge.lua
    
    Added fix to stop Cloudflare from cache busting peoples websites with their captcha and javascript pages that add a pointless query string onto the end of sites urls this will remove their silly query string protecting your backends web applications and keeping your caches clean from junk like this it will also speed up your site since you will have a Higher Cache HIT ratio since they can't bypass your cache with this query string.
    
    .com/index.php?__cf_chl_captcha_tk__=blahblahblah
    .com/index.php?__cf_chl_jschl_tk__=blahblahblah

commit f30e80d7883ad0c29cf2a2e1e0b399e64665dc72
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Apr 6 19:15:05 2020 +0100

    Update README.md

commit ee2320e931dae9a38773b49ea957131ed700fb5d
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Apr 6 19:01:21 2020 +0100

    Update anti_ddos_challenge.lua
    
    Added Feature : Query String Sorting I was inspired by Cloudflare to Create this since Cloudflare do this too but it is a exspensive PAID feature on Cloudflare ONLY available to Enterprise Customers at $3000 USD $3K USD minimum thats not right and its not fair! So I give it to you all for free!! I hope you enjoy it.
    Query String Sort increases cache-hit rates by first sorting query strings into a consistent order.
    This will treat files with the same query strings as the same file, regardless of the order of the query strings.
    Example :
    Un-Ordered : .com/index.html?lol=1&char=2
    Ordered : .com/index.html?char=2&lol=1
    
    Added Feature : Query String Argument Removing
    To remove Query strings that bypass the cache Intentionally Facebook and Google is the biggest culprit in this. It is commonly known as Cache Busting.
    Traffic to your site from facebook Posts / Shares the URL's will all contain this .com/index.html?fbclid=blah-blah-blah That will bypass your servers Cache what in turn slows your website down.
    
    Added Feature : Query String Argument Whitelist
    So this is useful for those who know what URL arguments their sites use and want to whitelist those ONLY so any other arguments provided in the URL never reach the backend or web application and are dropped from the URL. This will really make your Cache HIT Ratio go through the roof since junk arguments in the URL will be dropped.

commit 38273f533f3dfe2dadf2e570a4c4476517a3b5e5
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Apr 5 21:30:20 2020 +0100

    Update anti_ddos_challenge.lua
    
    WAF Web Application Firewall Improvement POST Data Filter : make both the values provided by connecting clients be regex patterns if need be. Allows for a wider scope of matching and stronger security over previous way i was doing it. Previously i was only matching the values for regex now you can match both keys and values for regex.

commit a676eb63e634f3afe4bcda83603ed2d910c985fe
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Apr 5 19:49:16 2020 +0100

    Update anti_ddos_challenge.lua
    
    Added Feature : WAF Web Application Firewall POST Request arguments filter to improve the security and protection of backends and server services behind my script allowing you to block and filter out unwanted POST data from HTML fields and forms to your sites. You can create regex patterns and strings to match SQL injections unwanted code etc. https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/29 Ticked of the TODO List.
    
    Modification : User-Agent strings configuration so that they will match the Regex patterns and showing users how to escape special characters in Regex for Lua with a percentage symbol `%`

commit 71a26974f5248f797632cb26f1bc4e83d4de7f3a
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Wed Apr 1 21:08:11 2020 +0100

    Update anti_ddos_challenge.lua
    
    Performance boost remove last couple of instances of `table.insert` to tick of my TODO list. https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/29
    
    The performance gained by removing `table.insert` can be seen here. https://springrts.com/wiki/Lua_Performance#TEST_12:_Adding_Table_Items_.28table.insert_vs._.5B_.5D.29
    
    Moved localized variables to top of script since some `os.` , `tostring` and `math.` functions operate in the script configuration section meaning they did not get the performance gains and had to do a meta table look up for the function every run this will boost performance for those too.

commit d1dc01a7be0f6ee1160d9f79960036544d8bc2d5
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Mar 20 21:23:10 2020 +0000

    Update FUNDING.yml

commit 3780ce93685789565e97e881f67c29a565a0fc16
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Mar 19 00:29:42 2020 +0000

    Update anti_ddos_challenge.lua
    
    Major Performance Optimization : Prior versions are fast but when you can save miliseconds across millions of requests it really does start to add up in speed you can serve traffic at this update should have LuaJIT (Just-In-Time Compiler) maxed out running as fast as it can for this script.
    
    localized API variables for functions to prevent lookups for names. https://springrts.com/wiki/Lua_Performance#TEST_1:_Localize
    
    for each ipairs() and pairs() functions are slow so removed the un-needed use of them https://springrts.com/wiki/Lua_Performance#TEST_9:_for-loops
    
    Introduced `ngx.re.gsub` to replace `string.gsub` with caching enabled for Lua performance boost `pcre_jit on;` enables regex cache for performance gains.
    j = enable PCRE JIT compilation
    o = compile-once mode (similar to Perl's /o modifier), to enable the worker-process-level compiled-regex cache
    http://nginx.org/en/docs/ngx_core_module.html#pcre_jit
    
    Stop using `table.insert()` to insert data into tables https://springrts.com/wiki/Lua_Performance#TEST_12:_Adding_Table_Items_.28table.insert_vs._.5B_.5D.29

commit c5d2f09e81875874427f67cb3e25d358f88ca0ea
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Mar 15 18:17:25 2020 +0000

    Update README.md

commit bf420a3e95144ed7022209295005b6b373051828
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Mar 15 18:16:59 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature : Authentication Box / Restricted Access / Restricted Area Fields what require a username / password.
    Highly useful for protecting sensative site directories like admin control panels etc. I also gave the ability to dynamicly generate the username and password field for this and gave the option to display the username and password to the visitor of your website since I saw some Tor .onion websites doing something similar to this to protect their websites I thought I would build it in to make it easy and they would find that feature extra handy for protection.
    
    Optimization : Moved master switch function for execution order to be compatible with features.
    
    Added Feature : When using custom hosts to enable and disable the script on with the master switch function you can choose what sites, file paths and directories will never require authentication and what sites, file paths and directories will always require authentication
    
    Added information in regards to a upcomming update that will allow the script to turn itself on and off if it detects an attempted attack will take away the need to manualy turn on protection for sites (something Cloudflare still has not done) if it detects timeouts / to many request / connections from the same IP's or a dramaticly flood in general or slowloris it will trigger protection on for the domain that is under attack.
    ```
    http { #inside http block
         lua_shared_dict antiddos 10m; #Anti-DDoS shared memory zone
    }
    ```

commit 4b900ef3de8125318b67ab2e440459ca476a55d9
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Mar 5 21:50:38 2020 +0000

    Update anti_ddos_challenge.lua
    
    Fix : malformed URI Javascript error with escaping back slashes through Lua

commit eeee46a1351a8296053ed8d151b1f5add60ed563
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Mar 5 20:59:00 2020 +0000

    Update anti_ddos_challenge.lua
    
    Bug Fix : Fixed Memory leak issue https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/21 `anti_ddos_challenge.lua: in function 'stringrandom'`

commit 9fb67fef2b394b5f76bb50ed321c04102fbee15b
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Mar 1 17:25:37 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature : Support for IPv4 and IPv6 Subnet ranges so you can use ranged IP address formats in the IP blacklist and whitelist feature
    Added Feature : User-Agent Blacklist
    Added Feature : User-Agent Whitelist
    Optimization : Removed ngx.md5 from encryption it was pointless since i encrypt data with salted hash sums so putting it into a md5 string first was a waste of time.
    Cleanup : Removed unwanted / nulled out ngx.log lines and print lines from code since they are not needed was junk code.

commit 86e4c672b1b9eb810455a655579f43d00d1c2dfc
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sat Feb 29 23:12:06 2020 +0000

    Update anti_ddos_challenge.lua
    
    Firefox throwing off Javascript errors so going to leave it as base64 encryption until i get them fixed properly.

commit 88326858a25308c99557fd3e9bc86df02fa05fb3
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Feb 24 19:05:18 2020 +0000

    Update anti_ddos_challenge.lua
    
    Big Fix :
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI
    URIError: The URI to be encoded contains invalid character (Edge)
    URIError: malformed URI sequence (Firefox)
    URIError: URI malformed (Chrome)
    
    To prevent this happening on my Hex encryption of javascript "\x char" and "%" char values a soloution is to use `unescape()` or `escape()` i decided to escape values.

commit afa5fa796f20a9cb64302529f085f4a1dae1ca28
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Feb 20 23:18:51 2020 +0000

    Update README.md

commit 6fb8703c901988b95f7ef67e0824ce2010b36aed
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Feb 20 23:09:38 2020 +0000

    Update README.md

commit d354eea73663cfc4f70eebdf9036135ccde7954b
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Feb 20 21:30:29 2020 +0000

    Update FUNDING.yml

commit 379814c39945a1bd84ee7332ea7d21d7c262dcd9
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Feb 20 17:35:16 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature : Custom setting for master_switch, For those who use this script and are large server hosts or host allot of websites from their machine(s) this will allow you to setup this script in your Nginx `http {` block to run for all sites on your service then you can set it to custom hosts to protect specific websites only such as Tor websites.
    
    For example setting `master_switch = 3` will make it so all websites / domain names you do not specify in the list will never see the authentication page while those you do specifiy in the list will be required to solve our authentication page puzzle in order to get access. Highly useful for protecting Tor services / backends on hosts with normal services running too.
    
    This way if you host a domain like ".onion" they will be required to solve auth pages to get access while everything not specified like ".com" or specific domain names visitors will never see the auth page.

commit 4417a6da16f3704f3a184c872ff5258be7eee609
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Tue Feb 18 19:54:23 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature : Allow our randomly generated Javascript vars to be configurable and dynamic or static depending on user prefrence.
    
    Fix bug : Tor users I forgot to check if Tor users solved our Mathematical puzzle now it checks that they have solved the puzzle before granting them access.
    
    Fix bug : When generating random Javascript variables there was a chance for duplicate outputs / collisions with Javascript vars making Javascript not work whilst the odds for those collisions / duplicates was very very small it was something that maybe one request in a million could have been stuck with a broken javascript page so to prevent that ever happening I keep track of generated vars and prevent duplicates.

commit d7a133a553a343da40a2d7051b79b1b4a227f147
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Feb 10 20:50:10 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature :
    A new Javascript encryption / Obfuscation method i built to my list of others inside my function, This will take Javascript encrypt it as a base64 string, Split it up into chunks randomize those chunks then output it. Just like a deck of cards you can shuffle the stack and allow the code to run still regardless of the order the deck would come out as.
    
    Fix :
    Added defer and async ability to my Hexdecimal encryption when I Built the encryption function originaly in development I added it to the rest and forgot that one.

commit 3563ed21f031c9f41a033a29c0a3fed28ff4855d
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Wed Feb 5 15:55:21 2020 +0000

    Update anti_ddos_challenge.lua
    
    Added Feature to detect Tor users
    Added Feature to block or allow Tor users (Allowing Tor users will still require for them to go through the authentication process the same as everyone else so don't worry)
    Added Feature to encrypt Tor headers making them as Dynamic as possible
    Added Feature to encrypt Tor cookies making them as Dynamic as possible
    Added Tor Javascript Checks
    
    Fixed unwanted collision bug between header x_auth_header_name when encrypted it was not unique so I made it unique to avoid any clashes in the future.

commit 6087320fd76bb0cc4aa6ba5a42528edd963aa7ff
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Feb 2 18:55:54 2020 +0000

    Update anti_ddos_challenge.lua
    
    Add feature to automatically detect if website we are serving traffic for is a Tor network website via the .onion domain extension and switch our compatibility to accomadate for Tor clients.

commit 515a5d9be76f678b263eb7260a2d0790eca620f1
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sat Feb 1 15:38:33 2020 +0000

    Update anti_ddos_challenge.lua
    
    Change default from Dynamic GET and POST to just POST requests with XMLHttpRequest object the reason being is to avoid unwanted conflicts with caches on proxy servers / services (Cloudflare proxy being a prime culprit of this).

commit 34444a013c6eb50497392e88073c97c4eb3b4f27
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sat Feb 1 11:56:32 2020 +0000

    Update anti_ddos_challenge.lua
    
    Add feature to automatically get the connecting Clients IP Address without needing to manually set it in the config, I decided to make this for compatibility with every service connecting to your server. It can now work with Cloudflare, Proxies, Tor Direct connections etc simultaneously.

commit 22406ba15b9ed56cb5823eca89cd3ca4ea117e71
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Jan 31 21:15:55 2020 +0000

    Update anti_ddos_challenge.lua
    
    Fix output for remote_addr on Authentication page in HTML, If you change the variable `local remote_addr =` in your settings / setup / config at the start of the script the output on the auth page where it should say `IP Address` would be what you set the `remote_addr` as so to fix it and ensure it stays as an IP Address not User-Agent etc I manualy set it back with logical operators.

commit 113f1dacae67934b994efa16813dc456a426cebc
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Jan 31 20:13:24 2020 +0000

    Update anti_ddos_challenge.lua
    
    For services behind Cloudflares proxy service ensure our javascript runs without "Rocket Loader".
    
    https://support.cloudflare.com/hc/en-us/articles/200169436-How-can-I-have-Rocket-Loader-ignore-specific-JavaScripts-
    
    And for Tor users this seems to be an error they will see with it that should fix it. Making the Script elements run independently from Cloudflares script.
    
    Request to access cookie or storage on “https://ajax.cloudflare.com/cdn-cgi/scripts/*/cloudflare-static/rocket-loader.min.js” was blocked because we are blocking all third-party storage access requests and content blocking is enabled

commit 72013cc0d44eb732b04258a27d304dc2a7f97d7c
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Jan 27 20:01:37 2020 +0000

    Update README.md

commit e570b1ed57b333c78b24277b9eb04c2d9eea4987
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Jan 27 16:53:26 2020 +0000

    Update anti_ddos_challenge.lua
    
    Fix for Javascript refreshing the page before the browser has a chance to set the cookies in response.
    
    Fix to stop Firefox browsers message "firefox prevented this page from automatically reloading"
    
    Remove un-used junk code.

commit 20d6640a27ada8b888864f100f7a4d1450e3c738
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Jan 26 18:46:15 2020 +0000

    Update anti_ddos_challenge.lua
    
    Remove junk javascript code.
    
    Change the timer text element to inform the user to refresh their page incase their browser blocks it. (Firefox is a prime culprit of this "firefox prevented this page from automatically reloading")

commit 0f1fcf8fc1b4833bbb288c429053ca4a9509862e
Merge: c723cb4 99d3d5f
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Tue Jan 7 17:06:34 2020 +0000

    Merge pull request #14 from disaster123/various_fixes_and_improvements
    
    various improvements

commit 99d3d5fc82f51c3ec74a806c9b7befd57f915cd6
Author: Stefan Priebe <s.priebe@profihost.ag>
Date:   Mon Jan 6 15:39:51 2020 +0100

    remove unneeded Access-Control-Allow-Origin headers - this is never cross domain
    correctly use vars expected_header_status and authentication_page_status_output
    simplify and faster exit in case of ajax request
    default authentication_page_status_output status to 503 otherwise google and other crawlers index this page

commit c723cb4ee2e2fc686d63a01bec9a7f78dd20d62e
Merge: 43693ba 30987f8
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Jan 6 08:52:12 2020 +0000

    Merge pull request #13 from disaster123/fix_js_number_parsing
    
    JavascriptPuzzleVars stopped working since 2020 as JS calcs 20200104 …

commit 30987f8b7a0a66b084c5331a108900563edb07bc
Author: Stefan Priebe <s.priebe@profihost.ag>
Date:   Sun Jan 5 22:38:35 2020 +0100

    JavascriptPuzzleVars stopped working since 2020 as JS calcs 20200104 + 04012020 into 21253816
    
    To fix number calculation with leading zeros:
    * use parseInt
    * explicit pass of a string
    * define base of 10

commit 43693ba2bee5b6f49957b3796c70b05002ab0dae
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sat Jan 4 12:13:35 2020 +0000

    Update anti_ddos_challenge.lua
    
    Reinstate variable that originaly was there but got accidently removed in last patch.

commit 90397bcf351819200f364fbce4acf96be63dc68d
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Jan 3 22:13:09 2020 +0000

    Update anti_ddos_challenge.lua
    
    Applied user contributed patch to fix IOS issues with cookies a big thank you to those who contributed here.
    
    https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/11#issuecomment-569816246

commit c13ec924e7ad1ff39e0a44a1f29104b72118b634
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Nov 18 18:50:08 2019 +0000

    Update README.md

commit defe93fdee6d37e9ba32d7624b119f563612b182
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 19:51:51 2019 +0000

    Update anti_ddos_challenge.lua
    
    Add feature to allow disabling of my credits as much as credit to be recieved is nice i do understand and realise people do not want to display them on their sites hence why i made it a feature to allow you to remove them easily and swiftly. :)

commit 65ab2af2c95efaa86c232e76dd577f73ab95150b
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 19:04:29 2019 +0000

    Update README.md

commit 339890cf90855977906c734bc9e7314623efe44e
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 18:55:29 2019 +0000

    Update README.md

commit 942915ae8a60f1e3791e266ce49629a3a0240090
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 18:32:04 2019 +0000

    Update anti_ddos_challenge.lua
    
    Add Enable/disable script this feature allows you to turn on or off this script so you can leave this file in your nginx configuration permamently.
    
    This way you don't have to remove `access_by_lua_file anti_ddos_challenge.lua;` to stop protecting your websites :) you can set up your nginx config and use this feature to enable or disable protection.

commit 3b13adaa12c1d60710c54f4d2cfd00287ec98732
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 18:12:22 2019 +0000

    Update anti_ddos_challenge.lua
    
    Fix typo of value "charset" with "default_charset"

commit ac52cb4dff848d290291f15a16b6f64b41d1d592
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Fri Nov 15 18:09:55 2019 +0000

    Update anti_ddos_challenge.lua
    
    Make charset customisable value for those who wish to translate this script into their own native languages.
    
    https://github.com/C0nw0nk/Nginx-Lua-Anti-DDoS/issues/8

commit 1584f1ff3449ce0180e03b5f8b69d3c6e27b204c
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Nov 14 16:14:31 2019 +0000

    Update README.md

commit 4e5060ef4120c8d01e6f117789755e890b49d3b5
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Tue Nov 12 21:48:59 2019 +0000

    Update anti_ddos_challenge.lua
    
    Update to fix hex encode in Javascript encryption so that it no longer requires Nginx Lua's ngx_devel_kit

commit f13998a56e83d907dfe62851cece6a9b44446a98
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Nov 11 19:26:59 2019 +0000

    Update anti_ddos_challenge.lua

commit 721ef6631fe6361923b6e384adbd7d0443e52dd3
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Sep 16 19:30:01 2019 +0100

    Update FUNDING.yml

commit 509da713ed787c05c73354dcc6f7dc5060d76ddc
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Sep 16 19:16:48 2019 +0100

    Create FUNDING.yml

commit 5806813465a9ac0446b501d1ea49d5a90a4f68b2
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Sep 16 00:46:56 2019 +0100

    Update and rename .github/ISSUE_TEMPLATE/unknown-issue-template.md to .github/ISSUE_TEMPLATE.md

commit ab0da24a0e725ec171c6f46fdd843569567c8dab
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Sep 16 00:39:44 2019 +0100

    Update issue templates

commit 499bc58631dfa967edbd48a62c8bbc3a15fddcfd
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sat Sep 14 22:56:08 2019 +0100

    Update anti_ddos_challenge.lua
    
    Added new features of an IP Address Whitelist and Blacklist to permamently grant access or deny access to specific users of your site.

commit 974e711ea61ab97fa11e4678bc06b899a399c860
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Sep 12 20:12:26 2019 +0100

    Update anti_ddos_challenge.lua
    
    Add a HTML page refresh feature incase Javascript one does not work.

commit 3713e335ba50e649fab4450f9b92a3603decd3e3
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Sep 12 19:52:49 2019 +0100

    Update anti_ddos_challenge.lua
    
    Remove un-needed Javascript from my development stages where i planned Javascript based header response checks all not needed.
    
    Change Javascript page refresh method from `window.location.reload();` to `location.reload(true);` as the Mozilla docs tell us we should be reloading pages this way. https://developer.mozilla.org/en-US/docs/Web/API/Location/reload

commit 2d9a6da90d0bc54eb41f6d38d3a43d3cb84dd025
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Sep 12 18:07:17 2019 +0100

    Update anti_ddos_challenge.lua
    
    Remove un-needed Javascript code that causes browser issues.

commit a32a819b73fadc21a637b25cdb97ebf90b8f5b67
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Sep 12 18:03:00 2019 +0100

    Update anti_ddos_challenge.lua
    
    Fix Nginx Lua Bug with ngx.header["Set-Cookie"] function for some reason it only allows one instance of this header to be defined in a script. So to fix the issue I define the header once and only once in the entire script right at the end and set a variable that can be dynamic in setting multiple cookies.

commit 447534b611a5edbd66ada9c1eb85908e6039489e
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Wed Aug 28 01:17:53 2019 +0100

    Update anti_ddos_challenge.lua
    
    Add cors headers and include XMLHTTPREQUEST with credentials tag and remove domain tag from set-cookie to fix issue with Google Chrome. Still broken in Microsoft Edge !?

commit f2133a830747d402b05e72bab9f5413f223ed90e
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Wed Aug 28 00:18:59 2019 +0100

    Update anti_ddos_challenge.lua
    
    Fix for set-cookie works in Firefox browser now Chrome, Microsoft edge still don't seem to work...!?

commit a7d388d02a9b670975f6509e84bf494442c8e67a
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Tue Aug 27 18:07:49 2019 +0100

    Update anti_ddos_challenge.lua
    
    Added Feature built in my method to encrypt and obfuscate Javascript outputs. (I am very proud of this!)
    
    Bug fix: incase certain browsers lack in permissions to set cookies with javascript on the initital header request we will give them their cookie they still need javascript enabled to solve the authentication puzzle that will always be mandatory!
    
    Added X-Requested-* headers for the next feature i am building in

commit 124381ad795b4c3d548431c0eedec0d8ef80f884
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Aug 26 21:29:25 2019 +0100

    Update anti_ddos_challenge.lua
    
    Move current time variable out of configuration area.
    
    Create currentdate variable to stop calling os.date() and os.time() multiple un-needed times.
    
    Fix bug now the auth page only shows when the expire_time config value is set and around the time before if you had set a time greater than one day every 24 hours you would recieve the auth page even if your cookies are valid this expire_time checks solves that problem.

commit 2e2a5e58a5e5ea255f41d4a5d6842e06693c0154
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Mon Aug 26 19:05:38 2019 +0100

    Update anti_ddos_challenge.lua
    
    Add new security feature to make the cookies we set encrypted, unpredictable, dynamic and unique to each user/client to increase our security from content scrappers bots leechers etc. Where as before they could monitor static cookie names this prevents that.

commit 655b82f49c83b6e72b6908179006c5b091c4e44f
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Aug 25 23:50:50 2019 +0100

    Update anti_ddos_challenge.lua
    
    Improve security on header making it unique to each individual client/user that visits the website.

commit 1596b5c1776ab6c7ad1cc742012ed9487a1d02d4
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Aug 25 22:47:17 2019 +0100

    Update anti_ddos_challenge.lua
    
    Add new security feature to make the header we sent our Javascript answer from the browser over unpredictable and dynamic to increase our security from content scrappers bots leechers etc.

commit f51662eda71c6913a0b7749ff82abcaa535b0a5f
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Aug 25 21:22:49 2019 +0100

    Update anti_ddos_challenge.lua
    
    Remove Search Engines from the Browsers Javascript Checking (This will allow search engines to crawl still like Google because they can execute Javascript)

commit cabdbaa09331b435a417484e67c438f245e64da3
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Sun Aug 25 21:00:22 2019 +0100

    Update anti_ddos_challenge.lua
    
    Fix expire_time description to show correct default time of 1 day.
    
    Fix cookie bug when Javascript was setting a cookie it was setting a cookie of 'now' instead of the set config of expire_time into the future when the cookie should expire.
    
    Added the challenge cookie to the headers set by grant_access function to update the cookie set by Javascript since the time stamp on the cookie would be out of sync with the other cookies otherwise this was all cookies will be updated and set/kept with the same time stamps.

commit d8b3a4b1a9623d4b3cd744438eba5f4acbc66beb
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 15:03:45 2019 +0100

    Update README.md

commit 84b5545956fdfac9d4c3fbb3fee7212a04427984
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 14:59:06 2019 +0100

    Update README.md

commit ca0f9dea98bcdd05b8609c7aeda5b08b753ad06c
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 14:39:04 2019 +0100

    Update README.md

commit 2b2eaf45f74cd99321c5fc77a8d91a78663bf43b
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 14:16:32 2019 +0100

    Update README.md

commit 0618e1daab7aa9f95a753482ede81a72092f9a5b
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 13:35:27 2019 +0100

    Update README.md

commit 333a4e2b4c6d3f572e950d9c45c4d74cb3d6d18f
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 13:33:43 2019 +0100

    Update README.md

commit 72cce0223d3060becd233659bbd66d7105a13150
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 13:18:53 2019 +0100

    Create anti_ddos_challenge.lua
    
    For those who love my script feel free to drop me a thank you! :)

commit c02e237869877147b1a78c5484180d0ea2b4414a
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 01:19:13 2019 +0100

    Update README.md

commit 9e8ebbeea60f91d07d4e940981408103318d1736
Author: C0nw0nk <C0nw0nks@googlemail.com>
Date:   Thu Aug 22 00:52:09 2019 +0100

    Initial commit
