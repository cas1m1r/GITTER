======================: FILES :======================
botnet-detection
├── botdet
│   ├── data
│   │   ├── dataloader.py
│   │   ├── dataset_botnet.py
│   │   ├── data_utils.py
│   │   ├── __init__.py
│   │   └── url_utils.py
│   ├── eval
│   │   ├── evaluation.py
│   │   ├── __init__.py
│   │   └── metrics.py
│   ├── __init__.py
│   ├── models_pyg
│   │   ├── common.py
│   │   ├── gcn_base_models.py
│   │   ├── gcn_model.py
│   │   ├── graph_attention.py
│   │   └── __init__.py
│   └── optim
│       ├── earlystop.py
│       ├── __init__.py
│       └── train_utils.py
├── botgen
│   ├── background.py
│   ├── botnetGenerator.py
│   ├── download_pcap.py
│   ├── equinix-nyc.dirA.20181220-131256.UTC.anon.pcap
│   ├── README.md
│   ├── synthesize_botnet.py
│   └── tmp.hdf5
├── graph_data_storage.md
├── LICENSE
├── pictures
│   ├── c2.png
│   ├── chord.png
│   ├── debru.png
│   ├── kadem.png
│   ├── leet.png
│   └── p2p.png
├── README.md
├── run_botnet.sh
├── setup.py
├── test_botnet_dataloader.py
├── test_botnet_dataset.py
└── train_botnet.py

7 directories, 38 files
======================: README CONTENT :======================
# botnet-detection

[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
[![Paper](http://img.shields.io/badge/paper-arxiv.2003.06344-B31B1B.svg)](https://arxiv.org/abs/2003.06344)

Topological botnet detection datasets and automatic detection with graph neural networks.

<!--The graphs are of relatively large scale and featureless. Each dataset contains a specific botnet topology, with 960 graphs in total, randomly split to train/val/test sets. There are labels on both nodes and edges indicating whether they were in the botnet (evil) community. Learning tasks could target at predicting on nodes to detect whether they are botnet nodes, or recovering the whole botnet community by also predicting on edges as whether they belong to the original botnet.-->

<p align="left">
  <img width="30%" src=./pictures/p2p.png />
</p>

A collection of different botnet topologyies overlaid onto normal background network traffic, containing featureless graphs of relatively large scale for inductive learning.

## Installation

From source 
```
git clone https://github.com/harvardnlp/botnet-detection
cd botnet-detection
python setup.py install
```

## To Load the Botnet Data

We provide standard and easy-to-use dataset and data loaders, which automatically handle the dataset dnowloading as well as standard data splitting, and can be compatible with most of the graph learning libraries by specifying the `graph_format` argument:

```
from botdet.data.dataset_botnet import BotnetDataset
from botdet.data.dataloader import GraphDataLoader

botnet_dataset_train = BotnetDataset(name='chord', split='train', graph_format='pyg')
botnet_dataset_val = BotnetDataset(name='chord', split='val', graph_format='pyg')
botnet_dataset_test = BotnetDataset(name='chord', split='test', graph_format='pyg')

train_loader = GraphDataLoader(botnet_dataset_train, batch_size=2, shuffle=False, num_workers=0)
val_loader = GraphDataLoader(botnet_dataset_val, batch_size=1, shuffle=False, num_workers=0)
test_loader = GraphDataLoader(botnet_dataset_test, batch_size=1, shuffle=False, num_workers=0)
```

The choices for dataset `name` are (indicating different botnet topologies):
- `'chord'` (synthetic, 10k botnet nodes)
- `'debru'` (synthetic, 10k botnet nodes)
- `'kadem'` (synthetic, 10k botnet nodes)
- `'leet'` (synthetic, 10k botnet nodes)
- `'c2'` (real, ~3k botnet nodes)
- `'p2p'` (real, ~3k botnet nodes)

The choices for dataset `graph_format` are (for different graph data format according to different graph libraries):
- `'pyg'` for [PyTorch Geometric](https://github.com/rusty1s/pytorch_geometric)
- `'dgl'` for [DGL](https://github.com/dmlc/dgl) 
- `'nx'` for [NetworkX](https://github.com/networkx/networkx)
- `'dict'` for [plain python dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)

Based on different choices of the above argument, when indexing the botnet dataset object, it will return a corresponding graph data object defined by the specified graph library.

The data loader handles automatic batching and is agnostic to the specific graph learning library.


## To Evaluate a Model Predictor

We prepare a standardized evaluator for easy evaluation and comparison of different models.
First load the dataset class with `BotnetDataset` and the evaluation function `eval_predictor`.
Then define a simple wrapper of your model as a predictor function (see [examples](botdet/eval/evaluation.py#L99)), which takes in a graph from the dataset and returns the prediction probabilities for the positive class (as well as the loss from the forward pass, optionally).

We mainly use the average F1 score to compare across models. For example, to get evaluations on the `chord` test set:

```
from botdet.data.dataset_botnet import BotnetDataset
from botdet.eval.evaluation import eval_predictor
from botdet.eval.evaluation import PygModelPredictor

botnet_dataset_test = BotnetDataset(name='chord', split='test', graph_format='pyg')
predictor = PygModelPredictor(model)    # 'model' is some graph learning model
result_dict_avg, loss_avg = eval_predictor(botnet_dataset_test, predictor)

print(f'Testing --- loss: {loss_avg:.5f}')
print(' ' * 10 + ', '.join(['{}: {:.5f}'.format(k, v) for k, v in result_dict_avg.items()]))

test_f1 = result_dict_avg['f1']
```

## To Train a Graph Neural Network for Topological Botnet Detection

We provide a set of graph convolutional neural network (GNN) models [here](./botdet/models_pyg) with PyTorch Geometric, along with the corresponding [training script](./train_botnet.py) (note: the training pipeline was tested with [PyTorch](https://pytorch.org/) 1.2 and [torch-scatter](https://github.com/rusty1s/pytorch_scatter/tree/1.3.1) 1.3.1). 
Various basic GNN models can be constructed and tested by specifing configuration arguments:
- number of layers, hidden size
- node updating model each layer (e.g. direct message passing, MLP, gated edges, or graph attention)
- message normalization
- residual hops
- final layer type
- etc. (check the [model API](./botdet/models_pyg/gcn_model.py#L9) and the [training script](./train_botnet.py#L71))

<!--One can use our main [model API](./botdet/models_pyg/gcn_model.py#L9) to construct various basic GNN models, by specifing different number of layers, how in each layer node representations are updated (e.g. with direct message passing, MLP, or with graph attention), different choices of non-linear activation functions, whether to use residual connections and how many hops to connect, whether to add a final projection layer or not, etc. For a complete list of model configuration arguments, check our [example training script](./train_botnet.py#L71).-->

As an example, to train a GNN model on the topological botnet datasets, simply run:
```
bash run_botnet.sh
```

With the above configuration, we run graph neural network models (with 12 layers, 32 hidden dimension, random walk normalization, and residual connections) on each of the topologies, and results are as below:

<!--| Topology | Chord | de Bruijn | Kademlia | LEET-Chord | C2 | P2P |-->
<!--|:---:|:---:|:---:|:---:|:---:|:---:|:---:|-->
<!--| Test F1 | | | | | | |-->
<!--| Average Over Topologies <td colspan=6> 0 </td>|-->

<table align="center">
  <tr>
    <td> Topology </td>
    <td> Chord </td>
    <td> de Bruijn </td>
    <td> Kademlia </td>
    <td> LEET-Chord </td>
    <td> C2 </td>
    <td> P2P </td>
  </tr>
    
  <tr>
    <td> Test F1 (%) </td>
    <td>  99.061 </td>
    <td>  99.926 </td>
    <td>  98.935 </td>
    <td>  99.231 </td>
    <td>  98.992 </td>
    <td>  98.692 </td>
  </tr>
  <tr>
    <td style="text-align:center"> Average </td>
    <td colspan="6"> 99.140 </td>
  </tr>
</table>

#### Note

We also provide labels on the edges under the name `edge_y`, which can be used for the complete botnet community recovery task, or for interpretation matters.

## Citing

```
@article{zhou2020auto,
  title={Automating Botnet Detection with Graph Neural Networks},
  author={Jiawei Zhou*, Zhiying Xu*, Alexander M. Rush, and Minlan Yu},
  journal={AutoML for Networking and Systems Workshop of MLSys 2020 Conference},
  year={2020}
}
```
====================== GIT HISTORY: ======================
a85302a HEAD@{0}: clone: from https://github.com/harvardnlp/botnet-detection
commit a85302a87e71e8d867dfc2081569da4486cec3fb
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Thu Dec 8 11:31:45 2022 -0500

    Update graph_data_storage.md

commit 1c55412debb61a6a3ac30085f0b515101e1bffca
Merge: 5d09529 0834cd7
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Thu Jul 22 21:48:54 2021 -0400

    Merge pull request #13 from iamgroot42/patch-2
    
    Fix duplicate drop logic + fix typo

commit 5d0952936627034390f12cefb9b6480776ca5608
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Fri Jul 9 09:29:50 2021 -0400

    Update graph_data_storage.md

commit 0834cd7755b1387bd978a5787092c114116ba0d6
Author: Anshuman Suri <iamgroot42@users.noreply.github.com>
Date:   Sun Jul 4 02:06:21 2021 +0530

    Fix duplicate drop logic + fix typo

commit 290e7cc563584038d2dd2eea7d8630b76927a5c1
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Wed Jun 30 21:59:04 2021 -0400

    Update README.md

commit 0a34f6fd5ea9728b61be173bb4b9824b6b2d1a22
Merge: 5ae2441 ab4bc19
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Wed Jun 30 21:19:54 2021 -0400

    Merge pull request #9 from iamgroot42/patch-1
    
    Add missing system calls

commit ab4bc198f4a69a73b7fedfb838e462ffa40b51fa
Author: Anshuman Suri <iamgroot42@users.noreply.github.com>
Date:   Sat Jun 26 22:29:58 2021 +0530

    Add missing system calls

commit 5ae24416134d66574b31037b7c22ca083510b6f5
Merge: c038f80 f883e87
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Sat Jun 19 20:23:11 2021 -0400

    Merge pull request #6 from xuzhiying9510/master
    
    add botgen: synthetic botnet data generation

commit f883e873e7945bfc0b207731d2eb7440f175f0a0
Author: xuzhiying9510 <xuzhiying9510@hotmail.com>
Date:   Sat Jun 19 15:35:13 2021 -0400

    add botgen

commit 3862233d94ff6567ac377b3c755614e268dcb4ec
Author: xuzhiying9510 <xuzhiying9510@hotmail.com>
Date:   Fri Jun 18 23:47:07 2021 -0400

    add botgen

commit c038f80a7ad62d5ba8846060673a0997c0ddbdc6
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Thu Apr 8 16:30:47 2021 -0400

    Create graph_data_storage.md

commit cb8cba96f0bcb3f33246aad588a1a5da175db7f2
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Mon Jun 8 16:49:15 2020 -0400

    Update README.md

commit b231b13054ba9e2e5ae076fdc1dd6ec20b039757
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Fri May 22 11:59:14 2020 -0400

    Update README.md

commit 66767aba52c6bc794472991ce0ca4eddafb58983
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Mon Mar 16 09:43:13 2020 -0400

    Update dataset_botnet.py

commit 72f57f8fabdc78bda4c51357bbdac366d3bdee5e
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Mon Mar 16 09:42:03 2020 -0400

    Update dataset_botnet.py

commit 7fa9357324b614699741d650c41dd48b0e9e9e7f
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Mon Mar 16 09:39:13 2020 -0400

    Update README.md

commit 6120ca2904a473b41c06dd0d7d8bf5b442617a61
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Mon Mar 16 09:37:41 2020 -0400

    Update setup.py

commit 7fdcc58d1967a815be1ef1e898c26307b12df1e2
Author: jzhou316 <31744226+jzhou316@users.noreply.github.com>
Date:   Fri Mar 13 01:56:19 2020 -0400

    Update README.md

commit e575b9cb24af7513e143a32f412d72888756f638
Author: jzhou316 <jzhou02@g.harvard.edu>
Date:   Fri Mar 13 01:51:59 2020 -0400

    publish

commit a79dbbba1708af125d757948f5cbb3fcaa8efeb3
Author: jzhou316 <jzhou02@g.harvard.edu>
Date:   Fri Mar 13 01:51:31 2020 -0400

    publish

commit 408d612de3ebc9b97d6b588781b3634aed320560
Author: jzhou316 <jzhou02@g.harvard.edu>
Date:   Fri Mar 13 01:46:19 2020 -0400

    publish

commit eac2d684a2535dcde7baee7ad282e4a02a64cf15
Author: srush <srush.research@gmail.com>
Date:   Thu Mar 12 11:07:21 2020 -0400

    Initial commit
