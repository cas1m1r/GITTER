======================: FILES :======================
PyMirai
├── 2pipe
├── Original
│   ├── loader
│   │   ├── bins
│   │   │   ├── dlr.arm
│   │   │   ├── dlr.arm7
│   │   │   ├── dlr.m68k
│   │   │   ├── dlr.mips
│   │   │   ├── dlr.mpsl
│   │   │   ├── dlr.ppc
│   │   │   ├── dlr.sh4
│   │   │   ├── dlr.spc
│   │   │   └── dlr.x86
│   │   ├── build.debug.sh
│   │   ├── build.sh
│   │   └── src
│   │       ├── binary.c
│   │       ├── binary.c.py
│   │       ├── connection.c
│   │       ├── connection.c.py
│   │       ├── headers
│   │       │   ├── binary.h
│   │       │   ├── connection.h
│   │       │   ├── includes.h
│   │       │   ├── server.h
│   │       │   ├── telnet_info.h
│   │       │   └── util.h
│   │       ├── main.c
│   │       ├── main.c.py
│   │       ├── server.c
│   │       ├── server.c.py
│   │       ├── telnet_info.c
│   │       ├── telnet_info.c.py
│   │       ├── usectopy.sh
│   │       ├── util.c
│   │       └── util.c.py
│   └── mirai
│       ├── bot
│       │   ├── attack_app.c
│       │   ├── attack_app.c.py
│       │   ├── attack.c
│       │   ├── attack.c.py
│       │   ├── attack_gre.c
│       │   ├── attack_gre.c.py
│       │   ├── attack.h
│       │   ├── attack.h.header.py
│       │   ├── attack.py
│       │   ├── attack_tcp.c
│       │   ├── attack_tcp.c.py
│       │   ├── attack_udp.c
│       │   ├── attack_udp.c.py
│       │   ├── checksum.c
│       │   ├── checksum.c.py
│       │   ├── checksum.h
│       │   ├── checksum.h.header.py
│       │   ├── includes.h
│       │   ├── includes.h.header.py
│       │   ├── killer.c
│       │   ├── killer.c.py
│       │   ├── killer.h
│       │   ├── killer.h.header.py
│       │   ├── main.c
│       │   ├── main.c.py
│       │   ├── pipe
│       │   ├── protocol.h
│       │   ├── protocol.h.header.py
│       │   ├── rand.c
│       │   ├── rand.c.py
│       │   ├── rand.h
│       │   ├── rand.h.header.py
│       │   ├── resolv.c
│       │   ├── resolv.c.py
│       │   ├── resolv.h
│       │   ├── resolv.h.header.py
│       │   ├── scanner.c
│       │   ├── scanner.c.py
│       │   ├── scanner.h
│       │   ├── scanner.h.header.py
│       │   ├── table.c
│       │   ├── table.c.py
│       │   ├── table.h
│       │   ├── table.h.header.py
│       │   ├── testlib.so
│       │   ├── usectopy.sh
│       │   ├── util.c
│       │   ├── util.c.py
│       │   ├── util.h
│       │   └── util.h.header.py
│       ├── build.sh
│       ├── cnc
│       │   ├── admin.go
│       │   ├── api.go
│       │   ├── attack.go
│       │   ├── bot.go
│       │   ├── clientList.go
│       │   ├── constants.go
│       │   ├── database.go
│       │   └── main.go
│       ├── prompt.txt
│       └── tools
│           ├── badbot.c
│           ├── enc.c
│           ├── nogdb.c
│           ├── scanListen.go
│           ├── single_load.c
│           └── wget.c
├── pipe
├── PyMirai
│   ├── bot
│   │   ├── 2pipe
│   │   ├── attack_app_c.py
│   │   ├── attack_c.py
│   │   ├── attack_gre_c.py
│   │   ├── attack_h_header.py
│   │   ├── attack_tcp_c.py
│   │   ├── attack_udp_c.py
│   │   ├── checksum_c.py
│   │   ├── checksum_h_header.py
│   │   ├── ctypesexperiment
│   │   │   ├── bash_history
│   │   │   ├── NOTES.md
│   │   │   ├── testlib.c
│   │   │   ├── testlib.so
│   │   │   └── testlibwrapper.py
│   │   ├── includes_h_header.py
│   │   ├── killer_c.py
│   │   ├── killer_h_header.py
│   │   ├── main_c.py
│   │   ├── pipe
│   │   ├── protocol_h_header.py
│   │   ├── rand_c.py
│   │   ├── rand_h_header.py
│   │   ├── README.md
│   │   ├── resolv_c.py
│   │   ├── resolv_h_header.py
│   │   ├── scanner_c.py
│   │   ├── scanner_h_header.py
│   │   ├── scanner_self_written.py
│   │   ├── table_c.py
│   │   ├── table_h_header.py
│   │   ├── util_c.py
│   │   └── util_h_header.py
│   └── loader
│       ├── binary.c.py
│       ├── connection.c.py
│       ├── main.c.py
│       ├── server.c.py
│       ├── telnet_info.c.py
│       └── util.c.py
└── README.md

13 directories, 137 files
======================: README CONTENT :======================
# PyMirai - The Mirai Botnet Source Code in Python

# This is a ongoing project! Nothing is final!

This is my efforts of reverse-engineering the Mirai botnet source code into Python. It's been two years since the original launch of the botnet and since that time I have yet to see anyone attempt to completely reverse engineer it outside of making it modified in it's native C and Go programming languages.

My reasons for reversing it into Python is simple

1. To improve it's adaptability in countering cybersecurity measures (by out-adapting the efforts of software engineers)
2. To add the function of "modulettes" that can be installed to further expand the original source code's capabilities
3. To help propagate the increasing number of Mirai copycats and variants by giving it a better platform to code on (debatable I know, other candidates include Ruby on RAILS, Java, etc.)
4. To add alternatives to the original botnet's C2 platform, that is, a alternative to Google GoLang, such as a Django-hosted server or something connected to a interactive JQuery/REACT Front-End to make it more usable to the end-user

# Wishlist - Features to be implemented as a improvement

1. Native HTTPS, SSL Support and DNS Resolution
2. Ability to resolve Dynamic DNS Addresses instead of simple IPv4 public addresses, allowing reconfigurable VPS C2 servers to be deployed with different IP addresses that the malware can still reach
3. Automated phishing campaigns against victim's machine in an effort to capture administrator login credentials to the router/switch
4. Web GUI, analytics, metrics, warnings, integrated SIEM of a InsightIDR-like format
5. Support for 10,000-line wordlists instead of 20 Most Commonly Used Passwords
6. C2 Cyber-Threat Analysis Detection and Early Warning System. Parses your Apache/Nginx Access logs for suspicious requests from places like 'malware-hunter.shodan.io'. Immediately warns user via email to break down the server and scoot!

# As of right now a incomplete project

Because of that a notable amount of the code is still in it's native C language, with a hastily and sloppily put together Pythonic equivalent that may or may not work. But... and this is why I expect rollout of a workable PyMirai to be fairly speedy...

1. Python is based on C, in fact, your .pyc files are generated containing C code each time it is run
2. For every library and module in C, there is almost assuredly, a equivalent module in Python for example, <code>#include <sys/socket.h></code> versus <code>import socket</code> and <code> socket(AF_INET,SOCK_STREAM,0) </code> is the same as <code> socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
3. The original author makes extensive use of the struct structure, commonly misinterpreted as "a Class", when in fact, it can mean something else entirely (like a list, dictionary, or list of methods)
4. In my experience, ctopy is a terrible converter of C code to Python. A immediate evaluation after running <code> ctopy < file.c > file.c.py</code> shows that...
		a. The app failed to convert #include to import modules
		b. The whitespace is completely ruined
		c. Functions are not properly being called or declared
		d. Methods are not properly being referred or utilized
		e. Modules often fail to automatically find a equivalent (for example, for the resolv module, we can make use of Python-DNS)
5. There is quite a bit of odd programming logic and methods by the original author of Mirai, however, we do know he wrote it fairly hastily and didn't even consider it himself to be grade A work, but it worked for him. 
6. I seek to rectify and implement my own improvements (for example, togglable wordlists auto-converted into bytecode instead of a standard static 20-word combo wordlist would be a good start)



Just because I cooked up together a Pythonic equivalent of the code, it is not reflective of my understanding of it and it may not work. Hence, the code must be revised and migrated into the higher-level programming environment of Python.

But thankfully, since Mirai is originally written in C, direct translation of the code into Python should be fairly painless.

# To Do List

1. Convert C-header files (.h extensions) into compatible Pythonic libraries or modules that can be imported and utilized
2. Convert all unknown functions into Pythonic equivalents
3. Closely investigate syntax of Python-equivalent modules (for example to proper use the htons method, we need to create a simple function that does socket.htons(string) and returns it
4. Readapt the file-descriptor method of opening files that the original botnet code was designed to do. Or consider keeping it for the sake of cross-platform compatibility (with pyinstaller, this version of Mirai would only work on Windows, Linux, and Mac, and no IoT devices)
5. Properly identify all classes, functions, methods, data structures. For example, the "struct" syntax, followed by multiple variables and arguments to be declared in C strongly implies that it is a class.
6. Solve the issue of being unable to (in Python 2.7) convert text into byte-arrays. Byte-arrays is the preferred method of format for transmitting credentials (brute-forcing) for the original Mirai bot
7. Replace the clumsy 20-word guessing queue with a more efficient and customizable wordlist of tens of thousands of credential attempts and simply read it into a list and iterate through it (the bot/worm carries this wordlist, which has a marginal impact on overall file size)
8. Replace all C libraries with Python module equivalents
9. Add first modulette: Auto-generate router-phishing pages. It has to copy the brand and logo of the router itself after identifying MAC addr vendor. The worm should spawn these phishing pages periodically and listen for a response (credentials entered) in order to pwn the router

# Notes

Scattered throughout the directories are a few README.md and NOTES.md files. These are just "journal entries" of my findings during the reverse engineering process. Also, it may contain helpful clues, such as how to use CTypes to directly call functions from the original code.

I wrote these notes to document the code so I can come back to it later if I need it.
====================== GIT HISTORY: ======================
391eaad HEAD@{0}: clone: from https://github.com/tanc7/PyMirai
commit 391eaad2dc0fe7c82458cf7d86189aeb9dee46e0
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 17:56:34 2018 -0500

    finished faux-reversal of attack section

commit 0e516f158a6463086aa1a2f59c4ef9fb62bfe2c1
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 17:31:36 2018 -0500

    ctypes experiment, notes

commit 7364838463deed358056ceb07f88915fc924dfde
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 17:29:09 2018 -0500

    ctypes experiment

commit 628326a170894d0b0a9805281292da4922f0235c
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 15:08:46 2018 -0500

    8

commit 0d455281bd92edaa63d818261048bb1e4b82befa
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 03:08:29 2018 -0500

    7

commit 84e382280c4387613920b6098a0208151245c59e
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 02:59:48 2018 -0500

    working on attack.h.header.py, converting to class structures

commit 3f64f334731b7d8b55c7a7a7df7d1cc81e6051c2
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 02:23:59 2018 -0500

    includes headerfile work - not finished

commit 20f3f304940e68c3ac5cd106f18934f2e8ee2503
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 01:29:08 2018 -0500

    6

commit 1a1db12aa4fa33a55de0825d8216cd515436f746
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Wed Nov 7 01:18:16 2018 -0500

    5

commit 5f6ad98ff56dd3f2b81f3a925404c7d1a5e6ab36
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 17:42:50 2018 -0500

    5

commit ce99aae0300e36218de37585da904831d1ad6d38
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 17:38:02 2018 -0500

    4

commit 4fbac0060d8321ef6d2f5d488cc2340fd9571ace
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 17:34:01 2018 -0500

    3

commit ec9b3f74a086e2a2b3225e4e706fa30aadd994f5
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 17:22:47 2018 -0500

    2

commit ee78cce36c7065e672e92ec4f1009672fa765661
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 15:14:48 2018 -0500

    2

commit 2328a8eceab84417b6d4bfeeba7e63dea82f1183
Author: Chang Tan <changtan@listerunlimited.com>
Date:   Tue Nov 6 02:34:35 2018 -0500

    1
