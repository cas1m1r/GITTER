======================: FILES :======================
======================: README CONTENT :======================
# Localhost Botnet   ![](https://img.shields.io/badge/Node.JS-informational?style=flat&logo=Node.js&logoColor=white&color=2bbc8a) ![](https://img.shields.io/badge/Socket.io-informational?style=flat&logo=Socket.io&logoColor=white&color=2bbc8a) ![](https://img.shields.io/badge/Express-informational?style=flat&logo=Express&logoColor=white&color=2bbc8a)



## Goal
This was created as a final project for WUSTL CSE-433 (Introduction to Computer Security) as a way to help understand how the basic components of a botnet work together to infect devices, control these devices and issue attacks.

## Scripts
* `npm run start` everything you need to run the program
* `npm run start-server` skips building the exectuables, saves time but you must pack the malware to view changes to it
* `npm run pack-malware` packs malware into exectuables located in `/build`

#### Development Tip 
* Pack the executables and run them by double clicking your system's executable. This way your executable should already have the correct permissions set.
* See below for a more detailed setup

## Running the program
### Prereqs
* I do not recommend trying to run this on a seed labs machine (I attempted and gave up shortly after.) 
* I have not tested the windows executable.
* I have performed testing on a Mac with NodeJS version 15.5.0 and npm version 7.3.0 and Kali with NodeJS version 12.19.0 and npm version 7.3.0.
* To install nodejs and npm on linux machines run `sudo apt install nodejs npm`
* Port 3001 and 3002 must be available for run the program successfully.

### Starting the Program
* Clone the repo `git clone https://github.com/frazierjoe/localhost-botnet.git`
* Once insde the repo, run `npm i` 
* Run `npm start` to automatically launch the download site, victim site, and command and control site (all will be opened in new tabs in your default browser).
* You should now have three new tabs open in your default browser. One is the victim site, one is the command and control site and the last is the software download site. 
* Go the the software download site and click on the link corresponding to your OS. I have tested the Mac version and Linux version (with Kali).
* Set the permissions on the downloaded file to be executable `chmod 755 malware-linux` 

* It's then easiest to run the executable by double clicking it in the file manager. Alternatively you can run it with **./malware-<OS>** but will have to open multiple tabs/windows to create multiple infected devices.
* Once run, you should see another web page open in a new tab. This is the infected software web page. 
* You are now free to explore and find the flag on the admin page. The attack is ready to be run, just click the run button from the command and control web page.

## Components

### Infected Software
To model infected software, I created a download site where a user can view download links to the software they would like to download. The download page is opened when the program is run (via `npm run start` not the executable of the infected software.) 
![download page](https://github.com/frazierjoe/localhost-botnet/blob/main/resources/download-site.png)
Once the program has been downloaded, the user can run the program. When the program is run, it will start a server and open a web page in the system's default browser. This web page replicates the software that a user would have intended to download. The server that is started by running the program will automatically sends the IP address and port number of the server to the command and control server. It then waits for commands from the command and control server. When a command is received, the botnet begins its credential stuffing attack with the data the command and control server sent it. It will display this data on the web page it is serving. In the credential stuffing attack, the infected device receives a list of usernames and passwords, the IP address and port of the victim server, a delay setting and an endpoint to send requests to. The infected device then attempts to login to the victim via the endpoint and if it finds a valid username/password pair, it will send it back to the command and control server.
![infected software page](https://github.com/frazierjoe/localhost-botnet/blob/main/resources/software-site.png)


### Command and Control
Command and control is the access point to the botnet for the owner. It tracks the infected devices, issues commands to the infected devices and receives data from the connected devices about their attacks. In this implementation, the owner can interact with their botnet via a web page that is opened at the same time as the downloads web page. The botnet owner can view a list of their infected devices, use a form to create and run a credential stuffing attack and view the results of the attack (valid usernames and passwords.) When a credential stuffing attack is initiated, the command and control server splits up the list of usernames and distributes it to the infected devices along with the full list of passwords and other attack information. 
![command and control page](https://github.com/frazierjoe/localhost-botnet/blob/main/resources/command-control.png)

### Victim Site
The victim site is a simple login site that runs on 127.0.0.1:3002. This web page is opened at the same time as the command and control web page and download page. A valid login to the victim site is username: "admin" password: "password" (without the quotes.) On a valid login, the user is redirected to the admin page where a flag is displayed.
![victim page](https://github.com/frazierjoe/localhost-botnet/blob/main/resources/login.png)

### Localhost Botnet Goal
The goal of the attacker is to infect devices, craft a request to send to the victim site via the form on the command and control site, run the distributed attack on the infected devices, and receive valid credentials from the infected devices. The attacker can then login to the site with the credentials they found.
![admin page](https://github.com/frazierjoe/localhost-botnet/blob/main/resources/admin.png)
====================== GIT HISTORY: ======================
389bf20 HEAD@{0}: clone: from https://github.com/jfrazier-eth/localhost-botnet
commit 389bf203aa4c0e5ab5bfd701a831ad7a58b112d2
Author: admin <frazierj@wustl.edu>
Date:   Tue Jan 12 22:54:16 2021 -0600

    readme

commit 16168beb4c13a597251b4f0576fe8146a8e04cce
Merge: 0f53d54 18a8e84
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Mon Jan 11 22:13:04 2021 -0600

    Merge pull request #1 from frazierjoe/development
    
    Development

commit 18a8e844d5fdd27d5d516a9f10052a395615aa84
Merge: bfec516 0f53d54
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Mon Jan 11 22:12:34 2021 -0600

    Merge branch 'main' into development

commit bfec5166762c8c6cc22c0b3e9aae9ae768292527
Author: admin <frazierj@wustl.edu>
Date:   Mon Jan 11 22:11:06 2021 -0600

    Pack your own executables

commit 13eea007b7a5335c1cbc2e561238fba741112c53
Author: admin <frazierj@wustl.edu>
Date:   Mon Jan 11 22:05:32 2021 -0600

    Reorganized and imporved scripts

commit 0f53d54338cde6c62de55139eb9507ddd2567961
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Mon Jan 11 20:50:11 2021 -0600

    Create license

commit 6187870a52138e16fe4535a3038db1c3e3ba5d39
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 16:23:43 2021 -0600

    Update readme

commit 23416e9d4669c999c36325cf8737935944faf614
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 16:18:17 2021 -0600

    Update

commit 108a3317768e05bc8247e5d28361ac9d29581d69
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 15:56:39 2021 -0600

    Update readme

commit 7d9edd7a0393a69134dcbb5a8727b9e554f72647
Author: admin <frazierj@wustl.edu>
Date:   Sat Jan 9 15:54:09 2021 -0600

    Adding delays

commit 3543486312c46536fcb3e516f0513253ca9a1f91
Merge: b974294 23d2850
Author: admin <frazierj@wustl.edu>
Date:   Sat Jan 9 15:14:51 2021 -0600

    Merge branch 'main' of https://github.com/frazierjoe/localhost-botnet into main

commit b974294c431ade6bd25eafd9e2b36ffd06214d63
Author: admin <frazierj@wustl.edu>
Date:   Sat Jan 9 15:14:45 2021 -0600

    Fixing extra usernames bug

commit 23d2850926f275c9931df607102643dff4aed8b8
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 14:46:02 2021 -0600

    Adding images to readme

commit 75e9a30d28f68e42191995d58b31cb76e71e862e
Author: admin <frazierj@wustl.edu>
Date:   Sat Jan 9 14:42:35 2021 -0600

    Moving images to resources

commit 6c34613508ce2811db4a34c5cd9cc0f50b3eb173
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 14:40:52 2021 -0600

    Adding images

commit 7ccefcee15c1273f80acae249470c8702832036a
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Sat Jan 9 14:38:59 2021 -0600

    Update readme

commit 1d88971f863d2feb0b84c9a11ed960529f2d6bf8
Author: admin <frazierj@wustl.edu>
Date:   Wed Jan 6 17:19:28 2021 -0600

    Updating readme

commit 65f6671c4def3fc1051f6a2b903eb1cc13b17ce4
Author: admin <frazierj@wustl.edu>
Date:   Wed Jan 6 17:11:07 2021 -0600

    A functional botnet simulator

commit 1268f3d4c0d225743259d0bb69cfbe12d06566ad
Author: admin <frazierj@wustl.edu>
Date:   Wed Jan 6 01:49:01 2021 -0600

    login page

commit e573df7eac69bc90f519d2c2dba1e4832af4d2c5
Author: admin <frazierj@wustl.edu>
Date:   Wed Jan 6 00:51:42 2021 -0600

    Command connected to zombies

commit f80842e9706fb1b28abb410a66622814f8d5bf3e
Author: admin <frazierj@wustl.edu>
Date:   Tue Jan 5 23:44:08 2021 -0600

    remove ds_store

commit 418d3912ba9a0906e90ef76e95b94b83f2269a78
Author: admin <frazierj@wustl.edu>
Date:   Tue Jan 5 23:41:05 2021 -0600

    Base

commit de3714462a32df36d510fc6103801a7c048b3478
Author: Joe Frazier <54604023+frazierjoe@users.noreply.github.com>
Date:   Tue Jan 5 19:17:11 2021 -0600

    Initial commit
